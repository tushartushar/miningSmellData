Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,GetXPathValidationFor1LevelProjection,Cyclomatic complexity of the method is 9
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,MetadataStreamProviderValidation,The method has 6 parameters. Parameters: containsMediaResource' containsNamedStream' supportMediaResource' supportNamedStream' visibleStreamType' request
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The method has 7 parameters. Parameters: service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The method has 7 parameters. Parameters: service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutNamedStream,The method has 7 parameters. Parameters: service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetDeleteEntity,The method has 7 parameters. Parameters: service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFGetAndPutNamedStream,The method has 7 parameters. Parameters: mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,GetXPathValidationFor1LevelProjection,The method has 7 parameters. Parameters: projectAll' collectionProperty' complexProperty' resourceRefProperty' resourceSetRefProperty' stream1' stream2
Long Parameter List,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,QueryAndValidateProjectSDP,The method has 5 parameters. Parameters: request' fullRequestUri' accept' select' xpaths
Long Identifier,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the parameter base2EntityWithNoNamedStreamTypeName is 36.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                baseWithNamedStream.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 189.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                rootEntityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 184.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                providers.ResourceType derivedWithBlobAndNamedStream = metadata.AddEntityType("DerivedWithBlobAndNamedStream"' null' rootEntityType' false); " is 140.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                var stream3Property = new providers.ResourceProperty("Stream3"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 178.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                        "//csdl:EntityType[@Name='DerivedWithBlobAndNamedStream' and @HasStream='true' and @BaseType='NamedStreamTest.RootEntityType']/csdl:Property[@Name='Stream3' and @Type='Edm.Stream']"); " is 183.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                            "//{0}[__metadata/type='NamedStreamTest.RootEntityType' and Stream1/__mediaresource/edit_media='{1}/Stream1' and Stream2/__mediaresource/edit_media='{1}/Stream2']"'  " is 164.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                            "//{0}[__metadata/type='NamedStreamTest.DerivedWithBlobAndNamedStream' and Stream1/__mediaresource/edit_media='{1}/Stream1' and Stream2/__mediaresource/edit_media='{1}/Stream2' and Stream3/__mediaresource/edit_media='{1}/Stream3']"'  " is 232.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                            "//atom:entry[atom:category/@term='#{0}' and atom:link[@title='Stream1' and @href='StreamedEntities(1)/Stream1'] and atom:link[@title='Stream2' and @href='StreamedEntities(1)/Stream2']]"' " is 187.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                            "atom:link[@title='Stream3' and @type='CustomType/Stream3' and @rel='{0}/Stream3' and @href='StreamedEntities(2)/{1}/Stream3'] and " + " is 134.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                    Assert.AreEqual("CustomType/Stream3"' request.ResponseContentType' "the content type should be as specified in the metadata"); " is 126.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The length of the statement  "                    Assert.AreEqual(HttpStatusCode.NotFound' TestUtil.GetStatusCodeFromException(exception)' "Expected status code of 404"); " is 120.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataSerializationTest,The length of the statement  "                providers.ResourceProperty stream1 = new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataSerializationTest,The length of the statement  "                providers.ResourceProperty stream2 = new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataSerializationTest,The length of the statement  "                providers.ResourceType base2WithoutNamedStream = metadata.AddEntityType("Base2WithoutNamedStream"' null' base1WithNamedStream' false); " is 134.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataSerializationTest,The length of the statement  "                providers.ResourceProperty stream3 = new providers.ResourceProperty("Stream3"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataSerializationTest,The length of the statement  "                providers.ResourceProperty stream4 = new providers.ResourceProperty("Stream4"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,MetadataStreamProviderValidation,The length of the statement  "                        TestUtil.AssertContains(response' DataServicesResourceUtil.GetString("DataServiceStreamProviderWrapper_MustImplementIDataServiceStreamProviderToSupportStreaming")); " is 164.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,MetadataStreamProviderValidation,The length of the statement  "                        TestUtil.AssertContains(response' DataServicesResourceUtil.GetString("DataServiceStreamProviderWrapper_MustImplementDataServiceStreamProvider2ToSupportNamedStreams")); " is 167.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataStreamProviderValidationTest,The length of the statement  "                    (containsMediaResource' containsNamedStream' supportMediaResource' supportNamedStream' visibleStreamType' maxProtocolVersion) => " is 128.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataStreamProviderValidationTest,The length of the statement  "                        entityType2.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 181.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataStreamProviderValidationTest,The length of the statement  "                        this.MetadataStreamProviderValidation(containsMediaResource' containsNamedStream' supportMediaResource' supportNamedStream' visibleStreamType' request); " is 152.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFNamedStreamsOnDerivedTypes,The length of the statement  "                       "//csdl:EntityType[@Name='EFEntity2' and @BaseType='Model1.EFEntity1']/csdl:Property[@Name='Stream2' and @Type='Edm.Stream']"); " is 127.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFMetadataSerializationTest,The length of the statement  "                    new KeyValuePair<string' string>[] { new KeyValuePair<string' string>("Customers"' "true")' new KeyValuePair<string' string>("Orders"' "true") }' " is 145.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFMetadataStreamProviderValidationTest,The length of the statement  "                                            throw new InvalidOperationException("If MaxProtocolVersion >= V3' GetService<IDSSP2>() must be called before GetService<IDSSP>()."); " is 132.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFMetadataStreamProviderValidationTest,The length of the statement  "                                                throw new InvalidOperationException("If MaxProtocolVersion >= V3' GetService<IDSSP2>() must be called before GetService<IDSSP>()."); " is 132.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFMetadataStreamProviderValidationTest,The length of the statement  "                                request.DataServiceType = containsNamedStream ? NorthwindNamedStreamServiceFactory.GetNamedStreamServiceType() : typeof(NorthwindDefaultStreamService); " is 151.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFMetadataStreamProviderValidationTest,The length of the statement  "                                this.MetadataStreamProviderValidation(containsMediaResource' containsNamedStream' supportMediaResource' supportNamedStream' visibleStreamType' request); " is 152.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                using (TestUtil.RestoreStaticValueOnDispose(typeof(TypedCustomDataContext<Base2EntityWithNoNamedStream>)' "PreserveChanges")) " is 125.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                        TypedCustomDataContext<Base2EntityWithNoNamedStream> typedContext = (TypedCustomDataContext<Base2EntityWithNoNamedStream>)sender; " is 129.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                        typedContext.SetValues(new Base2EntityWithNoNamedStream[] { new Base2EntityWithNoNamedStream { ID = 1 }' new RootEntityType { ID = 2 } }); " is 138.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                    string base2EntityWithNoNamedStreamTypeName = "NamedStreamUnitTestModule_NamedStreamTests_Base2EntityWithNoNamedStream"; " is 120.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                        String.Format("//csdl:EntityType[@Name='{0}' and csdl:Property[@Name='Stream1' and @Type='Edm.Stream'] and csdl:Property[@Name='Stream2' and @Type='Edm.Stream']]"' base2EntityWithNoNamedStreamTypeName)' " is 202.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                        String.Format("//csdl:EntityType[@Name='{0}' and @BaseType='{1}' and csdl:Property[@Name='Stream3' and @Type='Edm.Stream'] and csdl:Property[@Name='Stream4' and @Type='Edm.Stream']]"' rootEntityTypeName' typeNamespace + base2EntityWithNoNamedStreamTypeName)' " is 258.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                        String.Format("//csdl:EntityType[@Name='{0}' and @HasStream='true' and @BaseType='{1}']"' derived1WithBlobTypeName' typeNamespace + rootEntityTypeName)' " is 152.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                            "//{0}[__metadata/type='{1}' and Stream1/__mediaresource/edit_media='{2}/Stream1' and Stream2/__mediaresource/edit_media='{2}/Stream2']"'  " is 137.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                            "//{0}[__metadata/type='{1}' and Stream1/__mediaresource/edit_media='{2}/{1}/Stream1' and Stream2/__mediaresource/edit_media='{2}/{1}/Stream2' and Stream3/__mediaresource/edit_media='{2}/{1}/Stream3' and Stream4/__mediaresource/edit_media='{2}/{1}/Stream4']"'  " is 259.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The length of the statement  "                            "//atom:entry[atom:category/@term='#{0}' and atom:link[@title='Stream1' and @href='Values(1)/Stream1'] and atom:link[@title='Stream2' and @href='Values(1)/Stream2']]"' " is 167.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataSerializationTest,The length of the statement  "                    expectedNameStreams.Add("NamedStreamUnitTestModule_NamedStreamTests_Base2EntityWithNoNamedStream"' new string[] { "Stream1"' "Stream2" }); " is 138.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataSerializationTest,The length of the statement  "                    expectedNameStreams.Add("NamedStreamUnitTestModule_NamedStreamTests_RootEntityType"' new string[] { "Stream3"' "Stream4" }); " is 124.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataSerializationTest,The length of the statement  "                    VerifyStreamsInMetadata(edmMetadata' 4' new string[] { "NamedStreamUnitTestModule_NamedStreamTests_Derived1WithBlob" }' expectedNameStreams); " is 141.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataStreamProviderValidationTest,The length of the statement  "                    (containsMediaResource' containsNamedStream' supportMediaResource' supportNamedStream' visibleStreamType' maxProtocolVersion) => " is 128.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataStreamProviderValidationTest,The length of the statement  "                                    throw new InvalidOperationException("If MaxProtocolVersion >= V3' GetService<IDSSP2>() must be called before GetService<IDSSP>()."); " is 132.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataStreamProviderValidationTest,The length of the statement  "                                        throw new InvalidOperationException("If MaxProtocolVersion >= V3' GetService<IDSSP2>() must be called before GetService<IDSSP>()."); " is 132.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataStreamProviderValidationTest,The length of the statement  "                        this.MetadataStreamProviderValidation(containsMediaResource' containsNamedStream' supportMediaResource' supportNamedStream' visibleStreamType' request); " is 152.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The length of the statement  "                entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 180.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The length of the statement  "                        TestUtil.AssertContains(e.InnerException.Message' ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "Stream1")); " is 134.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The length of the statement  "                        TestUtil.AssertContains(e.InnerException.Message' DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")); " is 136.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The length of the statement  "                            TestUtil.AssertContains((new StreamReader(e.Response.GetResponseStream())).ReadToEnd()' DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidHttpMethodForNamedStream"' request.FullRequestUriString' requestMethod)); " is 224.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The length of the statement  "                    entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 180.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The length of the statement  "                    entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 180.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                        string payload = DSPResourceSerializer.WriteEntity(entity' mimeType == UnitTestsUtil.AtomFormat ? DSPResourceSerializerFormat.Atom : DSPResourceSerializerFormat.Json); " is 167.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                                "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and @title='Stream1' and contains(@href' '/Stream1') and substring-after(@href' '/Stream1')='' and not(@adsm:etag) and not(@type)])"' " is 226.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                                "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and @title='Stream2' and contains(@href' '/Stream2') and substring-after(@href' '/Stream2')='' and not(@adsm:etag) and not(@type)])"' " is 226.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                            DSPResource resource = (DSPResource)service.CurrentDataSource.GetResourceSetEntities("MySet").Single(e => ((int)((DSPResource)e).GetValue("ID")) == 111); " is 153.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                            Assert.IsTrue(TestUtil.CompareStream(mediaResource.GetReadStream(out isEmptyStream)' new MemoryStream(defaultStreamBuffer))); " is 125.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                            xpaths.Add("boolean(/atom:entry/atom:link[@rel='edit-media' and contains(@href' '/$value') and substring-after(@href' '/$value')='' and @adsm:etag='" + mediaResource.Etag + "'])"); " is 180.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The length of the statement  "                            xpaths.Add("boolean(/atom:entry/atom:content[@type='MyType1/MySubType1' and contains(@src' '/$value') and substring-after(@src' '/$value')=''])"); " is 146.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The length of the statement  "                        Assert.IsTrue(TestUtil.CompareStream(mediaResource.GetReadStream(out isEmptyStream)' new MemoryStream(defaultStreamBuffer))); " is 125.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,VerifyExceptionForIDSPGetAndPutDefaultStream,The length of the statement  "                    TestUtil.AssertContains(responseText' DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' request.FullRequestUriString)); " is 145.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutNamedStream,The length of the statement  "                        Assert.IsTrue(service.MediaResourceStorage.TryGetMediaResource(resource' entityType.GetNamedStreams().Single(s => s.Name == "Stream1")' out mediaResource)); " is 156.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetDeleteEntity,The length of the statement  "                mediaResource = service.MediaResourceStorage.CreateMediaResource(resource' entityType.GetNamedStreams().Single(s => s.Name == "Stream1")); " is 138.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetDeleteEntity,The length of the statement  "                                "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and @title='Stream1' and contains(@href' '/Stream1') and substring-after(@href' '/Stream1')='' and @adsm:etag='" + mediaResource.Etag + "' and @type='" + mediaResource.ContentType + "'])"' " is 281.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetDeleteEntity,The length of the statement  "                                "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and @title='Stream2' and contains(@href' '/Stream2') and substring-after(@href' '/Stream2')='' and not(@adsm:etag) and not(@type)])"' " is 226.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The length of the statement  "                    new KeyValuePair<string' string>[] { new KeyValuePair<string' string>("Customers"' "true")' new KeyValuePair<string' string>("Orders"' "true") }' " is 145.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and contains(@href' 'MySet1(1)/Stream1') and not(@adsm:etag) and not(@type)])"' " is 172.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and contains(@href' 'MySet1(1)/Stream2') and not(@adsm:etag) and not(@type)])"' " is 172.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                        DSPResource entity1 = (DSPResource)service.CurrentDataSource.GetResourceSetEntities("MySet1").Single(e => (int)((DSPResource)e).GetValue("ID") == 1); " is 149.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                        DSPMediaResource stream1 = service.MediaResourceStorage.CreateMediaResource(entity1' entity1.ResourceType.GetNamedStreams().Single(ns => ns.Name == "Stream1")); " is 160.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                        DSPMediaResource stream2 = service.MediaResourceStorage.CreateMediaResource(entity1' entity1.ResourceType.GetNamedStreams().Single(ns => ns.Name == "Stream2")); " is 160.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and contains(@href' 'MySet1(1)/Stream1') and not(@adsm:etag) and @type='CustomType/Stream1'])"' " is 188.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and contains(@href' 'MySet1(1)/Stream2') and not(@adsm:etag) and not(@type)])"' " is 172.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and contains(@href' 'MySet1(1)/Stream1') and not(@adsm:etag) and @type='CustomType/Stream1'])"' " is 188.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and contains(@href' 'MySet1(1)/Stream2') and @adsm:etag='" + stream2.Etag + "' and not(@type)])"' " is 190.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and contains(@href' 'MySet1(1)/Stream1') and not(@adsm:etag) and @type='CustomType/Stream1'])"' " is 188.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and contains(@href' 'MySet1(1)/Stream2') and @adsm:etag='" + stream2.Etag + "' and not(@type)])"' " is 190.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/mediaresource/Stream2' and @href='http://myservice/foo' and not(@adsm:etag) and not(@type)])"' " is 167.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream1' and contains(@href' 'MySet1(1)/Stream1') and not(@adsm:etag) and @type='CustomType/Stream1'])"' " is 188.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/edit-media/Stream2' and contains(@href' 'MySet1(1)/Stream2') and @adsm:etag='" + stream2.Etag + "' and @type='CustomType/Stream2'])"' " is 206.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSSP2ApiTest,The length of the statement  "                            "boolean(/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/mediaresource/Stream2' and @href='http://myservice/foo' and not(@adsm:etag) and @type='CustomType/Stream2'])"' " is 183.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The length of the statement  "                using (TestUtil.RestoreStaticValueOnDispose(typeof(TypedCustomDataContext<MyEntityWithNamedStreams>)' "PreserveChanges")) " is 121.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The length of the statement  "                        TypedCustomDataContext<MyEntityWithNamedStreams> typedContext = (TypedCustomDataContext<MyEntityWithNamedStreams>)sender; " is 121.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The length of the statement  "                metadata.AddCollectionProperty(entityType1' "CollectionProperty"' providers.ResourceType.GetPrimitiveResourceType(typeof(string))); " is 131.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The length of the statement  "                providers.ResourceProperty stream1 = new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The length of the statement  "                providers.ResourceProperty stream2 = new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The length of the statement  "                providers.ResourceProperty streamA = new providers.ResourceProperty("StreamA"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The length of the statement  "                providers.ResourceProperty streamB = new providers.ResourceProperty("StreamB"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))); " is 193.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The length of the statement  "                    entity0.SetValue("ResourceSetReferenceProperty"' context.GetResourceSetEntities("MySet1").Select(o => (DSPResource)o).ToList()); " is 128.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandNegativeTest,The length of the statement  "                    TestUtil.AssertContains(request.GetResponseStreamAsText()' ODataLibResourceUtil.GetString("SelectBinder_MultiLevelPathInSelect")); " is 130.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandNegativeTest,The length of the statement  "                    TestUtil.AssertContains(request.GetResponseStreamAsText()' ODataLibResourceUtil.GetString("ExpandItemBinder_PropertyIsNotANavigationPropertyOrComplexProperty"' "Stream1"' "NamedStreamTests.EntityType1")); " is 204.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,GetXPathValidationFor1LevelProjection,The length of the statement  "                if (!(projectAll || collectionProperty || complexProperty || resourceRefProperty || resourceSetRefProperty || stream1 || stream2)) " is 130.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,GetXPathValidationFor1LevelProjection,The length of the statement  "                    xpaths.Add("boolean((/atom:feed/atom:entry|/atom:entry)/atom:content/adsm:properties/ads:CollectionProperty/adsm:element)"); " is 124.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandSDPTest,The length of the statement  "                    TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' BooleanValues' BooleanValues' BooleanValues' BooleanValues' BooleanValues' BooleanValues' BooleanValues' " is 160.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandSDPTest,The length of the statement  "                        (accept' projectAll' collectionProperty' complexProperty' resourceRefProperty' resourceSetRefProperty' stream1' stream2) => " is 123.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandSDPTest,The length of the statement  "                            if (projectAll || collectionProperty || complexProperty || resourceRefProperty || resourceSetRefProperty || stream1 || stream2) " is 127.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandSDPTest,The length of the statement  "                            List<string> xpaths = GetXPathValidationFor1LevelProjection(projectAll' collectionProperty' complexProperty' resourceRefProperty' resourceSetRefProperty' stream1' stream2); " is 172.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandSDPTest,The length of the statement  "                            QueryAndValidateProjectSDP(request' request.BaseUri + "MySet1(1)" + select.ToString()' accept' select.ToString()' xpaths); " is 122.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,QueryAndValidateProjectSDP,The length of the statement  "                    XmlNode nextLink = atomResponse.SelectSingleNode("/atom:feed/atom:link[@rel='next']/@href"' TestUtil.TestNamespaceManager); " is 123.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The length of the statement  "                entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 180.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The length of the statement  "                entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream)))); " is 180.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamAttributeInvalidTest,The length of the statement  "                using (TestUtil.RestoreStaticValueOnDispose(typeof(TypedCustomDataContext<MyEntityWithDupeNamedStreams>)' "PreserveChanges")) " is 125.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamAttributeInvalidTest,The length of the statement  "                        TypedCustomDataContext<MyEntityWithDupeNamedStreams> context = (TypedCustomDataContext<MyEntityWithDupeNamedStreams>)sender; " is 124.
Long Statement,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamAttributeInvalidTest,The length of the statement  "                        string expectedErrorMsg = DataServicesResourceUtil.GetString("ResourceType_PropertyWithSameNameAlreadyExists"' "Stream"' "AstoriaUnitTests.Tests.NamedStreamUnitTestModule_NamedStreamTests_MyEntityWithDupeNamedStreams"); " is 219.
Complex Conditional,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,GetXPathValidationFor1LevelProjection,The conditional expression  "!(projectAll || collectionProperty || complexProperty || resourceRefProperty || resourceSetRefProperty || stream1 || stream2)"  is complex.
Complex Conditional,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandSDPTest,The conditional expression  "projectAll || collectionProperty || complexProperty || resourceRefProperty || resourceSetRefProperty || stream1 || stream2"  is complex.
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPNamedStreamsOnDerivedTypes,The following statement contains a magic number: entity2.SetValue("ID"' 2);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamIDSPMetadataSerializationTest,The following statement contains a magic number: VerifyStreamsInMetadata(edmMetadata' 5' new[] { derived1WithBlob.Name }' expectedNameStreams);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamEFMetadataSerializationTest,The following statement contains a magic number: VerifyStreamsInMetadata(edmMetadata' 26' new string[] { "Customers"' "Orders" }' expectedNameStreams);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionNamedStreamOnDerivedTypes,The following statement contains a magic number: TypedCustomDataContext<Base2EntityWithNoNamedStream>.ValuesRequested += (sender' args) =>                      {                          TypedCustomDataContext<Base2EntityWithNoNamedStream> typedContext = (TypedCustomDataContext<Base2EntityWithNoNamedStream>)sender;                          typedContext.SetValues(new Base2EntityWithNoNamedStream[] { new Base2EntityWithNoNamedStream { ID = 1 }' new RootEntityType { ID = 2 } });                      };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamReflectionMetadataSerializationTest,The following statement contains a magic number: VerifyStreamsInMetadata(edmMetadata' 4' new string[] { "NamedStreamUnitTestModule_NamedStreamTests_Derived1WithBlob" }' expectedNameStreams);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The following statement contains a magic number: TestUtil.RunCombinations(requestUris' (requestUri) =>                  {                      using (TestWebRequest request = service.CreateForInProcess())                      {                          request.HttpMethod = "GET";                          request.RequestUriString = requestUri;                          WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(e);                          Assert.AreEqual(404' request.ResponseStatusCode);                          Assert.IsInstanceOfType(e.InnerException' typeof(DataServiceException));                          TestUtil.AssertContains(e.InnerException.Message' ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "Stream1"));                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The following statement contains a magic number: TestUtil.RunCombinations(requestUris' (requestUri) =>                  {                      using (TestWebRequest request = service.CreateForInProcess())                      {                          request.HttpMethod = "GET";                          request.RequestUriString = requestUri;                          WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(e);                          Assert.AreEqual(400' request.ResponseStatusCode);                          Assert.IsInstanceOfType(e.InnerException' typeof(DataServiceException));                          TestUtil.AssertContains(e.InnerException.Message' DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable"));                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The following statement contains a magic number: TestUtil.RunCombinations(requestMethods' (requestMethod) =>                  {                      using (TestWebRequest request = service.CreateForInProcessWcf())                      {                          request.HttpMethod = requestMethod;                          request.RequestUriString = "/MySet(1)/Stream1";                          request.RequestContentLength = 0;                          WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(e);                          if (requestMethod == "POST" || requestMethod == "PATCH" || requestMethod == "DELETE")                          {                              Assert.AreEqual(405' request.ResponseStatusCode);                              Assert.AreEqual("The remote server returned an error: (405) Method Not Allowed."' e.Message);                              Assert.AreEqual("GET'PUT"' request.ResponseHeaders["Allow"]);                              TestUtil.AssertContains((new StreamReader(e.Response.GetResponseStream())).ReadToEnd()' DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidHttpMethodForNamedStream"' request.FullRequestUriString' requestMethod));                          }                          else                          {                              Assert.AreEqual(501' request.ResponseStatusCode);                              Assert.AreEqual("The remote server returned an error: (501) Not Implemented."' e.Message);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamUriNegativeTest,The following statement contains a magic number: TestUtil.RunCombinations(requestMethods' (requestMethod) =>                  {                      using (TestWebRequest request = service.CreateForInProcessWcf())                      {                          request.HttpMethod = requestMethod;                          request.RequestUriString = "/MySet(1)/Stream1";                          request.RequestContentLength = 0;                          WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(e);                          if (requestMethod == "POST" || requestMethod == "PATCH" || requestMethod == "DELETE")                          {                              Assert.AreEqual(405' request.ResponseStatusCode);                              Assert.AreEqual("The remote server returned an error: (405) Method Not Allowed."' e.Message);                              Assert.AreEqual("GET'PUT"' request.ResponseHeaders["Allow"]);                              TestUtil.AssertContains((new StreamReader(e.Response.GetResponseStream())).ReadToEnd()' DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidHttpMethodForNamedStream"' request.FullRequestUriString' requestMethod));                          }                          else                          {                              Assert.AreEqual(501' request.ResponseStatusCode);                              Assert.AreEqual("The remote server returned an error: (501) Not Implemented."' e.Message);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(BooleanValues' UnitTestsUtil.ResponseFormats' ProtocolVersions'                      (isMediaLinkEntry' mimeType' maxProtocolVersion) =>                  {                      DSPMetadata metadata = new DSPMetadata("NamedStreamIDSPBasicScenariosTest"' "NamedStreamTests");                      providers.ResourceType entityType = metadata.AddEntityType("EntityType"' null' null' false);                      entityType.IsMediaLinkEntry = isMediaLinkEntry;                      metadata.AddKeyProperty(entityType' "ID"' typeof(int));                      metadata.AddPrimitiveProperty(entityType' "Name"' typeof(string));                      entityType.AddProperty(new providers.ResourceProperty("Stream1"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      entityType.AddProperty(new providers.ResourceProperty("Stream2"' providers.ResourcePropertyKind.Stream' providers.ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))));                      metadata.AddResourceSet("MySet"' entityType);                        DSPServiceDefinition service = new DSPServiceDefinition();                      service.ForceVerboseErrors = true;                      service.Metadata = metadata;                      service.Writable = true;                      service.MediaResourceStorage = new DSPMediaResourceStorage();                      service.SupportMediaResource = true;                      service.SupportNamedStream = true;                      DSPContext context = new DSPContext();                      service.CreateDataSource = (m) =>                      {                          return context;                      };                        byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                      byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                        using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                      {                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                          test(service' entityType' isMediaLinkEntry' mimeType' maxProtocolVersion' defaultStreamBuffer' stream1Buffer);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPPostNamedStreamEntity,The following statement contains a magic number: DSPResource resource = (DSPResource)service.CurrentDataSource.GetResourceSetEntities("MySet").Single(e => ((int)((DSPResource)e).GetValue("ID")) == 111);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: resource.SetValue("ID"' 111);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: this.VerifyExceptionForIDSPGetAndPutDefaultStream(e' isMediaLinkEntry' request' () =>                      {                          Assert.AreEqual(200' request.ResponseStatusCode);                          Assert.AreEqual(mediaResource.Etag' request.ResponseETag);                          Assert.AreEqual(mediaResource.ContentType' request.ResponseContentType);                          Assert.IsTrue(TestUtil.CompareStream(request.GetResponseStream()' new MemoryStream(defaultStreamBuffer)));                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: defaultStreamBuffer = new byte[] { 9' 8' 7' 6' 5' 4' 3' 2' 1 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutDefaultStream,The following statement contains a magic number: this.VerifyExceptionForIDSPGetAndPutDefaultStream(e' isMediaLinkEntry' request' () =>                      {                          Assert.AreEqual(204' request.ResponseStatusCode);                          Assert.AreNotEqual(mediaResource.Etag' request.IfMatch);                          Assert.AreEqual(mediaResource.Etag' request.ResponseETag);                          Assert.AreEqual(mediaResource.ContentType' request.RequestContentType);                          bool isEmptyStream;                          Assert.IsTrue(TestUtil.CompareStream(mediaResource.GetReadStream(out isEmptyStream)' new MemoryStream(defaultStreamBuffer)));                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutNamedStream,The following statement contains a magic number: resource.SetValue("ID"' 111);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutNamedStream,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutNamedStream,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetAndPutNamedStream,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetDeleteEntity,The following statement contains a magic number: resource.SetValue("ID"' 111);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,IDSPGetDeleteEntity,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFBasicScenariosCombinations,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.ResponseFormats' ProtocolVersions' DataServiceVersions' DataServiceVersions'                      (mimeType' maxProtocolVersion' dsv' mdsv) =>                      {                          mediaStorage = new DSPMediaResourceStorage(new CustomerComparer());                          byte[] defaultStreamBuffer = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 };                          byte[] stream1Buffer = new byte[] { 1' 2' 3' 4 };                            using (OpenWebDataServiceHelper.MaxProtocolVersion.Restore())                          {                              TestUtil.ClearConfiguration();                              OpenWebDataServiceHelper.MaxProtocolVersion.Value = maxProtocolVersion;                              test(mediaStorage' mimeType' maxProtocolVersion' dsv' mdsv' defaultStreamBuffer' stream1Buffer);                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFGetAndPutNamedStream,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFGetAndPutNamedStream,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,EFGetAndPutNamedStream,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamPermissionTest,The following statement contains a magic number: TestUtil.RunCombinations(methods' rights' (method' right) =>                      {                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          using (OpenWebDataServiceHelper.EntitySetAccessRule.Restore())                          using (OpenWebDataServiceHelper.GetServiceCustomizer.Restore())                          using (TestUtil.MetadataCacheCleaner())                          {                              DSPMediaResourceStorage storage = new DSPMediaResourceStorage();                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (t) =>                              {                                  if (t == typeof(providers.IDataServiceStreamProvider2))                                  {                                      return new TypedCustomStreamProvider2<MyEntityWithNamedStreams>(storage);                                  }                                    return null;                              };                                OpenWebDataServiceHelper.EntitySetAccessRule.Value = new Dictionary<string' EntitySetRights>()                              {                                  { "Values"' right }                              };                                request.HttpMethod = method;                              request.RequestUriString = "/Values(1)/Stream1";                              request.DataServiceType = typeof(TypedCustomDataContext<MyEntityWithNamedStreams>);                              if(method == "PUT")                              {                                  request.RequestStream = new MemoryStream(new byte[] { 0' 1' 2' 3' 4 });                                  request.RequestContentType = "CustomType/Stream1";                              }                                WebException e = (WebException)TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(                                  e'                                  (right & EntitySetRights.ReadSingle) == 0'                                  method == "PUT" && ((right & EntitySetRights.ReadSingle) == 0 || (right & EntitySetRights.WriteReplace) == 0));                                if (e == null)                              {                                  if (method == "GET") Assert.AreEqual(204' request.ResponseStatusCode);                                  if (method == "PUT") Assert.AreEqual(204' request.ResponseStatusCode);                              }                              else                              {                                  if (right == EntitySetRights.None)                                  {                                      Assert.AreEqual(404' request.ResponseStatusCode);                                      Assert.AreEqual("Resource not found for the segment 'Values'."' e.InnerException.Message);                                  }                                  else if ((right & EntitySetRights.ReadSingle) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else if (method == "PUT" && (right & EntitySetRights.WriteReplace) == 0)                                  {                                      Assert.AreEqual(403' request.ResponseStatusCode);                                      Assert.AreEqual("Forbidden"' e.InnerException.Message);                                  }                                  else                                  {                                      Assert.Fail("Exception not expected but received one: " + e.InnerException.Message);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,SetupDSPService,The following statement contains a magic number: id <= 2
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandNegativeTest,The following statement contains a magic number: Assert.AreEqual(400' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamProjectExpandNegativeTest,The following statement contains a magic number: Assert.AreEqual(400' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: byte[] stream1Buffer = new byte[] { 65' 66' 67' 68 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: byte[] stream1Buffer = new byte[] { 65' 66' 67' 68 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: byte[] stream1Buffer = new byte[] { 65' 66' 67' 68 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: byte[] stream1Buffer = new byte[] { 65' 66' 67' 68 };
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: resource.SetValue("ID"' 111);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,NamedStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,NamedStreamCallbackQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.ObjectContextStubs.Hidden,EFModelWithNamedStreamOnDerivedType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\NamedStreamTests\Tests\NamedStreamTests.cs,CreateConnection,The following statement contains a magic number: sqlBuilder.ConnectTimeout = 600;
