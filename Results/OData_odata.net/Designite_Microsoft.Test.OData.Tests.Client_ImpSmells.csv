Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The method has 105 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The method has 163 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The method has 137 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The method has 127 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenComplexType,The method has 102 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The method has 208 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The method has 210 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultStringFunctions,The method has 105 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The method has 207 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The method has 120 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The method has 102 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,PostUsingAtomShouldBeFailed,The method has 100 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The method has 150 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The method has 123 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The method has 518 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreatePrimaryContactODataWrapper,The method has 172 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateBackupContactODataWrapper,The method has 203 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The method has 126 lines of code.
Long Method,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyPersonFeed,The method has 108 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The method has 228 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The method has 133 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The method has 125 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The method has 141 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The method has 175 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The method has 101 lines of code.
Complex Method,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,ComplexTypeInstanceAnnotation,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,CompileAndVerify,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithExpand,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithSelect,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithOrderBy,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntityWithDerivedComplexTypeProperty,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByPropertyUnderDerivedComplexTypeProperty,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnDerivedComplexType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntityWithOpenComplexTypeProperty,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByAnOpenProperty,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnOpenComplexType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntry,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Expanded,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeExpectedFullMetadataEntryObject,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ApplyParametersFromCommandLine,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,Cyclomatic complexity of the method is 34
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,CheckMethodsInBaseClass,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,Cyclomatic complexity of the method is 34
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,GenerateClientCodeFile,The method has 5 parameters. Parameters: edmx' path' nameSpacePrefix' languageOption' useDataServiceCollection
Long Parameter List,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The method has 5 parameters. Parameters: isFeed' uri' contentType' readerSettings' model
Long Parameter List,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The method has 5 parameters. Parameters: actualAnnotatedItems' contentType' hasExpandedNavigationProperties' verifyAnnotationsOnStart' shouldIncludeAnnotation
Long Parameter List,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The method has 5 parameters. Parameters: baselineAnnotatedItems' actualAnnotatedItems' contentType' hasExpandedNavigationProperties' verifyAnnotationsOnStart
Long Parameter List,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotations,The method has 5 parameters. Parameters: baselineAnnotations' actualAnnotations' startOrEnd' indexOfAnnotatedItem' typeOfAnnotatedItem
Long Parameter List,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ReadAndVerifyFeedEntryMessage,The method has 7 parameters. Parameters: isFeed' responseMessage' expectedSet' expectedType' verifyFeed' verifyEntry' verifyNavigation
Long Parameter List,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeExpectedFullMetadataEntryObject,The method has 5 parameters. Parameters: entityType' relativeEditLink' entry' hasModel' isDerivedType
Long Parameter List,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeDefaultExpectedFullMetadataEntryMedia,The method has 6 parameters. Parameters: entityType' relativeEditLink' entry' expectedEntryObject' hasStream' hasModel
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The method has 5 parameters. Parameters: entitySetName' entitySetFixedName' originalEntitySetName' entitySetElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The method has 5 parameters. Parameters: singletonName' singletonFixedName' originalSingletonName' singletonElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The method has 7 parameters. Parameters: propertyType' originalPropertyName' propertyName' fixedPropertyName' privatePropertyName' propertyInitializationValue' writeOnPropertyChanged
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The method has 7 parameters. Parameters: functionName' originalFunctionName' returnTypeName' parameters' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The method has 9 parameters. Parameters: functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The method has 9 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The method has 11 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The method has 5 parameters. Parameters: actionName' originalActionName' returnTypeName' parameters' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The method has 7 parameters. Parameters: hideBaseMethod' actionName' originalActionName' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteByKeyMethods,The method has 5 parameters. Parameters: entityTypeName' returnTypeName' keys' keyParameters' keyDictionaryItems
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The method has 11 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The method has 9 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The method has 7 parameters. Parameters: actionName' originalActionName' boundSourceType' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,The method has 8 parameters. Parameters: isBound' isAction' parameters' parameterString' parameterTypes' parameterExpressionString' parameterValues' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The method has 8 parameters. Parameters: edmTypeReference' useDataServiceCollection' clientTemplate' context' addNullableTemplate' needGlobalPrefix' isOperationParameter' isEntitySingleType
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The method has 5 parameters. Parameters: entitySetName' entitySetFixedName' originalEntitySetName' entitySetElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The method has 5 parameters. Parameters: singletonName' singletonFixedName' originalSingletonName' singletonElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The method has 7 parameters. Parameters: propertyType' originalPropertyName' propertyName' fixedPropertyName' privatePropertyName' propertyInitializationValue' writeOnPropertyChanged
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The method has 7 parameters. Parameters: functionName' originalFunctionName' returnTypeName' parameters' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The method has 9 parameters. Parameters: functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The method has 9 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The method has 11 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The method has 5 parameters. Parameters: actionName' originalActionName' returnTypeName' parameters' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The method has 7 parameters. Parameters: hideBaseMethod' actionName' originalActionName' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteByKeyMethods,The method has 5 parameters. Parameters: entityTypeName' returnTypeName' keys' keyParameters' keyDictionaryItems
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The method has 11 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The method has 9 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The method has 7 parameters. Parameters: actionName' originalActionName' boundSourceType' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The method has 5 parameters. Parameters: entitySetName' entitySetFixedName' originalEntitySetName' entitySetElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The method has 5 parameters. Parameters: singletonName' singletonFixedName' originalSingletonName' singletonElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The method has 7 parameters. Parameters: propertyType' originalPropertyName' propertyName' fixedPropertyName' privatePropertyName' propertyInitializationValue' writeOnPropertyChanged
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The method has 7 parameters. Parameters: functionName' originalFunctionName' returnTypeName' parameters' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The method has 9 parameters. Parameters: functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The method has 9 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The method has 11 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The method has 5 parameters. Parameters: actionName' originalActionName' returnTypeName' parameters' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The method has 7 parameters. Parameters: hideBaseMethod' actionName' originalActionName' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteByKeyMethods,The method has 5 parameters. Parameters: entityTypeName' returnTypeName' keys' keyParameters' keyDictionaryItems
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The method has 11 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The method has 9 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The method has 7 parameters. Parameters: actionName' originalActionName' boundSourceType' returnTypeName' parameters' fullNamespace' parameterValues
Long Identifier,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the parameter entryResultsLinqTwoWhereClauses is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryMetadataTest,The length of the parameter expectedUpdatePersonInfoOperations is 34.
Long Identifier,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryMetadataTest,The length of the parameter expectedRetrieveProductOperations is 33.
Long Identifier,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the parameter expectedActionsOnSpecialEmployee is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryJsonLightTest,The length of the parameter expectedActionsOnSpecialEmployee is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,,The length of the parameter NameSpacePrefixCodeGenerationTests is 34.
Long Identifier,Microsoft.Test.OData.Tests.Client.Common,MimeTypes,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\Common\MimeTypes.cs,,The length of the parameter ODataParameterIEEE754Compatible is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.Common,MimeTypes,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\Common\MimeTypes.cs,,The length of the parameter ApplicationJsonODataLightStreaming is 34.
Long Identifier,Microsoft.Test.OData.Tests.Client.Common,MimeTypes,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\Common\MimeTypes.cs,,The length of the parameter ApplicationJsonODataLightNonStreaming is 37.
Long Identifier,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The length of the parameter postDeleteTypeInReferencingModel is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateAndReadOpenComplexTypeWithUndeclaredPropertiesClientTest,The length of the parameter accountInfoComplexValueProperties is 33.
Long Identifier,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The length of the parameter hasExpandedNavigationProperties is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The length of the parameter hasExpandedNavigationProperties is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,GetExpectedAnnotationsOnStart,The length of the parameter hasExpandedNavigationProperties is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,,The length of the parameter IdOfDiscontinuedProductWithRelatedDiscontinuedProducts is 54.
Long Identifier,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,,The length of the parameter IdOfDiscontinuedProductWithRelatedDiscontinuedProductsWithPhotos is 64.
Long Identifier,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,,The length of the parameter IdOfPhotoFromDiscontinuedProductWithRelatedDiscontinuedProductsWithPhotos is 73.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataAnnotationNamespacePrefix is 30.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataPropertyAnnotationSeparator is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataMediaEditLinkAnnotationName is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataMediaReadLinkAnnotationName is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataMediaContentTypeAnnotationName is 35.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataWorkspaceCollectionUrlName is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataWorkspaceCollectionNameName is 32.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataNavigationLinkUrlAnnotationName is 36.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataAssociationLinkUrlAnnotationName is 37.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataAnnotationGroupAnnotationName is 34.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataAnnotationGroupNamePropertyName is 36.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ODataAnnotationGroupReferenceAnnotationName is 43.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ContextUriQueryOptionStartIndicator is 35.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ContextUriSelectQueryOptionName is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ContextUriQueryOptionValueSeparator is 35.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ContextUriQueryOptionSeparator is 30.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ContextUriFragmentPartSeparator is 31.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,JsonLightConstants,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\JsonLightConstants.cs,,The length of the parameter ContextUriFragmentItemSelector is 30.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerResourceWrapperNoMetadata,The length of the parameter primaryContactInfo_nestedInfoWrapper is 36.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerResourceWrapperNoMetadata,The length of the parameter BackupContactInfo_nestedInfoWrapper is 35.
Long Identifier,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,EmployeeEntryTest,The length of the parameter responseMessageWithoutTypeCast is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ApplyParametersFromCommandLine,The length of the parameter ignoreUnexpectedElementsAndAttributes is 37.
Long Identifier,Microsoft.OData.Client.Design.T4,Configuration,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,,The length of the parameter IgnoreUnexpectedElementsAndAttributes is 37.
Long Identifier,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,,The length of the parameter elementTypeToNavigationSourceMap is 32.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveTypeFromName,The length of the parameter namespaceToPrefixedNamespacePairs is 33.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveNameFromType,The length of the parameter namespaceToPrefixedNamespacePairs is 33.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the parameter allowPropertyNameSameWithTypeName is 33.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the parameter hasPropertyNameSameWithCustomizedPropertyName is 45.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdatePropertyClientTest,The length of the statement  "            var queryCompanyCategory = TestClientContext.Company.Select(c => c.CompanyCategory) as DataServiceQuerySingle<CompanyCategory?>; " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdatePropertyClientTest,The length of the statement  "            var queryNameAr = TestClientContext.BeginExecute<string>(new Uri("Company/Name"' UriKind.Relative)' null' null).EnqueueWait(this); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdatePropertyClientTest,The length of the statement  "            queryCompany = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Address = c.Address' Name = c.Name }) as DataServiceQuerySingle<Company>; " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationCollectionPropertyClientTest,The length of the statement  "            var selectCompany = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Departments = c.Departments }) as DataServiceQuerySingle<Company>; " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationCollectionPropertyClientTest,The length of the statement  "            var queryDepartment = TestClientContext.Departments.Expand(d => d.Company).Where(d => d.DepartmentID == tmpDepartmentID) as DataServiceQuery<Department>; " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationSingletonPropertyClientTest,The length of the statement  "            var queryVipCustomerAr = TestClientContext.BeginExecute<Customer>(new Uri("VipCustomer"' UriKind.Relative)' null' null).EnqueueWait(this); " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationSingletonPropertyClientTest,The length of the statement  "            queryCompany = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' VipCustomer = c.VipCustomer }) as DataServiceQuerySingle<Company>; " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationSingleEntityPropertyClientTest,The length of the statement  "            queryCompany = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' CoreDepartment = c.CoreDepartment }) as DataServiceQuerySingle<Company>; " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,UpdateDerivedTypePropertyClientTest,The length of the statement  "            var queryStockExchange = TestClientContext.PublicCompany.Select(c => (c as PublicCompany).StockExchange) as DataServiceQuerySingle<string>; " is 139.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,UpdateDerivedTypeNavigationOfContainedCollection,The length of the statement  "            queryCompany = TestClientContext.PublicCompany.Expand(c => (c as PublicCompany).Assets) as DataServiceQuerySingle<Company>; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,UpdateDerivedTypeNavigationOfContainedCollection,The length of the statement  "            queryCompany = TestClientContext.PublicCompany.Expand(c => (c as PublicCompany).Assets) as DataServiceQuerySingle<Company>; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,UpdateDerivedTypeNavigationOfContainedSingleEntity,The length of the statement  "                new PublicCompany { CompanyID = c.CompanyID' Club = (c as PublicCompany).Club }) as DataServiceQuerySingle<PublicCompany>; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,DerivedTypeSingletonClientTest,The length of the statement  "            queryCompany = TestClientContext.PublicCompany.Expand(c => (c as PublicCompany).Club) as DataServiceQuerySingle<Company>; " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousSingletonClientTest.cs,DerivedTypeSingletonClientTest,The length of the statement  "                new PublicCompany { CompanyID = c.CompanyID' LabourUnion = (c as PublicCompany).LabourUnion }) as DataServiceQuerySingle<PublicCompany>; " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client,AsynchronousTestsExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousTestsExtensionMethodsDesktop.cs,EnqueueTestComplete,The length of the statement  "            //If someday all the test cases are changed to the way that Linq_OrderByDescendingThenByDescendingTest is written' then this method should do nothing' just to be able to write test cases in the same way on all 4 platforms.This method is specific to SL. " is 252.
Long Statement,Microsoft.Test.OData.Tests.Client,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\EndToEndTestBase.cs,ResetDataSource,The length of the statement  "                //the reason why this is an empty catch is because the reset call may return a 404 page not found and in that case the we need to " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\EndToEndTestBase.cs,ResetDataSource,The length of the statement  "                // catch it instead of having the test fail. If it does return 404 its fine this is just a reset call which makes the Datasource remak itself  " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\EndToEndTestBase.cs,CreateWrappedContext,The length of the statement  "            contextWrapper.BuildingRequest += (s' e) => e.Headers.Add("TestName"' string.Format("{0}.{1}"' testClassName' this.TestContext.TestName)); " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\EndToEndTestBase.cs,RetrieveServiceEdmModel,The length of the statement  "            Microsoft.Test.OData.Tests.Client.Common.HttpWebRequestMessage message = new Microsoft.Test.OData.Tests.Client.Common.HttpWebRequestMessage(new Uri(this.ServiceUri.AbsoluteUri + "$metadata"' UriKind.Absolute)); " is 210.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientOpenTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientOpenTypeUpdateTests.cs,EntryStarting,The length of the statement  "                    // In practice' the data from this undeclared property would probably be stored in a transient property of the partial companion class to the client proxy. " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray(); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray(); " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray(); " is 182.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray(); " is 176.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray(); " is 220.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray(); " is 168.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray(); " is 166.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The length of the statement  "                    Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries"); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,PrimitiveTypeInRequestUrlTest,The length of the statement  "            //GET http://jinfutanodata01:9090/AstoriaDefault635157546921762475/Person()?$filter=cast(cast(PersonId''Edm.Byte')''Edm.Int32')%20gt%200 HTTP/1.1 " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,QueryEntityNavigationWithImplicitKeys,The length of the statement  "                    var message = contextWrapper.Execute<Message>(new Uri(this.ServiceUri.OriginalString.TrimEnd('/') + "/" + testCase.Key)).Single(); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,QueryEntityNavigationWithImplicitKeys,The length of the statement  "                    StringResourceUtil.VerifyDataServicesString(ClientExceptionUtil.ExtractServerErrorMessage(ex)' "BadRequest_KeyCountMismatch"' "Microsoft.Test.OData.Services.AstoriaDefaultService.Message"); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The length of the statement  "            queryCustomersCount = ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).GetAllPages().ToList().Count(); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The length of the statement  "            queryCustomersCount = ((DataServiceQuery<Customer>)context.Customer.Select(c => new Customer() { CustomerId = c.CustomerId' Name = c.Name })).GetAllPages().ToList().Count(); " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The length of the statement  "            queryCustomersCount = ((DataServiceQuery<Customer>)context.Customer.OrderBy(c => c.Name)).GetAllPages().ToList().Count(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,PagingOnNavigationProperty,The length of the statement  "            var queryOrderCount = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.GetAllPages().ToList().Count(); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,DuplicateQueryTest,The length of the statement  "                contextWrapper.Execute<Person>(new Uri(this.ServiceUri.OriginalString + "/Person?$orderby=PersonId&$orderby=PersonId")); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,DuplicateQueryTest,The length of the statement  "            var entryResults = contextWrapper.Execute<Person>(new Uri(this.ServiceUri.OriginalString + "/Person?nonODataQuery=foo&$filter=PersonId%20eq%200&nonODataQuery=bar")); " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientDeleteTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientDeleteTests.cs,ExecuteDeleteMethod,The length of the statement  "            DataServiceQuery query =  this.TestClientContext.People.Where(p => p.PersonID == 1).Select(p => p.Parent) as DataServiceQuery; " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client,ClientUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientUpdateTests.cs,TrackEntitiesInAllPages,The length of the statement  "            var customers = new DataServiceCollection<Customer>(context' context.Customer.GetAllPages()' TrackingMode.AutoChangeTracking' null' null' null); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client,DesktopUriGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DesktopUriGenerator.cs,GenerateServiceUri,The length of the statement  "            return new Uri("http://" + Environment.MachineName + ":" + this.ServicePort + "/" + path + DateTimeOffset.Now.Ticks.ToString(CultureInfo.InvariantCulture) + "/"); " is 162.
Long Statement,Microsoft.Test.OData.Tests.Client,ODataWCFServiceTestsBase<TClientContext>,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTestsBase.cs,RetrieveServiceEdmModel,The length of the statement  "            HttpWebRequestMessage message = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "$metadata"' UriKind.Absolute)); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The length of the statement  "            var response = context.Execute<Computer>(new Uri(this.ServiceUri.OriginalString + "/Computer?$count=true")) as QueryOperationResponse<Computer>; " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The length of the statement  "            response = context.Execute<Computer>(new Uri(this.ServiceUri.OriginalString + "/Computer?$expand=ComputerDetail&$count=true")) as QueryOperationResponse<Computer>; " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The length of the statement  "            response = context.Execute<Computer>(new Uri(this.ServiceUri.OriginalString + "/Computer?$top=5&$count=true")) as QueryOperationResponse<Computer>; " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The length of the statement  "            response = context.Execute<Computer>(new Uri(this.ServiceUri.OriginalString + "/Computer?$count=true&$skip=5")) as QueryOperationResponse<Computer>; " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The length of the statement  "            response = context.Execute<Computer>(new Uri(this.ServiceUri.OriginalString + "/Computer?$skip=5&$count=true&$top=10")) as QueryOperationResponse<Computer>; " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The length of the statement  "            var response = context.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer?$count=true")) as QueryOperationResponse<Customer>; " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The length of the statement  "            response = context.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer?$expand=Orders&$count=true")) as QueryOperationResponse<Customer>; " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The length of the statement  "            response = context.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer?$top=5&$count=true")) as QueryOperationResponse<Customer>; " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The length of the statement  "            response = context.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer?$count=true&$skip=5")) as QueryOperationResponse<Customer>; " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The length of the statement  "            response = context.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer?$skip=5&$count=true&$top=10")) as QueryOperationResponse<Customer>; " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The length of the statement  "            var orders = context.Execute<Order>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/Orders?$count=true")) as QueryOperationResponse<Order>; " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountPayloadVerification,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(this.ServiceUri.OriginalString + "/Customer?$count=true"' UriKind.Absolute)); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,GetTotalCountInvalidTest,The length of the statement  "                    var response = context.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + request)) as QueryOperationResponse<Customer>; " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.IsTrue(discountAction.RequestUri.OriginalString.EndsWith("/Products/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            var accessLevelAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.IsTrue(accessLevelAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.AddAccessRight")); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            var getProductDetailsFunction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            var getRelatedProductAction = getProductDetailsFunction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct(); " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.IsTrue(getProductDetailsFunction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)")); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.IsTrue(getRelatedProductAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)(ProductID=10001'ProductDetailID=10001)/Microsoft.Test.OData.Services.ODataWCFService.GetRelatedProduct()")); " is 272.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.IsTrue(discountAction.RequestUri.OriginalString.EndsWith("/Products/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            var accessLevelAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.IsTrue(accessLevelAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.AddAccessRight")); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            var getProductDetailsAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct(); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.IsTrue(getProductDetailsAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)")); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.IsTrue(getRelatedProductAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)(ProductID=10001'ProductDetailID=10001)/Microsoft.Test.OData.Services.ODataWCFService.GetRelatedProduct()")); " is 272.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            companyQuery = TestClientContext.Company.Select(c => new Company() { Name = c.Name' Address = c.Address' Departments = c.Departments }); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            Assert.IsTrue(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            Assert.IsTrue(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            Assert.IsTrue(getHomeAddressQuery.RequestUri.OriginalString.EndsWith("/Company/VipCustomer/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()")); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            companyQuery = TestClientContext.Company.Select(c => new Company() { Name = c.Name' Address = c.Address' Departments = c.Departments }); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            Assert.IsTrue(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            Assert.IsTrue(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            Assert.IsTrue(getHomeAddressQuery.RequestUri.OriginalString.EndsWith("/Company/VipCustomer/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()")); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            var getActualAmountFunction = TestClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(1); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            Assert.IsTrue(getActualAmountFunction.RequestUri.OriginalString.EndsWith("/Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=1.0)")); " is 180.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(stockExchangeQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/StockExchange")); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(assetsQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/Assets")); " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            assetsQuery = TestClientContext.PublicCompanyPlus.CastToPublicCompanyPlus().AssetsPlus.Where(a => a.NamePlus != "Temp") as DataServiceQuery<AssetPlus>; " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(assetsQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/Assets?$filter=Name ne 'Temp'")); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "                "/PublicCompany?$expand=Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion&$select=Address'Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/StockExchange")); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(publicCompany3Query.RequestUri.OriginalString.EndsWith("/PublicCompany?$expand=Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion")); " is 168.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            DataServiceActionQuery changeLabourUnionAction = TestClientContext.PublicCompanyPlus.CastToPublicCompanyPlus().LabourUnionPlus.ChangeLabourUnionNamePlus("changedLabourUnion"); " is 175.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(changeLabourUnionAction.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion/Microsoft.Test.OData.Services.ODataWCFService.ChangeLabourUnionName")); " is 232.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            var labourUnion = (await TestClientContext.PublicCompanyPlus.Select(p => (p as PublicCompanyPlus).LabourUnionPlus).GetValueAsync()).NamePlus; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.IsTrue(discountAction.RequestUri.OriginalString.EndsWith("/GetAllProducts()/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            var filterAllProducts = getAllProductsFunction.Where(p => p.SkinColorPlus == ColorPlus.RedPlus) as DataServiceQuery<ProductPlus>; " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.IsTrue(filterAllProducts.RequestUri.OriginalString.EndsWith("/GetAllProducts()?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red'")); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            var productsNameQuery = TestClientContext.GetProductsByAccessLevelPlus(AccessLevelPlus.ReadPlus | AccessLevelPlus.ExecutePlus); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.IsTrue(Uri.UnescapeDataString(productsNameQuery.RequestUri.OriginalString).EndsWith("/GetProductsByAccessLevel(accessLevel=Microsoft.Test.OData.Services.ODataWCFService.AccessLevel'Read'Execute')")); " is 206.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The length of the statement  "            var product = (await (TestClientContext.ProductsPlus.Take(1) as DataServiceQuery<ProductPlus>).ExecuteAsync()).Single(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryAccount = TestClientContext.AccountsPlus.Where(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result > 1) as DataServiceQuery<AccountPlus>; " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$filter=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5) gt 1.0")); " is 179.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = TestClientContext.AccountsPlus.Where(a => 1 != a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>; " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$filter=1.0 ne MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5)")); " is 179.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryPeople = TestClientContext.PeoplePlus.Where(p => p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus != "name") as DataServiceQuery<PersonPlus>; " is 162.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$filter=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName ne 'name'")); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = TestClientContext.PeoplePlus.Where(p => "name" != p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$filter='name' ne $it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName")); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryProducts = TestClientContext.ProductsPlus.Where(p => p.GetProductDetailsPlus(2).Count() > 1) as DataServiceQuery<ProductPlus>; " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=$it/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=2)/$count gt 1")); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryProducts = TestClientContext.ProductsPlus.Where(p => 1 <= p.GetProductDetailsPlus(2).Count()) as DataServiceQuery<ProductPlus>; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=1 le $it/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=2)/$count")); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = TestClientContext.AccountsPlus.OrderBy(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>; " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$orderby=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5)")); " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = TestClientContext.AccountsPlus.OrderByDescending(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>; " is 168.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$orderby=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5) desc")); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = TestClientContext.PeoplePlus.OrderBy(p => p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$orderby=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName")); " is 160.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = TestClientContext.PeoplePlus.OrderByDescending(p => p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 160.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$orderby=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName desc")); " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,PreferCustomInstanceAnotationTest,The length of the statement  "            context.SendingRequest2 += (sender' eventArgs) => ((HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Prefer"' "odata.include-annotations=*"); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,PreferCustomInstanceAnotationTest,The length of the statement  "            context.Configurations.ResponsePipeline.OnEntryEnded((ReadingEntryArgs) => value = (ReadingEntryArgs.Entry.InstanceAnnotations).FirstOrDefault().Name); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                    new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                    new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                    new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                    new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri) " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "            Assert.IsTrue(countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts) == 1' "countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts ) == 1"); " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,CancelBatchRequestTest,The length of the statement  "                    new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,CancelBatchRequestTest,The length of the statement  "                    new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AllNestedTest,The length of the statement  "            var query = context.Customer.Where(c => c.Logins.All(l => l.Orders.All(o => o.OrderId > 0))) as DataServiceQuery<Customer>; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByDescendingThenByDescendingTest,The length of the statement  "            this.EnqueueCallback(() => Assert.AreEqual("namedpersonalabsentnegationbelowstructuraldeformattercreatebackupterrestrial"' customers.First().Name)); " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByThenByDescendingTest,The length of the statement  "                .Where(c => c.Name != null && c.PrimaryContactInfo != null && c.PrimaryContactInfo.WorkPhone != null && c.PrimaryContactInfo.WorkPhone.PhoneNumber != null) " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByThenByDescendingTest,The length of the statement  "                    Assert.AreEqual("enumeratetrademarkexecutionbrfalsenesteddupoverflowspacebarseekietfbeforeobservedstart"' customers.First().Name); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByThenByTest,The length of the statement  "                    Assert.AreEqual("enumeratetrademarkexecutionbrfalsenesteddupoverflowspacebarseekietfbeforeobservedstart"' customers.Last().Name); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The length of the statement  "                         select new Computer { ComputerId = c.ComputerId' ComputerDetail = new ComputerDetail { ComputerDetailId = c.ComputerDetail.ComputerDetailId } } " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoEntity_FromSingleEntityTest,The length of the statement  "                    Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The length of the statement  "                    Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The length of the statement  "                    Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectProperty_FromSingleEntityTest,The length of the statement  "                    Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectTwoProperties_FromSingleEntityTest,The length of the statement  "                    Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ServiceOperationTests,The length of the statement  "            var ar200 = context.BeginExecute<int>(new Uri("GetCustomerCount/"' UriKind.Relative)' null' null' "GET").EnqueueWait(this); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            ComputerDetail cd1 = new ComputerDetail {ComputerDetailId = 101' SpecificationsBag = new ObservableCollection<string>()}; " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            Customer c1 = new Customer { Name = "nill"' CustomerId = 1007' Auditing = new AuditInfo { ModifiedBy = "No-one"' ModifiedDate = DateTimeOffset.Now' Concurrency = new ConcurrencyInfo { Token = "Test"' QueriedDateTime = DateTimeOffset.MinValue } } }; " is 248.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            AuditInfo a1 = new AuditInfo { ModifiedBy = "some-one"' ModifiedDate =  DateTimeOffset.MinValue'Concurrency = new ConcurrencyInfo { Token = "Test"' QueriedDateTime = DateTimeOffset.MinValue} }; " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var ar1 = context.BeginExecute(new Uri("Person/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("n"' 100)).EnqueueWait(this); " is 279.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var ar2 = context.BeginExecute(new Uri("ComputerDetail(" + cd1.ComputerDetailId + ")" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.ResetComputerDetailsSpecifications"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("specifications"' specifications)' new BodyOperationParameter("purchaseTime"' purchaseTime)).EnqueueWait(this); " is 356.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            Assert.AreEqual(specifications.Aggregate(""' (current' item) => current + item)'cd1.SpecificationsBag.Aggregate(""' (current' item) => current + item)); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var ar3 = context.BeginExecute(new Uri("Customer(1007)/Microsoft.Test.OData.Services.AstoriaDefaultService.ChangeCustomerAuditInfo"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("auditInfo"' a1)).EnqueueWait(this); " is 235.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var query = (from c in context.Customer where c.CustomerId == c1.CustomerId select c.Auditing ) as DataServiceQuery<AuditInfo>; " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The length of the statement  "            var ar2 = context.BeginExecute(new Uri("Person(1006)/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.Sack"' UriKind.Relative)' null' null' "POST").EnqueueWait(this); " is 235.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The length of the statement  "            var ar1 = context.BeginExecute<Computer>(new Uri("Computer(-10)" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.GetComputer"' UriKind.Relative)' null' null' "POST").EnqueueWait(this); " is 192.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The length of the statement  "            var query = context.CreateQuery<Person>("Person").Expand(p => (p as Employee).Manager).Where(p => p.PersonId == personId) as DataServiceQuery<Person>; " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The length of the statement  "            Assert.IsNotNull(context.Links.SingleOrDefault(l => l.SourceProperty == "Manager" && l.Source == person && l.Target == employee)); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddBaseTypeNavigationLinkTest,The length of the statement  "            Assert.IsNotNull(context.Links.SingleOrDefault(l => l.SourceProperty == "PersonMetadata" && l.Source == person && l.Target == personMetadata)); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteMediaLinkEntryTest,The length of the statement  "            // When we issue a POST request' the ID and edit-media link are not updated on the client' so we need to get the server values.  " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteNamedStreamTest,The length of the statement  "            // When we issue a POST request' the ID and edit-media link are not updated on the client' so we need to get the server values.  " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The length of the statement  "            var resp = (await ((DataServiceQuery<Customer>)(context.Customer.Expand(c => c.Orders).Where(c => c.CustomerId == -10))).ExecuteAsync()) as QueryOperationResponse<Customer>; " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetReadStreamTest,The length of the statement  "            context.SetSaveStream(car' "Photo"' mediaEntry' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetReadStreamTest,The length of the statement  "            receiveStream = (await context.GetReadStreamAsync(car' "Photo"' new DataServiceRequestArgs { AcceptContentType = "application/binary" })).Stream; " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The length of the statement  "            var qr = await context.ExecuteBatchAsync(new DataServiceRequest[] { new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri) }); " is 612.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The length of the statement  "            Assert.IsTrue(countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts) == 1' "countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts ) == 1"); " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The length of the statement  "            await context.ExecuteAsync(new Uri(queryable.RequestUri.ToString() + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")' " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The length of the statement  "            await context.ExecuteAsync<int>(new Uri(queryable.RequestUri.ToString() + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")' " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The length of the statement  "            int resultValue = (await context.ExecuteAsync<int>(new Uri("GetCustomerCount"' UriKind.Relative)' "GET"' true)).Single(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).GetAllPagesAsync()).ToList().Count(); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Select(c => new Customer() { CustomerId = c.CustomerId' Name = c.Name })).GetAllPagesAsync()).ToList().Count(); " is 186.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Take(4)).GetAllPagesAsync()).ToList().Count(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.OrderBy(c => c.Name)).GetAllPagesAsync()).ToList().Count(); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Skip(4)).GetAllPagesAsync()).ToList().Count(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The length of the statement  "            var query = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.IncludeTotalCount(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The length of the statement  "            var queryOrderCount = (await context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.GetAllPagesAsync()).ToList().Count(); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,UseDataServiceCollectionToTrackAllPages,The length of the statement  "            var customerCount = ((await context.Customer.IncludeTotalCount().ExecuteAsync()) as QueryOperationResponse<Customer>).TotalCount; " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,UseDataServiceCollectionToTrackAllPages,The length of the statement  "            var customers = new DataServiceCollection<Customer>(context' await context.Customer.GetAllPagesAsync()' TrackingMode.AutoChangeTracking' null' null' null); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,UseDataServiceCollectionToTrackAllPages,The length of the statement  "            //customers = new DataServiceCollection<Customer>(await ((DataServiceQuery<Customer>)context.Customer.Take(1)).ExecuteAsync()); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            Product product = contextWrapper.Execute<Product>(new Uri(this.ServiceUri + "Product(-10)"' UriKind.Absolute)).Single(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            OperationDescriptor productOperationDescriptor = contextWrapper.GetEntityDescriptor(product).OperationDescriptors.Single(); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            Assert.AreEqual(this.ServiceUri + ActionOverloadingQueryTests.MetadataPrefix + actionName' productOperationDescriptor.Metadata.AbsoluteUri' true); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            OrderLine orderLine = contextWrapper.Execute<OrderLine>(new Uri(this.ServiceUri + "OrderLine(OrderId=-10'ProductId=-10)"' UriKind.Absolute)).Single(); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            OperationDescriptor orderLineOperationDescriptor = contextWrapper.GetEntityDescriptor(orderLine).OperationDescriptors.Single(); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            Assert.AreEqual(this.ServiceUri + "OrderLine(OrderId=-10'ProductId=-10)/" + actionTitle' orderLineOperationDescriptor.Target.AbsoluteUri' true); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            Assert.AreEqual(this.ServiceUri + ActionOverloadingQueryTests.MetadataPrefix + actionName' orderLineOperationDescriptor.Metadata.AbsoluteUri' true); " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedOperations,The length of the statement  "            int serviceOperationResult = contextWrapper.Execute<int>(new Uri(this.ServiceUri + actionName' UriKind.Absolute)' "POST"' true).Single(); " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            IEnumerable<OperationDescriptor> peopleDescriptors = contextWrapper.GetEntityDescriptor(people).OperationDescriptors.Where(od => od.Metadata.AbsoluteUri.EndsWith(actionName)); " is 175.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            Employee employee = contextWrapper.Execute<Employee>(new Uri(this.ServiceUri + "Person(0)"' UriKind.Absolute)).Single(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            IEnumerable<OperationDescriptor> employeeDescriptors = contextWrapper.GetEntityDescriptor(employee).OperationDescriptors.Where(od => od.Title.Equals(actionName)); " is 162.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(0)/" + ActionOverloadingQueryTests.PersonTypeName + "/" + actionTitle)' " is 162.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(0)/" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionTitle)' " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            SpecialEmployee specialEmployee = contextWrapper.Execute<SpecialEmployee>(new Uri(this.ServiceUri + "Person(-7)"' UriKind.Absolute)).Single(); " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            IEnumerable<OperationDescriptor> specialEmployeeDescriptors = contextWrapper.GetEntityDescriptor(specialEmployee).OperationDescriptors.Where(od => od.Title.Equals(actionName)); " is 176.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(-7)/" + ActionOverloadingQueryTests.PersonTypeName + "/" + actionTitle)' " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(-7)/" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionTitle)' " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(-7)/" + ActionOverloadingQueryTests.SpecialEmployeeTypeName + "/" + actionTitle)' " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            Contractor contractor = contextWrapper.Execute<Contractor>(new Uri(this.ServiceUri + "Person(1)"' UriKind.Absolute)).Single(); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "            IEnumerable<OperationDescriptor> contractorDescriptors = contextWrapper.GetEntityDescriptor(contractor).OperationDescriptors.Where(od => od.Title.Equals(actionName)); " is 166.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsOnBaseAndDerivedTypes,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(1)/" + ActionOverloadingQueryTests.PersonTypeName + "/" + actionTitle)' " is 162.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteEntitySetBoundOverloadedOperations,The length of the statement  "                    new Uri(this.ServiceUri + "Person/" + ActionOverloadingQueryTests.EmployeeTypeName + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Absolute)' " is 176.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteEntitySetBoundOverloadedOperations,The length of the statement  "                    new Uri(this.ServiceUri + "Person/" + ActionOverloadingQueryTests.SpecialEmployeeTypeName + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Absolute)' " is 183.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            Employee employee = contextWrapper.Execute<Employee>(new Uri(this.ServiceUri + "Person(0)"' UriKind.Absolute)).Single(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            IEnumerable<OperationDescriptor> employeeDescriptors = contextWrapper.GetEntityDescriptor(employee).OperationDescriptors.Where(od => od.Title.Equals(actionTitle)); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "                { ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(0)/" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionTitle }' " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            contextWrapper.Execute<bool>(employeeDescriptors.Single().Target' "POST"' true' new BodyOperationParameter("n"' 123)).Single(); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            SpecialEmployee specialEmployee = contextWrapper.Execute<SpecialEmployee>(new Uri(this.ServiceUri + "Person(-7)"' UriKind.Absolute)).Single(); " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            IEnumerable<OperationDescriptor> specialEmployeeDescriptors = contextWrapper.GetEntityDescriptor(specialEmployee).OperationDescriptors.Where(od => od.Title.Equals(actionName)); " is 176.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(-7)/" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionTitle)' " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "                new Tuple<string' string>(ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(-7)/" + ActionOverloadingQueryTests.SpecialEmployeeTypeName + "/" + actionTitle)' " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            contextWrapper.Execute<bool>(specialEmployeeDescriptors.Where(d => d.Target.AbsoluteUri.Contains(".Employee")).Single().Target' "POST"' true' new BodyOperationParameter("n"' 123)).Single(); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The length of the statement  "            contextWrapper.Execute<int>(specialEmployeeDescriptors.Where(d => d.Target.AbsoluteUri.Contains(".SpecialEmployee")).Single().Target' "POST"' true).Single(); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,OverloadedActionsProjection,The length of the statement  "                Product product = contextWrapper.Execute<Product>(new Uri(this.ServiceUri + "Product(-10)?$select=Microsoft.Test.OData.Services.AstoriaDefaultService.*"' UriKind.Absolute)).Single(); " is 182.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,OverloadedActionsProjection,The length of the statement  "                OperationDescriptor productOperationDescriptor = contextWrapper.GetEntityDescriptor(product).OperationDescriptors.Single(); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,OverloadedActionsProjection,The length of the statement  "                Assert.AreEqual(this.ServiceUri + ActionOverloadingQueryTests.MetadataPrefix + "RetrieveProduct"' productOperationDescriptor.Metadata.AbsoluteUri' true); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,OverloadedActionsProjection,The length of the statement  "                Assert.AreEqual(this.ServiceUri + "Product(-10)/Microsoft.Test.OData.Services.AstoriaDefaultService.RetrieveProduct"' productOperationDescriptor.Target.AbsoluteUri' true); " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,OverloadedActionsProjection,The length of the statement  "                OrderLine orderLine = contextWrapper.Execute<OrderLine>(new Uri(this.ServiceUri + "OrderLine(OrderId=-10'ProductId=-10)?$select=*")).Single(); " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                Person person = contextWrapper.Execute<Person>(new Uri(this.ServiceUri + "Person(-1)?$select=PersonId'" + actionName' UriKind.Absolute)).Single(); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                OperationDescriptor personOperationDescriptor = contextWrapper.GetEntityDescriptor(person).OperationDescriptors.Single(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                Assert.AreEqual(this.ServiceUri + ActionOverloadingQueryTests.MetadataPrefix + actionName' personOperationDescriptor.Metadata.AbsoluteUri' true); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                person = contextWrapper.Execute<Person>(new Uri(this.ServiceUri + "Person(-1)?$select=PersonId'" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionName' UriKind.Absolute)).Single(); " is 192.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                Employee employee = contextWrapper.Execute<Employee>(new Uri(this.ServiceUri + "Person(0)?$select=PersonId'" + actionName' UriKind.Absolute)).Single(); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                    { ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(0)/" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionName }' " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                IEnumerable<OperationDescriptor> employeeDescriptors = contextWrapper.GetEntityDescriptor(employee).OperationDescriptors; " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                employee = contextWrapper.Execute<Employee>(new Uri(this.ServiceUri + "Person(0)?$select=PersonId'" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionName' UriKind.Absolute)).Single(); " is 195.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                SpecialEmployee specialEmployee = contextWrapper.Execute<SpecialEmployee>(new Uri(this.ServiceUri + "Person(-7)?$select=PersonId'" + "Microsoft.Test.OData.Services.AstoriaDefaultService.*"' UriKind.Absolute)).Single(); " is 218.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                    { ActionOverloadingQueryTests.MetadataPrefix + actionName' "Person(-7)/" + ActionOverloadingQueryTests.SpecialEmployeeTypeName + "/" + actionName } " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                IEnumerable<OperationDescriptor> specialEmployeeDescriptors = contextWrapper.GetEntityDescriptor(specialEmployee).OperationDescriptors; " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The length of the statement  "                specialEmployee = contextWrapper.Execute<SpecialEmployee>(new Uri(this.ServiceUri + "Person(-7)?$select=PersonId'" + ActionOverloadingQueryTests.EmployeeTypeName + "/" + actionName' UriKind.Absolute)).Single(); " is 210.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,VerifyLinks,The length of the statement  "                od = actualDescriptors.Where(d => d.Metadata.AbsoluteUri.Equals(this.ServiceUri + expected.Key' StringComparison.OrdinalIgnoreCase)).First(); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,VerifyLinks,The length of the statement  "                od = actualDescriptors.Where(d => d.Metadata.AbsoluteUri.Equals(this.ServiceUri + expected.Key' StringComparison.InvariantCultureIgnoreCase)).First(); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,VerifyLinks,The length of the statement  "                ods = actualDescriptors.Where(d => d.Metadata.AbsoluteUri.Equals(this.ServiceUri + expected.Item1' StringComparison.OrdinalIgnoreCase)); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,VerifyLinks,The length of the statement  "                ods = actualDescriptors.Where(d => d.Metadata.AbsoluteUri.Equals(this.ServiceUri + expected.Item1' StringComparison.InvariantCultureIgnoreCase)); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,CustomTestInitialize,The length of the statement  "            HttpWebRequestMessage message = new HttpWebRequestMessage(new Uri(this.ServiceUri.AbsoluteUri + "$metadata"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryMetadataTest,The length of the statement  "            this.VerifyOperationsInMetadata(expectedUpdatePersonInfoOperations' actionImports.Where(fi => fi.Name == "UpdatePersonInfo")); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryMetadataTest,The length of the statement  "            this.VerifyOperationsInMetadata(expectedRetrieveProductOperations' actionImports.Where(fi => fi.Name == "RetrieveProduct")); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(0)/" + PersonTypeName + "/" + updatePersonInfoName)' " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(0)/" + EmployeeTypeName + "/" + updatePersonInfoName)' " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + increaseEmployeeSalary' "Person(0)/" + EmployeeTypeName + "/" + increaseEmployeeSalaryName)' " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(-7)/" + PersonTypeName + "/" + updatePersonInfoName)' " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(-7)/" + EmployeeTypeName + "/" + updatePersonInfoName)' " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(-7)/" + SpecialEmployeeTypeName + "/" + updatePersonInfoName)' " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + increaseEmployeeSalary' "Person(-7)/" + SpecialEmployeeTypeName + "/" + increaseEmployeeSalaryName)' " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + increaseEmployeeSalary' "Person(-7)/" + EmployeeTypeName + "/" + increaseEmployeeSalaryName)' " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(1)/" + PersonTypeName + "/" + updatePersonInfoName)' " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + updatePersonInfo' "Person(1)/" + ContractorTypeName + "/" + updatePersonInfoName)' " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,QueryEntryTest,The length of the statement  "                    new Tuple<string' string>(MetadataPrefix + retrieveProduct' "OrderLine(OrderId=-10'ProductId=-10)/" + retrieveProductName)' " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,VerifyOperationsInMetadata,The length of the statement  "                    Assert.IsNotNull(actualActionImports.Where(fi => !fi.Operation.Parameters.Any()).SingleOrDefault()' "Action not found."); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,VerifyOperationsInMetadata,The length of the statement  "                    IEdmOperationImport actionImport = actualActionImports.Single(fi => fi.Operation.Parameters.Any() && fi.Operation.Parameters.First().Name == operation.Key); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingQueryTests.cs,VerifyActionInJsonLightPayload,The length of the statement  "            // Since ODL does not read nometadata payload and minimalmetadata action payload is the same as nometadata' we verify that the expected action payload exists (or does not exist) in the response string. " is 201.
Long Statement,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,EntityInstanceAnnotation,The length of the statement  "                        Assert.AreEqual(true' (entries.Last().InstanceAnnotations.First(i => i.Name.Equals(string.Format("{0}.IsBoss"' TestModelNameSpace))).Value as ODataPrimitiveValue).Value); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,ComplexTypeInstanceAnnotation,The length of the statement  "                                    //ODataInstanceAnnotation annotationOnCity = entry.Properties.SingleOrDefault(p => p.Name.Equals("City")).InstanceAnnotations.SingleOrDefault(); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,ComplexTypeInstanceAnnotation,The length of the statement  "                        ODataInstanceAnnotation annotationonEmails = entry.Properties.SingleOrDefault(p => p.Name.Equals("Emails")).InstanceAnnotations.SingleOrDefault(); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,TopLevelComplexTypeInstanceAnnotation,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "People(1)/HomeAddress"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,TopLevelComplexTypeInstanceAnnotation,The length of the statement  "                        //ODataInstanceAnnotation annotationOnCity = complexValue.Properties.SingleOrDefault(p => p.Name.Equals("City")).InstanceAnnotations.SingleOrDefault(); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,TopLevelPropertyOfComplexTypeInstanceAnnotation,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "People(1)/HomeAddress/City"' UriKind.Absolute)); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The length of the statement  "                var batchOperation1 = batchWriter.CreateOperationRequestMessage("GET"' new Uri(ServiceBaseUri + "Accounts(101)/MyPaymentInstruments")' null); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The length of the statement  "                ODataBatchOperationRequestMessage batchChangesetOperation1 = batchWriter.CreateOperationRequestMessage("POST"' new Uri(ServiceBaseUri + "Accounts(102)/MyPaymentInstruments")' "1"); " is 180.
Long Statement,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The length of the statement  "                var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))}; " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The length of the statement  "                paymentInstrumentEntry.Properties = new[] {paymentInstrumentEntryP1' paymentInstrumentEntryP2' paymentInstrumentEntryP3}; " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The length of the statement  "                var batchOperation2 = batchWriter.CreateOperationRequestMessage("GET"' new Uri(ServiceBaseUri + "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")' null); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The length of the statement  "                var batchOperation1 = batchWriter.CreateOperationRequestMessage("GET"' new Uri(ServiceBaseUri + "Accounts(101)/MyPaymentInstruments")' null' option); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The length of the statement  "                ODataBatchOperationRequestMessage batchChangesetOperation1 = batchWriter.CreateOperationRequestMessage("POST"' new Uri(ServiceBaseUri + "Accounts(102)/MyPaymentInstruments")' "1"' option); " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The length of the statement  "                var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) }; " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The length of the statement  "                paymentInstrumentEntry.Properties = new[] { paymentInstrumentEntryP1' paymentInstrumentEntryP2' paymentInstrumentEntryP3 }; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The length of the statement  "                var batchOperation2 = batchWriter.CreateOperationRequestMessage("GET"' new Uri(ServiceBaseUri + "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")' null' option); " is 186.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestRootQuery,The length of the statement  "                IQueryable iqueryableProperty = typeof(InMemoryEntities).GetProperty(entitySetKeys).GetValue(TestClientContext' null) as IQueryable; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestTopOption,The length of the statement  "                IQueryable iqueryableProperty = typeof(InMemoryEntities).GetProperty(entitySetKeys).GetValue(TestClientContext' null) as IQueryable; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestSkipOption,The length of the statement  "                IQueryable iqueryableProperty = typeof(InMemoryEntities).GetProperty(entitySetKeys).GetValue(TestClientContext' null) as IQueryable; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestOrderByOption,The length of the statement  "                    IQueryable iqueryableProperty = typeof(InMemoryEntities).GetProperty(entitySet.Key).GetValue(TestClientContext' null) as IQueryable; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestOrderByThenByOption,The length of the statement  "                IQueryable iqueryableProperty = typeof(InMemoryEntities).GetProperty(entitySet.Key).GetValue(TestClientContext' null) as IQueryable; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestOrderByThenByOption,The length of the statement  "                Uri executeUri = new Uri(String.Format("{0}?$orderby={1}"' iqueryableProperty.ToString()' string.Join("'"' entitySet.Value))); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,TestOrderByDescendingOption,The length of the statement  "                    IQueryable iqueryableProperty = typeof(InMemoryEntities).GetProperty(entitySet.Key).GetValue(TestClientContext' null) as IQueryable; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,GetOrderDetailsByKey,The length of the statement  "                IQueryable<OrderDetail> orderByKey = TestClientContext.OrderDetails.Where(c => c.OrderID == order.OrderID && c.ProductID == order.ProductID); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,ParseServiceDocument,The length of the statement  "            var requestMessage = new Microsoft.Test.OData.Tests.Client.Common.HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri' UriKind.Absolute)); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,ExecuteUri,The length of the statement  "            MethodInfo executeOfTMethod = typeof(DataServiceContext).GetMethod("Execute"' new[] { typeof(Uri) }).MakeGenericMethod(clientType); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,MismatchedClientModelWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\MismatchedClientModelWithoutTypeResolverTests.cs,FeedQuery,The length of the statement  "            var customerResults = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer")).ToArray(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,MismatchedClientModelWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\MismatchedClientModelWithoutTypeResolverTests.cs,FeedQuery,The length of the statement  "            var pageViewResults = contextWrapper.Execute<PageView>(new Uri(this.ServiceUri.OriginalString + "/PageView")).ToArray(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,MismatchedClientModelWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\MismatchedClientModelWithoutTypeResolverTests.cs,ExpandedFeedQuery,The length of the statement  "            var messageWithAttachmentsResults = contextWrapper.CreateQuery<Message>("Message").Expand(m => m.Attachments).ToArray(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,OpenTypesWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\OpenTypesWithoutTypeResolverTests.cs,BaseTypeQueryRealizesDerivedTypeObject,The length of the statement  "            var baseQuery = contextWrapper.Execute<Row>(new Uri(this.ServiceUri.OriginalString + "/Row(" + indexedRow.Id.ToString() + ")")); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,DerivedTypeFeedQuery,The length of the statement  "            var baseQueryResults = contextWrapper.Execute<PageView>(new Uri(this.ServiceUri.OriginalString + "/PageView/Microsoft.Test.OData.Services.AstoriaDefaultService.ProductPageView")).ToArray(); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,DerivedTypeFeedQuery,The length of the statement  "            var derivedQueryResults = contextWrapper.Execute<DiscontinuedProduct>(new Uri(this.ServiceUri.OriginalString + "Product/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct")).ToArray(); " is 205.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,ProjectionEntryQuery,The length of the statement  "            var queryResults = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer(-9)?$select=Name'PrimaryContactInfo")).ToArray(); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,ExpandEntryQuery,The length of the statement  "            var queryResults = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer(-9)?$expand=Info")).ToArray(); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,ExpandEntryQueryWithNestedSelect,The length of the statement  "            var queryResults = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/Customer(-9)?$expand=Info($select=Information)")).ToArray(); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,DerivedTypeExpandWithProjectionFeedQuery,The length of the statement  "            var queryUri = new Uri(this.ServiceUri.OriginalString + "Product/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct?$expand=RelatedProducts($select=*)'Detail($select=*)'Reviews($select=*)'Photos($select=*)"); " is 229.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,BasePropertyQueryWithinDerivedType,The length of the statement  "            var queryResults = contextWrapper.Execute<int>(new Uri(this.ServiceUri.OriginalString + "/Product(-9)/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct/ProductId")).ToArray(); " is 197.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,ComplexPropertyQuery,The length of the statement  "            var queryResults = contextWrapper.Execute<ContactDetails>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/PrimaryContactInfo")).ToArray(); " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,NestedComplexPropertyQuery,The length of the statement  "            var queryResults1 = contextWrapper.Execute<Phone>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/PrimaryContactInfo/MobilePhoneBag")).ToArray(); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,NestedComplexPropertyQuery,The length of the statement  "            var queryResults2 = contextWrapper.Execute<Aliases>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/PrimaryContactInfo/ContactAlias")).ToArray(); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,NestedComplexPropertyQuery,The length of the statement  "            var queryResults3 = contextWrapper.Execute<ICollection<string>>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/PrimaryContactInfo/ContactAlias/AlternativeNames")).ToArray(); " is 183.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,NestedComplexPropertyQuery,The length of the statement  "            var queryResults4 = contextWrapper.Execute<ICollection<string>>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/Microsoft.Test.OData.Services.AstoriaDefaultService.Customer/PrimaryContactInfo/ContactAlias/AlternativeNames")).ToArray(); " is 244.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,CollectionOfComplexPropertyQuery,The length of the statement  "            var queryResults = contextWrapper.Execute<Phone>(new Uri(this.ServiceUri.OriginalString + "/Customer(-10)/PrimaryContactInfo/MobilePhoneBag")).ToArray(); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,CollectionOfPrimitivePropertyQuery,The length of the statement  "            var queryResults = contextWrapper.Execute<ICollection<decimal>>(new Uri(this.ServiceUri.OriginalString + "/MappedEntityType(-10)/BagOfDecimals")).ToArray(); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,JsonWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\JsonWithoutTypeResolverTests.cs,ServiceOperationFeedQuery,The length of the statement  "            var queryResult = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri.OriginalString + "/GetSpecificCustomer?Name='enumeratetrademarkexecutionbrfalsenesteddupoverflowspacebarseekietfbeforeobservedstart'")' "GET"' true).ToArray(); " is 234.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The length of the statement  "                .Select(a => new AccountPlus() { AccountIDPlus = a.AccountIDPlus' MyGiftCardPlus = a.MyGiftCardPlus' CountryRegionPlus = a.CountryRegionPlus }); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The length of the statement  "            r1 = TestClientContext.AccountsPlus.Expand(account => account.MyGiftCardPlus).Where(account => account.AccountIDPlus == 110).Single(); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The length of the statement  "            var customer = TestClientContext.CustomersPlus.Expand(p => (p as CustomerPlus).OrdersPlus).Where(p => p.PersonIDPlus == 10001).SingleOrDefault(); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The length of the statement  "            var account3 = TestClientContext.AccountsPlus.Expand(c => c.MyGiftCardPlus).Where(a => a.AccountIDPlus == 101).Single(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,ContainedEntityQuery,The length of the statement  "            Assert.IsTrue(q1.RequestUri.OriginalString.EndsWith("Accounts(103)/MyPaymentInstruments(103902)"' StringComparison.Ordinal)); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,ContainedEntityQuery,The length of the statement  "            var q2 = TestClientContext.CreateQuery<PaymentInstrumentPlus>("Accounts(103)/MyPaymentInstruments").Expand(pi => pi.BillingStatementsPlus).Where(pi => pi.PaymentInstrumentIDPlus == 103901); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,ContainedEntityQuery,The length of the statement  "                "Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.2)"' UriKind.Absolute)' "GET"' true).Single(); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            var querySeniorEmployee = (TestClientContext.People.OfType<Employee>() as DataServiceQuery<Employee>).GetSeniorEmployees(); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "                "People/Microsoft.Test.OData.Services.ODataWCFService.Employee/Microsoft.Test.OData.Services.ODataWCFService.GetSeniorEmployees()")); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "                "People/Microsoft.Test.OData.Services.ODataWCFService.Employee/Microsoft.Test.OData.Services.ODataWCFService.GetSeniorEmployees()/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()")); " is 196.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            Assert.IsTrue(discountAction.RequestUri.OriginalString.EndsWith("/Products/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            var accessLevelAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            Assert.IsTrue(accessLevelAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.AddAccessRight")); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            var getProductDetailsAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 5 } }).GetProductDetails(1); " is 139.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            Assert.IsTrue(getProductDetailsAction.RequestUri.OriginalString.EndsWith("/Products(5)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)")); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 5 }' { "ProductDetailID"' 2 } }).GetRelatedProduct(); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            Assert.IsTrue(getRelatedProductAction.RequestUri.OriginalString.EndsWith("/Products(5)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)(ProductID=5'ProductDetailID=2)/Microsoft.Test.OData.Services.ODataWCFService.GetRelatedProduct()")); " is 260.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The length of the statement  "            Assert.IsTrue(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=ProductID gt 3&$skip=3&$top=2&$expand=Details&$select=Name'ProductID")); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnSingleton,The length of the statement  "            companyQuery = TestClientContext.Company.Select(c => new Company() { Name = c.Name' Address = c.Address' Departments = c.Departments }); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnSingleton,The length of the statement  "            Assert.IsTrue(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnSingleton,The length of the statement  "            Assert.IsTrue(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnSingleton,The length of the statement  "            Assert.IsTrue(getHomeAddressQuery.RequestUri.OriginalString.EndsWith("/Company/VipCustomer/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()")); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            var getActualAmountFunction = TestClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(1); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            Assert.IsTrue(getActualAmountFunction.RequestUri.OriginalString.EndsWith("/Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=1.0)")); " is 180.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            getActualAmountFunction = TestClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(null); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            Assert.IsTrue(getActualAmountFunction.RequestUri.OriginalString.EndsWith("/Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=null)")); " is 181.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(stockExchangeQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/StockExchange")); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(assetsQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/Assets")); " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            assetsQuery = TestClientContext.PublicCompanyPlus.CastToPublicCompanyPlus().AssetsPlus.Where(a => a.NamePlus != "Temp") as DataServiceQuery<AssetPlus>; " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(assetsQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/Assets?$filter=Name ne 'Temp'")); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "                "/PublicCompany?$expand=Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion&$select=Address'Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/StockExchange")); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(publicCompany3Query.RequestUri.OriginalString.EndsWith("/PublicCompany?$expand=Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion")); " is 168.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            DataServiceActionQuery changeLabourUnionAction = TestClientContext.PublicCompanyPlus.CastToPublicCompanyPlus().LabourUnionPlus.ChangeLabourUnionNamePlus("changedLabourUnion"); " is 175.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.IsTrue(changeLabourUnionAction.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion/Microsoft.Test.OData.Services.ODataWCFService.ChangeLabourUnionName")); " is 232.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            var labourUnion = TestClientContext.PublicCompanyPlus.Select(p => (p as PublicCompanyPlus).LabourUnionPlus).GetValue().NamePlus; " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.IsTrue(discountAction.RequestUri.OriginalString.EndsWith("/GetAllProducts()/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The length of the statement  "            var filterAllProducts = getAllProductsFunction.Where(p => p.SkinColorPlus == ColorPlus.RedPlus) as DataServiceQuery<ProductPlus>; " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.IsTrue(filterAllProducts.RequestUri.OriginalString.EndsWith("/GetAllProducts()?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red'")); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The length of the statement  "            var productsNameQuery = TestClientContext.GetProductsByAccessLevelPlus(AccessLevelPlus.ReadPlus | AccessLevelPlus.ExecutePlus); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.IsTrue(Uri.UnescapeDataString(productsNameQuery.RequestUri.OriginalString).EndsWith("/GetProductsByAccessLevel(accessLevel=Microsoft.Test.OData.Services.ODataWCFService.AccessLevel'Read'Execute')")); " is 206.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,ByMultipleKey,The length of the statement  "            var queryProductDetails = TestClientContext.ProductDetailsPlus.ByKey(new Dictionary<string' object> { { "ProductID"' 6 }' { "ProductDetailID"' 1 } }); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,ByMultipleKey,The length of the statement  "            Assert.IsTrue(queryProductDetails.RequestUri.OriginalString.EndsWith("/ProductDetails(ProductID=6'ProductDetailID=1)")); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,ByMultipleKey,The length of the statement  "            var queryRelatedProductDetails = TestClientContext.ProductDetailsPlus.ByKey(new Dictionary<string' object> { { "ProductID"' 6 }' { "ProductDetailID"' 1 } }).GetRelatedProductPlus(); " is 181.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,ByMultipleKey,The length of the statement  "            Assert.IsTrue(queryRelatedProductDetails.RequestUri.OriginalString.EndsWith("/ProductDetails(ProductID=6'ProductDetailID=1)/Microsoft.Test.OData.Services.ODataWCFService.GetRelatedProduct()")); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryAccount = TestClientContext.AccountsPlus.Where(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue() > 1) as DataServiceQuery<AccountPlus>; " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$filter=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5) gt 1.0")); " is 179.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = TestClientContext.AccountsPlus.Where(a => 1 != a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue()) as DataServiceQuery<AccountPlus>; " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$filter=1.0 ne MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5)")); " is 179.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryPeople = TestClientContext.PeoplePlus.Where(p => p.GetHomeAddressPlus().GetValue().FamilyNamePlus != "name") as DataServiceQuery<PersonPlus>; " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$filter=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName ne 'name'")); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = TestClientContext.PeoplePlus.Where(p => "name" != p.GetHomeAddressPlus().GetValue().FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$filter='name' ne $it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName")); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryProducts = TestClientContext.ProductsPlus.Where(p => p.GetProductDetailsPlus(2).Count() > 1) as DataServiceQuery<ProductPlus>; " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=$it/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=2)/$count gt 1")); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryProducts = TestClientContext.ProductsPlus.Where(p => 1 <= p.GetProductDetailsPlus(2).Count()) as DataServiceQuery<ProductPlus>; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=1 le $it/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=2)/$count")); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = TestClientContext.AccountsPlus.OrderBy(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue()) as DataServiceQuery<AccountPlus>; " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$orderby=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5)")); " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = TestClientContext.AccountsPlus.OrderByDescending(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue()) as DataServiceQuery<AccountPlus>; " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$orderby=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5) desc")); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = TestClientContext.PeoplePlus.OrderBy(p => p.GetHomeAddressPlus().GetValue().FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$orderby=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName")); " is 160.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = TestClientContext.PeoplePlus.OrderByDescending(p => p.GetHomeAddressPlus().GetValue().FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.IsTrue(queryPeople.RequestUri.OriginalString.EndsWith("/People?$orderby=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName desc")); " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The length of the statement  "                (this.TestClientContext.People.Where((it) => it.PersonID == people[0].PersonID).Single().HomeAddress as HomeAddress).FamilyName); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The length of the statement  "                    (it) => it.ProductID == orders[0].OrderDetails.First().ProductID && it.OrderID == orders[0].OrderDetails.First().OrderID " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The length of the statement  "                this.TestClientContext.Accounts.Expand("MyGiftCard").Where((it) => it.AccountID == accounts[0].AccountID).Single().MyGiftCard.ExperationDate); " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The length of the statement  "            var people0 = this.TestClientContext.CustomersPlus.Expand(it => it.OrdersPlus).Where((it) => it.PersonIDPlus == people[0].PersonIDPlus).Single(); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The length of the statement  "            var account = this.TestClientContext.AccountsPlus.Expand("MyGiftCard").Where((it) => it.AccountIDPlus == accounts[0].AccountIDPlus).Single(); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The length of the statement  "            var people0 = this.TestClientContext.CustomersPlus.Expand(it => it.OrdersPlus).Where((it) => it.PersonIDPlus == people[0].PersonIDPlus).Single(); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The length of the statement  "            var account = this.TestClientContext.AccountsPlus.Expand("MyGiftCard").Where((it) => it.AccountIDPlus == accounts[0].AccountIDPlus).Single(); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionImportWithCollectionOfPrimitiveParameter,The length of the statement  "            var emails = TestClientContext.ResetBossEmail(new ObservableCollection<string>() { "test1@var1.com"' "test2@var1.com" }).Execute().ToList(); " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionImportWithComplexTypeParameter,The length of the statement  "            var address = TestClientContext.ResetBossAddress(new Address() { City = "London"' PostalCode = "11111"' Street = "2 Microsoft Way" }).GetValue(); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,CompileAndVerify,The length of the statement  "            // verify that the generated assembly contains entity types' complex types' and the entity container specified in the given model " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,CompileAndVerify,The length of the statement  "            foreach (var modelElement in model.SchemaElements.Where(se => se.SchemaElementKind != EdmSchemaElementKind.Function && se.SchemaElementKind != EdmSchemaElementKind.Action)) " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,CompileAndVerify,The length of the statement  "                        Assert.IsNotNull(t.GetProperties().Where(p => p.Name == edmProperty.Name)' "Property not found: " + edmProperty.Name + " in " + entityType.Name); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,CompileAndVerify,The length of the statement  "                        Assert.IsNotNull(t.GetProperties().Where(p => p.Name == edmProperty.Name)' "Property not found: " + edmProperty.Name + " in " + complexTypeType.Name); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,VerifyGeneratedCodeString,The length of the statement  "            // Since test model is delay-loaded when generating $metadata output' the order of entity types/properties could change in test runs' " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,VerifyGeneratedCodeString,The length of the statement  "            Assert.IsTrue(modelPartStartLine > 0 && modelPartStartLine <= modelPartEndLine' "metadata output not found in generated code"); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,VerifyGeneratedCodeString,The length of the statement  "                        actualLines[i].EndsWith(string.Format(@"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Microsoft.OData.Client.Design.T4""' ""{0}"")]"' T4Version)) || " is 160.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,VerifyGeneratedCodeString,The length of the statement  "                        actualLines[i].EndsWith(string.Format(@"<Global.System.CodeDom.Compiler.GeneratedCodeAttribute(""Microsoft.OData.Client.Design.T4""' ""{0}"")>  _"' T4Version))' " is 160.
Long Statement,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ServiceUriGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,GenerateServiceUri,The length of the statement  "                return new Uri("http://" + Environment.MachineName + ":" + ServicePort + "/" + path + DateTimeOffset.Now.Ticks.ToString(CultureInfo.InvariantCulture) + "/"); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/ShipDate"' UriKind.Absolute)); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/ShipTime"' UriKind.Absolute)); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/ShipDate/$value"' UriKind.Absolute)); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The length of the statement  "            var requestMessage2 = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/ShipTime/$value"' UriKind.Absolute)); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders?$filter=ShipDate eq 2014-08-31"' UriKind.Absolute)); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders?$filter=ShipTime eq 12:40:5.05"' UriKind.Absolute)); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithOrderByDate,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders?$OrderBy=ShipDate"' UriKind.Absolute)); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithOrderByTime,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders?$OrderBy=ShipTime"' UriKind.Absolute)); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnDate,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/Microsoft.Test.OData.Services.ODataWCFService.GetShipDate"' UriKind.Absolute)); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionWithDate,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/Microsoft.Test.OData.Services.ODataWCFService.CheckShipDate(date = 2014-08-31)"' UriKind.Absolute)); " is 195.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnTime,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/Microsoft.Test.OData.Services.ODataWCFService.GetShipTime"' UriKind.Absolute)); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionWithTime,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/Microsoft.Test.OData.Services.ODataWCFService.CheckShipTime(time = 12:40:5.5)"' UriKind.Absolute)); " is 194.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryByDateKey,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Calendars(2015-11-11)"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ActionTakeDateAndTimeAsParameter,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri + "Orders(7)/Microsoft.Test.OData.Services.ODataWCFService.ChangeShipTimeAndDate")); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The length of the statement  "            var shipDate = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).Select(o => o.ShipDate).GetValue(); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The length of the statement  "            var shipTime = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).Select(o => o.ShipTime).GetValue(); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The length of the statement  "            var projOrder = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).Select(o => new Order() { ShipDate = o.ShipDate' ShipTime = o.ShipTime }).GetValue(); " is 187.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The length of the statement  "            var date = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).GetShipDate().GetValue(); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The length of the statement  "            TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).ChangeShipTimeAndDate(Date.MaxValue' TimeOfDay.MaxValue).GetValue(); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryEntities,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' "application/json;odata.metadata=full"); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryNavigationProperty,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' "application/json;odata.metadata=full"); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryNavigationProperty,The length of the statement  "            Assert.AreEqual(2' TestClientContext.People.ByKey(new Dictionary<string' object> { { "PersonId"' 1 } }).Products.ToList().Count); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryExpandedEntities,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' "application/json;odata.metadata=full"); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceCreateEntity,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' "application/json;odata.metadata=full"); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceCreateEntity,The length of the statement  "            var personReturned = TestClientContext.People.ByKey(new Dictionary<string' object> { { "PersonId"' person.PersonId } }).GetValue(); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryVCardEntityProperty,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "People(31)/BusinessCard"' UriKind.Absolute)); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,InvokeAvroAction,The length of the statement  "            IEdmOperation action = model.FindDeclaredOperations("Microsoft.Test.OData.Services.PluggableFormat.AddProduct").Single(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,InvokeAvroAction,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products/Microsoft.Test.OData.Services.PluggableFormat.AddProduct"' UriKind.Absolute)); " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,UpdateObject,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader(TestHeader' "EditLink"); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,UpdateObject,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' mimeType); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,UpdateObject,The length of the statement  "                //The EditLink in payload looks like http://potato987654321098' more infomation can be found in Microsoft.Test.OData.Services.ODataWCFService.ResponseWriter.WriteEntry() " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,UpdateObject,The length of the statement  "                          ' String.Format("Exception message is expected to contain 'No such host is known' or 'The remote name could not be resolved'' but actually not. The actual message is '{0}'."' stringOfErrorMessage)); " is 198.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectWhenItIsTransient,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader(TestHeader' "IsTransient"); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectWhenItIsTransient,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' mimeType); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectWhenItIsTransient,The length of the statement  "            Assert.AreEqual(2' person.PersonID' String.Format("Expected PersonID is '2'' but actually it is '{0}'"' person.PersonID)); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectsWhenTheyAreTransient,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader(TestHeader' "IsTransient"); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectsWhenTheyAreTransient,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' mimeType); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectsWhenTheyAreTransient,The length of the statement  "            var entryResults = TestClientContext.Execute<Person>(new Uri(ServiceBaseUri + "/People?$filter=PersonID eq 1")).ToArray(); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,LoadProperty,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader(TestHeader' "ReadLink"); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,LoadProperty,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' mimeType); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,LoadProperty,The length of the statement  "            //The ReadLink in payload looks like http://potato987654321098' more infomation can be found in Microsoft.Test.OData.Services.ODataWCFService.ResponseWriter.WriteEntry() " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,LoadProperty,The length of the statement  "                          ' String.Format("Exception message is expected to contain 'No such host is known' or 'The remote name could not be resolved'' but actually not. The actual message is '{0}'."' stringOfErrorMessage)); " is 198.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,AddDeleteLink,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' mimeType); " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,AddDeleteLink,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader(TestHeader' "EditLink");//this is make sure EditLink is replaced with a random value. " is 228.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,AddDeleteLink,The length of the statement  "            var productDetail = TestClientContext.ProductDetails.Where(o => o.ProductDetailID == 1 && o.ProductID == 6).SingleOrDefault(); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The length of the statement  "            var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) }; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The length of the statement  "                Value = new ODataCollectionValue() { TypeName = "Collection(Edm.Duration)"' Items = new Collection<object> { new TimeSpan(1) } } " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The length of the statement  "            var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) }; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The length of the statement  "                Value = new ODataCollectionValue() { TypeName = "Collection(Edm.Duration)"' Items = new Collection<object> { new TimeSpan(1) } } " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Customers(1)/PersonID"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDollarValue,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "People(1)/Home/$value"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDollarValue,The length of the statement  "                property = messageReader.ReadValue(new EdmStringTypeReference(EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.String)' true)); " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDollarValue,The length of the statement  "            Assert.AreEqual(@"{""type"":""Point""'""coordinates"":[23.1'32.1]'""crs"":{""type"":""name""'""properties"":{""name"":""EPSG:4326""}}}"' property); " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityNavigation,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Customers(1)/Orders"' UriKind.Absolute)); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityNavigationWithImplicitKeys,The length of the statement  "                "ProductDetails(ProductID=5'ProductDetailID=2)/Reviews(ProductDetailID=2'RevisionID=1'ProductID=5'ReviewTitle='So so')"' " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityPropertyValue,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Customers(1)/FirstName/$value"' UriKind.Absolute)); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryCount,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Customers/$count"' UriKind.Absolute)); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryPropertyValueWhichIsNullFromODataClient,The length of the statement  "            TestClientContext.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' "text/plain"); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryPropertyValueWhichIsNullFromODataClient,The length of the statement  "            var middleName = TestClientContext.Execute<string>(new Uri(ServiceBaseUri.AbsoluteUri + "/People(5)/MiddleName/$value")); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders?$expand=OrderDetails"' UriKind.Absolute)); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The length of the statement  "            var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) }; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The length of the statement  "                Value = new ODataCollectionValue() { TypeName = "Collection(Edm.Duration)"' Items = new Collection<object> { new TimeSpan(1) } } " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenEntity,The length of the statement  "                    entry = new QueryEntryHelper(this) { RequestUri = string.Format("People('{0}')"' userNames[i])' MimeType = mimeTypes[i]' IfMatch = "*" }.Execute(); " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenEntity,The length of the statement  "                    Assert.AreEqual("\"NickName\""' (entry.Properties.Single(p => p.Name == "NickName").Value as ODataUntypedValue).RawValue); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenComplexType,The length of the statement  "                                    Assert.AreEqual("" + (100 + i)' (argument.Entry.Properties.Single(p => p.Name == "RoomNumber").Value as ODataUntypedValue).RawValue); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAddTripPinNewPerson,The length of the statement  "            var entry = new QueryEntryHelper(this) { RequestUri = "People('VincentZhao')"' MimeType = mimeType' IfMatch = "*" }.Execute(); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyOnEntityCollectionProperty,The length of the statement  "                    Assert.IsNotNull(entries.SingleOrDefault(e => (string)e.Properties.Single(p => p.Name == "UserName").Value == "russellwhyte")); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyOnEntityCollectionProperty,The length of the statement  "                    Assert.IsNotNull(entries.SingleOrDefault(e => (string)e.Properties.Single(p => p.Name == "UserName").Value == "ronaldmundy")); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAllOnEntityCollectionProperty,The length of the statement  "                    // the result includes empty friends due to the all Lambda operator is translated to Enumerable.All method which returns true for empty collection " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestFunctionGetFriendsTrips,The length of the statement  "                    Assert.AreEqual(new Guid("dd6a09c0-e59b-4745-8612-f4499b676c47")' entries[0].Properties.Single(p => p.Name == "ShareId").Value); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,BasicSearchTest,The length of the statement  "                return entries.Count(entry => entry.Properties.Count(p => p.Name == "IcaoCode" && object.Equals(p.Value' icaoCode)) == 1) == 1; " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,BasicSearchTest,The length of the statement  "                    var entries = new QueryFeedHelper(this) { RequestUri = "Airports?$search=\"United States\""' MimeType = mimeType }.Execute(); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,GroupSearchTest,The length of the statement  "                return entries.Count(entry => entry.Properties.Count(p => p.Name == "UserName" && object.Equals(p.Value' userName)) == 1) == 1; " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,GroupSearchTest,The length of the statement  "                var entries = new QueryFeedHelper(this) { RequestUri = "People?$search=(Male OR Female) AND NOT \"@contoso.com\""' MimeType = MimeTypes.ApplicationJson }.Execute(); " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ExpandSearchTest,The length of the statement  "                var entries = new QueryFeedHelper(this) { RequestUri = "People?$expand=Trips($search=Shanghai OR Beijing)&$search=Male"' MimeType = MimeTypes.ApplicationJson }.Execute(); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,FilterOnDerivedTypeTest,The length of the statement  "            var uri1 = string.Format("People('russellwhyte')/Trips(0)/PlanItems/{0}Flight?$filter=FlightNumber eq 'AA4035'"' NameSpacePrefix); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,FilterOnDerivedTypeTest,The length of the statement  "            var uri2 = string.Format("People('scottketchum')/Trips(2004)/PlanItems?$filter={0}Flight/FlightNumber eq 'MU1930'"' NameSpacePrefix); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfMatchOk,The length of the statement  "            var expectedETag = new QueryEntryHelper(this) { RequestUri = uri' MimeType = MimeTypes.ApplicationJsonLight }.Execute().ETag; " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfNoneMatchOk,The length of the statement  "            var expectedETag = new QueryEntryHelper(this) { RequestUri = uri' MimeType = MimeTypes.ApplicationJsonLight }.Execute().ETag; " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryEntityIfNoneMatchOk,The length of the statement  "            var expectedETag = new QueryEntryHelper(this) { RequestUri = uri' MimeType = MimeTypes.ApplicationJsonLight }.Execute().ETag; " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfMatchOk,The length of the statement  "            var expectedETag = new QueryEntryHelper(this) { RequestUri = uri' MimeType = MimeTypes.ApplicationJsonLight }.Execute().ETag; " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfNoneMatchOk,The length of the statement  "            var expectedETag = new QueryEntryHelper(this) { RequestUri = uri' MimeType = MimeTypes.ApplicationJsonLight }.Execute().ETag; " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SetEtagValueAfterQueryUpdate,The length of the statement  "            // We currently do not allow setting state from Deleted to Modified and LS is fine with the extra step to change State to Unchanged first " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SetEtagValueAfterQueryUpdate,The length of the statement  "            Assert.AreEqual(contextToUpdate.GetEntityDescriptor(person1).ETag' context.GetEntityDescriptor(personToModify).ETag' "ETag not updated by query"); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SetEtagValueAfterQueryUpdate,The length of the statement  "            Assert.AreEqual(contextToUpdate.GetEntityDescriptor(person2).ETag' context.GetEntityDescriptor(personToDelete).ETag' "ETag not updated by query"); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SetEtagValueAfterQueryUpdate,The length of the statement  "            Assert.AreEqual(Microsoft.OData.Client.EntityStates.Deleted' context.GetEntityDescriptor(personToDelete).State' "ChangeState API did not change the entity State form Modified to Deleted"); " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The length of the statement  "                    entries = new QueryFeedHelper(this) { RequestUri = "People('russellwhyte')/Trips(0)/Photos"' MimeType = mimeType }.Execute(); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,DeleteLink_CollectionValuedNavigationProperty,The length of the statement  "            target = friends.SingleOrDefault(friend => object.Equals(friend.Properties.Single(p => p.Name == "UserName").Value' "russellwhyte")); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryEntryHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                var request = new HttpWebRequestMessage(new Uri(this.Host.ServiceBaseUri.AbsoluteUri + this.RequestUri' UriKind.Absolute)); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryFeedHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                                            OnReadFeedEnd(new ReadFeedArgument() { Feed = feed' ParentName = parentNestedResourceInfo.Count() > 0 ? parentNestedResourceInfo.Peek() : null }); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryFeedHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                                            OnReadEntryEnd(new ReadEntryArgument() { Entry = entry' ParentName = parentNestedResourceInfo.Count() > 0 ? parentNestedResourceInfo.Peek() : null }); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryCountHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                var request = new HttpWebRequestMessage(new Uri(this.Host.ServiceBaseUri.AbsoluteUri + this.RequestUri' UriKind.Absolute)); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                using (var messageWriter = new ODataMessageWriter(request' new ODataMessageWriterSettings() { BaseUri = this.Host.ServiceBaseUri })) " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                    var odataWriter = messageWriter.CreateODataResourceWriter(this.Host.Model.EntityContainer.FindEntitySet(this.EntitySetName)' (IEdmEntityType)this.Host.Model.FindDeclaredType(NameSpacePrefix + this.EntitySetName)); " is 213.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                    Assert.IsNotNull(new QueryEntryHelper(this.Host) { RequestUri = this.ValidationUri' MimeType = MimeTypes.ApplicationJson' IfMatch = "*" }.Execute()); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,DeleteHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                var validationHelper = new QueryEntryHelper(this.Host) { RequestUri = this.RequestUri' MimeType = MimeTypes.ApplicationJsonLight' IfMatch = "*"' }; " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                using (var messageWriter = new ODataMessageWriter(request' new ODataMessageWriterSettings() { BaseUri = this.Host.ServiceBaseUri })) " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                    var odataWriter = messageWriter.CreateODataResourceWriter(this.Host.Model.EntityContainer.FindEntitySet(this.EntitySetName)' (IEdmEntityType)this.Host.Model.FindDeclaredType(NameSpacePrefix + this.EntitySetName)); " is 213.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                    Assert.IsNotNull(new QueryEntryHelper(this.Host) { RequestUri = this.RequestUri' MimeType = MimeTypes.ApplicationJsonLight' IfMatch = "*" }.Execute()); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                var request = new HttpWebRequestMessage(new Uri(this.Host.ServiceBaseUri.AbsoluteUri + this.RequestUri' UriKind.Absolute)); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The length of the statement  "                    Assert.IsNotNull(new QueryEntryHelper(this.Host) { RequestUri = this.Host.GetPartialUri(this.ResponseLocation)' MimeType = MimeTypes.ApplicationJson' IfMatch = "*" }.Execute()); " is 177.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,EntityReferenceLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\EntityReferenceLinkTests.cs,ODataEntryWithAnnotationInReferenceLinkShouldWork,The length of the statement  "                    ODataInstanceAnnotation annotation = entries.First().InstanceAnnotations.FirstOrDefault(ia => ia.Name == "Link.AnnotationByEntry"); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,EntityReferenceLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\EntityReferenceLinkTests.cs,ODataEntryWithAnnotationInReferenceLinksShouldWork,The length of the statement  "                    ODataInstanceAnnotation annotation = feed.InstanceAnnotations.SingleOrDefault(ia => ia.Name == "Links.AnnotationByFeed"); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/MyGiftCard"' UriKind.Absolute)); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionBoundedToContainedEntity,The length of the statement  "                "Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.2)"' UriKind.Absolute)); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionWhichReturnsContainedEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/Microsoft.Test.OData.Services.ODataWCFService.GetDefaultPI()"' UriKind.Absolute)); " is 181.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,InvokeActionReturnsContainedEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri + "Accounts(101)/Microsoft.Test.OData.Services.ODataWCFService.RefreshDefaultPI")); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySet,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(103)/MyPaymentInstruments"' UriKind.Absolute)); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QuerySpecificEntityInContainedEntitySet,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(103)/MyPaymentInstruments(103902)"' UriKind.Absolute)); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2ContainedEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)"' UriKind.Absolute)); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2ContainedEntitySet,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"' UriKind.Absolute)); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLeve2NonContainedEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(103)/MyPaymentInstruments(103901)/TheStoredPI"' UriKind.Absolute)); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2Singleton,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/MyPaymentInstruments(101901)/BackupStoredPI"' UriKind.Absolute)); " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityWithDerivedTypeCast,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + string.Format("Accounts(101)/MyPaymentInstruments(101902)/{0}.CreditCardPI"' TestModelNameSpace)' UriKind.Absolute)); " is 201.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySetWithDerivedTypeCast,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + string.Format("Accounts(101)/MyPaymentInstruments/{0}.CreditCardPI"' TestModelNameSpace)' UriKind.Absolute)); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesInDerivedTypeEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + string.Format("Accounts(101)/MyPaymentInstruments(101902)/{0}.CreditCardPI/CreditRecords"' TestModelNameSpace)' UriKind.Absolute)); " is 215.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityContainsContainmentSet,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)"' UriKind.Absolute)); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryIndividualPropertyOfContainedEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/MyPaymentInstruments(101902)/PaymentInstrumentID"' UriKind.Absolute)); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The length of the statement  "                { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }' " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The length of the statement  "                {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}' " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The length of the statement  "            var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) }; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The length of the statement  "            paymentInstrumentEntry.Properties = new[] { paymentInstrumentEntryP1' paymentInstrumentEntryP2' paymentInstrumentEntryP3 }; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The length of the statement  "                var deleteRequestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri + "Accounts(101)/MyPaymentInstruments(101904)")); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The length of the statement  "            var giftCardEntryP3 = new ODataProperty { Name = "ExperationDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 30)) }; " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The length of the statement  "                var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) }; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The length of the statement  "                paymentInstrumentEntry.Properties = new[] { paymentInstrumentEntryP1' paymentInstrumentEntryP2' paymentInstrumentEntryP3 }; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The length of the statement  "                var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) }; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The length of the statement  "                paymentInstrumentEntry.Properties = new[] { paymentInstrumentEntryP1' paymentInstrumentEntryP2' paymentInstrumentEntryP3 }; " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri + "Accounts(101)/MyPaymentInstruments(" + piid + ")")); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySetFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("Accounts(103)/MyPaymentInstruments"' StringComparison.Ordinal)); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QuerySpecificEntityInContainedEntitySetFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("Accounts(103)/MyPaymentInstruments(103902)"' StringComparison.Ordinal)); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryIndividualPropertyOfContainedEntityFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("Accounts(103)/MyPaymentInstruments(103902)/PaymentInstrumentID"' StringComparison.Ordinal)); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q1 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 103901); " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q2 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.CreatedDate > new DateTimeOffset(new DateTime(2013' 10' 1))); " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q3 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").OrderBy(pi => pi.CreatedDate).ThenByDescending(pi => pi.FriendlyName); " is 166.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q4 = TestClientContext.Accounts.Expand(account => account.MyPaymentInstruments).Where(account => account.AccountID == 103); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q5 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Expand(pi => pi.BillingStatements).Where(pi => pi.PaymentInstrumentID == 103901); " is 177.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q9 = TestClientContext.Accounts.Where(a => a.AccountID == 103).Select(a => new Account() { AccountID = a.AccountID' MyGiftCard = a.MyGiftCard }); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The length of the statement  "            var q10 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 103901).Select(p => new PaymentInstrument() " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionBoundToContainedEntityFromODataClient,The length of the statement  "                "Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.2)"' UriKind.Absolute)' "GET"' true).Single(); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionFromODataClientWhichReturnsContainedEntity,The length of the statement  "            result = TestClientContext.Execute<PaymentInstrument>(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/MyPaymentInstruments(101901)"' UriKind.Absolute)' "GET"' true).Single(); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,InvokeActionFromODataClientWhichReturnsContainedEntity,The length of the statement  "            result = TestClientContext.Execute<PaymentInstrument>(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/MyPaymentInstruments(101901)"' UriKind.Absolute)' "GET").Single(); " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The length of the statement  "                var queryable1 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(110)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 110901); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainedEntityFromODataClientUsingUpdateObject,The length of the statement  "            var queryable1 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(101)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 101901); " is 150.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,QueryProperty,The length of the statement  "            var outsideGeoFenceAlarm = (TestClientContext.Trucks.Where(t => t.Key == "Key1")).Select(t => t.OutsideGeoFenceAlarm).Single(); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,QueryProperty,The length of the statement  "            var currentLocation = (TestClientContext.VehicleGPSSet.Where(t => t.Key == "VehicleKey2")).Select(t => t.CurrentLocation).Single(); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,QueryProperty,The length of the statement  "            var displayName = (TestClientContext.DerivedVehicleGPSSet.Where(t => t.Key == "VehicleKey4")).Select(t => t.DisplayName).Single(); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeCast,The length of the statement  "            Assert.IsTrue(test.RequestUri.OriginalString.EndsWith("VehicleGPSSet/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType('VehicleKey6')")); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencingModel,The length of the statement  "            var vehicleGPSSet = Model.FindEntityContainer(TestModelNameSpace + ".GPS.GPSContainer").FindEntitySet("VehicleGPSSetInGPS"); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The length of the statement  "                TypeName = TestModelNameSpace + (postDeleteTypeInReferencingModel ? ".TruckDemo.DerivedVehicleGPSType" : ".GPS.VehicleGPSType") " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,EntryWhosePropertyDefinedInReferencedModel,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Trucks('Key1')"' UriKind.Absolute)); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedTypeDefinedInReferencedModel,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSet"' UriKind.Absolute)); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,EntryTypeDefinedInReferencedModel,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSet('VehicleKey2')"' UriKind.Absolute)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedTypeDerivedFromReferencedModel,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "DerivedVehicleGPSSet"' UriKind.Absolute)); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,TypeCastEntryDerivedFromReferencedModel,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSet('VehicleKey6')/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType"' UriKind.Absolute)); " is 217.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,PropertyDefinedInReferencedModel,The length of the statement  "                new Uri(ServiceBaseUri.AbsoluteUri + "DerivedVehicleGPSSet('VehicleKey4')/Microsoft.OData.SampleService.Models.ModelRefDemo.GPS.VehicleGPSType/StartLocation"' UriKind.Absolute)); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedDefinedInReferencedModel,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSetInGPS"' UriKind.Absolute)); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,TypeCastEntryinCycleReferencingModels,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSetInGPS('DerivedVehicleGPSInGPSKey3')/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType"' UriKind.Absolute)); " is 237.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithSelectOption,The length of the statement  "                { "VehicleGPSSetInGPS('DerivedVehicleGPSInGPSKey3')/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType?$select=DisplayName'Map'StartLocation"' 3 } " is 177.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundActionInReferencedModel,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSet('VehicleKey6')/Microsoft.OData.SampleService.Models.ModelRefDemo.GPS.ResetVehicleSpeed"' UriKind.Absolute)); " is 207.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundActionInReferencedModel,The length of the statement  "            var actual = (this.QueryEntityItem("VehicleGPSSet('VehicleKey6')") as ODataResource).Properties.Single(p => p.Name == "VehicleSpeed").Value; " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundActionForEntryInReferencedModel,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "ResetVehicleSpeedToValue"' UriKind.Absolute)); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundActionForEntryInReferencedModel,The length of the statement  "            var actual = (this.QueryEntityItem("VehicleGPSSetInGPS('VehicleGPSSetInGPSKey2')") as ODataResource).Properties.Single(p => p.Name == "VehicleSpeed").Value; " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundFunctionInReferencedModel,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "VehicleGPSSet('VehicleKey2')/Microsoft.OData.SampleService.Models.ModelRefDemo.GPS.GetVehicleSpeed()"' UriKind.Absolute)); " is 207.
Long Statement,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundFunctionReturnTypeInReferencedModel,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "GetDefaultOutsideGeoFenceAlarm()"' UriKind.Absolute)); " is 139.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeComplexsReturnEntities,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuery<Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomersForAddresses"' true' new UriOperationParameter("addresses"' addresses)); " is 201.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeComplexReturnEntity,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuerySingle<Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerForAddress"' true' new UriOperationParameter("address"' address)); " is 200.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntityTakeCollectionReturnEntities,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuery<Order>("Microsoft.Test.OData.Services.ODataOperationService.GetOrdersFromCustomerByNotes"' true' new UriOperationParameter("notes"' new Collection<string> { "1111"' "2222" })); " is 230.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeStringReturnEntities,The length of the statement  "            var functionQuery = orderQuery.CreateFunctionQuery<Order>("Microsoft.Test.OData.Services.ODataOperationService.GetOrdersByNote"' true' new UriOperationParameter("note"' "1111")); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntitiesReturnEntities,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuery<Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomersByOrders"' true' new UriOperationParameter("orders"' orders)); " is 191.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntityReferenceReturnEntity,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuery<Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerByOrder"' true' new UriEntityOperationParameter("order"' order' true)); " is 199.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntityReturnEntities,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuery<Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerByOrder"' true' new UriOperationParameter("order"' order)); " is 187.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntityReferencesReturnEntities,The length of the statement  "            var functionQuery = customerQuery.CreateFunctionQuery<Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomersByOrders"' true' new UriEntityOperationParameter("orders"' orders' true)); " is 203.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesReturnEntityExpandNavigation,The length of the statement  "            var order = this.TestClientContext.Orders.GetOrderByNote(new string[] { "1111"' "parent" }).Expand(o => o.Customer).GetValue(); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesReturnEntitySelect,The length of the statement  "            var order = this.TestClientContext.Orders.GetOrderByNote(new string[] { "1111"' "parent" }).Select(o => new Order() { ID = o.ID' Notes = o.Notes }).GetValue(); " is 159.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,CollectionNullableFalseInStructrualProperty,The length of the statement  "                    new ODataProperty {Name = "Numbers"' Value = new ODataCollectionValue() {TypeName = "Collection(Edm.String)"' Items = new[] {"222-222-221"' null}}}'  " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,CollectionNullableFalseInStructrualProperty,The length of the statement  "                    new ODataProperty {Name = "Emails"' Value = new ODataCollectionValue() {TypeName = "Collection(Edm.String)"' Items = new string[] {}}} " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,CollectionNullableTrueInStructrualProperty,The length of the statement  "                    new ODataProperty {Name = "Numbers"' Value = new ODataCollectionValue() {TypeName = "Collection(Edm.String)"' Items = new string[] {}}}' " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,CollectionNullableTrueInStructrualProperty,The length of the statement  "                    new ODataProperty {Name = "Emails"' Value = new ODataCollectionValue() {TypeName = "Collection(Edm.String)"' Items = new[] {"a@a.b"' "b@b.b"' null}}} " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,UpdateEntityWithCollectionContainsNull,The length of the statement  "                    ODataCollectionValue testCollection = updatedProduct.Properties.Single(p => p.Name == testProperty).Value as ODataCollectionValue; " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,UpdateEntityWithCollectionContainsNull,The length of the statement  "                    ODataCollectionValue expectValue = personToAdd.Properties.Single(p => p.Name == testProperty).Value as ODataCollectionValue; " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,UpdateEntityWithCollectionContainsNull,The length of the statement  "                        Assert.AreEqual(exception.Message' "A null value was detected in the items of a collection property value; non-nullable instances of collection types do not support null values as items."); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryDerivedComplexTypeProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"People(1)/HomeAddress"' UriKind.Absolute)); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryPropertyUnderDerivedComplexTypeProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"People(1)/HomeAddress/Microsoft.Test.OData.Services.ODataWCFService.HomeAddress/FamilyName"' UriKind.Absolute)); " is 198.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByPropertyUnderDerivedComplexTypeProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"People?$filter=HomeAddress/Microsoft.Test.OData.Services.ODataWCFService.HomeAddress/FamilyName eq 'Cats'"' UriKind.Absolute)); " is 213.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnDerivedComplexType,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"People(1)/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress"' UriKind.Absolute)); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnDerivedComplexType,The length of the statement  "                requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"People(3)/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress"' UriKind.Absolute)); " is 174.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryPropertyUnderDerivedComplexTypeClientTest,The length of the statement  "            var familyName = TestClientContext.People.Where(p => p.PersonID == 1).Select(p => (p.HomeAddress as HomeAddress).FamilyName).Single(); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateDerivedComplexTypeClientTest,The length of the statement  "            var homeAddress = person.HomeAddress as Microsoft.Test.OData.Services.TestServices.ODataWCFServiceReference.HomeAddress; " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateDerivedComplexTypeClientTest,The length of the statement  "            var updatedHomeAddress = updatedPerson.HomeAddress as Microsoft.Test.OData.Services.TestServices.ODataWCFServiceReference.HomeAddress; " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntityWithOpenComplexTypeProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)"' UriKind.Absolute)); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntityWithOpenComplexTypeProperty,The length of the statement  "                        Assert.AreEqual("\"Hood\""' (accountInfo.Properties.Single(p => p.Name == "MiddleName").Value as ODataUntypedValue).RawValue); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryOpenPropertyUnderOpenComplexType,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Accounts(101)/AccountInfo/MiddleName"' UriKind.Absolute)); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByAnOpenProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"Accounts?$filter=AccountInfo/MiddleName eq 'Hood'"' UriKind.Absolute)); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByAnOpenProperty,The length of the statement  "                        Assert.AreEqual("\"Hood\""' (accountInfo.Properties.Single(p => p.Name == "MiddleName").Value as ODataUntypedValue).RawValue); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeProperty,The length of the statement  "                Assert.AreEqual("\"" + middleNames[i] + "\""' (accountInfo.Properties.Single(p => p.Name == "MiddleName").Value as ODataUntypedValue).RawValue); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeProperty,The length of the statement  "                Assert.AreEqual("\"" + middleNames[i + 1] + "\""' (updatedAccountInfo.Properties.Single(p => p.Name == "MiddleName").Value as ODataUntypedValue).RawValue); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypeProperty,The length of the statement  "                Assert.AreEqual("\"#999' ZiXing Road\""' (accountInfo.Properties.Single(p => p.Name == "ShippingAddress").Value as ODataUntypedValue).RawValue); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnOpenComplexType,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"Accounts(101)/Microsoft.Test.OData.Services.ODataWCFService.GetAccountInfo"' UriKind.Absolute)); " is 182.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnOpenComplexType,The length of the statement  "                        Assert.AreEqual("\"Hood\""' (accountInfo.Properties.Single(p => p.Name == "MiddleName").Value as ODataUntypedValue).RawValue); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnOpenComplexType,The length of the statement  "                requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + @"Accounts(103)/Microsoft.Test.OData.Services.ODataWCFService.GetAccountInfo"' UriKind.Absolute)); " is 178.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryOpenComplexTypeClientTest,The length of the statement  "            var middleName = TestClientContext.Accounts.Where(a => a.AccountID == 101).Select(a => a.AccountInfo.MiddleName).Single(); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeClientTest,The length of the statement  "            Assert.AreEqual(Microsoft.Test.OData.Services.TestServices.ODataWCFServiceReference.Color.Blue' updatedAccountInfo.FavoriteColor); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateAndReadOpenComplexTypeWithUndeclaredPropertiesClientTest,The length of the statement  "                        Value = new ODataUntypedValue() { RawValue = "{ \"sender\": \"RSS\"' \"senderImage\": \"https://exchangelabs.live-int.com/connectors/content/images/feed-icon-128px.png?upn=admin%40tenant-EXHR-3837dom.EXTEST.MICROSOFT.COM\"' \"summary\": \"RSS is now connected to your mailbox\"' \"title\": null }" } " is 299.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateAndReadOpenComplexTypeWithUndeclaredPropertiesClientTest,The length of the statement  "                "{\"sender\":\"RSS\"'\"senderImage\":\"https://exchangelabs.live-int.com/connectors/content/images/feed-icon-128px.png?upn=admin%40tenant-EXHR-3837dom.EXTEST.MICROSOFT.COM\"'\"summary\":\"RSS is now connected to your mailbox\"'\"title\":null}"' " is 244.
Long Statement,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,OpenCollectionPropertyRoundTrip,The length of the statement  "            Assert.AreEqual("\"Hood\""' (updatedAccountInfo.Properties.Single(p => p.Name == "MiddleName").Value as ODataUntypedValue).RawValue); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,DetectPayloadKind,The length of the statement  "            responseMessage.Stream = new MemoryStream(Encoding.UTF8.GetBytes(@"<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?> " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,DetectPayloadKind,The length of the statement  "<feed xml:base=""http://localhost:12367/Test/Data.ashx/UnitedNations/Demographic/v1/"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 235.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,DetectPayloadKind,The length of the statement  "            using (var messageReader = new ODataMessageReader(responseMessage as IODataResponseMessage' new ODataMessageReaderSettings())) " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestSingleAnnotation,The length of the statement  "                ((HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Prefer"' "odata.include-annotations=AnnotationOnFeed.AddedBeforeWriteStart.index.0"); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestSingleAnnotation,The length of the statement  "                    Assert.IsTrue(args.Entry.InstanceAnnotations.Count() <= 1' "should find the derived type name in @odata.type or none."); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleCompatiblePreferHeaderParts,The length of the statement  "                ((HttpWebRequestMessage)eventArgs.RequestMessage).PreferHeader().AnnotationFilter = "AnnotationOnFeed.AddedBeforeWriteStart.index.0"; " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleCompatiblePreferHeaderParts,The length of the statement  "                    Assert.IsTrue(args.Entry.InstanceAnnotations.Count() <= 1' "should find the derived type name in @odata.type or none."); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncompatiblePreferHeaders,The length of the statement  "                ((HttpWebRequestMessage)eventArgs.RequestMessage).PreferHeader().AnnotationFilter = "AnnotationOnFeed.AddedBeforeWriteStart.index.0"; " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncludeAnnotationsHeaders,The length of the statement  "                ((HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Prefer"' "odata.include-annotations=-AnnotationOnFeed.AddedBeforeWriteStart.*; odata.include-annotations=*"); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncludeAnnotationsHeaders,The length of the statement  "                    Assert.IsTrue(args.Entry.InstanceAnnotations.Count() <= 1' "should find the derived type name in @odata.type or none."); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncludeAnnotationsHeadersInvertHeaders,The length of the statement  "                ((HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Prefer"' "odata.include-annotations=\"*'-AnnotationOnFeed.AddedBeforeWriteStart.*\""); " is 147.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadFeed,The length of the statement  "            this.Invoke(this.ReadFeedTest' CreateData(this.feedQueries)' CreateData(this.testMimeTypes)' CreateData(false)' CreateData(instanceAnnotationFilters)' new Constraint[0]); " is 170.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadEntry,The length of the statement  "            this.Invoke(this.ReadEntryTest' CreateData(this.entryQueries)' CreateData(this.testMimeTypes)' CreateData(false)' CreateData(instanceAnnotationFilters)' new Constraint[0]); " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadFeedVerifyStateOfReader,The length of the statement  "            this.Invoke(this.ReadFeedTest' CreateData(this.feedQueries)' CreateData(this.testMimeTypes)' CreateData(true)' CreateData(instanceAnnotationFilters)' new Constraint[0]); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadEntryVerifyStateOfReader,The length of the statement  "            this.Invoke(this.ReadEntryTest' CreateData(this.entryQueries)' CreateData(this.testMimeTypes)' CreateData(true)' CreateData(instanceAnnotationFilters)' new Constraint[0]); " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadFeedTest,The length of the statement  "            var actualAnnotatedItems = CustomInstanceAnnotationsReader.ReadFeed(new Uri(this.ServiceUri + uri)' contentType' odataMessageReaderSettings' this.model); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadFeedTest,The length of the statement  "            actualAnnotatedItems.VerifyAnnotatedItems(contentType' HasExpandedNavigationProperties(uri)' verifyAnnotationsOnStart' shouldIncludeAnnotation); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadEntryTest,The length of the statement  "            var actualAnnotatedItems = CustomInstanceAnnotationsReader.ReadEntry(new Uri(this.ServiceUri + uri)' contentType' odataMessageReaderSettings' this.model); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,ReadEntryTest,The length of the statement  "            actualAnnotatedItems.VerifyAnnotatedItems(contentType' HasExpandedNavigationProperties(uri)' verifyAnnotationsOnStart' shouldIncludeAnnotation); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,CustomInstanceAnnotationsResponseTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\CustomInstanceAnnotationsResponseTests.cs,CreateODataMessageReaderSettings,The length of the statement  "            return new ODataMessageReaderSettings { MessageQuotas = new ODataMessageQuotas { MaxReceivedMessageSize = long.MaxValue }' ShouldIncludeAnnotation = shouldIncludeAnnotation }; " is 175.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,DuplicateAnnotationsErrorTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\DuplicateAnnotationsErrorTest.cs,AssertDuplicateAnnotationErrorIsThrown,The length of the statement  "            this.AssertInStreamErrorThrown(uri' contentType' "JsonLightInstanceAnnotationWriter_DuplicateAnnotationNameInCollection"' CustomInstanceAnnotationsGenerator.DuplicateAnnotationName); " is 182.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsWriter,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsWriter.cs,WriteStart,The length of the statement  "                    AnnotationsOnStart = new Collection<ODataInstanceAnnotation>(CustomInstanceAnnotationsGenerator.GetAnnotations("AnnotationOnFeed.AddedBeforeWriteStart.").Concat(CustomInstanceAnnotationsGenerator.GetAnnotationsWithTermInMetadata()).ToList())' " is 242.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsWriter,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsWriter.cs,WriteStart,The length of the statement  "                    AnnotationsOnEnd = new Collection<ODataInstanceAnnotation>(CustomInstanceAnnotationsGenerator.GetAnnotations("AnnotationOnFeed.AddedAfterWriteStart.").ToList())' " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsWriter,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsWriter.cs,WriteStart,The length of the statement  "                AnnotationsOnStart = new Collection<ODataInstanceAnnotation>(CustomInstanceAnnotationsGenerator.GetAnnotations("AnnotationOnEntry.AddedBeforeWriteStart.").ToList())' " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsWriter,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsWriter.cs,WriteStart,The length of the statement  "                AnnotationsOnEnd = new Collection<ODataInstanceAnnotation>(CustomInstanceAnnotationsGenerator.GetAnnotations("AnnotationOnEntry.AddedAfterWriteStart.").Concat(CustomInstanceAnnotationsGenerator.GetAnnotationsWithTermInMetadata()).ToList())' " is 240.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The length of the statement  "                                    var current = new CustomInstanceAnnotationsDescriptor { TypeOfAnnotatedItem = reader.Item.GetType()' Parent = parent' AnnotationsOnStart = instanceAnnotations }; " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The length of the statement  "                                var current = new CustomInstanceAnnotationsDescriptor { TypeOfAnnotatedItem = reader.Item.GetType()' Parent = parent' AnnotationsOnStart = instanceAnnotations }; " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The length of the statement  "            VerifyAnnotatedItems(baselineAnnotatedItems' actualAnnotatedItems' contentType' hasExpandedNavigationProperties' verifyAnnotationsOnStart); " is 139.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The length of the statement  "                Assert.AreEqual(baselineItem.TypeOfAnnotatedItem' actualItem.TypeOfAnnotatedItem' "Type of annotated item does not match at element {0}"' i); " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The length of the statement  "                    var baselineAnnotationsOnStart = baselineItem.GetExpectedAnnotationsOnStart(contentType' hasExpandedNavigationProperties && actualItem.hasNestedResourceInfo).ToList(); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotatedItems,The length of the statement  "                    VerifyAnnotations(baselineAnnotationsOnStart' actualAnnotationsOnStart' "start"' i' actualItem.TypeOfAnnotatedItem.Name); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotations,The length of the statement  "            Assert.AreEqual(baselineAnnotations.Count' actualAnnotations.Count' "Number of annotations read at {0} of element {1} ({2}) does not match"' startOrEnd' indexOfAnnotatedItem' typeOfAnnotatedItem); " is 196.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotations,The length of the statement  "                Assert.AreEqual(baselineAnnotation.Name' actualAnnotation.Name' "Name of annotation does not match (annotation [{0}'{1}])"' indexOfAnnotatedItem' i); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotations,The length of the statement  "                Assert.AreEqual(actualAnnotationValue.GetType().FullName' actualAnnotationValue.GetType().FullName' "Type of annotation does not match (annotation [{0}'{1}])"' indexOfAnnotatedItem' i); " is 185.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyAnnotations,The length of the statement  "                    VerifyPrimitiveValue(baselinePrimitiveValue.Value' ((ODataPrimitiveValue)actualAnnotationValue).Value' indexOfAnnotatedItem' i); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyPrimitiveValue,The length of the statement  "            Assert.AreEqual(baselinePrimitiveValue.GetType().FullName' actualPrimitiveValue.GetType().FullName' "Type of value does not match (annotation [{0}'{1}])"' indexOfAnnotatedItem' indexOfValue); " is 191.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyPrimitiveValue,The length of the statement  "                Assert.AreEqual(baselinePrimitiveValue' actualPrimitiveValue' "Value of annotation does not match (annotation [{0}'{1}])"' indexOfAnnotatedItem' indexOfValue); " is 159.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyPrimitiveValue,The length of the statement  "                Assert.AreEqual(baselineBinaryValue.Length' actualBinaryValue.Length' "Size of binary value does not match (annotation [{0}'{1}])"' indexOfAnnotatedItem' indexOfValue); " is 168.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,VerifyPrimitiveValue,The length of the statement  "                    Assert.AreEqual(baselineBinaryValue[i]' actualBinaryValue[i]' "Byte {0} of binary value does not match (annotation [{0}'{1}])"' indexOfAnnotatedItem' indexOfValue); " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,IsTopLevelEntryOrEntryOfTopLevelFeed,The length of the statement  "                Assert.IsTrue(annotatedItem.Parent.TypeOfAnnotatedItem == typeof(ODataResourceSet)' "Found an entry whose parent is not a feed! Revisit assumptions of top level feed."); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsVerifier,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsVerifier.cs,ApplyFilter,The length of the statement  "                // The preference-applied header should be set to *' so we expect the reader to materialize all annotations even if no filter is set " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Containment,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "$delta?$token=containment"' UriKind.Absolute)); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Derived,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "$delta?$token=derived"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Expanded,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "$delta?$token=expanded"' UriKind.Absolute)); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Projection,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "$delta?$token=projection"' UriKind.Absolute)); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,UpdateUsingAtomShouldBeFailedClientTest,The length of the statement  "            var homeAddress = person.HomeAddress as Microsoft.Test.OData.Services.TestServices.ODataWCFServiceReference.HomeAddress; " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,UpdateUsingAtomShouldBeFailedClientTest,The length of the statement  "                Assert.IsTrue(message.StartsWith("A supported MIME type could not be found that matches the content type of the response.")); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,InsertUsingAtomShouldBeFailedClientTest,The length of the statement  "                Assert.IsTrue(message.StartsWith("A supported MIME type could not be found that matches the content type of the response.")); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products(5)/SkinColor"' UriKind.Absolute)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumPropertyValue,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products(5)/SkinColor/$value"' UriKind.Absolute)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,InvokeActionWithEnumParameterAndReturnType,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri + "Products(5)/Microsoft.Test.OData.Services.ODataWCFService.AddAccessRight")); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,CallUnboundFunctionWhichReturnsEnumValue,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "GetDefaultColor()"' UriKind.Absolute)); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products?$filter=UserAccess has Microsoft.Test.OData.Services.ODataWCFService.AccessLevel'Read'"' UriKind.Absolute)); " is 202.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products?$orderby=SkinColor"' UriKind.Absolute)); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesSelectEnumProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products?$select=SkinColor'UserAccess"' UriKind.Absolute)); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumPropertyFromODataClient,The length of the statement  "                var userAccess = TestClientContext.Execute<AccessLevel>(new Uri(ServiceBaseUri.AbsoluteUri + "/Products(8)/UserAccess")); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumCollectionPropertyFromODataClient,The length of the statement  "                var resultTmp = TestClientContext.Execute<List<Color>>(new Uri(ServiceBaseUri.AbsoluteUri + "/Products(5)/CoverColors")); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithQueryOptionsFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("/Products?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red'"' StringComparison.Ordinal)); " is 177.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithQueryOptionsFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("/Products?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red'&$select=SkinColor'ProductID'Name"' StringComparison.Ordinal)); " is 210.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithQueryOptionsFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("/Products?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red'"' StringComparison.Ordinal)); " is 177.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            var queryable = TestClientContext.Products.Where(p => p.SkinColor == Color.Red).Where(p => AccessLevel.Read < p.UserAccess) as OClient.DataServiceQuery<Product>; " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "                "/Products?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red' and Microsoft.Test.OData.Services.ODataWCFService.AccessLevel'Read' lt UserAccess" " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            Assert.AreEqual(products.Where(p => p.SkinColor == Color.Red && p.UserAccess > AccessLevel.Read).Count()' result.Count); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            queryable = TestClientContext.Products.Where(p => AccessLevel.Read == (AccessLevel)p.UserAccess) as OClient.DataServiceQuery<Product>; " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            queryable = TestClientContext.Products.Where(p => p.SkinColor.Value.HasFlag(Color.Red) || AccessLevel.Read.HasFlag(p.UserAccess.Value)) as OClient.DataServiceQuery<Product>; " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "                "/Products?$filter=SkinColor has Microsoft.Test.OData.Services.ODataWCFService.Color'Red' or Microsoft.Test.OData.Services.ODataWCFService.AccessLevel'Read' has UserAccess" " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            Assert.IsTrue(result.All(s => s.SkinColor.Value.HasFlag(Color.Red) || s.UserAccess.Value == AccessLevel.Read || s.UserAccess.Value == AccessLevel.None)); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            Assert.AreEqual(products.Where(p => p.SkinColor.Value.HasFlag(Color.Red) || AccessLevel.Read.HasFlag(p.UserAccess)).Count()' result.Count); " is 139.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            queryable = TestClientContext.Products.Where(p => p.CoverColors.Any(c => c == Color.Blue)).Where(p => p.CoverColors.Any(c => c.HasFlag(Color.Blue))) as OClient.DataServiceQuery<Product>; " is 186.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "                "/Products?$filter=CoverColors/any(c:c eq Microsoft.Test.OData.Services.ODataWCFService.Color'Blue') and CoverColors/any(c:c has Microsoft.Test.OData.Services.ODataWCFService.Color'Blue')" " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "            queryable = TestClientContext.Products.Where(p => p.CoverColors.All(c => c == Color.Blue)).Where(p => p.CoverColors.All(c => c.HasFlag(Color.Blue))) as OClient.DataServiceQuery<Product>; " is 186.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithFilterFromODataClient,The length of the statement  "                "/Products?$filter=CoverColors/all(c:c eq Microsoft.Test.OData.Services.ODataWCFService.Color'Blue') and CoverColors/all(c:c has Microsoft.Test.OData.Services.ODataWCFService.Color'Blue')" " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithOrderByFromODataClient,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("/Products?$orderby=UserAccess desc"' StringComparison.Ordinal)); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithSelectFromODataClient,The length of the statement  "            var queryable = TestClientContext.Products.Where(p => p.ProductID == 5).Select(p => p.UserAccess) as OClient.DataServiceQuery<AccessLevel?>; " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithSelectFromODataClient,The length of the statement  "                .Select(p => new Product { UserAccess = p.UserAccess' CoverColors = p.CoverColors' SkinColor = p.SkinColor' ProductID = p.ProductID }) " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithSelectFromODataClient,The length of the statement  "            Assert.IsTrue(queryable2.RequestUri.OriginalString.EndsWith("/Products?$select=UserAccess'CoverColors'SkinColor'ProductID"' StringComparison.Ordinal)); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The length of the statement  "            var people1 = new DataServiceCollection<CustomerPlus>(this.TestClientContext.CustomersPlus.Where(p => p.PersonIDPlus == 10001)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The length of the statement  "            var customer = this.TestClientContext.CustomersPlus.Expand(c => c.OrdersPlus).Where(p => p.PersonIDPlus == 10001).FirstOrDefault(); " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The length of the statement  "            var account1 = this.TestClientContext.AccountsPlus.Expand(a => a.MyPaymentInstrumentsPlus).Expand(a => a.MyGiftCardPlus).Where(a => a.AccountIDPlus == 110).Single(); " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The length of the statement  "            DataServiceCollection<CompanyPlus> publicCompany = new DataServiceCollection<CompanyPlus>(this.TestClientContext.PublicCompanyPlus); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The length of the statement  "            var pc = this.TestClientContext.PublicCompanyPlus.Expand(p => (p as PublicCompanyPlus).AssetsPlus).GetValue() as PublicCompanyPlus; " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The length of the statement  "            DataServiceCollection<CompanyPlus> company = new DataServiceCollection<CompanyPlus>(this.TestClientContext.CompanyPlus); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The length of the statement  "            var batchFlags = new SaveChangesOptions[] { SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.BatchWithIndependentOperations }; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The length of the statement  "            var people1 = new DataServiceCollection<CustomerPlus>(this.TestClientContext.CustomersPlus.Where(p => p.PersonIDPlus == 10001)); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The length of the statement  "            var batchFlags = new SaveChangesOptions[] { SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.BatchWithIndependentOperations }; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The length of the statement  "                entries = this.TestsHelper.QueryEntries("Products(5)?$expand=Details($search=(spicy OR suger) AND NOT \"0\" )"' mimeType); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The length of the statement  "                List<ODataResource> entries = this.TestsHelper.QueryEntries("Products(5)?$expand=Details($orderby=Description;$skip=2;$top=1;$select=Description)"' mimeType); " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The length of the statement  "                entries = this.TestsHelper.QueryEntries("Products(5)?$expand=Details($expand=Reviews($filter=contains(Comment''good');$select=Comment))"' mimeType); " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The length of the statement  "                entries = this.TestsHelper.QueryEntries("Products(5)?$expand=Details($expand=Reviews($filter=contains(Comment' 'good'));$search=snack \"Cheese-flavored\")"' mimeType); " is 167.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchTest,The length of the statement  "                List<ODataResource> details = this.TestsHelper.QueryFeed("ProductDetails?$search=(drink OR snack) AND (suger OR sweet) AND NOT \"0\""' mimeType); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchCombinedWithQueryOptionTest,The length of the statement  "                List<ODataResource> details = this.TestsHelper.QueryFeed("ProductDetails?$filter=contains(Description''drink')&$search=suger OR spicy NOT \"0\"&$select=Description"' mimeType); " is 176.
Long Statement,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchCombinedWithQueryOptionTest,The length of the statement  "                List<ODataResource> entries = this.TestsHelper.QueryFeed("ProductDetails?$search=suger OR sweet&$orderby=ProductName&$expand=Reviews"' mimeType); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,GetSingleEntity,The length of the statement  "            var query = contextWrapper.CreateQuery<Person>("Person").Where(p => p.PersonId == IdOfPerson) as DataServiceQuery<Person>; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,MultipleNavigationAndOfTypeInQuery,The length of the statement  "                where photo.PhotoId == IdOfPhotoFromDiscontinuedProductWithRelatedDiscontinuedProductsWithPhotos[0] && photo.ProductId == IdOfPhotoFromDiscontinuedProductWithRelatedDiscontinuedProductsWithPhotos[1] " is 198.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,ContextReferencesTest,The length of the statement  "            var personMetadata = contextWrapper.Context.PersonMetadata.Where(m => m.Person.PersonId == IdOfPerson).FirstOrDefault(); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,ContextReferencesTest,The length of the statement  "            var entityFromQueryWithOfType = contextWrapper.Context.Person.OfType<Employee>().Where(p => p.PersonId == IdOfPerson).SingleOrDefault(); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DefaultUrlConventionsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DefaultUrlConventionsTests.cs,ClientWithKeyAsSegmentSendsRequestsToServerWithoutKeyAsSegment,The length of the statement  "                StringResourceUtil.VerifyDataServicesString(ClientExceptionUtil.ExtractServerErrorMessage(ex)' "RequestUriProcessor_CannotQueryCollections"' "Orders"); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,ClientExecuteEntitySetDerivedType,The length of the statement  "            var discontinuedProductQuery = contextWrapper.Execute<DiscontinuedProduct>(new Uri(this.ServiceUri + "/Product/$/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct")).ToArray(); " is 198.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,ClientExecuteEntitySetDerivedTypeDollarSegmentAtEnd,The length of the statement  "            var discontinuedProductQuery = contextWrapper.Execute<DiscontinuedProduct>(new Uri(this.ServiceUri + "/Product/$/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct/$")).ToArray(); " is 200.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,ClientExecuteProjectPropertyDefinedOnDerivedType,The length of the statement  "            var discontinuedProductDatesQuery = contextWrapper.Execute<DiscontinuedProduct>(new Uri(this.ServiceUri + "/Product/$/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct?$select=Discontinued")).ToArray(); " is 224.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,ClientExecuteProjectPropertyDefinedOnDerivedTypeMultipleDollarSegments,The length of the statement  "            var discontinuedProductDatesQuery = contextWrapper.Execute<DiscontinuedProduct>(new Uri(this.ServiceUri + "/Product/$/$/$/Microsoft.Test.OData.Services.AstoriaDefaultService.DiscontinuedProduct?$select=Discontinued")).ToArray(); " is 228.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeFeedBoundActionDefinedOnDerivedType,The length of the statement  "                new Uri(this.ServiceUri + "/Person/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/$/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'  " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeEntryBoundActionDefinedOnDerivedType,The length of the statement  "                new Uri(this.ServiceUri + "/Person/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/-10/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Sack")'  " is 163.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeActionDefinedOnDerivedTypeMultipleDollarSegments,The length of the statement  "                new Uri(this.ServiceUri + "/Person/$/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/$/$/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'  " is 175.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeActionDefinedOnDerivedTypeDollarSegmentAtUriEnd,The length of the statement  "                new Uri(this.ServiceUri + "/Person/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/$/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries/$")'  " is 173.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,LiteralFormatTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\LiteralFormatTests.cs,PrimaryKeyValueBeginsWithDollarSign,The length of the statement  "            var dollarSignKeyValues = new[] { "$var1"' "$$"' "$$$"' "$$$$"' "$"' "$orderby"' "$filter"' "$format"' "$top"' "$count"' "$expand"' "$select" }; " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,LiteralFormatTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\LiteralFormatTests.cs,PrimaryKeyValueBeginsWithDollarSign,The length of the statement  "                Assert.IsTrue(newLogin == loginQuery.Single()' "Query result does not equal newly added login with key " + dollarSignKeyValue); " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,LiteralFormatTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\LiteralFormatTests.cs,PrimaryKeyValueBeginsWithDollarSign,The length of the statement  "                var customerQuery = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri + "/Login/$" + dollarSignKeyValue + "/Customer")).ToArray(); " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,LiteralFormatTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\LiteralFormatTests.cs,PrimaryKeyValueContainsWhitespace,The length of the statement  "                var customerQuery = contextWrapper.Execute<Customer>(new Uri(this.ServiceUri + "/Login/" + keyValue + "/Customer")).ToArray(); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,BooleanTest,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value '{0}'"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,DateTimeOffsetTest,The length of the statement  "                var queryResult = contextWrapper.CreateQuery<EdmDateTimeOffset>("EdmDateTimeOffsetSet").Where(e => e.Id.Equals(entry.Id)).ToArray(); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,DecimalTest,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value {0}"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,DoubleTest,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value {0}"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,Int16Test,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value {0}"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,Int32Test,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value {0}"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,Int64Test,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value {0}"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,PrimitiveKeysValuesTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\PrimitiveKeyValuesTests.cs,SingleTest,The length of the statement  "                Assert.AreEqual(1' queryResult.Count()' "Expected a single result for key value {0}"' entry.Id.ToString(CultureInfo.InvariantCulture)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,StreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\StreamTests.cs,SetSaveStreamOnNamedStreamProperty,The length of the statement  "            contextWrapper.SetSaveStream(firstCar' "Video"' memoryStream' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,UpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\UpdateTests.cs,AttachUpdateObjectSave,The length of the statement  "            var retrievedBonus = contextWrapper.Context.Person.OfType<SpecialEmployee>().Where(p => p.PersonId == specialEmployee.PersonId).Select(p => p.Bonus); " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityProperty,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Customers(1)/TimeBetweenLastTwoOrders"' UriKind.Absolute)); " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityNavigation,The length of the statement  "                var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Orders(7)/CustomerForOrder"' UriKind.Absolute)); " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityPropertyValue,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Customers(1)/TimeBetweenLastTwoOrders/$value"' UriKind.Absolute)); " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The length of the statement  "            Assert.IsTrue(queryable.RequestUri.OriginalString.EndsWith("/Orders?$filter=ShelfLife eq duration'" + XmlConvert.ToString(timespan) + "'"' StringComparison.Ordinal)); " is 166.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The length of the statement  "            var queryable4 = TestClientContext.Execute<Order>(new Uri("Orders()?$filter=ShelfLife eq duration'" + XmlConvert.ToString(timespan) + "'"' UriKind.Relative)); " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client.OpenTypesTests,OpenPropertyRoundtripTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OpenTypesTests\OpenPropertyRoundtripTests.cs,AssertAreEqual,The length of the statement  "                Assert.AreEqual(expected.OpenComplex.LastContacted' actual.OpenComplex.LastContacted' "Row OpenComplex.LastContacted values don't match"); " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.OpenTypesTests,OpenPropertyRoundtripTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OpenTypesTests\OpenPropertyRoundtripTests.cs,AssertAreEqual,The length of the statement  "                Assert.AreEqual(expected.OpenComplex.Contacted' actual.OpenComplex.Contacted' "Row OpenComplex.Contacted values don't match"); " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.OpenTypesTests,OpenPropertyRoundtripTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OpenTypesTests\OpenPropertyRoundtripTests.cs,AssertAreEqual,The length of the statement  "                Assert.AreEqual(expected.OpenComplex.PreferedContactTime' actual.OpenComplex.PreferedContactTime' "Row OpenComplex.PreferedContactTime values don't match"); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.OpenTypesTests,OpenPropertyRoundtripTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OpenTypesTests\OpenPropertyRoundtripTests.cs,AssertAreEqual,The length of the statement  "                Assert.AreEqual(expected.OpenComplex.SignedByte' actual.OpenComplex.SignedByte' "Row OpenComplex.SignedByte values don't match"); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,LoadPropertyTestAsync,The length of the statement  "                context.SendingRequest2 += (sender' eventArgs) => ((Microsoft.OData.Client.HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Accept"' mimeType); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,LoadPropertyTestAsync,The length of the statement  "                var ar1 = context.BeginExecute<SpecialEmployee>(new Uri("Person(-10)"' UriKind.Relative)' null' null).EnqueueWait(this); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectTestAsync,The length of the statement  "                CreateData(SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.ContinueOnError' SaveChangesOptions.ReplaceOnUpdate)' " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,UpdateObjectTestAsync,The length of the statement  "                CreateData(SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.ContinueOnError' SaveChangesOptions.ReplaceOnUpdate)' " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,ResolveTypeFromTypeName,The length of the statement  "            if (typeName.StartsWith("Microsoft.Test.OData.Services.AstoriaDefaultService"' global::System.StringComparison.Ordinal)) " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,ResolveTypeFromTypeName,The length of the statement  "                return this.GetType().Assembly.GetType(string.Concat("Microsoft.Test.OData.Services.TestServices.AstoriaDefaultServiceReferenceModified" + " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,ExpandQueryTest,The length of the statement  "                    Customer customer = contextWrapper.Execute<Customer>(new Uri("Customer(-10)?$expand=Orders"' UriKind.Relative)).Single(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,ExpandQueryTest,The length of the statement  "                    Customer customer2 = contextWrapper.Execute<Customer>(new Uri("Customer(-10)?$expand=Orders&$select=Orders"' UriKind.Relative)).Single(); " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectTest,The length of the statement  "                CreateData(SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.ContinueOnError' SaveChangesOptions.ReplaceOnUpdate)' " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,UpdateObjectTest,The length of the statement  "                CreateData(SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.ContinueOnError' SaveChangesOptions.ReplaceOnUpdate)' " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The length of the statement  "            // when DataServiceResponsePreference.IncludeContent is not set' property modified in OnEntryEnding will not be updated in client " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The length of the statement  "            // when DataServiceResponsePreference.IncludeContent is not set' property modified in OnEntryEnding will not be updated in client " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,ErrorResponseTest,The length of the statement  "            this.Throws<Exception>(() => contextWrapper.Execute<Customer>(new Uri("InStreamErrorGetCustomer"' UriKind.Relative)).ToArray()); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTestsHelper.cs,VerifyModfiedCustomerEntry,The length of the statement  "                    Assert.IsTrue(linkInfo.NavigationLink.AbsoluteUri.StartsWith("http://myeditlink/ModifyEntryEditLink")' "Wrong navigation link"); " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTestsHelper.cs,VerifyModfiedCustomerEntry,The length of the statement  "                    Assert.AreEqual("http://modifyassociationlinkurl/"' linkInfo.AssociationLink.AbsoluteUri' "AssociationLink not updated"); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,LongInFilterLinqQuery,The length of the statement  "            int64QueryResult = (from c in contextWrapper.Context.EdmInt64Set where c.Id >= int64Id select c) as DataServiceQuery<EdmInt64>; " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,FloatInFilterLinqQuery,The length of the statement  "            floatQueryResult = (from c in contextWrapper.Context.EdmSingleSet where c.Id >= floatId select c) as DataServiceQuery<EdmSingle>; " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,DoubleInFilterLinqQuery,The length of the statement  "            doubleQueryResult = (from c in contextWrapper.Context.EdmDoubleSet where c.Id >= doubleId select c) as DataServiceQuery<EdmDouble>; " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,DecimalInFilterLinqQuery,The length of the statement  "            decimalQueryResult = (from c in contextWrapper.Context.EdmDecimalSet where c.Id >= deciamlId select c) as DataServiceQuery<EdmDecimal>; " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueAsKeyInURL,The length of the statement  "                var requestMessage = new Microsoft.Test.OData.Tests.Client.Common.HttpWebRequestMessage(new Uri(this.ServiceUri.AbsoluteUri + keySegment' UriKind.Absolute)); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueAsKeyInURL,The length of the statement  "                                Assert.IsTrue(entry.Id.ToString().Contains(expectedKeySegment)' "Expected : Entry's Id doesn't contain trailing when Key is Int64/float/double/decimal"); " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueAsKeyInURL,The length of the statement  "                                    Assert.IsTrue(entry.EditLink.ToString().Contains(expectedKeySegment)' "Expected : Entry's EditLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueAsKeyInURL,The length of the statement  "                                    Assert.IsTrue(entry.ReadLink.ToString().Contains(expectedKeySegment)' "Expected : Entry's ReadLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The length of the statement  "                var requestMessage = new Microsoft.Test.OData.Tests.Client.Common.HttpWebRequestMessage(new Uri(this.ServiceUri.AbsoluteUri + filterQuery' UriKind.Absolute)); " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The length of the statement  "                                Assert.IsTrue(rgx.Match(entry.Id.ToString()).Success' "Expected : Entry's Id doesn't contain trailing when Key is Int64/float/double/decimal"); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The length of the statement  "                                    Assert.IsTrue(rgx.Match(entry.EditLink.ToString()).Success' "Expected : Entry's EditLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The length of the statement  "                                    Assert.IsTrue(rgx.Match(entry.ReadLink.ToString()).Success' "Expected : Entry's ReadLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The length of the statement  "                                var pattern = filterQuery.Substring(0' filterQuery.IndexOf("?")) + @"\?\$filter=Id\sge\s" + dataPattern + @"(L|F|D|M)?&\$skiptoken=\d+$"; " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The length of the statement  "                                Assert.IsTrue(rgx.Match(feed.NextPageLink.ToString()).Success' "Expected : Feed's NextLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInSkipTokenInURL,The length of the statement  "                var requestMessage = new Microsoft.Test.OData.Tests.Client.Common.HttpWebRequestMessage(new Uri(this.ServiceUri.AbsoluteUri + skipTokenQuery' UriKind.Absolute)); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInSkipTokenInURL,The length of the statement  "                                Assert.IsTrue(rgx.Match(entry.Id.ToString()).Success' "Expected : Entry's Id doesn't contain trailing when Key is Int64/float/double/decimal"); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInSkipTokenInURL,The length of the statement  "                                    Assert.IsTrue(rgx.Match(entry.EditLink.ToString()).Success' "Expected : Entry's EditLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInSkipTokenInURL,The length of the statement  "                                    Assert.IsTrue(rgx.Match(entry.ReadLink.ToString()).Success' "Expected : Entry's ReadLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInSkipTokenInURL,The length of the statement  "                                Assert.IsTrue(rgx.Match(feed.NextPageLink.ToString()).Success' "Expected : Feed's NextLink doesn't contain trailing when Key is Int64/float/double/decimal"); " is 157.
Long Statement,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidCUDReflectionEntity,The length of the statement  "            var binaryTestData = new byte[] { 0x00' 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0a' 0x0b' 0x0c' 0x0d' 0x0e' 0x0f }; " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidCUDReflectionEntity,The length of the statement  "            context.SetSaveStream(car' "Video"' memoryStream' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidCUDReflectionEntity,The length of the statement  "            context.SetSaveStream(car' "Photo"' memoryStream2' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidCUDReflectionEntity,The length of the statement  "            var binaryTestData = new byte[] { 0x00' 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0a' 0x0b' 0x0c' 0x0d' 0x0e' 0x0f }; " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidCUDReflectionEntity,The length of the statement  "            context.SetSaveStream(car' "Video"' memoryStream' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidCUDReflectionEntity,The length of the statement  "            context.SetSaveStream(car' "Photo"' memoryStream2' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.RegressionTests,ODataLibRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\RegressionTests\ODataLibRegressionTests.cs,WriterShouldNotIncludeTypeNameForCollectionOfDerivedType,The length of the statement  "            entityType.AddProperty(new EdmStructuralProperty(entityType' "Geographies"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' false))))); " is 205.
Long Statement,Microsoft.Test.OData.Tests.Client.RegressionTests,ODataLibRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\RegressionTests\ODataLibRegressionTests.cs,WriterShouldNotIncludeTypeNameForCollectionOfDerivedType,The length of the statement  "            using (ODataMessageWriter odataMessageWriter = new ODataMessageWriter((IODataRequestMessage)message' writerSettings' model)) " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.RegressionTests,ODataLibRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\RegressionTests\ODataLibRegressionTests.cs,WriterShouldNotIncludeTypeNameForCollectionOfDerivedType,The length of the statement  "            Assert.IsFalse(output.Contains("Collection(Edm.GeographyPoint)")' @"output.Contains(""Collection(Edm.GeographyPoint)"" == false"); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                company = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Address = c.Address' Name = c.Name }).GetValue(); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                company = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Departments = c.Departments }).GetValue(); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                company = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' CoreDepartment = c.CoreDepartment }).GetValue(); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                department = TestClientContext.Departments.Expand(d => d.Company).Where(d => d.DepartmentID == tmpDepartmentID).Single(); " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                company = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Departments = c.Departments }).GetValue(); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                company = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' VipCustomer = c.VipCustomer }).GetValue(); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,SingletonClientTest,The length of the statement  "                company = TestClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' VipCustomer = c.VipCustomer }).GetValue(); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,DerivedTypeSingletonClientTest,The length of the statement  "                new PublicCompany { CompanyID = c.CompanyID' Name = c.Name' StockExchange = (c as PublicCompany).StockExchange }).GetValue(); " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,DerivedTypeSingletonClientTest,The length of the statement  "            publicCompany = TestClientContext.PublicCompany.Select(c => new PublicCompany { CompanyID = c.CompanyID' Club = (c as PublicCompany).Club }).GetValue(); " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,DerivedTypeSingletonClientTest,The length of the statement  "            publicCompany = TestClientContext.PublicCompany.Select(c => new PublicCompany { CompanyID = c.CompanyID' LabourUnion = (c as PublicCompany).LabourUnion }).GetValue(); " is 166.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeFunctionBoundedToSingleton,The length of the statement  "            var employeeCount = TestClientContext.Execute<int>(new Uri(ServiceBaseUri.AbsoluteUri + "Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()"' UriKind.Absolute)).Single(); " is 193.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeFunctionBoundedToSingleton,The length of the statement  "            OperationDescriptor descriptor = TestClientContext.GetEntityDescriptor(company).OperationDescriptors.Single(e => e.Title == "Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount"); " is 191.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The length of the statement  "            var newValue = TestClientContext.Execute<Int64>(new Uri(ServiceBaseUri.AbsoluteUri + "Company/Microsoft.Test.OData.Services.ODataWCFService.IncreaseRevenue")' "POST"' true' new BodyOperationParameter("IncreaseValue"' 20000)); " is 225.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The length of the statement  "            OperationDescriptor descriptor = TestClientContext.GetEntityDescriptor(company).OperationDescriptors.Single(e => e.Title == "Microsoft.Test.OData.Services.ODataWCFService.IncreaseRevenue"); " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The length of the statement  "            newValue = TestClientContext.Execute<Int64>(descriptor.Target' "POST"' new BodyOperationParameter("IncreaseValue"' 40000)); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryDerivedSingletonWithTypeCast,The length of the statement  "                ODataResource entry = this.QueryEntry("Boss/Microsoft.Test.OData.Services.ODataWCFService.Customer"' mimeType' "Customer"); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryDerivedSingletonWithTypeCastAndSelect,The length of the statement  "                var customer = this.QueryEntry("Boss/Microsoft.Test.OData.Services.ODataWCFService.Customer?$select=City"' mimeType' "Customer"); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithMiscQueryOptions,The length of the statement  "                List<ODataResource> resources = this.QueryEntries("VipCustomer?$select=FirstName'HomeAddress&$expand=Orders"' mimeType); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryDerivedSingletonPropertyWithTypeCast,The length of the statement  "                ODataProperty property = this.QueryProperty("Boss/Microsoft.Test.OData.Services.ODataWCFService.Customer/City"' mimeType); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The length of the statement  "                    Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeFunctionBoundedToSingleton,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()"' UriKind.Absolute)); " is 180.
Long Statement,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeActionBoundedToSingleton,The length of the statement  "                    var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Company/Microsoft.Test.OData.Services.ODataWCFService.IncreaseRevenue"' UriKind.Absolute)); " is 176.
Long Statement,Microsoft.Test.OData.Tests.Client.TransportLayerTests,RequestMessageArgsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\RequestMessageArgsTests.cs,ChangeMergeToPatch,The length of the statement  "                        var newArgs = new DataServiceClientRequestMessageArgs("PATCH"' args.RequestUri' true' args.UsePostTunneling' args.Headers); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.TransportLayerTests,RequestMessageArgsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\RequestMessageArgsTests.cs,HttpMergeIsNoLongerSupported,The length of the statement  "                        var newArgs = new DataServiceClientRequestMessageArgs("MERGE"' args.RequestUri' true' args.UsePostTunneling' args.Headers); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.TransportLayerTests,TransportLayerErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\TransportLayerErrorTests.cs,CreateDefaultContext,The length of the statement  "            wrappedContext.ReceivingResponse += (sender' args) => { this.lastResponseStatusCode = args.ResponseMessage.StatusCode; }; " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientRequestMessage,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientRequestMessage.cs,GetHeader,The length of the statement  "            return this.requestMessage.Headers.Contains(headerName) ? string.Join("'"' this.requestMessage.Headers.GetValues(headerName)) : string.Empty; " is 141.
Long Statement,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientRequestMessage,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientRequestMessage.cs,ConvertHttpClientResponse,The length of the statement  "            var allHeaders = HttpHeadersToStringDictionary(response.Headers).Concat(HttpHeadersToStringDictionary(response.Content.Headers)); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryPropertyValueWithTypeDefinition,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "People(1)/LastName/$value"' UriKind.Absolute)); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,InvokeFunctionWithDefinedTypeParameterAndReturnType,The length of the statement  "                var fullName = this.QueryProperty("People(1)/microsoft.odata.sampleService.models.typedefinition.GetFullName(nickname='Moon')"' mimeType); " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryPropertyValueOfUintMembers,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri.AbsoluteUri + "Products(11)/Quantity/$value"' UriKind.Absolute)); " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,InvokeActionWithUintParameterAndReturnType,The length of the statement  "            var requestMessage = new HttpWebRequestMessage(new Uri(ServiceBaseUri + "Products(11)/microsoft.odata.sampleService.models.typedefinition.ExtendLifeTime")); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndFilterByUnsignedIntegerProperties,The length of the statement  "                entries = this.QueryFeed("Products?$filter=18446744073709551615 eq LifeTimeInSeconds"' mimeType' "Product"); //UInt64.Max " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,GetModel,The length of the statement  "            edmEntityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "MyDog"' TargetMultiplicity = EdmMultiplicity.ZeroOrOne' Target = edmEntityType }); " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,GetModel,The length of the statement  "            edmEntityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "MyCat"' TargetMultiplicity = EdmMultiplicity.ZeroOrOne' Target = edmEntityType }); " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            Uri fullUri = new Uri("http://www.example.com/People?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID&$expand=MyDog%2CMyCat/$ref&$orderby=ID&$top=1&$skip=2&$count=true&$search=FA"); " is 184.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            IEnumerable<ExpandedNavigationSelectItem> expandedNavigationSelectItem = selectItems.Where(I => I.GetType() == typeof(ExpandedNavigationSelectItem)).OfType<ExpandedNavigationSelectItem>(); " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            IEnumerable<ExpandedReferenceSelectItem> expandedReferenceSelectItem = selectItems.Where(I => I.GetType() == typeof(ExpandedReferenceSelectItem)).OfType<ExpandedReferenceSelectItem>(); " is 184.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            IEnumerable<PathSelectItem> pathSelectItem = selectItems.Where(I => I.GetType() == typeof(PathSelectItem)).OfType<PathSelectItem>(); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            NavigationPropertySegment navigationProperty = (NavigationPropertySegment)expandedNavigationSelectItem.First().PathToNavigationProperty.FirstSegment; " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            navigationProperty = (NavigationPropertySegment)expandedReferenceSelectItem.First().PathToNavigationProperty.FirstSegment; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            Assert.AreEqual(new Uri("http://www.example.com/People?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID%2CMyCat&$expand=MyDog%2CMyCat%2F%24ref&$orderby=ID&$top=1&$skip=2&$count=true&$search=FA")' actualUri); " is 210.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The length of the statement  "            Assert.AreEqual(new Uri("http://www.example.com/People?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID%2CMyCat&$expand=MyDog%2CMyCat%2F%24ref&$orderby=ID&$top=1&$skip=2&$count=true&$search=FA")' actualUri); " is 210.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            Uri fullUri = new Uri("http://www.example.com/People(1)?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID&$expand=MyDog%2CMyCat/$ref&$orderby=ID&$top=1&$skip=2&$count=true&$search=FA"); " is 187.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            IEnumerable<ExpandedNavigationSelectItem> expandedNavigationSelectItem = selectItems.Where(I => I.GetType() == typeof(ExpandedNavigationSelectItem)).OfType<ExpandedNavigationSelectItem>(); " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            IEnumerable<ExpandedReferenceSelectItem> expandedReferenceSelectItem = selectItems.Where(I => I.GetType() == typeof(ExpandedReferenceSelectItem)).OfType<ExpandedReferenceSelectItem>(); " is 184.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            IEnumerable<PathSelectItem> pathSelectItem = selectItems.Where(I => I.GetType() == typeof(PathSelectItem)).OfType<PathSelectItem>(); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            NavigationPropertySegment navigationProperty = (NavigationPropertySegment)expandedNavigationSelectItem.First().PathToNavigationProperty.FirstSegment; " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            navigationProperty = (NavigationPropertySegment)expandedReferenceSelectItem.First().PathToNavigationProperty.FirstSegment; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The length of the statement  "            Assert.AreEqual(new Uri("http://www.example.com/People(1)?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID%2CMyCat&$expand=MyDog%2CMyCat%2F%24ref&$orderby=ID&$top=1&$skip=2&$count=true&$search=FA")' actualUri); " is 213.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            Uri fullUri = new Uri("http://www.example.com/People/1?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID&$expand=MyDog%2CMyCat/$ref&$top=1&$skip=2&$count=false"); " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            IEnumerable<ExpandedNavigationSelectItem> expandedNavigationSelectItem = selectItems.Where(I => I.GetType() == typeof(ExpandedNavigationSelectItem)).OfType<ExpandedNavigationSelectItem>(); " is 188.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            IEnumerable<ExpandedReferenceSelectItem> expandedReferenceSelectItem = selectItems.Where(I => I.GetType() == typeof(ExpandedReferenceSelectItem)).OfType<ExpandedReferenceSelectItem>(); " is 184.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            IEnumerable<PathSelectItem> pathSelectItem = selectItems.Where(I => I.GetType() == typeof(PathSelectItem)).OfType<PathSelectItem>(); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            NavigationPropertySegment navigationProperty = (NavigationPropertySegment)expandedNavigationSelectItem.First().PathToNavigationProperty.FirstSegment; " is 149.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            navigationProperty = (NavigationPropertySegment)expandedReferenceSelectItem.First().PathToNavigationProperty.FirstSegment; " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The length of the statement  "            Assert.AreEqual(new Uri("http://www.example.com/People/1?$filter=MyDog%2FColor%20eq%20%27Brown%27&$select=ID%2CMyCat&$expand=MyDog%2CMyCat%2F%24ref&$top=1&$skip=2&$count=false")' actualUri); " is 190.
Long Statement,Microsoft.Test.OData.Tests.Client.UrlModifyingTests,UrlModifyingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UrlModifyingTests\UrlModifyingTests.cs,BatchRequestBaseUriDifferentBetweenBatchAndRequest,The length of the statement  "                StringResourceUtil.VerifyDataServicesString(ClientExceptionUtil.ExtractServerErrorMessage(item)' "DataServiceOperationContext_CannotModifyServiceUriInsideBatch"); " is 162.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeExpectedFullMetadataEntryObject,The length of the statement  "            expectedEntryObject.Add(JsonLightConstants.ODataIdAnnotationName' entry.Id == null ? relativeEditLink : entry.Id.OriginalString); " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeExpectedFullMetadataEntryObject,The length of the statement  "            expectedEntryObject.Add(JsonLightConstants.ODataEditLinkAnnotationName' entry.EditLink == null ? relativeEditLink + derivedTypeNameSegment : entry.EditLink.AbsoluteUri); " is 169.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeExpectedFullMetadataEntryObject,The length of the statement  "                        var navigationLinkKey = navigation.Name + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataNavigationLinkUrlAnnotationName; " is 152.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeExpectedFullMetadataEntryObject,The length of the statement  "                            expectedEntryObject.Add(navigationLinkKey' string.Concat(ServiceUri' relativeEditLink' derivedTypeNameSegment' "/"' navigation.Name)); " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeDefaultExpectedFullMetadataEntryMedia,The length of the statement  "                    expectedEntryObject.Add(property.Name + JsonLightConstants.ODataMediaEditLinkAnnotationName' ServiceUri + relativeEditLink + "/" + property.Name); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ComputeDefaultExpectedFullMetadataEntryMedia,The length of the statement  "                    expectedEntryObject.Add(property.Name + JsonLightConstants.ODataMediaReadLinkAnnotationName' ServiceUri + relativeEditLink + "/" + property.Name); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "    <edmx:DataServices xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" m:DataServiceVersion=""4.0"" m:MaxDataServiceVersion=""4.0""> " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "        <Schema xmlns=""http://docs.oasis-open.org/odata/ns/edm"" Namespace=""Microsoft.Test.OData.Services.AstoriaDefaultService""> " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <Property Name=""BackupContactInfo"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.ContactDetails)"" Nullable=""false"" /> " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Orders"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Order)"" Partner=""Customer"" /> " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Logins"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Login)"" Partner=""Customer"" /> " is 138.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Husband"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Customer"" Partner=""Husband"" /> " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Wife"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Customer"" Partner=""Wife"" /> " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Customer"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Customer"" Partner=""Logins"" /> " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""LastLogin"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.LastLogin"" Partner=""Login"" /> " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""SentMessages"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Message)"" Partner=""Sender"" /> " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""ReceivedMessages"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Message)"" Partner=""Recipient"" /> " is 151.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Orders"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Order)"" Partner=""Login"" /> " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Login"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Login"" Partner=""LastLogin"" /> " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Sender"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Login"" Partner=""SentMessages"" /> " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Recipient"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Login"" Partner=""ReceivedMessages"" /> " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Attachments"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.MessageAttachment)"" /> " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Login"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Login"" Partner=""Orders"" /> " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Customer"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Customer"" Partner=""Orders"" /> " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""RelatedProducts"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Product)"" Partner=""RelatedProducts"" /> " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Detail"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.ProductDetail"" Partner=""Product"" /> " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Reviews"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.ProductReview)"" Partner=""Product"" /> " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Photos"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.ProductPhoto)"" /> " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Product"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Product"" Partner=""Detail"" /> " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Product"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Product"" Partner=""Reviews"" /> " is 128.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""ComputerDetail"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.ComputerDetail"" Partner=""Computer"" /> " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Computer"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Computer"" Partner=""ComputerDetail"" /> " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""License"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.License"" Partner=""Driver"" /> " is 127.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Driver"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Driver"" Partner=""License"" /> " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <Property Name=""BagOfComplexToCategories"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.ComplexToCategory)"" Nullable=""false"" /> " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""PersonMetadata"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.PersonMetadata)"" Partner=""Person"" /> " is 153.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Person"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Person"" Partner=""PersonMetadata"" /> " is 133.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <Property Name=""MobilePhoneBag"" Type=""Collection(Microsoft.Test.OData.Services.AstoriaDefaultService.Phone)"" Nullable=""false"" /> " is 134.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "            <EntityType Name=""AllSpatialCollectionTypes_Simple"" BaseType=""Microsoft.Test.OData.Services.AstoriaDefaultService.AllSpatialCollectionTypes""> " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <NavigationProperty Name=""Manager"" Type=""Microsoft.Test.OData.Services.AstoriaDefaultService.Employee"" Partner=""Manager"" /> " is 129.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <EntitySet Name=""AllGeoTypesSet"" EntityType=""Microsoft.Test.OData.Services.AstoriaDefaultService.AllSpatialTypes"" /> " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <EntitySet Name=""AllGeoCollectionTypesSet"" EntityType=""Microsoft.Test.OData.Services.AstoriaDefaultService.AllSpatialCollectionTypes"" /> " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <EntitySet Name=""MessageAttachment"" EntityType=""Microsoft.Test.OData.Services.AstoriaDefaultService.MessageAttachment"" /> " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <EntitySet Name=""MappedEntityType"" EntityType=""Microsoft.Test.OData.Services.AstoriaDefaultService.MappedEntityType"" /> " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                    <NavigationPropertyBinding Path=""Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/Manager"" Target=""Person"" /> " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                    <NavigationPropertyBinding Path=""Microsoft.Test.OData.Services.AstoriaDefaultService.SpecialEmployee/Car"" Target=""Car"" /> " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <FunctionImport Name=""GetPrimitiveString"" Function=""Microsoft.Test.OData.Services.AstoriaDefaultService.GetPrimitiveString"" IncludeInServiceDocument=""true"" /> " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <FunctionImport Name=""GetSpecificCustomer"" Function=""Microsoft.Test.OData.Services.AstoriaDefaultService.GetSpecificCustomer"" EntitySet=""Customer"" IncludeInServiceDocument=""true"" /> " is 189.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <FunctionImport Name=""GetCustomerCount"" Function=""Microsoft.Test.OData.Services.AstoriaDefaultService.GetCustomerCount"" IncludeInServiceDocument=""true"" /> " is 160.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <FunctionImport Name=""GetArgumentPlusOne"" Function=""Microsoft.Test.OData.Services.AstoriaDefaultService.GetArgumentPlusOne"" IncludeInServiceDocument=""true"" /> " is 164.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <FunctionImport Name=""EntityProjectionReturnsCollectionOfComplexTypes"" Function=""Microsoft.Test.OData.Services.AstoriaDefaultService.EntityProjectionReturnsCollectionOfComplexTypes"" IncludeInServiceDocument=""true"" /> " is 222.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <ActionImport Name=""ResetDataSource"" Action=""Microsoft.Test.OData.Services.AstoriaDefaultService.ResetDataSource"" /> " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CustomTestInitialize,The length of the statement  "                <FunctionImport Name=""InStreamErrorGetCustomer"" Function=""Microsoft.Test.OData.Services.AstoriaDefaultService.InStreamErrorGetCustomer"" EntitySet=""Customer"" IncludeInServiceDocument=""true"" /> " is 199.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateOrderEntry2NoMetadata,The length of the statement  "                Concurrency_nestedInfo.NestedResourceInfo.SetSerializationInfo(new ODataNestedResourceInfoSerializationInfo() { IsComplex = true }); " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,AddOrderEntryCustomNavigation,The length of the statement  "            expectedOrderObject["Customer" + "@" + JsonLightConstants.ODataAssociationLinkUrlAnnotationName] = "Order(-9)/Customer/$ref"; " is 125.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,AddOrderEntryCustomNavigation,The length of the statement  "                expectedOrderObject["Login" + "@" + JsonLightConstants.ODataNavigationLinkUrlAnnotationName] = orderEntry.ReadLink + "/Login"; " is 126.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,AddOrderEntryCustomNavigation,The length of the statement  "                expectedOrderObject["Login" + "@" + JsonLightConstants.ODataAssociationLinkUrlAnnotationName] = orderEntry.ReadLink + "/Login/$ref"; " is 132.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerResourceWrapperNoMetadata,The length of the statement  "                primaryContactInfo_nestedInfoWrapper.NestedResourceInfo.SetSerializationInfo(new ODataNestedResourceInfoSerializationInfo() { IsComplex = true }); " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerResourceWrapperNoMetadata,The length of the statement  "                BackupContactInfo_nestedInfoWrapper.NestedResourceInfo.SetSerializationInfo(new ODataNestedResourceInfoSerializationInfo() { IsComplex = true }); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerResourceWrapperNoMetadata,The length of the statement  "                Auditing_nestedInfoWrapper.NestedResourceInfo.SetSerializationInfo(new ODataNestedResourceInfoSerializationInfo() { IsComplex = true }); " is 136.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,AddCustomerMediaProperty,The length of the statement  "            expectedCustomerObject.Add("Thumbnail" + JsonLightConstants.ODataMediaEditLinkAnnotationName' (thumbnailProperty.Value as ODataStreamReferenceValue).EditLink.AbsoluteUri); " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,AddCustomerMediaProperty,The length of the statement  "            expectedCustomerObject.Add("Thumbnail" + JsonLightConstants.ODataMediaReadLinkAnnotationName' (thumbnailProperty.Value as ODataStreamReferenceValue).ReadLink.AbsoluteUri); " is 171.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerOrderNavigation,The length of the statement  "            // create navigation and add expected metadata for no-model verification' use non-trival navigation link to verify association link is calculated " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerOrderNavigation,The length of the statement  "            var orderNavigation = new ODataNestedResourceInfo() { Name = "Orders"' IsCollection = true' Url = new Uri(ServiceUri + "Customerdf(-9)/MyOrders") }; " is 148.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerOrderNavigation,The length of the statement  "            expectedCustomerObject["Orders" + "@" + JsonLightConstants.ODataNavigationLinkUrlAnnotationName] = orderNavigation.Url.AbsoluteUri; " is 131.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerOrderNavigation,The length of the statement  "            expectedCustomerObject["Orders" + "@" + JsonLightConstants.ODataAssociationLinkUrlAnnotationName] = ServiceUri + "Customer(-9)/Orders/$ref"; " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateExpandedCustomerLoginsNavigation,The length of the statement  "            expectedCustomerObject["Logins" + "@" + JsonLightConstants.ODataNavigationLinkUrlAnnotationName] = expandedLoginsNavigation.Url.AbsoluteUri; " is 140.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateExpandedCustomerLoginsNavigation,The length of the statement  "            expectedCustomerObject["Logins" + "@" + JsonLightConstants.ODataAssociationLinkUrlAnnotationName] = expandedLoginsNavigation.AssociationLinkUrl.AbsoluteUri; " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateEmployeeEntryNoMetadata,The length of the statement  "            employeeEntry.Properties = new[] { employeeEntryP1' employeeEntryP2' employeeEntryP3' employeeEntryP4' employeeEntryP5 }; " is 121.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateSpecialEmployeeEntryNoMetadata,The length of the statement  "            employeeEntry.Properties = new[] { employeeEntryP1' employeeEntryP2' employeeEntryP3' employeeEntryP4' employeeEntryP5' employeeEntryP6' employeeEntryP7' employeeEntryP8 }; " is 172.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteWithoutSerializationInfo,The length of the statement  "                    entry.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Person"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteWithoutSerializationInfo,The length of the statement  "                    Assert.IsTrue(WritePayloadHelper.ReadStreamContent(stream).Contains("Person(-5)\"'\"PersonId\":-5'\"Name\":\"xhsdckkeqzvlnprheujeycqrglfehtdocildrequohlffazfgtvmddyqsaxrojqxrsckohrakdxlrghgmzqnyruzu\"")); " is 204.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,SpecifySerializationInfoForFeedAndEntry,The length of the statement  "                    feed.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Person"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,SpecifySerializationInfoForFeedAndEntry,The length of the statement  "                    entry.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Person"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The length of the statement  "                    entry.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Parsen"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The length of the statement  "                    feed.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Parsen"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 155.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The length of the statement  "                        // [{"@odata.type":"#Microsoft.Test.OData.Services.AstoriaDefaultService.ContactDetails"'"EmailBag@odata.type":"#Collection(String)"... " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The length of the statement  "                        Assert.IsTrue(result.Contains("\"value\":[{\"@odata.type\":\"#Microsoft.Test.OData.Services.AstoriaDefaultService.ContactDetails\"'\"EmailBag")); " is 145.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The length of the statement  "                        Assert.IsFalse(result.Contains("\"@odata.type\":\"#Microsoft.Test.OData.Services.AstoriaDefaultService.ContactDetails\"")); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfo,The length of the statement  "                // The following two cases of wrong reference link info is no longer active. The ODataEntityReferenceLinkSerializationInfo is ignored when writer writes the payload. " is 165.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,WriteEntryWithWrongSerializationInfoWithModel,The length of the statement  "                        entry.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Parsen"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,ChangeSerializationInfoAfterWriteStart,The length of the statement  "                    entry.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Person"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,ChangeSerializationInfoAfterWriteStart,The length of the statement  "                    entry.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Parsen"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 156.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,OrderFeedTest,The length of the statement  "                    var odataWriter = messageWriter.CreateODataResourceSetWriter(WritePayloadHelper.OrderSet' WritePayloadHelper.OrderType); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,ExpandedCustomerEntryTest,The length of the statement  "                    var odataWriter = messageWriter.CreateODataResourceWriter(WritePayloadHelper.CustomerSet' WritePayloadHelper.CustomerType); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,PersonFeedTest,The length of the statement  "                    var odataWriter = messageWriter.CreateODataResourceSetWriter(WritePayloadHelper.PersonSet' WritePayloadHelper.PersonType); " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,PersonFeedTest,The length of the statement  "                if (mimeType.Contains(MimeTypes.ODataParameterMinimalMetadata) || mimeType.Contains(MimeTypes.ODataParameterFullMetadata)) " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,PersonFeedTest,The length of the statement  "                    Assert.IsFalse(outputWithoutModel.Contains("{\"@odata.type\":\"" + "#" + NameSpace + "Person\"'")' "odata.type Person"); " is 120.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,PersonFeedTest,The length of the statement  "                    Assert.IsTrue(outputWithoutModel.Contains("{\"@odata.type\":\"" + "#" + NameSpace + "Employee\"'")' "odata.type Employee"); " is 123.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,PersonFeedTest,The length of the statement  "                    Assert.IsTrue(outputWithoutModel.Contains("{\"@odata.type\":\"" + "#" + NameSpace + "SpecialEmployee\"'")' "odata.type SpecialEmployee"); " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,EmployeeEntryTest,The length of the statement  "                // employee entry as response of person(1)/EmployeeTyeName' in this case the test sets ExpectedTypeName as Employee in Serialization info " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,EmployeeEntryTest,The length of the statement  "                if (mimeType.Contains(MimeTypes.ODataParameterMinimalMetadata) || mimeType.Contains(MimeTypes.ODataParameterFullMetadata)) " is 122.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyOrderFeed,The length of the statement  "                orderFeed.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Order"' NavigationSourceEntityTypeName = NameSpace + "Order" }); " is 158.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyOrderFeed,The length of the statement  "                    Assert.IsTrue(entry.TypeName.Contains("ConcurrencyInfo")' "complex Property Concurrency should be read into ODataResource"); " is 124.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyOrderFeed,The length of the statement  "                Assert.IsTrue(navigation.Name == "Customer" || navigation.Name == "Login" || navigation.Name == "Concurrency"' "navigation.Name"); " is 130.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyOrderFeed,The length of the statement  "                WritePayloadHelper.ReadAndVerifyFeedEntryMessage(true' responseMessage' WritePayloadHelper.OrderSet' WritePayloadHelper.OrderType' verifyFeed' " is 142.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The length of the statement  "                loginFeed.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Login"' NavigationSourceEntityTypeName = NameSpace + "Login"' NavigationSourceKind = Microsoft.OData.Edm.EdmNavigationSourceKind.EntitySet }); " is 236.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The length of the statement  "            customerEntry.NestedResourceInfoWrappers = customerEntry.NestedResourceInfoWrappers.Concat(WritePayloadHelper.CreateCustomerNavigationLinks()); " is 143.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The length of the statement  "            customerEntry.NestedResourceInfoWrappers = customerEntry.NestedResourceInfoWrappers.Concat(new[]{  new ODataNestedResourceInfoWrapper() " is 135.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The length of the statement  "                WritePayloadHelper.ReadAndVerifyFeedEntryMessage(false' responseMessage' WritePayloadHelper.CustomerSet' WritePayloadHelper.CustomerType' " is 137.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyCarEntry,The length of the statement  "                WritePayloadHelper.ReadAndVerifyFeedEntryMessage(false' responseMessage' WritePayloadHelper.CarSet' WritePayloadHelper.CarType' null' verifyEntry' " is 146.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyPersonFeed,The length of the statement  "                personFeed.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Person"' NavigationSourceEntityTypeName = NameSpace + "Person" }); " is 161.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyPersonFeed,The length of the statement  "                WritePayloadHelper.ReadAndVerifyFeedEntryMessage(true' responseMessage' WritePayloadHelper.PersonSet' WritePayloadHelper.PersonType' verifyFeed' " is 144.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyEmployeeEntry,The length of the statement  "                WritePayloadHelper.ReadAndVerifyFeedEntryMessage(false' responseMessage' WritePayloadHelper.PersonSet' WritePayloadHelper.PersonType' null' " is 139.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyRequestMessage,The length of the statement  "                order.SetSerializationInfo(new ODataResourceSerializationInfo() { NavigationSourceName = "Order"' NavigationSourceEntityTypeName = NameSpace + "Order" }); " is 154.
Long Statement,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyRequestMessage,The length of the statement  "                ODataReader reader = messageReader.CreateODataResourceReader(WritePayloadHelper.OrderSet' WritePayloadHelper.OrderType); " is 120.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "Permission is hereby granted' free of charge' to any person obtaining a copy of this software and associated documentation files (the "Software")' to deal in the Software without restriction' including without limitation the rights to use' copy' modify' merge' publish' distribute' sublicense' and/or sell copies of the Software' and to permit persons to whom the Software is furnished to do so' subject to the following conditions: " is 432.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. " is 126.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "THE SOFTWARE IS PROVIDED *AS IS*' WITHOUT WARRANTY OF ANY KIND' EXPRESS OR IMPLIED' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM' DAMAGES OR OTHER LIABILITY' WHETHER IN AN ACTION OF CONTRACT' TORT OR OTHERWISE' ARISING FROM' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. " is 460.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "            throw new NotSupportedException(string.Format("Code gen for the target language '{0}' is not supported."' this.TargetLanguage.ToString())); " is 139.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetUseDataServiceCollectionFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the UseDataServiceCollection parameter because it is not a valid boolean value."' stringValue)); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetTargetLanguageFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the TargetLanguage parameter because it is not a valid LanguageOption. The supported LanguageOptions are \"CSharp\" and \"VB\"."' stringValue)); " is 227.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetEnableNamingAliasFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the EnableNamingAlias parameter because it is not a valid boolean value."' stringValue)); " is 172.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetIgnoreUnexpectedElementsAndAttributesFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the IgnoreUnexpectedElementsAndAttributes parameter because it is not a valid boolean value."' stringValue)); " is 192.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ApplyParametersFromCommandLine,The length of the statement  "    string ignoreUnexpectedElementsAndAttributes = this.Host.ResolveParameterValue("notempty"' "notempty"' "IgnoreUnexpectedElementsAndAttributes"); " is 144.
Long Statement,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPrefixedFullName,The length of the statement  "        return this.GetPrefixedNamespace(schemaElement.Namespace' template' true' needGlobalPrefix) + "." + schemaElementFixedName; " is 123.
Long Statement,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetEdmxStreamFromUri,The length of the statement  "                    throw new WebException("Failed to access the metadata document. The OData service requires authentication for accessing it. Please download the metadata' store it into a local file' and set the value of “MetadataDocumentUri” in the .odata.config file to the file path. After that' run custom tool again to generate the OData Client code."); " is 340.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "        Dictionary<IEdmStructuredType' List<IEdmOperation>> boundOperationsMap = new Dictionary<IEdmStructuredType' List<IEdmOperation>>(); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "        Dictionary<IEdmStructuredType' List<IEdmStructuredType>> structuredBaseTypeMap = new Dictionary<IEdmStructuredType' List<IEdmStructuredType>>(); " is 144.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                        keyDictionaryItems.Add(string.Format(this.DictionaryItemConstructor' "\"" + key.Name + "\""' this.GetFixedName(keyName))); " is 122.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    this.GetParameterStrings(function.IsBound' false' function.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 198.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' sourceTypeName); " is 168.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            this.WriteBoundFunctionReturnCollectionResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' parameterString' function.Namespace' parameterValues' function.IsComposable' useEntityReference); " is 220.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            this.WriteBoundFunctionReturnSingleResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' function.Namespace' parameterValues' function.IsComposable' function.ReturnType.IsEntity()' useEntityReference); " is 280.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' GetSourceOrReturnTypeName(derivedTypeReference)); " is 201.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                                    this.WriteBoundFunctionReturnCollectionResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' parameterString' function.Namespace' parameterValues' function.IsComposable' useEntityReference); " is 220.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                                    this.WriteBoundFunctionReturnSingleResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' function.Namespace' parameterValues' function.IsComposable' function.ReturnType.IsEntity()' useEntityReference); " is 280.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    this.GetParameterStrings(action.IsBound' true' action.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 193.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' sourceTypeName); " is 168.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                        this.WriteBoundActionAsExtension(fixedActionName' action.Name' sourceTypeName' returnTypeName' parameterString' action.Namespace' parameterValues); " is 147.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' GetSourceOrReturnTypeName(derivedTypeReference)); " is 201.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                                this.WriteBoundActionAsExtension(fixedActionName' action.Name' sourceTypeName' returnTypeName' parameterString' action.Namespace' parameterValues); " is 147.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WritePropertyRootNamespace(GetFixedName(camelCaseContainerName)' this.context.GetPrefixedNamespace(fullNamespace' this' false' false)); " is 140.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteContextEntitySetProperty(camelCaseEntitySetName' GetFixedName(camelCaseEntitySetName)' entitySet.Name' GetFixedName(entitySetElementTypeName)); " is 153.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteContextAddToEntitySetMethod(camelCaseEntitySetName' entitySet.Name' GetFixedName(entitySetElementTypeName)' parameterName); " is 133.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteContextSingletonProperty(camelCaseSingletonName' GetFixedName(camelCaseSingletonName)' singleton.Name' singletonElementTypeName + "Single"); " is 150.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.GetParameterStrings(false' false' functionImport.Function.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 202.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "                this.WriteFunctionImportReturnCollectionResult(this.GetFixedName(functionImportName)' functionImport.Name' returnTypeName' parameterString' parameterValues' functionImport.Function.IsComposable' useEntityReference); " is 215.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "                this.WriteFunctionImportReturnSingleResult(this.GetFixedName(functionImportName)' functionImport.Name' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' parameterValues' functionImport.Function.IsComposable' functionImport.Function.ReturnType.IsEntity()' useEntityReference); " is 290.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.GetParameterStrings(false' true' actionImport.Action.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 197.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteActionImport(this.GetFixedName(actionImportName)' actionImport.Name' returnTypeName' parameterString' parameterValues); " is 129.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveTypeFromName,The length of the statement  "        IEnumerable<KeyValuePair<string' string>> namespaceToPrefixedNamespacePairs = this.context.NamespaceMap.OrderByDescending(p => p.Key.Length).ThenBy(p => p.Key); " is 160.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveNameFromType,The length of the statement  "        IEnumerable<KeyValuePair<string' string>> namespaceToPrefixedNamespacePairs = this.context.NamespaceMap.OrderByDescending(p => p.Value.Length).ThenBy(p => p.Key); " is 162.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,The length of the statement  "            Customization.CustomizeNaming(((IEdmSchemaElement)entityType).Name) : ((IEdmSchemaElement)entityType).Name) + this.SingleSuffix; " is 128.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,The length of the statement  "        this.WriteConstructorForSingleType(GetFixedName(singleTypeName)' string.Format(this.DataServiceQuerySingleStructureTemplate' GetFixedName(entityTypeName))); " is 156.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,The length of the statement  "        this.WriteSummaryCommentForStructuredType(this.context.EnableNamingAlias ? Customization.CustomizeNaming(entityType.Name) : entityType.Name); " is 141.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteComplexType,The length of the statement  "        this.WriteSummaryCommentForStructuredType(this.context.EnableNamingAlias ? Customization.CustomizeNaming(complexType.Name) : complexType.Name); " is 143.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                this.GetParameterStrings(function.IsBound' false' function.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 198.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                    this.WriteBoundFunctionInEntityTypeReturnCollectionResult(hideBaseMethod' GetFixedName(functionName)' function.Name' returnTypeName' parameterString' function.Namespace' parameterValues' function.IsComposable' useEntityReference); " is 230.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                    this.WriteBoundFunctionInEntityTypeReturnSingleResult(hideBaseMethod' GetFixedName(functionName)' function.Name' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' function.Namespace' parameterValues' function.IsComposable' function.ReturnType.IsEntity()' useEntityReference); " is 290.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                this.GetParameterStrings(action.IsBound' true' action.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 193.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                this.WriteBoundActionInEntityType(hideBaseMethod' GetFixedName(actionName)' action.Name' returnTypeName' parameterString' action.Namespace' parameterValues); " is 157.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEnumType,The length of the statement  "        this.WriteSummaryCommentForEnumType(this.context.EnableNamingAlias ? Customization.CustomizeNaming(enumType.Name) : enumType.Name); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEnumType,The length of the statement  "        this.WriteEnumDeclaration(this.context.EnableNamingAlias ? GetFixedName(Customization.CustomizeNaming(enumType.Name)) : GetFixedName(enumType.Name)' enumType.Name' underlyingType); " is 180.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStructurdTypeDeclaration,The length of the statement  "                string baseTypeFixedName = this.context.EnableNamingAlias ? GetFixedName(Customization.CustomizeNaming(baseType.Name)) : GetFixedName(baseType.Name); " is 149.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStructurdTypeDeclaration,The length of the statement  "                baseTypeName = ((IEdmSchemaElement)structuredType).Namespace == baseType.Namespace ? baseTypeFixedName : this.context.GetPrefixedFullName(baseType' baseTypeFixedName' this); " is 173.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStructurdTypeDeclaration,The length of the statement  "        this.WriteClassStartForStructuredType(abstractModifier' GetFixedName(structuredTypeName + typeNameSuffix)' ((IEdmSchemaElement)structuredType).Name + typeNameSuffix' baseTypeName); " is 180.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetSourceOrReturnTypeName,The length of the statement  "        return Utils.GetClrTypeName(typeReference' this.context.UseDataServiceCollection' this' this.context' addNullableTemplate' isEntitySingleType:isEntitySingleType); " is 162.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,The length of the statement  "            string typeName = Utils.GetClrTypeName(param.Type' this.context.UseDataServiceCollection' this' this.context' true' true' true); " is 128.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,The length of the statement  "                parameterValues += string.Format(this.UriEntityOperationParameterConstructor' param.Name' GetFixedName(param.Name)'"useEntityReference"); " is 137.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "        Func<string' string> customizePropertyName = (name) => { return this.context.EnableNamingAlias ? Customization.CustomizeNaming(name) : name; }; " is 143.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "            .GroupBy(p => isLanguageCaseSensitive ? customizePropertyName(p.Name) : customizePropertyName(p.Name).ToUpperInvariant()); " is 122.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "        // If the group contains more than one property' or the property in the group has the same name with the type (only for C#)' we need to rename the property " is 155.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "        var propertyToBeRenamedGroups = propertyGroups.Where(g => g.Count() > 1 || !allowPropertyNameSameWithTypeName && g.Key == typeName); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "        Func<IEdmProperty' bool> hasDefault = p => p.PropertyKind == EdmPropertyKind.Structural && ((IEdmStructuralProperty)p).DefaultValueString != null; " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "                IdentifierMappings[propertyName] : (this.context.EnableNamingAlias ? Customization.CustomizeNaming(propertyName) : propertyName); " is 129.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "            // The static create method only sets non-nullable properties. We should add the null check if the type of the property is not a clr ValueType. " is 143.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "            // For now we add the null check if the property type is non-primitive. We should add the null check for non-ValueType primitives in the future. " is 144.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "                IdentifierMappings[property.Name] : (this.context.EnableNamingAlias ? Customization.CustomizeNaming(property.Name) : property.Name); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStaticCreateMethodParameters,The length of the statement  "            string parameterType = Utils.GetClrTypeName(propertyToParameterPair.Key.Type' this.context.UseDataServiceCollection' this' this.context); " is 137.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertiesForStructuredType,The length of the statement  "                IdentifierMappings[property.Name] : (this.context.EnableNamingAlias ? Customization.CustomizeNaming(property.Name) : property.Name); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertiesForStructuredType,The length of the statement  "                    PropertyInitializationValue = Utils.GetPropertyInitializationValue(property' useDataServiceCollection' this' this.context) " is 122.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertiesForStructuredType,The length of the statement  "        UniqueIdentifierService uniqueIdentifierService = new UniqueIdentifierService(propertyInfos.Select(_ => _.FixedPropertyName)' " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,TemplateBase,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,Write,The length of the statement  "        textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "            if (edmTypeReference.IsNullable && !clientTemplate.ClrReferenceTypes.Contains(edmPrimitiveType.PrimitiveKind) && addNullableTemplate) " is 133.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                    context.EnableNamingAlias ? clientTemplate.GetFixedName(Customization.CustomizeNaming(edmComplexType.Name)) : clientTemplate.GetFixedName(edmComplexType.Name)' clientTemplate); " is 176.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                        context.EnableNamingAlias ? clientTemplate.GetFixedName(Customization.CustomizeNaming(edmEnumType.Name)) : clientTemplate.GetFixedName(edmEnumType.Name)' clientTemplate' needGlobalPrefix); " is 188.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                                ? clientTemplate.GetFixedName(Customization.CustomizeNaming(edmEntityType.Name) + (isEntitySingleType ? clientTemplate.SingleSuffix : string.Empty)) " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                                context.EnableNamingAlias ? clientTemplate.GetFixedName(Customization.CustomizeNaming(schemaElement.Name)) : clientTemplate.GetFixedName(schemaElement.Name)' clientTemplate); " is 174.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                        string enumTypeName = GetClrTypeName(edmTypeReference' useDataServiceCollection' clientTemplate' context' false' false); " is 120.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                            var customizedEnumValue = context.EnableNamingAlias ? Customization.CustomizeNaming(currentEnumValue) : currentEnumValue; " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                                currentEnumValue = "(" + fullenumTypeName + ")" + clientTemplate.EnumTypeName + ".Parse(" + clientTemplate.SystemTypeTypeName + ".GetType(\"" + enumTypeName + "\")' \"" + customizedEnumValue  + "\")"; " is 200.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                                currentEnumValue = clientTemplate.EnumTypeName + ".Parse(" + clientTemplate.SystemTypeTypeName + ".GetType(\"" + enumTypeName + "\")' \"" + currentEnumValue  + "\")"; " is 166.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFileHeader,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString(global::System.Globalization.CultureInfo.CurrentCulture))); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteMethodStartForResolveNameFromType,The length of the statement  "this.Write(@"            global::Microsoft.OData.Client.OriginalNameAttribute originalNameAttribute = (global::Microsoft.OData.Client.OriginalNameAttribute)global::System.Linq.Enumerable.SingleOrDefault(global::Microsoft.OData.Client.Utility.GetCustomAttributes(clientType' typeof(global::Microsoft.OData.Client.OriginalNameAttribute)' true)); " is 343.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalEntitySetName + "\"" : "GetPath(\"" + originalEntitySetName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalSingletonName + "\"" : "GetPath(\"" + originalSingletonName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(this.context.IgnoreUnexpectedElementsAndAttributes ? "true" : "false")); " is 123.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(propertyInitializationValue != null ? " = " + propertyInitializationValue : string.Empty)); " is 142.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "new " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "new " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "new " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = true" : string.Empty)); " is 124.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFileHeader,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString(System.Globalization.CultureInfo.CurrentCulture))); " is 124.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteMethodStartForResolveNameFromType,The length of the statement  "                CType(Global.System.Linq.Enumerable.SingleOrDefault(Global.Microsoft.OData.Client.Utility.GetCustomAttributes(clientType' GetType(Global.Microsoft.OData.Client.OriginalNameAttribute)' true))' Global.Microsoft.OData.Client.OriginalNameAttribute) " is 244.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteMethodEndForResolveNameFromType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(modelHasInheritance ? "clientType.FullName.Substring(ROOTNAMESPACE.Length)" : "Nothing")); " is 141.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteConstructorForSingleType,The length of the statement  "        Public Sub New(ByVal context As Global.Microsoft.OData.Client.DataServiceContext' ByVal path As String' ByVal isComposable As Boolean) " is 134.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalEntitySetName + "\"" : "GetPath(\"" + originalEntitySetName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalSingletonName + "\"" : "GetPath(\"" + originalSingletonName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(Utils.SerializeToString(reference.Value).Replace("\""' "\"\"").Replace("\r\n"' "\" & _\r\n \""))); " is 149.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteINotifyPropertyChangedImplementation,The length of the statement  "        Public Event PropertyChanged As Global.System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged " is 167.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "New " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "New " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "New " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGeneratorBase,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Complex Conditional,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The conditional expression  "arg.Entry.TypeName.EndsWith("Order")                          || arg.Entry.TypeName.EndsWith("Person")                          || arg.Entry.TypeName.EndsWith("OrderDetail")                          || arg.Entry.TypeName.EndsWith("GiftCard")"  is complex.
Complex Conditional,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AssertIsValidETag,The conditional expression  "!(!string.IsNullOrEmpty(etag) && etag.Length > 4 && etag.StartsWith("W/\"") && etag.EndsWith("\""))"  is complex.
Complex Conditional,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The conditional expression  "resource != null && (resource.TypeName.EndsWith("Customer")                                  || resource.TypeName.EndsWith("Login")                                  || resource.TypeName.EndsWith("Message")                                  || resource.TypeName.EndsWith("Order"))"  is complex.
Complex Conditional,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The conditional expression  "nestedResource.Name.Equals("Customer")                                      || nestedResource.Name.Equals("Login")                                      || nestedResource.Name.Equals("Orders")                                      || nestedResource.Name.Equals("SentMessages")                                      || nestedResource.Name.Equals("ReceivedMessages")"  is complex.
Complex Conditional,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The conditional expression  "resource != null && (resource.TypeName.EndsWith("Customer")                                      || resource.TypeName.EndsWith("Login")                                      || resource.TypeName.EndsWith("Message")                                      || resource.TypeName.EndsWith("Order"))"  is complex.
Complex Conditional,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetElementsFromModelTree,The conditional expression  "tmp is EdmCoreModel ||                  tmp.FindDeclaredTerm(CoreVocabularyConstants.OptimisticConcurrency) != null ||                  tmp.FindDeclaredTerm(CapabilitiesVocabularyConstants.ChangeTracking) != null ||                  tmp.FindDeclaredTerm(AlternateKeysVocabularyConstants.AlternateKeys) != null ||                  tmp.FindDeclaredTerm("Org.OData.Authorization.V1.Authorizations") != null ||                  tmp.FindDeclaredTerm("Org.OData.Validation.V1.DerivedTypeConstraint") != null ||                  tmp.FindDeclaredTerm("Org.OData.Community.V1.UrlEscapeFunction") != null"  is complex.
Complex Conditional,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The conditional expression  "customizedPropertyName != typeName                          && (customizedPropertyName == property.Name                              || (!hasPropertyNameSameWithCustomizedPropertyName && i == itemCount-1))"  is complex.
Complex Conditional,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The conditional expression  "(this.context.EnableNamingAlias && customizedPropertyName == property.Name)                          || (!hasPropertyNameSameWithCustomizedPropertyName && i == itemCount-1)"  is complex.
Empty Catch Block,Microsoft.Test.OData.Tests.Client,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\EndToEndTestBase.cs,ResetDataSource,The method has an empty catch block.
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,LoadPropertyCollection,The following statement contains a magic number: var querry = (from c in context.Customer                            where c.CustomerId == -10                            select c) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,LoadPropertyCollection,The following statement contains a magic number: o.OrderId = (134);
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,LoadPropertyCollection,The following statement contains a magic number: var o1 = new Order { OrderId = 1220 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,LoadCollectionExceptionShouldNotRuinEntityTracking,The following statement contains a magic number: int[] customerIds = { /*existing*/-9' /*non-existing*/0' /*existing*/-10 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,LoadCollectionExceptionShouldNotRuinEntityTracking,The following statement contains a magic number: int[] customerIds = { /*existing*/-9' /*non-existing*/0' /*existing*/-10 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,CanContinueLoadEntityAfterLoadCollectionException,The following statement contains a magic number: int[] customerIds = { /*non-existing*/0' /*existing*/-10' /*existing*/-9 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,CanContinueLoadEntityAfterLoadCollectionException,The following statement contains a magic number: int[] customerIds = { /*non-existing*/0' /*existing*/-10' /*existing*/-9 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,AddDeleteEntitySave,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveEntityTwice,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveEntityTwice,The following statement contains a magic number: Customer c2 = new Customer { CustomerId = 1003 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: VerifyCtxCount(context' 2' 1);
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: VerifyCtxCount(context' 2' 1);
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,ClearListTest,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,ClearListTest,The following statement contains a magic number: Customer c2 = new Customer { CustomerId = 1003 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,ClearListTest,The following statement contains a magic number: Customer c3 = new Customer { CustomerId = 1004 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,ClearListTest,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,ClearListTest,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,ClearListTest,The following statement contains a magic number: VerifyCtxCount(context' 4' 1);
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,DeletingInModifiedState,The following statement contains a magic number: Customer modified = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,DeletingInModifiedState,The following statement contains a magic number: VerifyCtxCount(context' 4' 0);
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,DeletingInModifiedState,The following statement contains a magic number: modified.CustomerId = 100002;
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,DeletingInDetachedState,The following statement contains a magic number: Customer detached = new Customer { CustomerId = 1003 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,DeletingInDeletedState,The following statement contains a magic number: Customer deleted = new Customer { CustomerId = 1004 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,DeletingInUnchangedState,The following statement contains a magic number: Customer unchanged = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,AddSaveRemoveSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,AddSaveUpdateSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,AddSaveUpdateSaveEntity,The following statement contains a magic number: c.CustomerId = 1003;
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,AddSaveUnchangedSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\BindingTests.cs,AddSaveDetachedSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,NavigationPropertyOnEntityWithMultipleKeys,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // Entry Navigation Property (2 keys)                      var entryResults = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/OrderLine(OrderId=-10'ProductId=-10)/Product")).ToArray();                      Assert.AreEqual(1' entryResults.Count()' "Unexpected number of Products returned");                        var entryResultsLinq = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10 && o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinq.Count()' "Unexpected number of Products returned");                        var entryResultsLinqTwoWhereClauses = contextWrapper.CreateQuery<OrderLine>("OrderLine").Where(o => o.OrderId == -10).Where(o => o.ProductId == -10).Select(o => o.Product).ToArray();                      Assert.AreEqual(1' entryResultsLinqTwoWhereClauses.Count()' "Unexpected number of Products returned");                        // Entry Navigation Property (3 keys)                      var entry3KeysResult = contextWrapper.Execute<Product>(new Uri(this.ServiceUri.OriginalString + "/ProductReview(ProductId=-10'ReviewId=-10'RevisionId='1')/Product")).ToArray();                      Assert.AreEqual(1' entry3KeysResult.Count()' "Unexpected number of Products returned");                        var entry3KeysLinqResult = contextWrapper.CreateQuery<ProductReview>("ProductReview").Where(pr => pr.ProductId == -10).Where(pr => pr.ReviewId == -10).Where(pr => pr.RevisionId == "1").Select(pr => pr.Product).ToArray();                      Assert.AreEqual(1' entry3KeysLinqResult.Count()' "Unexpected number of Products returned");                        // Feed Navigation Property (2 keys)                      var feedResults = contextWrapper.Execute<MessageAttachment>(new Uri(this.ServiceUri.OriginalString + "/Message(FromUsername='1''MessageId=-10)/Attachments")).ToArray();                      int feedResultsCount = feedResults.Count();                      Assert.IsTrue(feedResultsCount > 1' "Expected more than one result' got {0}"' feedResultsCount);                        var feedResultsLinq = contextWrapper.CreateQuery<Message>("Message").Where(m => m.FromUsername == "1" && m.MessageId == -10).SelectMany(m => m.Attachments).ToArray();                      Assert.AreEqual(feedResultsCount' feedResultsLinq.Count()' "Expected same number of results returned from Execute / Linq queries");                  });
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsUrlTest,The following statement contains a magic number: var testlists = new List<KeyValuePair<string' int>>()                             {                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm')"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains('m'' Name)"' 0)'                                 new KeyValuePair<string' int>("/Person?$filter=not contains(Name' 'm')"' 3)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(Name' 'm') eq true"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=false eq contains(Name' 'm')"' 3)'                                   new KeyValuePair<string' int>("/Person?$filter=contains(Name' substring('name''  2' 1))"' 10)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' 'name')"' 13)'                                 new KeyValuePair<string' int>("/Person?$filter=contains(concat('User'''name')' substring('name''  2' 1))"' 13)'                             };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsLinqTest,The following statement contains a magic number: Assert.AreEqual(result.Count()' 10' "Unexpected number of Person returned");
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,ContainsLinqTest,The following statement contains a magic number: Assert.AreEqual(result.Count()' 10' "Unexpected number of Person returned");
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,PrimitiveTypeInRequestUrlTest,The following statement contains a magic number: Assert.AreEqual(12' result.Count()' "Unexpected number of Person returned");
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,PrimitiveTypeInRequestUrlTest,The following statement contains a magic number: Assert.AreEqual(2' result.Count()' "Unexpected number of Person returned");
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,QueryEntityNavigationWithImplicitKeys,The following statement contains a magic number: Assert.AreEqual(-10' message.MessageId);
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,MergeProjectionAndQueryOptionTest,The following statement contains a magic number: var query = from p in contextWrapper.Context.Product.AddQueryOption("$select"' "ProductId")                          where p.ProductId == -10                          select new Product() { Description = p.Description' Photos = p.Photos };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,DataServiceCollectionTrackingItems,The following statement contains a magic number: var query = from p in contextWrapper.Context.Customer                  where p.CustomerId > -100000                  // try to get many for paging                  select new Customer()                  {                      CustomerId = p.CustomerId'                      Name = p.Name                  };
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The following statement contains a magic number: var filterCustomersCount = context.Customer.Where(c => c.CustomerId > -5).Count();
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The following statement contains a magic number: queryCustomersCount = ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).GetAllPages().ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The following statement contains a magic number: queryCustomersCount = ((DataServiceQuery<Customer>)context.Customer.Take(4)).GetAllPages().ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The following statement contains a magic number: Assert.AreEqual(4' queryCustomersCount);
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The following statement contains a magic number: queryCustomersCount = ((DataServiceQuery<Customer>)context.Customer.Skip(4)).GetAllPages().ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetAllPagesTest,The following statement contains a magic number: Assert.AreEqual(allCustomersCount - 4' queryCustomersCount);
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,PagingOnNavigationProperty,The following statement contains a magic number: int allOrdersCount = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.Count();
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,PagingOnNavigationProperty,The following statement contains a magic number: var queryOrderCount = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.GetAllPages().ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetParitalPagesTest,The following statement contains a magic number: ++count == 3
Magic Number,Microsoft.Test.OData.Tests.Client,ClientQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientQueryTests.cs,GetParitalPagesTest,The following statement contains a magic number: Assert.AreEqual(2' sentRequestCount);
Magic Number,Microsoft.Test.OData.Tests.Client,ClientDeleteTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientDeleteTests.cs,ExecuteDeleteMethod,The following statement contains a magic number: Assert.AreEqual(204' response.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountLinqTest,The following statement contains a magic number: Assert.AreEqual(response.TotalCount' 10);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountLinqTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(response.TotalCount' 10);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTest,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(10' response.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client,QueryCountTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryCountTests.cs,CountUriTestWithServerDrivenPaging,The following statement contains a magic number: Assert.AreEqual(3' orders.TotalCount);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var discountAction = TestClientContext.Products.Discount(50);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var queryProduct = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var accessLevelAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var getProductDetailsFunction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsFunction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsFunction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: Assert.AreEqual(5' pd.ProductID);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var discountAction = TestClientContext.Products.Discount(50);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var queryProduct = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var accessLevelAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var getProductDetailsAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: Assert.AreEqual(5' pd.ProductID);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionBoundOnContainedSingleNavigation,The following statement contains a magic number: var getActualAmountFunction = TestClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(1);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var discountAction = getAllProductsFunction.DiscountPlus(50);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: Assert.AreEqual(unitPrice * 50 / 100' p.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: Assert.AreEqual(unitPrice * 50 / 100' p.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var getBossEmailsFunction = TestClientContext.GetBossEmailsPlus(0' 10);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport35,The following statement contains a magic number: var discountAction = TestClientContext.DiscountPlus(50);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport35,The following statement contains a magic number: Assert.AreEqual(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport35,The following statement contains a magic number: Assert.AreEqual(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The following statement contains a magic number: var discountAction = TestClientContext.DiscountPlus(50);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The following statement contains a magic number: Assert.AreEqual(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The following statement contains a magic number: Assert.AreEqual(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: var queryAccount = TestClientContext.AccountsPlus.Where(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result > 1) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = TestClientContext.AccountsPlus.Where(a => 1 != a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: var queryProducts = TestClientContext.ProductsPlus.Where(p => p.GetProductDetailsPlus(2).Count() > 1) as DataServiceQuery<ProductPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryProducts = TestClientContext.ProductsPlus.Where(p => 1 <= p.GetProductDetailsPlus(2).Count()) as DataServiceQuery<ProductPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = TestClientContext.AccountsPlus.OrderBy(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = TestClientContext.AccountsPlus.OrderByDescending(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_Custom,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar).ToList();                      Assert.AreEqual(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_Filter,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar);                      Assert.AreEqual(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_Select,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar);                      Assert.AreEqual(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_OrderBy,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar);                      Assert.AreEqual(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_TwoQueryOptions,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar);                      Assert.AreEqual(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The following statement contains a magic number: var arBatch = context.BeginExecuteBatch(                  null'                  null'                  new DataServiceRequest[]                  {                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)'                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)'                      new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)'                      new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri)                  }).EnqueueWait(this);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The following statement contains a magic number: var arBatch = context.BeginExecuteBatch(                  null'                  null'                  new DataServiceRequest[]                  {                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)'                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)'                      new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)'                      new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri)                  }).EnqueueWait(this);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,CancelBatchRequestTest,The following statement contains a magic number: var arBatch = context.BeginExecuteBatch(                  null'                  null'                  new DataServiceRequest[]                  {                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)'                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)'                  });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,CancelBatchRequestTest,The following statement contains a magic number: var arBatch = context.BeginExecuteBatch(                  null'                  null'                  new DataServiceRequest[]                  {                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)'                      new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)'                  });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,QueryEntitySetTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar).ToList();                      Assert.AreEqual(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,IncludeTotalCountTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Computer>;                      Assert.AreEqual(10' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,IncludeTotalCountTestWithServerDrivenPaging,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.AreEqual(10' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AllNestedTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.AreEqual(6' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AllTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.AreEqual(6' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                      null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AnyNestedTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.AreEqual(4' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                      null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AnyTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.AreEqual(4' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ExpandTest,The following statement contains a magic number: var query = context.Customer.Expand("Wife").Where(c => c.CustomerId == -10) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSetTest,The following statement contains a magic number: var query = (from c in context.Customer                           select new NonEntityCustomer2(1000' c.Name)) as DataServiceQuery<NonEntityCustomer2>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSetTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>              {                  var customers = query.EndExecute(ar);                    foreach (var customer in customers)                  {                      Assert.AreEqual(1000' customer.CustomerId);                      Assert.IsNotNull(customer.Name);                  }                  this.EnqueueTestComplete();              }'              null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSetTest,The following statement contains a magic number: var query = (from c in context.Customer                           select new NonEntityCustomer { CustomerId = 1000' Name = c.Name }) as DataServiceQuery<NonEntityCustomer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSetTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customers = query.EndExecute(ar);                        foreach (var customer in customers)                      {                          Assert.AreEqual(1000' customer.CustomerId);                          Assert.IsNotNull(customer.Name);                      }                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The following statement contains a magic number: var query = (from c in context.Computer                           where c.ComputerId == -10                           select new Computer { ComputerId = c.ComputerId' ComputerDetail = new ComputerDetail { ComputerDetailId = c.ComputerDetail.ComputerDetailId } }                           ) as DataServiceQuery<Computer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The following statement contains a magic number: Assert.AreEqual(-10' c1.ComputerId);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The following statement contains a magic number: Assert.AreEqual(-10' c1.ComputerDetail.ComputerDetailId);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectNameStreamProperty,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { CustomerId = c.CustomerId' Video = c.Video }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectNameStreamProperty,The following statement contains a magic number: query.BeginExecute(                     (ar) =>                     {                         var c1 = query.EndExecute(ar).SingleOrDefault();                         Assert.AreEqual(-10' c1.CustomerId);                         Assert.IsNotNull(c1.Video);                         this.EnqueueTestComplete();                     }'                     null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionString,The following statement contains a magic number: Assert.AreEqual(-8' value0[1].CustomerId);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                        orderby c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                        select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                        orderby c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                        select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: Assert.IsTrue(value2.First().ComputerDetailId == -9);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: Assert.IsTrue(value2.Last().ComputerDetailId == -10);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionInt,The following statement contains a magic number: Assert.AreEqual(5309' value3.Last().ManagersPersonId);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionMath,The following statement contains a magic number: Assert.AreEqual(4' value1.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionDate,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                        where c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                        select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionDate,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                        where c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                        select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionDate,The following statement contains a magic number: Assert.AreEqual(-10' value2.ComputerDetailId);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionInt,The following statement contains a magic number: var q4 = (from c in context.Person.OfType<Employee>()                        where c.ManagersPersonId == 47                        select c) as DataServiceQuery<Employee>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoEntity_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new EntityCustomer { Name = c.Name }) as DataServiceQuery<EntityCustomer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer2(1000' c.Name)) as DataServiceQuery<NonEntityCustomer2>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer2(1000' c.Name)) as DataServiceQuery<NonEntityCustomer2>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.AreEqual(1000' customer.CustomerId);                      Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer { CustomerId = 1000' Name = c.Name }) as DataServiceQuery<NonEntityCustomer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer { CustomerId = 1000' Name = c.Name }) as DataServiceQuery<NonEntityCustomer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.AreEqual(1000' customer.CustomerId);                      Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectMappedProperties_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { CustomerId = c.CustomerId }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectMappedProperties_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.AreEqual(-10' customer.CustomerId);                      Assert.AreEqual(null' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectNavigationProperty_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { Wife = c.Wife }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectProperty_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { Name = c.Name }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectTwoProperties_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { Name = c.Name' CustomerId = c.CustomerId }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectTwoProperties_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.AreEqual(-10' customer.CustomerId);                      Assert.AreEqual("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTakeTest,The following statement contains a magic number: var query = context.Computer.OrderBy(c => c.ComputerId).Skip(1).Take(3) as DataServiceQuery<Computer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTakeTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.AreEqual(-9' computers.First().ComputerId);                      Assert.AreEqual(-7' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTakeTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.AreEqual(-9' computers.First().ComputerId);                      Assert.AreEqual(-7' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.AreEqual(-9' computers.First().ComputerId);                      Assert.AreEqual(-1' computers.Last().ComputerId);                        this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_TakeTest,The following statement contains a magic number: var query = context.Computer.OrderBy(c => c.ComputerId).Take(2) as DataServiceQuery<Computer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_TakeTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.AreEqual(-10' computers.First().ComputerId);                      Assert.AreEqual(-9' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousQueryTests.cs,Linq_TakeTest,The following statement contains a magic number: query.BeginExecute(                  (ar) =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.AreEqual(-10' computers.First().ComputerId);                      Assert.AreEqual(-9' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: Assert.AreEqual(201'returnedValue.StatusCode'  "StatusCode == 201");
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: c1.CustomerId = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: Assert.AreEqual(204'returnedValue.StatusCode'  "StatusCode == 204");
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: Assert.AreEqual(200'returnedValue.StatusCode'  "StatusCode == 200");
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ServiceOperationTests,The following statement contains a magic number: Assert.AreEqual(10' count);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Employee e1 = new Employee {Salary = 300' Name = "bill"' PersonId = 1005};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Employee e1 = new Employee {Salary = 300' Name = "bill"' PersonId = 1005};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: ComputerDetail cd1 = new ComputerDetail {ComputerDetailId = 101' SpecificationsBag = new ObservableCollection<string>()};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Customer c1 = new Customer { Name = "nill"' CustomerId = 1007' Auditing = new AuditInfo { ModifiedBy = "No-one"' ModifiedDate = DateTimeOffset.Now' Concurrency = new ConcurrencyInfo { Token = "Test"' QueriedDateTime = DateTimeOffset.MinValue } } };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: var ar1 = context.BeginExecute(new Uri("Person/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("n"' 100)).EnqueueWait(this);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Assert.AreEqual(400' e1.Salary);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The following statement contains a magic number: Employee e1 = new Employee {Name = "tim"' Salary = 300' Title = "bill"'PersonId = 1006 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The following statement contains a magic number: Employee e1 = new Employee {Name = "tim"' Salary = 300' Title = "bill"'PersonId = 1006 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The following statement contains a magic number: Assert.AreEqual(-10' comp.ComputerId);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: const int personId = -6;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: var employee = new Employee() { PersonId = 122222' ManagersPersonId = 2222' Salary = 544444444 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: var employee = new Employee() { PersonId = 122222' ManagersPersonId = 2222' Salary = 544444444 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: var employee = new Employee() { PersonId = 122222' ManagersPersonId = 2222' Salary = 544444444 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddBaseTypeNavigationLinkTest,The following statement contains a magic number: const int personId = -4;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddBaseTypeNavigationLinkTest,The following statement contains a magic number: var personMetadata = new PersonMetadata {PersonId = 12432};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkSetLinkTest,The following statement contains a magic number: Customer c1 = new Customer { CustomerId = 1004 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkSetLinkTest,The following statement contains a magic number: Customer c2 = new Customer { CustomerId = 1006 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkSetLinkTest,The following statement contains a magic number: Order o1 = new Order { OrderId = 999 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTestDerivedTypes,The following statement contains a magic number: Employee e1 = new Employee {PersonId = 3000};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTestDerivedTypes,The following statement contains a magic number: Employee e2 = new Employee {PersonId = 3001};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Customer c1 = new Customer {CustomerId = 1000};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Order o1 = new Order {OrderId = 1001};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Order o2 = new Order {OrderId = 1002};
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Assert.AreEqual(2' c1.Orders.Count ' "IsTrue c1.Orders.Count == 2");
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: var personQuery = context.Person.Where(p => p.PersonId == 1000) as DataServiceQuery<Person>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: var person = people.Where(p => p.PersonId == 1000).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: person = Person.CreatePerson(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: person = people.Where(p => p.PersonId == 1000).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteBatchTest,The following statement contains a magic number: int numberOfPeople = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteBatchTest,The following statement contains a magic number: context.AddToPerson(new Person { PersonId = 1000 + i });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteBatchTest,The following statement contains a magic number: var query = context.Person.Where(p => p.PersonId >= 1000) as DataServiceQuery<Person>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteMediaLinkEntryTest,The following statement contains a magic number: var car = new Car { VIN = 1000 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteMediaLinkEntryTest,The following statement contains a magic number: car = cars.Where(c => c.VIN == 1000).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteNamedStreamTest,The following statement contains a magic number: var car = new Car { VIN = 1000 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteNamedStreamTest,The following statement contains a magic number: car = cars.Where(c => c.VIN == 1000).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,GetStream,The following statement contains a magic number: return  new MemoryStream(new byte[] {64' 65' 66});
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,GetStream,The following statement contains a magic number: return  new MemoryStream(new byte[] {64' 65' 66});
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsynchronousUpdateTests.cs,GetStream,The following statement contains a magic number: return  new MemoryStream(new byte[] {64' 65' 66});
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: Assert.IsTrue((response.First() as ChangeOperationResponse).StatusCode == 201' "StatusCode == 201");
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: Order o1 = new Order { OrderId = 1000' CustomerId = 1' Concurrency = new ConcurrencyInfo() { Token = "token1" } };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: Order order = new Order() { OrderId = 1000 + i };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: i <= 9
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,QueryEntitySetPagingTest,The following statement contains a magic number: Assert.AreEqual(2' currentPageCount);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,QueryEntitySetPagingTest,The following statement contains a magic number: Assert.AreEqual(2' currentPageCount);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: var c1 = new Customer() { CustomerId = -10 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: Order order = new Order() { OrderId = 1000 + i };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: i <= 9
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: var resp = (await ((DataServiceQuery<Customer>)(context.Customer.Expand(c => c.Orders).Where(c => c.CustomerId == -10))).ExecuteAsync()) as QueryOperationResponse<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: Assert.IsTrue(customer.Orders.Count() == 4);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: Assert.IsTrue(customer.Orders.Count() == 6);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetReadStreamTest,The following statement contains a magic number: var car = new Car { VIN = 1000 };
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The following statement contains a magic number: var qr = await context.ExecuteBatchAsync(new DataServiceRequest[] { new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri) });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The following statement contains a magic number: var qr = await context.ExecuteBatchAsync(new DataServiceRequest[] { new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri) });
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: await context.ExecuteAsync(new Uri(queryable.RequestUri.ToString() + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'                  "POST"'                  new BodyOperationParameter("n"' 5));
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: Assert.AreEqual(expectedEmployee0Salary + 5' currentEmployees.First().Salary);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: await context.ExecuteAsync<int>(new Uri(queryable.RequestUri.ToString() + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'                  "POST"'                  new BodyOperationParameter("n"' 5));
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: Assert.AreEqual(expectedEmployee0Salary + 10' currentEmployees.First().Salary);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: Assert.AreEqual(10' resultValue);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: query = ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).IncludeTotalCount();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).GetAllPagesAsync()).ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Take(4)).GetAllPagesAsync()).ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: Assert.AreEqual(4' queryCustomersCount);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Skip(4)).GetAllPagesAsync()).ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: Assert.AreEqual(allCustomersCount - 4' queryCustomersCount);
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The following statement contains a magic number: var query = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.IncludeTotalCount();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The following statement contains a magic number: var queryOrderCount = (await context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.GetAllPagesAsync()).ToList().Count();
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetParitalPagesAsyncTest,The following statement contains a magic number: ++count == 3
Magic Number,Microsoft.Test.OData.Tests.Client.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\AsynchronousTests\AsyncMethodTests.cs,GetParitalPagesAsyncTest,The following statement contains a magic number: Assert.AreEqual(2' sentRequestCount);
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionNotBound,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteActionImport,The following statement contains a magic number: Assert.AreEqual(-10' productId);
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExcuteBoundAction,The following statement contains a magic number: Assert.AreEqual(85' employee.Salary);
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExcuteBoundAction,The following statement contains a magic number: SpecialEmployee specialEmployee = (SpecialEmployee)contextWrapper.Context.Person.Where(p => p.PersonId == -7).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExcuteBoundAction,The following statement contains a magic number: Assert.AreEqual(2016141257' salary);
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExcuteBoundAction,The following statement contains a magic number: specialEmployee = (SpecialEmployee)contextWrapper.Context.Person.Where(p => p.PersonId == -7).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExcuteBoundAction,The following statement contains a magic number: Assert.AreEqual(2016141258' specialEmployee.Salary);
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteEntitySetBoundOverloadedOperations,The following statement contains a magic number: contextWrapper.Execute(                      new Uri(this.ServiceUri + "Person/" + ActionOverloadingQueryTests.EmployeeTypeName + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Absolute)'                      "POST"'                      new BodyOperationParameter("n"' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteEntitySetBoundOverloadedOperations,The following statement contains a magic number: contextWrapper.Execute(                      new Uri(this.ServiceUri + "Person/" + ActionOverloadingQueryTests.SpecialEmployeeTypeName + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Absolute)'                      "POST"'                      new BodyOperationParameter("n"' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteEntitySetBoundOverloadedOperations,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The following statement contains a magic number: contextWrapper.Execute<bool>(employeeDescriptors.Single().Target' "POST"' true' new BodyOperationParameter("n"' 123)).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,ExecuteOverloadedActionsWithDifferentParameter,The following statement contains a magic number: contextWrapper.Execute<bool>(specialEmployeeDescriptors.Where(d => d.Target.AbsoluteUri.Contains(".Employee")).Single().Target' "POST"' true' new BodyOperationParameter("n"' 123)).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,OverloadedActionsProjection,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.ActionOverloadingTests,ActionOverloadingEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ActionOverloadingTests\ActionOverloadingEndToEndTests.cs,BaseDerivedTypeOverloadedActionsProjection,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,EntityInstanceAnnotation,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,ComplexTypeInstanceAnnotation,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,TopLevelComplexTypeInstanceAnnotation,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AnnotationTests,InstanceAnnotationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AnnotationTests\InstanceAnnotationTests.cs,TopLevelPropertyOfComplexTypeInstanceAnnotation,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Assert.AreEqual(202' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Assert.AreEqual(202' statusCheckResponse1.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Thread.Sleep(6000);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Assert.AreEqual(200' statusCheckResponse2.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Assert.AreEqual(200' innerMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncQueryRequestTest,The following statement contains a magic number: Assert.AreEqual("Peter"' entries[4].Properties.Single(p => p.Name == "FirstName").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: var accountEntry = new ODataResourceWrapper()                  {                      Resource = new ODataResource                      {                          TypeName = NameSpacePrefix + "Account"'                          Properties = new[]                          {                              new ODataProperty { Name = "AccountID"' Value = 110 }'                              new ODataProperty { Name = "CountryRegion"' Value = "CN" }                          }                      }'                      NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo                              {                                  Name = "AccountInfo"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "AccountInfo"'                                      Properties = new []                                      {                                          new ODataProperty                                          {                                              Name = "FirstName"'                                              Value = "FN"                                          }'                                          new ODataProperty                                          {                                              Name = "LastName"'                                              Value = "LN"                                          }                                      }                                  }                              }                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Assert.AreEqual(202' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Assert.AreEqual(202' statusCheckResponse1.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Thread.Sleep(6000);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Assert.AreEqual(200' statusCheckResponse2.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Assert.AreEqual(201' innerMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncCreateRequestTest,The following statement contains a magic number: Assert.AreEqual(110' entries[1].Properties.Single(p => p.Name == "AccountID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP1 = new ODataProperty {Name = "PaymentInstrumentID"' Value = 102910};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty {Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57))};
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: Assert.AreEqual(202' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: Assert.AreEqual(202' statusCheckResponse1.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: Thread.Sleep(6000);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: Assert.AreEqual(200' statusCheckResponse2.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: Assert.AreEqual(200' innerMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following statement contains a magic number: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP1 = new ODataProperty { Name = "PaymentInstrumentID"' Value = 102910 };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 29' 11' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following statement contains a magic number: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Magic Number,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,GetOrdersOnMyBirthday,The following statement contains a magic number: var ordersOnMyBirthday = from order in TestClientContext.Orders                                       where order.OrderDate.Day == 29 && order.OrderDate.Month == 5                                       select order;
Magic Number,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,GetOrdersOnMyBirthday,The following statement contains a magic number: var ordersOnMyBirthday = from order in TestClientContext.Orders                                       where order.OrderDate.Day == 29 && order.OrderDate.Month == 5                                       select order;
Magic Number,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,GetCustomersByKey,The following statement contains a magic number: var first5Customers = TestClientContext.Customers.Take(5).ToList();
Magic Number,Microsoft.Test.OData.Tests.Client.ClientTests,ClientEntityDescripterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientTests\ClientEntityDescripterTests.cs,GetOrderDetailsByKey,The following statement contains a magic number: var first5Details = TestClientContext.OrderDetails.Take(5).ToList();
Magic Number,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,MismatchedClientModelWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\MismatchedClientModelWithoutTypeResolverTests.cs,EntryQuery,The following statement contains a magic number: var customerResults = contextWrapper.CreateQuery<Customer>("Customer").Where(c => c.CustomerId == -10).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,MismatchedClientModelWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\MismatchedClientModelWithoutTypeResolverTests.cs,EntryQuery,The following statement contains a magic number: var pageViewResults = contextWrapper.CreateQuery<PageView>("PageView").Where(p => p.PageViewId == -2).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ClientWithoutTypeResolverTests,OpenTypesWithoutTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ClientWithoutTypeResolverTests\OpenTypesWithoutTypeResolverTests.cs,UpdateOpenProperties,The following statement contains a magic number: updateRow.OpenComplex = new ContactDetails                  {                      Byte = byte.MinValue'                      Contacted = DateTimeOffset.Now'                      Double = double.MaxValue'                      FirstContacted = new byte[] {byte.MaxValue' byte.MinValue' (byte) 0}'                      GUID = Guid.NewGuid()'                      LastContacted = DateTimeOffset.Now'                      PreferedContactTime = TimeSpan.FromMilliseconds(1234D)'                      Short = short.MinValue'                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' products1.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' products2.Single(p => p.ProductIDPlus == 5).DetailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' products2.Single(p => p.ProductIDPlus == 5).DetailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' products3.Single(p => p.ProductIDPlus == 5).DetailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' products3.Single(p => p.ProductIDPlus == 5).DetailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: var product4 = TestClientContext.ProductsPlus.Where(p => p.ProductIDPlus == 5).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' product4.DetailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: var accounts6 = TestClientContext.AccountsPlus                  .Where(a => a.AccountIDPlus == 103)                  .Select(a => new AccountPlus() { AccountIDPlus = a.AccountIDPlus' MyGiftCardPlus = a.MyGiftCardPlus' CountryRegionPlus = a.CountryRegionPlus });
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(103' account6.AccountIDPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(3' accounts7.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(5' people8.PersonIDPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: Assert.AreEqual(count' 7);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: var productReview10 = TestClientContext.ProductReviewsPlus.Where(pd =>                  pd.ProductDetailIDPlus == 2                  && pd.ProductIDPlus == 5                  && pd.ReviewTitlePlus == "Special"                  && pd.RevisionIDPlus == 1).First();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicQuery,The following statement contains a magic number: var productReview10 = TestClientContext.ProductReviewsPlus.Where(pd =>                  pd.ProductDetailIDPlus == 2                  && pd.ProductIDPlus == 5                  && pd.ReviewTitlePlus == "Special"                  && pd.RevisionIDPlus == 1).First();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: AccountPlus newAccount1 = new AccountPlus()              {                  AccountIDPlus = 110'                  CountryRegionPlus = "CN"'                  AccountInfoPlus = new AccountInfoPlus()                  {                      FirstNamePlus = "New"'                      LastNamePlus = "Boy"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: PaymentInstrumentPlus newPI = new PaymentInstrumentPlus()              {                  PaymentInstrumentIDPlus = 110901'                  FriendlyNamePlus = "110's first PI"'                  CreatedDatePlus = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: PaymentInstrumentPlus newPI = new PaymentInstrumentPlus()              {                  PaymentInstrumentIDPlus = 110901'                  FriendlyNamePlus = "110's first PI"'                  CreatedDatePlus = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: PaymentInstrumentPlus newPI = new PaymentInstrumentPlus()              {                  PaymentInstrumentIDPlus = 110901'                  FriendlyNamePlus = "110's first PI"'                  CreatedDatePlus = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: PaymentInstrumentPlus newPI = new PaymentInstrumentPlus()              {                  PaymentInstrumentIDPlus = 110901'                  FriendlyNamePlus = "110's first PI"'                  CreatedDatePlus = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var r1 = TestClientContext.AccountsPlus.Where(account => account.AccountIDPlus == 110).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var r2 = TestClientContext.CreateQuery<PaymentInstrumentPlus>("Accounts(110)/MyPaymentInstruments")                  .Where(pi => pi.PaymentInstrumentIDPlus == 110901).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: r1 = TestClientContext.AccountsPlus.Where(account => account.AccountIDPlus == 110).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var myGiftCard = new GiftCardPlus()              {                  GiftCardIDPlus = 11111'                  GiftCardNOPlus = "11111"'                  AmountPlus = 20'                  ExperationDatePlus = new DateTimeOffset(2015' 12' 1' 0' 0' 0' new TimeSpan(0))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var myGiftCard = new GiftCardPlus()              {                  GiftCardIDPlus = 11111'                  GiftCardNOPlus = "11111"'                  AmountPlus = 20'                  ExperationDatePlus = new DateTimeOffset(2015' 12' 1' 0' 0' 0' new TimeSpan(0))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var myGiftCard = new GiftCardPlus()              {                  GiftCardIDPlus = 11111'                  GiftCardNOPlus = "11111"'                  AmountPlus = 20'                  ExperationDatePlus = new DateTimeOffset(2015' 12' 1' 0' 0' 0' new TimeSpan(0))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var myGiftCard = new GiftCardPlus()              {                  GiftCardIDPlus = 11111'                  GiftCardNOPlus = "11111"'                  AmountPlus = 20'                  ExperationDatePlus = new DateTimeOffset(2015' 12' 1' 0' 0' 0' new TimeSpan(0))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: r1 = TestClientContext.AccountsPlus.Expand(account => account.MyGiftCardPlus).Where(account => account.AccountIDPlus == 110).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: Assert.AreEqual(11111' r1.MyGiftCardPlus.GiftCardIDPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: CustomerPlus customerPlus = new CustomerPlus()              {                  FirstNamePlus = "Nelson"'                  MiddleNamePlus = "S."'                  LastNamePlus = "Black"'                  NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                  EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                  PersonIDPlus = 10001'                  BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                  CityPlus = "London"'                  HomePlus = GeographyPoint.Create(32.1' 23.1)'                  TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                  HomeAddressPlus = new HomeAddressPlus()                  {                      CityPlus = "London"'                      PostalCodePlus = "98052"'                      StreetPlus = "1 Microsoft Way"'                      FamilyNamePlus = "Black's Family"                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: CustomerPlus customerPlus = new CustomerPlus()              {                  FirstNamePlus = "Nelson"'                  MiddleNamePlus = "S."'                  LastNamePlus = "Black"'                  NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                  EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                  PersonIDPlus = 10001'                  BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                  CityPlus = "London"'                  HomePlus = GeographyPoint.Create(32.1' 23.1)'                  TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                  HomeAddressPlus = new HomeAddressPlus()                  {                      CityPlus = "London"'                      PostalCodePlus = "98052"'                      StreetPlus = "1 Microsoft Way"'                      FamilyNamePlus = "Black's Family"                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: CustomerPlus customerPlus = new CustomerPlus()              {                  FirstNamePlus = "Nelson"'                  MiddleNamePlus = "S."'                  LastNamePlus = "Black"'                  NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                  EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                  PersonIDPlus = 10001'                  BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                  CityPlus = "London"'                  HomePlus = GeographyPoint.Create(32.1' 23.1)'                  TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                  HomeAddressPlus = new HomeAddressPlus()                  {                      CityPlus = "London"'                      PostalCodePlus = "98052"'                      StreetPlus = "1 Microsoft Way"'                      FamilyNamePlus = "Black's Family"                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: CustomerPlus customerPlus = new CustomerPlus()              {                  FirstNamePlus = "Nelson"'                  MiddleNamePlus = "S."'                  LastNamePlus = "Black"'                  NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                  EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                  PersonIDPlus = 10001'                  BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                  CityPlus = "London"'                  HomePlus = GeographyPoint.Create(32.1' 23.1)'                  TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                  HomeAddressPlus = new HomeAddressPlus()                  {                      CityPlus = "London"'                      PostalCodePlus = "98052"'                      StreetPlus = "1 Microsoft Way"'                      FamilyNamePlus = "Black's Family"                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: CustomerPlus customerPlus = new CustomerPlus()              {                  FirstNamePlus = "Nelson"'                  MiddleNamePlus = "S."'                  LastNamePlus = "Black"'                  NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                  EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                  PersonIDPlus = 10001'                  BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                  CityPlus = "London"'                  HomePlus = GeographyPoint.Create(32.1' 23.1)'                  TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                  HomeAddressPlus = new HomeAddressPlus()                  {                      CityPlus = "London"'                      PostalCodePlus = "98052"'                      StreetPlus = "1 Microsoft Way"'                      FamilyNamePlus = "Black's Family"                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: CustomerPlus customerPlus = new CustomerPlus()              {                  FirstNamePlus = "Nelson"'                  MiddleNamePlus = "S."'                  LastNamePlus = "Black"'                  NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                  EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                  PersonIDPlus = 10001'                  BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                  CityPlus = "London"'                  HomePlus = GeographyPoint.Create(32.1' 23.1)'                  TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                  HomeAddressPlus = new HomeAddressPlus()                  {                      CityPlus = "London"'                      PostalCodePlus = "98052"'                      StreetPlus = "1 Microsoft Way"'                      FamilyNamePlus = "Black's Family"                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var ordersPlus = new ODataClient.DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var customer1 = TestClientContext.CustomersPlus.Where(c => c.PersonIDPlus == 10001).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var customer = TestClientContext.CustomersPlus.Expand(p => (p as CustomerPlus).OrdersPlus).Where(p => p.PersonIDPlus == 10001).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var order = TestClientContext.OrdersPlus.Where(p => p.OrderIDPlus == 11111111).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: Assert.IsTrue(!accounts.Any(ac => ac.AccountIDPlus == 110));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: var person2 = TestClientContext.PeoplePlus.Where((p) => p.PersonIDPlus == 2).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: Assert.IsNotNull(person1.ParentPlus.PersonIDPlus == 2);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: DepartmentPlus department = new DepartmentPlus()              {                  DepartmentIDPlus = 100001'                  NamePlus = "ID" + 100001'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,BasicModify,The following statement contains a magic number: DepartmentPlus department = new DepartmentPlus()              {                  DepartmentIDPlus = 100001'                  NamePlus = "ID" + 100001'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenComplexType,The following statement contains a magic number: AccountPlus account = new AccountPlus()              {                  AccountIDPlus = 1000000'                  CountryRegionPlus = "CN"'                  AccountInfoPlus = new AccountInfoPlus()                  {                      FirstNamePlus = "Peter"'                      MiddleNamePlus = "White"'                      LastNamePlus = "Andy"'                      IsActivePlus = true                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenComplexType,The following statement contains a magic number: account = TestClientContext.AccountsPlus.Where(a => a.AccountIDPlus == 1000000).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenComplexType,The following statement contains a magic number: var accountWrapper = new ODataResourceWrapper()              {                  Resource = new ODataResource()                  {                      TypeName = ServerSideNameSpacePrefix + "Account"'                      Properties = new[]                      {                          new ODataProperty { Name = "AccountID"' Value = 1000000 }                      }                  }'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "AccountInfo"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource =new ODataResource()                              {                                  TypeName = ServerSideNameSpacePrefix + "AccountInfo"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "FirstName"'                                          Value = "Peter"                                      }'                                      new ODataProperty                                      {                                          Name = "LastName"'                                          Value = "Andy"                                      }'                                      //Property that exists in Customer-Defined client code.                                      new ODataProperty                                      {                                          Name = "MiddleName"'                                          Value = "White2"                                      }'                                      new ODataProperty                                      {                                          Name = "IsActive"'                                          Value = false'                                      }'                                      //Property that doesn't exist in Customer-Defined client code.                                      new ODataProperty                                      {                                          Name = "ShippingAddress"'                                          Value = "#999' ZiXing Road"                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenComplexType,The following statement contains a magic number: account = TestClientContext.AccountsPlus.Where(a => a.AccountIDPlus == 1000000).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenEntityType,The following statement contains a magic number: entry.Properties = new[]               {                  new ODataProperty                  {                      Name = "FullName"'                      Value = "MS Ltd."                  }'                  new ODataProperty                  {                      Name = "PhoneNumber"'                      Value = "123-45678"                                      }'                                    new ODataProperty                  {                      Name = "TotalAssets"'                      Value = 500000L'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenEntityType,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenEntityType,The following statement contains a magic number: Assert.AreEqual(500000' company.TotalAssetsPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenEntityType,The following statement contains a magic number: company.TotalAssetsPlus = 1000000;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,OpenEntityType,The following statement contains a magic number: Assert.AreEqual(1000000' company.TotalAssetsPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: var account = TestClientContext.AccountsPlus.Where(a => a.AccountIDPlus == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: Assert.AreEqual(101901' r2.PaymentInstrumentIDPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: var account3 = TestClientContext.AccountsPlus.Expand(c => c.MyGiftCardPlus).Where(a => a.AccountIDPlus == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: Assert.AreEqual(39.8' result3);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: var product4 = TestClientContext.ProductsPlus.Where(p => p.ProductIDPlus == 7).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: var account5 = TestClientContext.AccountsPlus.Where(ac => ac.AccountIDPlus == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,InvokeOperations,The following statement contains a magic number: Assert.AreEqual(101901' result5.PaymentInstrumentIDPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,ContainedEntityQuery,The following statement contains a magic number: Assert.AreEqual(103902' r1[0].PaymentInstrumentIDPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,ContainedEntityQuery,The following statement contains a magic number: var q2 = TestClientContext.CreateQuery<PaymentInstrumentPlus>("Accounts(103)/MyPaymentInstruments").Expand(pi => pi.BillingStatementsPlus).Where(pi => pi.PaymentInstrumentIDPlus == 103901);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,ContainedEntityQuery,The following statement contains a magic number: Assert.AreEqual(23.88' result);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,SingltonQuery,The following statement contains a magic number: Assert.AreEqual(2' result1);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,SingltonQuery,The following statement contains a magic number: Assert.AreEqual(100001' result2);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,SingltonQuery,The following statement contains a magic number: var revenue = publicCompany.IncreaseRevenuePlus(10).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,CustomizeNamingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\CustomizeNamingTest.cs,SingltonQuery,The following statement contains a magic number: Assert.IsTrue(originalRevenue + 10 == revenue);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var discountAction = TestClientContext.Products.Discount(50);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var queryProduct = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } });
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var accessLevelAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var getProductDetailsAction = TestClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 5 } }).GetProductDetails(1);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: Assert.AreEqual(5' pd.ProductID);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 5 }' { "ProductDetailID"' 2 } }).GetRelatedProduct();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 5 }' { "ProductDetailID"' 2 } }).GetRelatedProduct();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var queryProducts = TestClientContext.Products.Where(p => p.ProductID > 3)                  .Select(p => new Product() { Details = p.Details' Name = p.Name' ProductID = p.ProductID })                  .Skip(3).Take(2) as DataServiceQuery<Product>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var queryProducts = TestClientContext.Products.Where(p => p.ProductID > 3)                  .Select(p => new Product() { Details = p.Details' Name = p.Name' ProductID = p.ProductID })                  .Skip(3).Take(2) as DataServiceQuery<Product>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: var queryProducts = TestClientContext.Products.Where(p => p.ProductID > 3)                  .Select(p => new Product() { Details = p.Details' Name = p.Name' ProductID = p.ProductID })                  .Skip(3).Take(2) as DataServiceQuery<Product>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnEntitySet,The following statement contains a magic number: Assert.IsTrue(p.ProductID > 3);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionBoundOnContainedSingleNavigation,The following statement contains a magic number: var getActualAmountFunction = TestClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(1);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionBoundOnContainedSingleNavigation,The following statement contains a magic number: getActualAmountFunction = TestClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(null);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var discountAction = getAllProductsFunction.DiscountPlus(50);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: Assert.AreEqual(unitPrice * 50 / 100' p.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: Assert.AreEqual(unitPrice * 50 / 100' p.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var getBossEmailsFunction = TestClientContext.GetBossEmailsPlus(0' 10);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnActionImport,The following statement contains a magic number: var discountAction = TestClientContext.DiscountPlus(50);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnActionImport,The following statement contains a magic number: Assert.AreEqual(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,DelayQueryOnActionImport,The following statement contains a magic number: Assert.AreEqual(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,ByMultipleKey,The following statement contains a magic number: var queryProductDetails = TestClientContext.ProductDetailsPlus.ByKey(new Dictionary<string' object> { { "ProductID"' 6 }' { "ProductDetailID"' 1 } });
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,ByMultipleKey,The following statement contains a magic number: var queryRelatedProductDetails = TestClientContext.ProductDetailsPlus.ByKey(new Dictionary<string' object> { { "ProductID"' 6 }' { "ProductDetailID"' 1 } }).GetRelatedProductPlus();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: var queryAccount = TestClientContext.AccountsPlus.Where(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue() > 1) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = TestClientContext.AccountsPlus.Where(a => 1 != a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue()) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: var queryProducts = TestClientContext.ProductsPlus.Where(p => p.GetProductDetailsPlus(2).Count() > 1) as DataServiceQuery<ProductPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryProducts = TestClientContext.ProductsPlus.Where(p => 1 <= p.GetProductDetailsPlus(2).Count()) as DataServiceQuery<ProductPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = TestClientContext.AccountsPlus.OrderBy(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue()) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4DelayQueryTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4DelayQueryTest.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = TestClientContext.AccountsPlus.OrderByDescending(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValue()) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The following statement contains a magic number: orders[1].OrderShelfLifes.Add(TimeSpan.FromHours(1.2));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchPartialProperties,The following statement contains a magic number: Assert.AreEqual(                  2'                  this.TestClientContext.Orders.Where((it) => it.OrderID == orders[1].OrderID).Single().OrderShelfLifes.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPatchFullProperties,The following statement contains a magic number: this.TestClientContext.Configurations.RequestPipeline.OnEntryEnding(                  (arg) =>                  {                      if (arg.Entry.TypeName.EndsWith("Person"))                      {                          Assert.AreEqual(11' arg.Entry.Properties.Count());                      }                  });
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutFullProperties,The following statement contains a magic number: orders[1].OrderShelfLifes.Add(TimeSpan.FromHours(1.2));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutFullProperties,The following statement contains a magic number: expectedPropertyCount = 6;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<AccountPlus> accounts =                  new DataServiceCollection<AccountPlus>(this.TestClientContext)                  {                      new AccountPlus()                      {                          AccountIDPlus = 110'                          CountryRegionPlus = "CN"'                          AccountInfoPlus = new AccountInfoPlus()                          {                              FirstNamePlus = "New"'                              LastNamePlus = "Boy"                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<ProductPlus> products =                  new DataServiceCollection<ProductPlus>(this.TestClientContext)                  {                      new  ProductPlus()                      {                          NamePlus = "Apple"'                          ProductIDPlus = 1000000'                          QuantityInStockPlus = 20'                          QuantityPerUnitPlus = "Pound"'                          UnitPricePlus = 0.35f'                          DiscontinuedPlus = false'                          SkinColorPlus = ColorPlus.RedPlus'                          CoverColorsPlus = new ObservableCollection<ColorPlus>(){ ColorPlus.BluePlus }'                          UserAccessPlus = AccessLevelPlus.ReadPlus                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<ProductPlus> products =                  new DataServiceCollection<ProductPlus>(this.TestClientContext)                  {                      new  ProductPlus()                      {                          NamePlus = "Apple"'                          ProductIDPlus = 1000000'                          QuantityInStockPlus = 20'                          QuantityPerUnitPlus = "Pound"'                          UnitPricePlus = 0.35f'                          DiscontinuedPlus = false'                          SkinColorPlus = ColorPlus.RedPlus'                          CoverColorsPlus = new ObservableCollection<ColorPlus>(){ ColorPlus.BluePlus }'                          UserAccessPlus = AccessLevelPlus.ReadPlus                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: DataServiceCollection<ProductPlus> products =                  new DataServiceCollection<ProductPlus>(this.TestClientContext)                  {                      new  ProductPlus()                      {                          NamePlus = "Apple"'                          ProductIDPlus = 1000000'                          QuantityInStockPlus = 20'                          QuantityPerUnitPlus = "Pound"'                          UnitPricePlus = 0.35f'                          DiscontinuedPlus = false'                          SkinColorPlus = ColorPlus.RedPlus'                          CoverColorsPlus = new ObservableCollection<ColorPlus>(){ ColorPlus.BluePlus }'                          UserAccessPlus = AccessLevelPlus.ReadPlus                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 3;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: Assert.AreEqual(2' product.CoverColorsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: Assert.AreEqual(2' product.CoverColorsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var datetime = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var datetime = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: var datetime = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: ((CustomerPlus)people[0]).BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: ((CustomerPlus)people[0]).BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: ((CustomerPlus)people[0]).BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: Action<WritingEntryArgs> onEntryEndingAction1 = (arg) =>              {                  if (arg.Entry.TypeName.EndsWith("HomeAddressPlus"))                  {                      Assert.AreEqual(4' arg.Entry.Properties.Count());                      Assert.AreEqual("Redmond"' arg.Entry.Properties.Single(p => p.Name == "City").Value);                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: customer.OrdersPlus.First().OrderShelfLifesPlus.Add(new TimeSpan(2));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: Assert.AreEqual(2' people0.EmailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: Assert.AreEqual(2' people0.OrdersPlus.First().OrderShelfLifesPlus.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 4;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: publicCompany.Single().TotalAssetsPlus = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: Assert.AreEqual(company.TotalAssetsPlus' 10);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPartialPropertiesWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateObjectWithoutChange,The following statement contains a magic number: expectedPropertyCount = 5;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateObjectWithoutChange,The following statement contains a magic number: publicCompany.Single().RevenuePlus = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateObjectWithoutChange,The following statement contains a magic number: expectedPropertyCount = 3;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateObjectWithoutChange,The following statement contains a magic number: this.TestClientContext.Configurations.RequestPipeline.OnEntryEnding(              (arg) =>              {                  if (arg.Entry.TypeName.EndsWith("AccountInfo"))                  {                      Assert.AreEqual(4' arg.Entry.Properties.Count());                  }              });
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutWithFullPropertiesInBatchWithCustomizedName,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders =                  new DataServiceCollection<OrderPlus>(this.TestClientContext.OrdersPlus.Expand("OrderDetails").Take(2));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutWithFullPropertiesInBatchWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 6;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutWithFullPropertiesInBatchWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutWithFullPropertiesInBatchWithCustomizedName,The following statement contains a magic number: expectedPropertyCount = 5;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,UpdateByPutWithFullPropertiesInBatchWithCustomizedName,The following statement contains a magic number: var orders2 = this.TestClientContext.OrdersPlus.Expand(o => o.OrderDetailsPlus).Take(2).ToList();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<PersonPlus> people =                  new DataServiceCollection<PersonPlus>(this.TestClientContext' "People"' null' null)                  {                      new CustomerPlus()                      {                          FirstNamePlus = "Nelson"'                          MiddleNamePlus = "S."'                          LastNamePlus = "Black"'                          NumbersPlus = new ObservableCollection<string> { "111-111-1111" }'                          EmailsPlus = new ObservableCollection<string> { "abc@abc.com" }'                          PersonIDPlus = 10001'                          BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3))'                          CityPlus = "London"'                          HomePlus = GeographyPoint.Create(32.1' 23.1)'                          TimeBetweenLastTwoOrdersPlus = new TimeSpan(1)'                          HomeAddressPlus = new HomeAddressPlus()                          {                              CityPlus = "London"'                              PostalCodePlus = "98052"'                              StreetPlus = "1 Microsoft Way"'                              FamilyNamePlus = "Black's Family"                          }'                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<OrderPlus> orders = new DataServiceCollection<OrderPlus>(TestClientContext)              {                  new OrderPlus()                  {                      OrderIDPlus = 11111111'                      OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12))'                      ShelfLifePlus = new TimeSpan(1)'                      OrderShelfLifesPlus = new ObservableCollection<TimeSpan>(){new TimeSpan(1)}                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<AccountPlus> accounts =                  new DataServiceCollection<AccountPlus>(this.TestClientContext)                  {                      new AccountPlus()                      {                          AccountIDPlus = 110'                          CountryRegionPlus = "CN"'                          AccountInfoPlus = new AccountInfoPlus()                          {                              FirstNamePlus = "New"'                              LastNamePlus = "Boy"                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var gc = new GiftCardPlus()              {                  GiftCardIDPlus = 30000'                  GiftCardNOPlus = "AAA123A"'                  AmountPlus = 19.9'                  ExperationDatePlus = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<ProductPlus> products =                  new DataServiceCollection<ProductPlus>(this.TestClientContext)                  {                      new  ProductPlus()                      {                          NamePlus = "Apple"'                          ProductIDPlus = 1000000'                          QuantityInStockPlus = 20'                          QuantityPerUnitPlus = "Pound"'                          UnitPricePlus = 0.35f'                          DiscontinuedPlus = false'                          SkinColorPlus = ColorPlus.RedPlus'                          CoverColorsPlus = new ObservableCollection<ColorPlus>(){ ColorPlus.BluePlus }'                          UserAccessPlus = AccessLevelPlus.ReadPlus                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<ProductPlus> products =                  new DataServiceCollection<ProductPlus>(this.TestClientContext)                  {                      new  ProductPlus()                      {                          NamePlus = "Apple"'                          ProductIDPlus = 1000000'                          QuantityInStockPlus = 20'                          QuantityPerUnitPlus = "Pound"'                          UnitPricePlus = 0.35f'                          DiscontinuedPlus = false'                          SkinColorPlus = ColorPlus.RedPlus'                          CoverColorsPlus = new ObservableCollection<ColorPlus>(){ ColorPlus.BluePlus }'                          UserAccessPlus = AccessLevelPlus.ReadPlus                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: DataServiceCollection<ProductPlus> products =                  new DataServiceCollection<ProductPlus>(this.TestClientContext)                  {                      new  ProductPlus()                      {                          NamePlus = "Apple"'                          ProductIDPlus = 1000000'                          QuantityInStockPlus = 20'                          QuantityPerUnitPlus = "Pound"'                          UnitPricePlus = 0.35f'                          DiscontinuedPlus = false'                          SkinColorPlus = ColorPlus.RedPlus'                          CoverColorsPlus = new ObservableCollection<ColorPlus>(){ ColorPlus.BluePlus }'                          UserAccessPlus = AccessLevelPlus.ReadPlus                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: expectedPropertyCount = 3;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: Assert.AreEqual(2' product.CoverColorsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: Assert.AreEqual(2' product.CoverColorsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var datetime = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var datetime = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: var datetime = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: ((CustomerPlus)people[0]).BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: ((CustomerPlus)people[0]).BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: ((CustomerPlus)people[0]).BirthdayPlus = new DateTimeOffset(new DateTime(1957' 4' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: customer.OrdersPlus.First().OrderShelfLifesPlus.Add(new TimeSpan(2));
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: Assert.AreEqual(2' people0.EmailsPlus.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: Assert.AreEqual(2' people0.OrdersPlus.First().OrderShelfLifesPlus.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: publicCompany.Single().TotalAssetsPlus = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: Assert.AreEqual(company.TotalAssetsPlus' 10);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,ChangeTrackingTest2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\ChangeTrackingTest.cs,PostTunning,The following statement contains a magic number: expectedPropertyCount = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,FunctionBoundOnSingletonTest,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,FunctionBoundOnEntityTypeTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Where(a => a.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,FunctionBoundOnEntityTypeTest,The following statement contains a magic number: Assert.AreEqual(101901' result.PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,FunctionBoundOnNavigationPropertyTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Expand("MyGiftCard").Where(a => a.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,FunctionBoundOnNavigationPropertyTest,The following statement contains a magic number: Assert.AreEqual(39.8' result);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnSingletonTypeTest,The following statement contains a magic number: Assert.AreEqual(100001' result);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityTypeTest,The following statement contains a magic number: var product = TestClientContext.Products.Where(p => p.ProductID == 7).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnNavigationPropertyTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Where(ac => ac.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnNavigationPropertyTest,The following statement contains a magic number: Assert.AreEqual(101901' result.PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnSingletonOfDerivedType,The following statement contains a magic number: var revenue = publicCompany.IncreaseRevenue(10).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnSingletonOfDerivedType,The following statement contains a magic number: Assert.IsTrue(originalRevenue + 10 == revenue);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithCollectionParameter,The following statement contains a magic number: Person newPerson = new Person()              {                  FirstName = "Bob"'                  LastName = "Cat"'                  Numbers = new ObservableCollection<string> { "111-111-1111" }'                  Emails = new ObservableCollection<string> { "abc@abc.com" }'                  PersonID = random.Next()'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new Address() { City = "London"' PostalCode = "98052"' Street = "1 Microsoft Way" }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithCollectionParameter,The following statement contains a magic number: Person newPerson = new Person()              {                  FirstName = "Bob"'                  LastName = "Cat"'                  Numbers = new ObservableCollection<string> { "111-111-1111" }'                  Emails = new ObservableCollection<string> { "abc@abc.com" }'                  PersonID = random.Next()'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new Address() { City = "London"' PostalCode = "98052"' Street = "1 Microsoft Way" }              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderId'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  OrderShelfLifes = new ObservableCollection<TimeSpan>()'                  InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "I need XXL" }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderId'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  OrderShelfLifes = new ObservableCollection<TimeSpan>()'                  InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "I need XXL" }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderId'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  OrderShelfLifes = new ObservableCollection<TimeSpan>()'                  InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "I need XXL" }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderId'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  OrderShelfLifes = new ObservableCollection<TimeSpan>()'                  InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "I need XXL" }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderId'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  OrderShelfLifes = new ObservableCollection<TimeSpan>()'                  InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "I need XXL" }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderId'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  OrderShelfLifes = new ObservableCollection<TimeSpan>()'                  InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "I need XXL" }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionBoundOnEntityWithEntityOrEntityCollectionParameter,The following statement contains a magic number: Assert.AreEqual(2' orderList.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionImportWithPrimitiveParameter,The following statement contains a magic number: int percentage = 50;
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionImportWithPrimitiveParameter,The following statement contains a magic number: Assert.AreEqual((product.UnitPrice * (1 - percentage / 100))' product1.UnitPrice);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionImportWithCollectionOfPrimitiveParameter,The following statement contains a magic number: Assert.IsTrue(emails.Count() == 2);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4OperationGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4OperationGenerationTests.cs,ActionImportWithCollectionOfPrimitiveParameter,The following statement contains a magic number: Assert.IsTrue(boss.Emails.Count == 2);
Magic Number,Microsoft.Test.OData.Tests.Client.CodeGenerationTests,T4CodeGenerationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CodeGenerationTests\T4CodeGenerationTests.cs,CompileAndVerify,The following statement contains a magic number: CompilerParameters compilerOptions = new CompilerParameters              {                  GenerateExecutable = false'                  GenerateInMemory = true'                  IncludeDebugInformation = false'                  TreatWarningsAsErrors = true'                  WarningLevel = 4'                  ReferencedAssemblies =                  {                      typeof(DataServiceContext).Assembly.Location'                      typeof(IEdmModel).Assembly.Location'                      typeof(GeographyPoint).Assembly.Location'                      typeof(Uri).Assembly.Location'                      typeof(IQueryable).Assembly.Location'                      typeof(INotifyPropertyChanged).Assembly.Location'                      typeof(XmlReader).Assembly.Location'                      SystemIO'                      SystemRuntime'                      SystemXmlReaderWriter                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryEntityContainsDateAndTimeOfDay,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryTopLevelProperies,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage2.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryRawValue,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterDate,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' entry.Properties.Single(p => p.Name == "ShipDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithFilterTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' entry.Properties.Single(p => p.Name == "ShipTime").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithOrderByDate,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryWithOrderByTime,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnDate,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnDate,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnDate,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnDate,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionWithDate,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnTime,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' time);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' time);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' time);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionReturnTime,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 5' 50)' time);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,FunctionWithTime,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryByDateKey,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryByDateKey,The following statement contains a magic number: Assert.AreEqual(new Date(2015' 11' 11)' entry.Properties.Single(p => p.Name == "Day").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryByDateKey,The following statement contains a magic number: Assert.AreEqual(new Date(2015' 11' 11)' entry.Properties.Single(p => p.Name == "Day").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,QueryByDateKey,The following statement contains a magic number: Assert.AreEqual(new Date(2015' 11' 11)' entry.Properties.Single(p => p.Name == "Day").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ActionTakeDateAndTimeAsParameter,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: var shipDate = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).Select(o => o.ShipDate).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' shipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' shipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' shipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: var shipTime = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).Select(o => o.ShipTime).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' shipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' shipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' shipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' shipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: var projOrder = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).Select(o => new Order() { ShipDate = o.ShipDate' ShipTime = o.ShipTime }).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' projOrder.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' projOrder.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' projOrder.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' projOrder.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' projOrder.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' projOrder.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' projOrder.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: var order = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' order.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' order.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 8' 31)' order.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' order.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' order.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' order.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new TimeOfDay(12' 40' 05' 50)' order.ShipTime);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: order.ShipDate = new Date(2014' 9' 30);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: order.ShipDate = new Date(2014' 9' 30);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: order.ShipDate = new Date(2014' 9' 30);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: var updatedOrder = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 9' 30)' updatedOrder.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 9' 30)' updatedOrder.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 9' 30)' updatedOrder.ShipDate);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: var date = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).GetShipDate().GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 9' 30)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 9' 30)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: Assert.AreEqual(new Date(2014' 9' 30)' date);
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).ChangeShipTimeAndDate(Date.MaxValue' TimeOfDay.MaxValue).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.EdmDateAndTimeOfDay,DateAndTimeOfDayCRUDTestings,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EdmDateAndTimeOfDay\DateAndTimeOfDayCRUDTestings.cs,ClientTest,The following statement contains a magic number: updatedOrder = TestClientContext.Orders.ByKey(new Dictionary<string' object>() { { "OrderID"' 7 } }).GetValue();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryEntities,The following statement contains a magic number: Assert.IsTrue(TestClientContext.People.ToList().Count >= 5);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryEntities,The following statement contains a magic number: Assert.AreEqual(5' TestClientContext.Products.ToList().Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryNavigationProperty,The following statement contains a magic number: Assert.AreEqual(2' TestClientContext.People.ByKey(new Dictionary<string' object> { { "PersonId"' 1 } }).Products.ToList().Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceQueryExpandedEntities,The following statement contains a magic number: Assert.AreEqual(2' person[0].Products.ToList().Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataSimplifiedServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataSimplifiedServiceTests\ODataSimplifiedServiceTests.cs,TestODataSimplifiedServiceCreateEntity,The following statement contains a magic number: var person = new Person              {                  PersonId = 99'                  FirstName = "Jack"'                  LastName = "Jones"'                  Address = new Address                  {                      Road = "Ziyue Road"'                      City = "Shanghai"                  }'                  Descriptions = new ObservableCollection<string> { "Kindly" }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,AbstractEntityTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\AbstractEntityTypeTests.cs,FunctionReturnDifferentTypes,The following statement contains a magic number: Assert.AreEqual(2' results.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PayloadValueConverterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PayloadValueConverterTests\PayloadValueConverterTests.cs,PostAndQuerySingleBinaryProperty,The following statement contains a magic number: var person = new Person              {                  Picture = new byte[] { 3' 1' 4 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PayloadValueConverterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PayloadValueConverterTests\PayloadValueConverterTests.cs,PostAndQuerySingleBinaryProperty,The following statement contains a magic number: var person = new Person              {                  Picture = new byte[] { 3' 1' 4 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PayloadValueConverterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PayloadValueConverterTests\PayloadValueConverterTests.cs,PostAndQuerySingleBinaryProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryServiceDocument,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryVCardEntityProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: ODataResource expected = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"          ' Value = 31                   }'                      new ODataProperty{  Name = "Numbers"     ' Value =                      new ODataCollectionValue{ Items = new object[] { 3' 5' 7 } } }'                      new ODataProperty{  Name = "Picture"     ' Value = new byte[] {5' 8}    }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: ODataResource expected = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"          ' Value = 31                   }'                      new ODataProperty{  Name = "Numbers"     ' Value =                      new ODataCollectionValue{ Items = new object[] { 3' 5' 7 } } }'                      new ODataProperty{  Name = "Picture"     ' Value = new byte[] {5' 8}    }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: ODataResource expected = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"          ' Value = 31                   }'                      new ODataProperty{  Name = "Numbers"     ' Value =                      new ODataCollectionValue{ Items = new object[] { 3' 5' 7 } } }'                      new ODataProperty{  Name = "Picture"     ' Value = new byte[] {5' 8}    }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: ODataResource expected = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"          ' Value = 31                   }'                      new ODataProperty{  Name = "Numbers"     ' Value =                      new ODataCollectionValue{ Items = new object[] { 3' 5' 7 } } }'                      new ODataProperty{  Name = "Picture"     ' Value = new byte[] {5' 8}    }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: ODataResource expected = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"          ' Value = 31                   }'                      new ODataProperty{  Name = "Numbers"     ' Value =                      new ODataCollectionValue{ Items = new object[] { 3' 5' 7 } } }'                      new ODataProperty{  Name = "Picture"     ' Value = new byte[] {5' 8}    }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroEntity,The following statement contains a magic number: ODataResource expected = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"          ' Value = 31                   }'                      new ODataProperty{  Name = "Numbers"     ' Value =                      new ODataCollectionValue{ Items = new object[] { 3' 5' 7 } } }'                      new ODataProperty{  Name = "Picture"     ' Value = new byte[] {5' 8}    }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroFeed,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroFeed,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroFeed,The following statement contains a magic number: ODataResource product2 = new ODataResource              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Id"     ' Value = 2         }'                      new ODataProperty{  Name = "Name"   ' Value = "Banana"  }'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroFeed,The following statement contains a magic number: var info = new ODataResource()              {                  Properties = new[]                  {                      new ODataProperty{  Name = "Site"     ' Value = "G2"      }'                      new ODataProperty{  Name = "Serial"   ' Value = 1023L     }'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryAvroFeed,The following statement contains a magic number: Assert.IsTrue(TestHelper.EntryEqual(product2' entries[2]));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,QueryWithAvroError,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,InvokeAvroAction,The following statement contains a magic number: ODataResource info = new ODataResource()              {                  TypeName = "Microsoft.Test.OData.Services.PluggableFormat.ProductInfo"'                  Properties = new[]                  {                      new ODataProperty{  Name = "Site"     ' Value = "G1"      }'                      new ODataProperty{  Name = "Serial"   ' Value = 1024L     }'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,PluggableFormatQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PluggableFormatServiceTests\PluggableFormatServiceTests.cs,InvokeAvroAction,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,UpdateObject,The following statement contains a magic number: var person = TestClientContext.People.Where(p => p.PersonID == 2).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectWhenItIsTransient,The following statement contains a magic number: var person = TestClientContext.People.Where(p => p.PersonID == 2).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,QueryObjectWhenItIsTransient,The following statement contains a magic number: Assert.AreEqual(2' person.PersonID' String.Format("Expected PersonID is '2'' but actually it is '{0}'"' person.PersonID));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,LoadProperty,The following statement contains a magic number: var person = TestClientContext.People.Where(p => p.PersonID == 2).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,AddDeleteLink,The following statement contains a magic number: var prodct = TestClientContext.Products.Where(c => c.ProductID == 5).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,IdReadLinkEditLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\IDReadLinkEditLinkTests.cs,AddDeleteLink,The following statement contains a magic number: var productDetail = TestClientContext.ProductDetails.Where(o => o.ProductDetailID == 1 && o.ProductID == 6).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderP1 = new ODataProperty { Name = "OrderID"' Value = 101 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: Assert.AreEqual(101' entry.Properties.Single(p => p.Name == "OrderID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpsertEntityInstance,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntityItem("Orders(101)"' 204) as ODataResource;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderP1 = new ODataProperty { Name = "OrderID"' Value = 101 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: Assert.AreEqual(101' entry.Properties.Single(p => p.Name == "OrderID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,InsertDeleteEntityInstance,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntityItem("Orders(101)"' 204) as ODataResource;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,UpdateEntityInstanceProperty,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceUpdateTests.cs,QueryEntityItem,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryServiceDocument,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntitySet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityInstance,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDollarValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityNavigation,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityNavigation,The following statement contains a magic number: Assert.AreEqual(8' entry.Properties.Single(p => p.Name == "OrderID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityNavigationWithImplicitKeys,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryEntityPropertyValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryCount,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryCount,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithFilter,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  {"Customers?$filter=PersonID eq 1"' 1}'                  {"Customers?$filter=PersonID le 1"' 1}'                  {"Customers?$filter=PersonID gt 1"' 2}'                  {"Customers?$filter=LastName eq 'Jones'"' 2}'                  {"Customers?$filter=PersonID ge 1 and FirstName eq 'Jill'"' 2}'                  {"Customers?$filter=1 add PersonID eq 2"' 1}'                  {"Customers?$filter=HomeAddress eq null"' 2}'//null                  {"Customers?$filter=Home ne null"' 2}'//Spatial type ne null              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithFilter,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  {"Customers?$filter=PersonID eq 1"' 1}'                  {"Customers?$filter=PersonID le 1"' 1}'                  {"Customers?$filter=PersonID gt 1"' 2}'                  {"Customers?$filter=LastName eq 'Jones'"' 2}'                  {"Customers?$filter=PersonID ge 1 and FirstName eq 'Jill'"' 2}'                  {"Customers?$filter=1 add PersonID eq 2"' 1}'                  {"Customers?$filter=HomeAddress eq null"' 2}'//null                  {"Customers?$filter=Home ne null"' 2}'//Spatial type ne null              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithFilter,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  {"Customers?$filter=PersonID eq 1"' 1}'                  {"Customers?$filter=PersonID le 1"' 1}'                  {"Customers?$filter=PersonID gt 1"' 2}'                  {"Customers?$filter=LastName eq 'Jones'"' 2}'                  {"Customers?$filter=PersonID ge 1 and FirstName eq 'Jill'"' 2}'                  {"Customers?$filter=1 add PersonID eq 2"' 1}'                  {"Customers?$filter=HomeAddress eq null"' 2}'//null                  {"Customers?$filter=Home ne null"' 2}'//Spatial type ne null              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithFilter,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  {"Customers?$filter=PersonID eq 1"' 1}'                  {"Customers?$filter=PersonID le 1"' 1}'                  {"Customers?$filter=PersonID gt 1"' 2}'                  {"Customers?$filter=LastName eq 'Jones'"' 2}'                  {"Customers?$filter=PersonID ge 1 and FirstName eq 'Jill'"' 2}'                  {"Customers?$filter=1 add PersonID eq 2"' 1}'                  {"Customers?$filter=HomeAddress eq null"' 2}'//null                  {"Customers?$filter=Home ne null"' 2}'//Spatial type ne null              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithFilter,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  {"Customers?$filter=PersonID eq 1"' 1}'                  {"Customers?$filter=PersonID le 1"' 1}'                  {"Customers?$filter=PersonID gt 1"' 2}'                  {"Customers?$filter=LastName eq 'Jones'"' 2}'                  {"Customers?$filter=PersonID ge 1 and FirstName eq 'Jill'"' 2}'                  {"Customers?$filter=1 add PersonID eq 2"' 1}'                  {"Customers?$filter=HomeAddress eq null"' 2}'//null                  {"Customers?$filter=Home ne null"' 2}'//Spatial type ne null              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithParameterAliasInFilter,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  {"Customers?$filter=FirstName eq @name&@name='Bob'"' 1}'                  {"Customers?$filter=FirstName eq @name and LastName ne @name&@name='Bob'"' 1}'                  {"Customers?$filter=FirstName eq @name and PersonID eq @id&@name='Bob'&@id=1"' 1}'                  {"Customers?$filter=contains(FirstName'@name)&@name='Bo'"' 1}'                  {"Customers?$filter=PersonID eq @id&@id=1L"' 1}'//ConvertNode                  {"Customers?$filter=HomeAddress eq @home"' 2}'//parameter alias value is not provided.              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,SendRequestAndVerifyResponse,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithExpand,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithExpand,The following statement contains a magic number: Assert.AreEqual(8' order.Properties.Single(p => p.Name == "OrderID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithSelect,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Customers?$select=PersonID'FirstName"' 2 }'                  { "Customers?$select=*"' 10 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithSelect,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Customers?$select=PersonID'FirstName"' 2 }'                  { "Customers?$select=*"' 10 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithSelect,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithOrderBy,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithOrderBy,The following statement contains a magic number: switch(reader.State)                                  {                                      case ODataReaderState.ResourceSetStart:                                      case ODataReaderState.ResourceStart:                                      case ODataReaderState.NestedResourceInfoStart:                                          depth++;                                          break;                                      case ODataReaderState.ResourceSetEnd:                                          if(depth == 1)                                          {                                              feed = reader.Item as ODataResourceSet;                                          }                                          depth--;                                          break;                                        case ODataReaderState.ResourceEnd:                                          if(depth ==2)                                          {                                              if (null == entry1)                                              {                                                  entry1 = reader.Item as ODataResource;                                              }                                              else                                              {                                                  entry2 = reader.Item as ODataResource;                                              }                                          }                                          depth--;                                          break;                                      case ODataReaderState.NestedResourceInfoEnd:                                          depth--;                                          break;                                      default:                                          break;                                  }
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryWithFormat,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderP1 = new ODataProperty { Name = "OrderID"' Value = 101 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,ODataWCFServiceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ODataWCFServiceTests\ODataWCFServiceQueryTests.cs,QueryDelta,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryEntitySet,The following statement contains a magic number: Assert.AreEqual(20' entries.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryContainedNavigationProperty,The following statement contains a magic number: Assert.AreEqual(3' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryNavigationProperty,The following statement contains a magic number: Assert.AreEqual(4' entries.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyEndsWith,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenEntity,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenComplexType,The following statement contains a magic number: var occursAt = new ODataResource                  {                      TypeName = NameSpacePrefix + "EventLocation"'                      Properties = new[]                      {                          new ODataProperty                          {                              Name = "RoomNumber"'                              Value = 100 + i                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenComplexType,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,OpenComplexType,The following statement contains a magic number: var entry = new QueryEntryHelper(this)                      {                          RequestUri = string.Format("People('russellwhyte')/Trips(0)/PlanItems(12)/{0}Event"' NameSpacePrefix)'                          MimeType = mimeTypes[i]'                          IfMatch = "*"'                          ReadEntryEnd = argument =>                              {                                  if (argument.Entry.TypeName.EndsWith("EventLocation"))                                  {                                      Assert.AreEqual("" + (100 + i)' (argument.Entry.Properties.Single(p => p.Name == "RoomNumber").Value as ODataUntypedValue).RawValue);                                  }                              }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAddTripPinNewPerson,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyOnEntitySet,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                  {                      RequestUri = "People?$filter=Trips/any(f:f/Budget gt 100)"'                      MimeType = mimeType'                      ExpectedStatusCode = 200'                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyOnEntitySet,The following statement contains a magic number: Assert.AreEqual(10' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyOnEntityCollectionProperty,The following statement contains a magic number: new QueryFeedHelper(this)                      {                          RequestUri = "Me/Friends?$filter=Friends/any(f:f/FirstName eq 'Scott')"'                          MimeType = mimeType'                          ExpectedStatusCode = 200'                          ReadEntryEnd = argument =>                          {                              if (argument.ParentName == null)                              {                                  entries.Add(argument.Entry);                              }                          }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAnyOnEntityCollectionProperty,The following statement contains a magic number: Assert.AreEqual(2' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAllOnEntitySet,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                  {                      RequestUri = "People?$filter=Trips/all(f:f/Budget gt 5000)"'                      MimeType = mimeType'                      ExpectedStatusCode = 200'                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAllOnEntitySet,The following statement contains a magic number: Assert.AreEqual(11' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAllOnEntityCollectionProperty,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                      {                          RequestUri = "Me/Friends?$filter=Friends/all(f:f/FirstName eq 'Krista')"'                          MimeType = mimeType'                          ExpectedStatusCode = 200'                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestAllOnEntityCollectionProperty,The following statement contains a magic number: Assert.AreEqual(3' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestNullableCollection,The following statement contains a magic number: Assert.AreEqual(2' people.AddressInfo.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestNullableCollection,The following statement contains a magic number: Assert.AreEqual(3' people.Emails.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestNullableCollection,The following statement contains a magic number: Assert.IsNull(people.Emails[2]);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestActionTripPinShareTrip,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,TestFunctionGetInvolvedPeople,The following statement contains a magic number: Assert.AreEqual(2' entries.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,BasicSearchTest,The following statement contains a magic number: Assert.AreEqual(6' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,GroupSearchTest,The following statement contains a magic number: Assert.AreEqual(4' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ExpandSearchTest,The following statement contains a magic number: Assert.IsTrue(predicate(entries' PersonTypeName' 10));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ExpandSearchTest,The following statement contains a magic number: Assert.IsTrue(predicate(entries' TripTypeName' 3));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SimpleUriNextLinkTest,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                      {                          RequestUri = "People"'                          MimeType = mimeType'                          RequestedHandler = argument =>                          {                              if (argument.IsLastTime)                              {                                  Assert.AreEqual(3' argument.Times);                              }                          }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SimpleUriNextLinkTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ComplexUriNextLinkTest,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                      {                          RequestUri = "People?$filter=FirstName ne 'Russell'"'                          MimeType = mimeType'                          RequestedHandler = argument =>                          {                              if (argument.IsLastTime)                              {                                  Assert.AreEqual(3' argument.Times);                              }                          }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ComplexUriNextLinkTest,The following statement contains a magic number: Assert.AreEqual(19' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,FullSinglePageNextLinkTest,The following statement contains a magic number: Assert.AreEqual(8' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SmallSinglePageNextLinkTest,The following statement contains a magic number: Assert.AreEqual(3' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,BasicNextLinkHttpHeaderTest,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                      {                          RequestUri = "People"'                          MimeType = mimeType'                          RequestingHandler = argument =>                          {                              if (argument.Times == 1)                              {                                  argument.Request.SetHeader("Prefer"' "odata.maxpagesize=8");                              }                          }'                          RequestedHandler = argument =>                          {                              var applied = false;                              var prefer = argument.Response.GetHeader("Preference-Applied");                              if (!string.IsNullOrEmpty(prefer))                              {                                  applied = prefer.Contains("odata.maxpagesize=8");                              }                                if (argument.Times == 1)                              {                                  Assert.IsTrue(applied);                              }                              else                              {                                  Assert.IsFalse(applied);                              }                                if (argument.IsLastTime)                              {                                  Assert.AreEqual(3' argument.Times);                              }                          }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,BasicNextLinkHttpHeaderTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ComplexNextLinkHttpHeaderTest,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                      {                          RequestUri = "People"'                          MimeType = mimeType'                          RequestingHandler = argument =>                          {                              if (argument.Times == 1)                              {                                  argument.Request.SetHeader("Prefer"' "odata.maxpagesize=10");                              }                          }'                          RequestedHandler = argument =>                          {                              var applied = false;                              var prefer = argument.Response.GetHeader("Preference-Applied");                              if (!string.IsNullOrEmpty(prefer))                              {                                  applied = prefer.Contains("odata.maxpagesize=10");                              }                                if (argument.Times == 1)                              {                                  Assert.IsTrue(applied);                              }                              else                              {                                  Assert.IsFalse(applied);                              }                                if (argument.IsLastTime)                              {                                  Assert.AreEqual(3' argument.Times);                              }                          }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ComplexNextLinkHttpHeaderTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,FunctionNextLinkTest,The following statement contains a magic number: var entries = new QueryFeedHelper(this)                      {                          RequestUri = uri'                          MimeType = mimeType'                          RequestingHandler = argument =>                          {                              if (argument.Times == 1)                              {                                  argument.Request.SetHeader("Prefer"' "odata.maxpagesize=2");                              }                          }'                          RequestedHandler = argument =>                          {                              var applied = false;                              var prefer = argument.Response.GetHeader("Preference-Applied");                              if (!string.IsNullOrEmpty(prefer))                              {                                  applied = prefer.Contains("odata.maxpagesize=2");                              }                                if (argument.Times == 1)                              {                                  Assert.IsTrue(applied);                              }                              else                              {                                  Assert.IsFalse(applied);                              }                                if (argument.IsLastTime)                              {                                  Assert.AreEqual(2' argument.Times);                              }                          }                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,FunctionNextLinkTest,The following statement contains a magic number: Assert.AreEqual(3' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,EntityReferenceNextLinkTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfMatchOk,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 204'                  IfMatch = expectedETag'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfMatchAsterisk,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 204'                  IfMatch = "*"'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfMatchWrong,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 412'                  IfMatch = "W/\"123\""'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfNoneMatchOk,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 412'                  IfNoneMatch = expectedETag'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfNoneMatchAsterisk,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 412'                  IfNoneMatch = "*"'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteIfNoneMatchWrong,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 204'                  IfNoneMatch = "W/\"123\""'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagDeleteNoIfMatchIfNoneMatch,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 428'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagFunctionCollection,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryEntityIfMatch,The following statement contains a magic number: var entry = new QueryEntryHelper(this)                  {                      RequestUri = "People('russellwhyte')"'                      MimeType = mimeType'                      ExpectedStatusCode = 200'                      IfMatch = "W/\"123\""'                      RequestedHandler = argument => AssertIsValidETag(argument.Response.GetHeader("ETag"))'                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryEntityIfNoneMatchOk,The following statement contains a magic number: var entry = new QueryEntryHelper(this)                  {                      RequestUri = uri'                      MimeType = mimeType'                      ExpectedStatusCode = 304'                      IfNoneMatch = expectedETag'                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryEntityIfNoneMatchAsterisk,The following statement contains a magic number: var entry = new QueryEntryHelper(this)                  {                      RequestUri = "People('russellwhyte')"'                      MimeType = mimeType'                      ExpectedStatusCode = 304'                      IfNoneMatch = "*"'                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryEntityIfNoneMatchWrong,The following statement contains a magic number: var entry = new QueryEntryHelper(this)                  {                      RequestUri = "People('russellwhyte')"'                      MimeType = mimeType'                      ExpectedStatusCode = 200'                      IfNoneMatch = "W/\"123\""'                      RequestedHandler = argument => AssertIsValidETag(argument.Response.GetHeader("ETag"))'                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryCollection,The following statement contains a magic number: new QueryFeedHelper(this)                  {                      RequestUri = "People"'                      MimeType = mimeType'                      ExpectedStatusCode = 200'                      ReadEntryEnd = argument =>                      {                          if (argument.ParentName == null)                          {                              entries.Add(argument.Entry);                          }                      }                  }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagQueryCollection,The following statement contains a magic number: Assert.AreEqual(20' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfMatchOk,The following statement contains a magic number: var helper = new UpdateHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("russellwhyte")'                  ExpectedStatusCode = 204'                  IfMatch = expectedETag'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfMatchAsterisk,The following statement contains a magic number: var helper = new UpdateHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("russellwhyte")'                  ExpectedStatusCode = 204'                  IfMatch = "*"'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfMatchWrong,The following statement contains a magic number: new UpdateHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("russellwhyte")'                  ExpectedStatusCode = 412'                  IfMatch = "W/\"123\""'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfNoneMatchOk,The following statement contains a magic number: new UpdateHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("russellwhyte")'                  ExpectedStatusCode = 412'                  IfNoneMatch = expectedETag'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfNoneMatchAsterisk,The following statement contains a magic number: var helper = new UpdateHelper(this)              {                  RequestUri = "People('newuser')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("newuser")'                  ExpectedStatusCode = 201'                  IfNoneMatch = "*"'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateIfNoneMatchWrong,The following statement contains a magic number: var helper = new UpdateHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("russellwhyte")'                  ExpectedStatusCode = 204'                  IfNoneMatch = "W/\"123\""'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ETagUpdateNoIfMatchIfNoneMatch,The following statement contains a magic number: new UpdateHelper(this)              {                  RequestUri = "People('russellwhyte')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = CreateEntry("russellwhyte")'                  ExpectedStatusCode = 428'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SetEtagValueAfterQueryUpdate,The following statement contains a magic number: person1.Concurrency = 200240;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,SetEtagValueAfterQueryUpdate,The following statement contains a magic number: person2.Concurrency = 200241;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,UpdateEntryWithIncorrectETag,The following statement contains a magic number: var exceptions = new Exception[2];
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,UpdateEntryWithIncorrectETag,The following statement contains a magic number: var statusCodes = new int[2];
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountSimpleTest,The following statement contains a magic number: new QueryCountHelper(this)              {                  RequestUri = "People/$count"'                  ExpectedCount = 20'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountTrueTest,The following statement contains a magic number: Assert.AreEqual(20' count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountFalseTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Where(e => e != null && e.Id != null).Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountErrorTest,The following statement contains a magic number: new QueryFeedHelper(this)                      {                          RequestUri = "People?$count=aaa"'                          MimeType = mimeType'                          ExpectedStatusCode = 400' // Bad Request                      }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountExpandTrueTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Count(e => e.TypeName == TypeNamePerson));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountExpandTrueTest,The following statement contains a magic number: Assert.AreEqual(14' entries.Count(e => e.TypeName == TypeNameTrip));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountExpandFalseTest,The following statement contains a magic number: Assert.AreEqual(20' entries.Count(e => e.TypeName == NameSpacePrefix + "Person"));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CountExpandFalseTest,The following statement contains a magic number: Assert.AreEqual(14' entries.Count(e => e.TypeName == NameSpacePrefix + "Trip"));
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entry' isFullMetadata' new[] { 2 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[0]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[0]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[1]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[1]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[0]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[0]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[1]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Query,The following statement contains a magic number: verification(entries[1]' isFullMetadata' new[] { 21' 22 });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Query,The following statement contains a magic number: var streamHelper = new QueryStreamHelper(this)              {                  RequestUri = uri'                  ExpectedContentType = "image/jpeg"'                  ExpectedStatusCode = 200'                  IfMatch = "W/\"-1\""'                  RequestedHandler = argument => AssertIsValidETag(argument.Response.GetHeader("ETag"))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Query,The following statement contains a magic number: new QueryStreamHelper(this)              {                  RequestUri = uri'                  ExpectedStatusCode = 304'                  IfMatch = streamHelper.ResponseETag              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Query,The following statement contains a magic number: stream = new QueryStreamHelper(this)              {                  RequestUri = uri'                  ExpectedETag = streamHelper.ResponseETag'                  ExpectedContentType = "image/jpeg"'                  ExpectedStatusCode = 200'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: entry = new QueryEntryHelper(this)              {                  RequestUri = this.GetPartialUri(createHelper.ResponseLocation)'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 200'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: createHelper = new CreateStreamHelper(this)              {                  RequestUri = "Photos"'                  BytesToCreate = bytes'                  ContentType = "image/jpeg"'                  Preference = "return=minimal"'                  ExpectedStatusCode = 204              };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The following statement contains a magic number: entry = new QueryEntryHelper(this)              {                  RequestUri = this.GetPartialUri(createHelper.ResponseLocation)'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 200'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Update,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Update,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Update,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Update,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Update,The following statement contains a magic number: new UpdateStreamHelper(this)              {                  RequestUri = "Photos(1)/$value"'                  BytesToUpdate = bytes'                  ContentType = "image/jpeg"'                  IfMatch = "W/\"123\""'                  ExpectedStatusCode = 412              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntityStream_Update,The following statement contains a magic number: new UpdateStreamHelper(this)              {                  RequestUri = "Photos(1)/$value"'                  BytesToUpdate = bytes'                  ContentType = "image/jpeg"'                  ExpectedStatusCode = 428              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Delete,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "Photos(1)"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 204'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Delete,The following statement contains a magic number: new QueryStreamHelper(this)              {                  RequestUri = "Photos(1)/$value"'                  ExpectedStatusCode = 404'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,InsertAnnotation_OnNonInsertableEntitySet,The following statement contains a magic number: new CreateHelper(this)              {                  RequestUri = "Airports"'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  EntryToCreate = new ODataResourceWrapper()                  {                      Resource = new ODataResource()                      {                          TypeName = NameSpacePrefix + "Airport"'                          Properties = new[]                          {                              new ODataProperty { Name = "Name"' Value = "Test Airport" }'                              new ODataProperty { Name = "IataCode"' Value = "TestAirport" }'                              new ODataProperty { Name = "IcaoCode"' Value = "TestAirport" }'                          }                      }                  }'                  EntitySetName = "Airports"'                  ExpectedStatusCode = 400              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,DeleteAnnotation_OnNonDeletableEntitySet,The following statement contains a magic number: new DeleteHelper(this)              {                  RequestUri = "Airports('KSFO')"'                  MimeType = MimeTypes.ApplicationJsonLight'                  ExpectedStatusCode = 400'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AcceptableMediaTypeAnnotation_InvalidMediaType,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AcceptableMediaTypeAnnotation_InvalidMediaType,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AcceptableMediaTypeAnnotation_InvalidMediaType,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AcceptableMediaTypeAnnotation_InvalidMediaType,The following statement contains a magic number: var bytes = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AcceptableMediaTypeAnnotation_InvalidMediaType,The following statement contains a magic number: new CreateStreamHelper(this)              {                  RequestUri = "Photos"'                  BytesToCreate = bytes'                  ContentType = "image/png"'                  ExpectedStatusCode = 400              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AcceptableMediaTypeAnnotation_InvalidMediaType,The following statement contains a magic number: new UpdateStreamHelper(this)              {                  RequestUri = "Photos(1)/$value"'                  BytesToUpdate = bytes'                  ContentType = "image/png"'                  IfMatch = "W/\"0\""'                  ExpectedStatusCode = 400              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,PermissionAnnotation_OnReadOnlyField,The following statement contains a magic number: new UpdateHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = new ODataResourceWrapper()                  {                      Resource =                      new ODataResource()                      {                          TypeName = NameSpacePrefix + "Person"'                          Properties = new[] { new ODataProperty { Name = "UserName"' Value = "NewUserName" } }                      }                  }'                  ExpectedStatusCode = 204'                  IfMatch = "*"'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,PermissionAnnotation_OnReadOnlyField,The following statement contains a magic number: var entry = new QueryEntryHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 200'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ImmutableAnnotation_OnImmutableField,The following statement contains a magic number: new UpdateHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "Airports"'                  EntryToUpdate = new ODataResourceWrapper()                  {                      Resource =                      new ODataResource()                      {                          TypeName = NameSpacePrefix + "Airport"'                          Properties = new[] { new ODataProperty { Name = "IataCode"' Value = "NewCode" } }                      }                  }'                  ExpectedStatusCode = 204'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ImmutableAnnotation_OnImmutableField,The following statement contains a magic number: var entry = new QueryEntryHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 200'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ComputedAnnotation_OnComputedField,The following statement contains a magic number: new UpdateHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJsonLight'                  EntitySetName = "People"'                  EntryToUpdate = new ODataResourceWrapper()                  {                      Resource =                      new ODataResource()                      {                          TypeName = NameSpacePrefix + "Person"'                          Properties = new[] { new ODataProperty { Name = "Concurrency"' Value = long.MinValue } }                      }                  }'                  ExpectedStatusCode = 204'                  IfMatch = "*"'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,ComputedAnnotation_OnComputedField,The following statement contains a magic number: var entry = new QueryEntryHelper(this)              {                  RequestUri = uri'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 200'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,DeleteLink_SingleValuedNavigationProperty,The following statement contains a magic number: new QueryEntryHelper(this)              {                  RequestUri = "Me/Photo"'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 204'              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,DeleteLink_ContainedNavigationProperty,The following statement contains a magic number: new QueryEntryHelper(this)              {                  RequestUri = "People('russellwhyte')/Trips(0)"'                  MimeType = MimeTypes.ApplicationJson + MimeTypes.ODataParameterFullMetadata'                  ExpectedStatusCode = 204              }.Execute();
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,AssertIsValidETag,The following statement contains a magic number: !(!string.IsNullOrEmpty(etag) && etag.Length > 4 && etag.StartsWith("W/\"") && etag.EndsWith("\""))
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryEntryHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryEntryHelper,The following statement contains a magic number: this.ExpectedStatusCode = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryEntryHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 200 && !this.MimeType.Contains(MimeTypes.ODataParameterNoMetadata)
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryFeedHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryFeedHelper,The following statement contains a magic number: this.ExpectedStatusCode = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryFeedHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 200 && !this.MimeType.Contains(MimeTypes.ODataParameterNoMetadata)
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryReferenceHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryReferenceHelper,The following statement contains a magic number: this.ExpectedStatusCode = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryReferenceHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 200 && !this.MimeType.Contains(MimeTypes.ODataParameterNoMetadata)
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryCountHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryCountHelper,The following statement contains a magic number: this.ExpectedStatusCode = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryCountHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CreateHelper,The following statement contains a magic number: this.ExpectedStatusCode = 201;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 201
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,DeleteHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,DeleteHelper,The following statement contains a magic number: this.ExpectedStatusCode = 204;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,DeleteHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: validationHelper.ExpectedStatusCode = 204;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,DeleteHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 204
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,DeleteLinkHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,DeleteLinkHelper,The following statement contains a magic number: this.ExpectedStatusCode = 204;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,UpdateHelper,The following statement contains a magic number: this.ExpectedStatusCode = 204;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 204 || response.StatusCode == 201
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 204 || response.StatusCode == 201
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,QueryStreamHelper,The following statement contains a magic number: this.ExpectedStatusCode = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,CreateStreamHelper,The following statement contains a magic number: this.ExpectedStatusCode = 201;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 201
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 201 || response.StatusCode == 204
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,CreateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 201 || response.StatusCode == 204
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,UpdateStreamHelper,The following statement contains a magic number: this.ExpectedStatusCode = 200;
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,UpdateStreamHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following statement contains a magic number: response.StatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultStringFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  var userName = item.Properties.Single(p => p.Name == "UserName").Value;                  Assert.AreEqual(userName.ToString().Length' 12);              }'              "Person");
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultStringFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  var userName = item.Properties.Single(p => p.Name == "UserName").Value;                  Assert.IsTrue(userName.ToString().Contains("incent"));                  Assert.AreEqual(userName.ToString().Substring(1' 6)' "incent");              }'              "Person");
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultDateTimeFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  var property = item.Properties.Single(p => p.Name == "StartsAt").Value;                  var startTime = (DateTimeOffset)property;                  Assert.AreEqual(startTime.Year' 2014);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultDateTimeFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  var property = item.Properties.Single(p => p.Name == "StartsAt").Value;                  var startTime = (DateTimeOffset)property;                  Assert.AreEqual(startTime.Month' 2);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultMathFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  Assert.AreEqual(Math.Round(12.66)' 13);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultMathFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  Assert.AreEqual(Math.Round(12.66)' 13);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultMathFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  Assert.AreEqual(Math.Floor(12.66)' 12);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultMathFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  Assert.AreEqual(Math.Floor(12.66)' 12);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultMathFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  Assert.AreEqual(Math.Ceiling(12.66)' 13);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultMathFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  Assert.AreEqual(Math.Ceiling(12.66)' 13);              });
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,TripPinFilterDefaultTypeFunctions,The following statement contains a magic number: requestAndCheckResult(uri' (item) =>              {                  var tripId = item.Properties.Single(p => p.Name == "TripId").Value;                  Assert.AreEqual((int)tripId' 1001);              }'              "Trip");
Magic Number,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinFilterTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinFilterTests.cs,QueryFeed,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,EntityReferenceLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\EntityReferenceLinkTests.cs,ODataEntryWithAnnotationInReferenceLinkShouldWork,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntity,The following statement contains a magic number: Assert.AreEqual(301' entry.Properties.Single(p => p.Name == "GiftCardID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionBoundedToContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionBoundedToContainedEntity,The following statement contains a magic number: Assert.AreEqual(23.88' amount);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionWhichReturnsContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionWhichReturnsContainedEntity,The following statement contains a magic number: Assert.AreEqual(101901' entries.Single().Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,InvokeActionReturnsContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,InvokeActionReturnsContainedEntity,The following statement contains a magic number: Assert.AreEqual(101901' entries.Single().Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySet,The following statement contains a magic number: Assert.AreEqual(4' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySet,The following statement contains a magic number: Assert.AreEqual(103905' entries[2].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySet,The following statement contains a magic number: Assert.AreEqual(103905' entries[2].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySet,The following statement contains a magic number: Assert.AreEqual("103 new PI"' entries[2].Properties.Single(p => p.Name == "FriendlyName").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QuerySpecificEntityInContainedEntitySet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2ContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2ContainedEntitySet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLeve2NonContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLeve2NonContainedEntity,The following statement contains a magic number: Assert.AreEqual(802' entry.Properties.Single(p => p.Name == "StoredPIID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2Singleton,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryLevel2Singleton,The following statement contains a magic number: Assert.AreEqual(800' entries[0].Properties.Single(p => p.Name == "StoredPIID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityWithDerivedTypeCast,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityWithDerivedTypeCast,The following statement contains a magic number: Assert.AreEqual(101902' entry.Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySetWithDerivedTypeCast,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesInDerivedTypeEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityContainsContainmentSet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityContainsContainmentSet,The following statement contains a magic number: Assert.AreEqual(101' entry.Properties.Single(p => p.Name == "AccountID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryFeedContainsContainmentSet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryIndividualPropertyOfContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithFilter,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithFilter,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithFilter,The following statement contains a magic number: Assert.AreEqual(103902' entries[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithFilter,The following statement contains a magic number: Assert.AreEqual(103905' entries[1].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(4' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(103902' entries[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(101910' entries[1].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(103901' entries[2].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(103901' entries[2].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(103905' entries[3].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitiesWithOrderby,The following statement contains a magic number: Assert.AreEqual(103905' entries[3].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Accounts(101)?$select=AccountInfo/FirstName' AccountInfo/LastName"' new int[] {1' 0} }'                  { "Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI)"' new int[]{7'4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments($select=PaymentInstrumentID'FriendlyName)"' new int[]{4' 4} }'                    { "Accounts(101)?$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 4} }'                    { "Accounts(101)?$expand=MyGiftCard"' new int[] {2' 4} }'                  { "Accounts(101)?$expand=MyPaymentInstruments"' new int[] {4' 15} }'                  { "Accounts(101)?$select=AccountID&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1} }'                  { "Accounts(101)?$select=AccountID'MyGiftCard&$expand=MyGiftCard($select=GiftCardID)"' new int[] {2' 1}  }'                  {"Accounts(101)?$select=AccountID&$expand=MyPaymentInstruments($select=PaymentInstrumentID;$expand=TheStoredPI($select=StoredPIID))"' new int[] {7' 4}}'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityAndExpandContainedEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityWithSelectOption,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Accounts(101)/MyGiftCard?$select=GiftCardID'GiftCardNO"' 2 }'                  { "Accounts(101)/MyPaymentInstruments(101901)?$select=PaymentInstrumentID'FriendlyName'CreatedDate"' 3 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityWithSelectOption,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Accounts(101)/MyGiftCard?$select=GiftCardID'GiftCardNO"' 2 }'                  { "Accounts(101)/MyPaymentInstruments(101901)?$select=PaymentInstrumentID'FriendlyName'CreatedDate"' 3 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityWithSelectOption,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP1 = new ODataProperty { Name = "PaymentInstrumentID"' Value = 101904 };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: Assert.AreEqual(101904' entry.Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateAndDeleteContainmentEntity,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntityItem("Accounts(101)/MyPaymentInstruments(101904)"' 204) as ODataResource;
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: var giftCardEntryP1 = new ODataProperty { Name = "GiftCardID"' Value = 304 };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: var giftCardEntryP3 = new ODataProperty { Name = "ExperationDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 30)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: var giftCardEntryP3 = new ODataProperty { Name = "ExperationDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 30)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: var giftCardEntryP3 = new ODataProperty { Name = "ExperationDate"' Value = new DateTimeOffset(new DateTime(2013' 12' 30)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: var giftCardEntryP4 = new ODataProperty { Name = "Amount"' Value = 37.0 };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateSingleValuedContainedEntity,The following statement contains a magic number: Assert.AreEqual(304' entry.Properties.Single(p => p.Name == "GiftCardID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP1 = new ODataProperty { Name = "PaymentInstrumentID"' Value = 101903 };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainmentEntity,The following statement contains a magic number: Assert.AreEqual(101903' entry.Properties.Single(p => p.Name == "PaymentInstrumentID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: int piid = 20000 + count;
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: var paymentInstrumentEntryP3 = new ODataProperty { Name = "CreatedDate"' Value = new DateTimeOffset(new DateTime(2013' 8' 29' 14' 11' 57)) };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpsertContainmentEntity,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntityFromODataClient,The following statement contains a magic number: Assert.AreEqual(301' result[0].GiftCardID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySetFromODataClient,The following statement contains a magic number: Assert.AreEqual(4' result.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryContainedEntitySetFromODataClient,The following statement contains a magic number: Assert.AreEqual(103902' result[1].PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QuerySpecificEntityInContainedEntitySetFromODataClient,The following statement contains a magic number: Assert.AreEqual(103902' result[0].PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryIndividualPropertyOfContainedEntityFromODataClient,The following statement contains a magic number: Assert.AreEqual(103902' result[0]);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q1 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 103901);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: Assert.AreEqual(103901' q1Result.PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q2 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.CreatedDate > new DateTimeOffset(new DateTime(2013' 10' 1)));
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q2 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.CreatedDate > new DateTimeOffset(new DateTime(2013' 10' 1)));
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: Assert.AreEqual(103905' q2Result.PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: Assert.AreEqual(103902' q3Result[0].PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q4 = TestClientContext.Accounts.Expand(account => account.MyPaymentInstruments).Where(account => account.AccountID == 103);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q5 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Expand(pi => pi.BillingStatements).Where(pi => pi.PaymentInstrumentID == 103901);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q9 = TestClientContext.Accounts.Where(a => a.AccountID == 103).Select(a => new Account() { AccountID = a.AccountID' MyGiftCard = a.MyGiftCard });
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,LinqUriTranslationTest,The following statement contains a magic number: var q10 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(103)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 103901).Select(p => new PaymentInstrument()              {                  PaymentInstrumentID = p.PaymentInstrumentID'                  BillingStatements = p.BillingStatements              });
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionBoundToContainedEntityFromODataClient,The following statement contains a magic number: Assert.AreEqual(23.88' result);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CallFunctionFromODataClientWhichReturnsContainedEntity,The following statement contains a magic number: Assert.AreEqual(101901' result.PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,InvokeActionFromODataClientWhichReturnsContainedEntity,The following statement contains a magic number: Assert.AreEqual(101901' result.PaymentInstrumentID);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: Account newAccount = new Account()                  {                      AccountID = 110'                      CountryRegion = "CN"'                      AccountInfo = new AccountInfo()                      {                          FirstName = "New"'                          LastName = "Guy"                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()                  {                      PaymentInstrumentID = 110901'                      FriendlyName = "110's first PI"'                      CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()                  {                      PaymentInstrumentID = 110901'                      FriendlyName = "110's first PI"'                      CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()                  {                      PaymentInstrumentID = 110901'                      FriendlyName = "110's first PI"'                      CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()                  {                      PaymentInstrumentID = 110901'                      FriendlyName = "110's first PI"'                      CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: var queryable0 = TestClientContext.Accounts.Where(account => account.AccountID == 110);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObject,The following statement contains a magic number: var queryable1 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(110)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 110901);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,DeleteContainedEntityFromODataClientUsingDeleteObject,The following statement contains a magic number: Account newAccount = new Account()              {                  AccountID = 115'                  CountryRegion = "CN"'                  AccountInfo = new AccountInfo()                  {                      FirstName = "New"'                      LastName = "Guy"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,DeleteContainedEntityFromODataClientUsingDeleteObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 115901'                  FriendlyName = "115's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,DeleteContainedEntityFromODataClientUsingDeleteObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 115901'                  FriendlyName = "115's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,DeleteContainedEntityFromODataClientUsingDeleteObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 115901'                  FriendlyName = "115's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,DeleteContainedEntityFromODataClientUsingDeleteObject,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 115901'                  FriendlyName = "115's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,UpdateContainedEntityFromODataClientUsingUpdateObject,The following statement contains a magic number: var queryable1 = TestClientContext.CreateQuery<PaymentInstrument>("Accounts(101)/MyPaymentInstruments").Where(pi => pi.PaymentInstrumentID == 101901);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObjectUsingBatchRequest,The following statement contains a magic number: Account newAccount = new Account()              {                  AccountID = 114'                  CountryRegion = "CN"'                  AccountInfo = new AccountInfo()                  {                      FirstName = "New"'                      LastName = "Guy"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObjectUsingBatchRequest,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 110905'                  FriendlyName = "110's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObjectUsingBatchRequest,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 110905'                  FriendlyName = "110's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObjectUsingBatchRequest,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 110905'                  FriendlyName = "110's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedEntityFromODataClientUsingAddRelatedObjectUsingBatchRequest,The following statement contains a magic number: PaymentInstrument newPI = new PaymentInstrument()              {                  PaymentInstrumentID = 110905'                  FriendlyName = "110's first PI"'                  CreatedDate = new DateTimeOffset(new DateTime(2012' 12' 10))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: Account newAccount = new Account()              {                  AccountID = 120'                  CountryRegion = "GB"'                  AccountInfo = new AccountInfo()                  {                      FirstName = "Diana"'                      LastName = "Spencer"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: GiftCard giftCard = new GiftCard()              {                  GiftCardID = 320'                  GiftCardNO = "XX120ABCDE"'                  Amount = 76'                  ExperationDate = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: GiftCard giftCard = new GiftCard()              {                  GiftCardID = 320'                  GiftCardNO = "XX120ABCDE"'                  Amount = 76'                  ExperationDate = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: GiftCard giftCard = new GiftCard()              {                  GiftCardID = 320'                  GiftCardNO = "XX120ABCDE"'                  Amount = 76'                  ExperationDate = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: GiftCard giftCard = new GiftCard()              {                  GiftCardID = 320'                  GiftCardNO = "XX120ABCDE"'                  Amount = 76'                  ExperationDate = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: GiftCard giftCard = new GiftCard()              {                  GiftCardID = 320'                  GiftCardNO = "XX120ABCDE"'                  Amount = 76'                  ExperationDate = new DateTimeOffset(new DateTime(2013' 12' 30))              };
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,CreateContainedNonCollectionEntityFromODataClientUsingUpdateRelatedObject,The following statement contains a magic number: Assert.AreEqual(76' giftCardResult[0].Amount);
Magic Number,Microsoft.Test.OData.Tests.Client.ContainmentTest,ContainmentTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ContainmentTest\ContainmentTest.cs,QueryEntityItem,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(3' vehicleGPSSetInGPS.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(100.1' newCreated.VehicleSpeed);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: newCreated.VehicleSpeed = 200.1;
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(200.1' newCreated.VehicleSpeed);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(3' vehicleGPSSetInGPS.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(3' vehicleGPSSet.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(100.1' newCreated.VehicleSpeed);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: newCreated.VehicleSpeed = 200.1;
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(200.1' newCreated.VehicleSpeed);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,TypeDeclaredInReferencedModelE2E,The following statement contains a magic number: Assert.AreEqual(3' vehicleGPSSet.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: Assert.AreEqual(2' derivedVehicleGPSSet.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: var newVehicleGPS = new DerivedVehicleGPSType()              {                  Key = "101"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }'                  DisplayName = "TESTTEST"              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: Assert.AreEqual(100.1' newCreated.VehicleSpeed);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: newCreated.VehicleSpeed = 200.1;
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: Assert.AreEqual(200.1' newCreated.VehicleSpeed);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,EntitySetDerivedFromTypeDeclaredInReferencedE2E,The following statement contains a magic number: Assert.AreEqual(2' derivedVehicleGPSSet.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,QueryProperty,The following statement contains a magic number: Assert.AreEqual(3' outsideGeoFenceAlarm.Severity);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,QueryProperty,The following statement contains a magic number: Assert.AreEqual(12.3' currentLocation.Long);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPS = new VehicleGPSType()              {                  Key = "99"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: Assert.AreEqual(2' truck.VehicleGPSGroup.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: var newVehicleGPSInGPS = new VehicleGPSType()              {                  Key = "102"'                  VehicleSpeed = 100.1'                  StartLocation = new GeoLocation()                  {                      Lat = 1'                      Long = 2'                  }'                  EndLocation = new GeoLocation()                  {                      Lat = 3'                      Long = 4'                  }'                  CurrentLocation = new GeoLocation()                  {                      Lat = 1.2'                      Long = 2.4'                  }'                  LostSignalAlarm = new GPSLostSignalAlarmType()                  {                      Severity = 1'                      LastKnownLocation = new GeoLocation()                      {                          Lat = 2.1'                          Long = 1.2'                      }                  }'                  Map = new MapType()                  {                      MBytesDownloaded = 1.2'                      ProviderName = "TESTNEW"'                      Uri = "TESTNEW.TEST"'                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The following statement contains a magic number: Assert.AreEqual(2' truck.VehicleGPSGroupFromGPS.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencdModel,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencdModel,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencdModel,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntityItem("VehicleGPSSet('000')"' 204) as ODataResource;
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencingModel,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencingModel,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,PostDeleteTypeInReferencingModel,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntityItem("VehicleGPSSetInGPS('000')"' 204) as ODataResource;
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var properties = new List<ODataProperty>              {                  new ODataProperty                  {                      Name = "Key"'                       Value = "000"                  }'                  new ODataProperty                  {                      Name = "VehicleSpeed"'                      Value = 999.9                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The following statement contains a magic number: var newVehicleGPSWrapper = new ODataResourceWrapper()              {                  Resource = newVehicleGPS'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "StartLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 99.9                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "EndLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 77.7                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "CurrentLocation"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Lat"'                                          Value = 88.8                                      }'                                      new ODataProperty                                      {                                          Name = "Long"'                                          Value = 88.8                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "Map"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".Map.MapType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "ProviderName"'                                          Value = "ProviderNew"                                      }'                                      new ODataProperty                                      {                                          Name = "Uri"'                                          Value = "NewUri"                                      }'                                      new ODataProperty                                      {                                          Name = "MBytesDownloaded"'                                          Value = 12.3                                      }                                  }                              }                          }                      }'                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "LostSignalAlarm"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = TestModelNameSpace + ".GPS.GPSLostSignalAlarmType"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Severity"'                                          Value = 1                                      }                                  }                              }'                              NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                              {                                  new ODataNestedResourceInfoWrapper()                                  {                                      NestedResourceInfo = new ODataNestedResourceInfo()                                      {                                          Name = "LastKnownLocation"'                                          IsCollection = false'                                      }'                                      NestedResourceOrResourceSet = new ODataResourceWrapper()                                      {                                          Resource = new ODataResource()                                          {                                              TypeName = TestModelNameSpace + ".Location.GeoLocation"'                                              Properties = new[]                                              {                                                  new ODataProperty                                                  {                                                      Name = "Lat"'                                                      Value = 88.8                                                  }'                                                  new ODataProperty                                                  {                                                      Name = "Long"'                                                      Value = 88.8                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,QueryEntityItem,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ServiceDocument,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedWhosePropertyDefinedInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,EntryWhosePropertyDefinedInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedTypeDefinedInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,EntryTypeDefinedInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedTypeDerivedFromReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,TypeCastEntryDerivedFromReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,PropertyDefinedInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,FeedDefinedInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,TypeCastEntryinCycleReferencingModels,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithExpandOption,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Trucks('Key1')?$select=Key'VehicleGPS&$expand=VehicleGPS"' new int[] {2' 1} }'                  { "Trucks('Key1')?$expand=HeadUnit'VehicleGPS"' new int[] {3' 4} }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithExpandOption,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Trucks('Key1')?$select=Key'VehicleGPS&$expand=VehicleGPS"' new int[] {2' 1} }'                  { "Trucks('Key1')?$expand=HeadUnit'VehicleGPS"' new int[] {3' 4} }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithExpandOption,The following statement contains a magic number: Dictionary<string' int[]> testCases = new Dictionary<string' int[]>()              {                  { "Trucks('Key1')?$select=Key'VehicleGPS&$expand=VehicleGPS"' new int[] {2' 1} }'                  { "Trucks('Key1')?$expand=HeadUnit'VehicleGPS"' new int[] {3' 4} }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithExpandOption,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferneceWithFilterOption,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "VehicleGPSSet?$filter=VehicleSpeed gt 90"' 3 }'                  { "DerivedVehicleGPSSet?$filter=DisplayName eq 'DisplayName4'"' 1 }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferneceWithFilterOption,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithSelectOption,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Trucks('Key1')?$select=Key'FuelLevel"' 2 }'                  { "DerivedVehicleGPSSet('VehicleKey4')?$select=DisplayName'Map'StartLocation"'  3}'                  { "VehicleGPSSetInGPS('DerivedVehicleGPSInGPSKey3')/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType?$select=DisplayName'Map'StartLocation"' 3 }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithSelectOption,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Trucks('Key1')?$select=Key'FuelLevel"' 2 }'                  { "DerivedVehicleGPSSet('VehicleKey4')?$select=DisplayName'Map'StartLocation"'  3}'                  { "VehicleGPSSetInGPS('DerivedVehicleGPSInGPSKey3')/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType?$select=DisplayName'Map'StartLocation"' 3 }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithSelectOption,The following statement contains a magic number: Dictionary<string' int> testCases = new Dictionary<string' int>()              {                  { "Trucks('Key1')?$select=Key'FuelLevel"' 2 }'                  { "DerivedVehicleGPSSet('VehicleKey4')?$select=DisplayName'Map'StartLocation"'  3}'                  { "VehicleGPSSetInGPS('DerivedVehicleGPSInGPSKey3')/Microsoft.OData.SampleService.Models.ModelRefDemo.TruckDemo.DerivedVehicleGPSType?$select=DisplayName'Map'StartLocation"' 3 }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithSelectOption,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,ModelReferenceWithOrderbyOption,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundActionInReferencedModel,The following statement contains a magic number: odataWriter.WriteValue("targetValue"' 80);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundActionInReferencedModel,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundActionInReferencedModel,The following statement contains a magic number: Assert.AreEqual((double)80' actual);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundActionForEntryInReferencedModel,The following statement contains a magic number: odataWriter.WriteValue("targetValue"' 80);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundActionForEntryInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundActionForEntryInReferencedModel,The following statement contains a magic number: Assert.AreEqual((double)80' actual);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundFunctionInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,BoundFunctionInReferencedModel,The following statement contains a magic number: Assert.AreEqual((double)120' amount);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,UnBoundFunctionReturnTypeInReferencedModel,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceQueryTests.cs,QueryEntityItem,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeComplexsReturnEntities,The following statement contains a magic number: Assert.AreEqual(2' customers.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeStringReturnEntities,The following statement contains a magic number: Assert.AreEqual(2' orders.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntitiesReturnEntities,The following statement contains a magic number: var orders = new[]              {                  new Order()                  {                      ID = 1'                      Notes = new ObservableCollection<string>() {"note1"' "note2"}'                      OrderDetails = new ObservableCollection<OrderDetail>{ new OrderDetail{Quantity = 1' UnitPrice = 1.0f}}'                      InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "XXL"}                  }'                  new Order()                  {                      ID = 2'                      OrderDetails = new ObservableCollection<OrderDetail>{ new OrderDetail{Quantity = 2' UnitPrice = 2.0f}}'                      InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "XXL"}                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntitiesReturnEntities,The following statement contains a magic number: var orders = new[]              {                  new Order()                  {                      ID = 1'                      Notes = new ObservableCollection<string>() {"note1"' "note2"}'                      OrderDetails = new ObservableCollection<OrderDetail>{ new OrderDetail{Quantity = 1' UnitPrice = 1.0f}}'                      InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "XXL"}                  }'                  new Order()                  {                      ID = 2'                      OrderDetails = new ObservableCollection<OrderDetail>{ new OrderDetail{Quantity = 2' UnitPrice = 2.0f}}'                      InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "XXL"}                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntitiesReturnEntities,The following statement contains a magic number: var orders = new[]              {                  new Order()                  {                      ID = 1'                      Notes = new ObservableCollection<string>() {"note1"' "note2"}'                      OrderDetails = new ObservableCollection<OrderDetail>{ new OrderDetail{Quantity = 1' UnitPrice = 1.0f}}'                      InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "XXL"}                  }'                  new Order()                  {                      ID = 2'                      OrderDetails = new ObservableCollection<OrderDetail>{ new OrderDetail{Quantity = 2' UnitPrice = 2.0f}}'                      InfoFromCustomer = new InfoFromCustomer { CustomerMessage = "XXL"}                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesTakeEntityReferencesReturnEntities,The following statement contains a magic number: var orders = new[]              {                  new Order()                  {                      ID = 1'                      Notes = new ObservableCollection<string>() {"note1"' "note2"}'                  }'                  new Order()                  {                      ID = 2'                  }'              };
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesReturnEntitySelect,The following statement contains a magic number: Assert.AreEqual(2' order.Notes.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationClientTests.cs,FunctionOfEntitiesReturnEntitiesExpandNavigation,The following statement contains a magic number: Assert.AreEqual(2' orders.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionOfEntitiesTakeComplexsReturnEntities,The following statement contains a magic number: Assert.AreEqual(2' customersForAddresses.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionOfEntitiesTakeComplexReturnEntity,The following statement contains a magic number: var customer = this.TestClientContext.Customers.ToList()[2];
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionOfEntityTakeCollectionReturnEntities,The following statement contains a magic number: var customer = this.TestClientContext.Customers.ToList()[2];
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionOfEntitiesTakeStringReturnEntities,The following statement contains a magic number: Assert.AreEqual(2' orders.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionOfEntitiesTakeEntityReferenceReturnEntity,The following statement contains a magic number: Assert.AreEqual(2' customer.ID);
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionTakeEntityReferenceUseLocalEntity,The following statement contains a magic number: Assert.AreEqual(2' customer.ID);
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionImportTakeEntityReturnEntity,The following statement contains a magic number: Assert.AreEqual(2' customer.ID);
Magic Number,Microsoft.Test.OData.Tests.Client.OperationTests,OperationT4Tests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\OperationTests\OperationT4Tests.cs,FunctionImportTakeEntityReturnEntity,The following statement contains a magic number: Assert.AreEqual(2' customer.ID);
Magic Number,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,UpdateEntityWithCollectionContainsNull,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.CollectionTests,CollectionNullableFacetTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CollectionTests\CollectionNullableFacetTest.cs,QueryEntityItem,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryPropertyUnderDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByPropertyUnderDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()                  {                      Resource = new ODataResource()                      {                          TypeName = NameSpacePrefix + "Person"'                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 101 }'                              new ODataProperty { Name = "FirstName"' Value = "Peter" }'                              new ODataProperty { Name = "LastName"' Value = "Zhang" }'                              new ODataProperty                              {                                  Name = "Home"'                                  Value = GeographyPoint.Create(32.1' 23.1)                              }'                              new ODataProperty                              {                                  Name = "Numbers"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "12345" }                                  }                              }'                              new ODataProperty                              {                                  Name = "Emails"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "a@b.cc" }                                  }                              }                          }                      }'                      NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo()                              {                                  Name = "HomeAddress"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "HomeAddress"'                                      Properties = new[]                                      {                                          new ODataProperty                                          {                                              Name = "Street"'                                              Value = "ZiXing Road"                                          }'                                          new ODataProperty                                          {                                              Name = "City"'                                              Value = "Chengdu"                                          }'                                          new ODataProperty                                          {                                              Name = "PostalCode"'                                              Value = "200241"                                          }'                                          new ODataProperty                                          {                                              Name = "FamilyName"'                                              Value = "Tigers"                                          }                                      }                                  }                              }                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()                  {                      Resource = new ODataResource()                      {                          TypeName = NameSpacePrefix + "Person"'                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 101 }'                              new ODataProperty { Name = "FirstName"' Value = "Peter" }'                              new ODataProperty { Name = "LastName"' Value = "Zhang" }'                              new ODataProperty                              {                                  Name = "Home"'                                  Value = GeographyPoint.Create(32.1' 23.1)                              }'                              new ODataProperty                              {                                  Name = "Numbers"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "12345" }                                  }                              }'                              new ODataProperty                              {                                  Name = "Emails"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "a@b.cc" }                                  }                              }                          }                      }'                      NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo()                              {                                  Name = "HomeAddress"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "HomeAddress"'                                      Properties = new[]                                      {                                          new ODataProperty                                          {                                              Name = "Street"'                                              Value = "ZiXing Road"                                          }'                                          new ODataProperty                                          {                                              Name = "City"'                                              Value = "Chengdu"                                          }'                                          new ODataProperty                                          {                                              Name = "PostalCode"'                                              Value = "200241"                                          }'                                          new ODataProperty                                          {                                              Name = "FamilyName"'                                              Value = "Tigers"                                          }                                      }                                  }                              }                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()                  {                      Resource = new ODataResource()                      {                          TypeName = NameSpacePrefix + "Person"'                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 101 }'                              new ODataProperty { Name = "FirstName"' Value = "Peter" }'                              new ODataProperty { Name = "LastName"' Value = "Zhang" }'                              new ODataProperty                              {                                  Name = "Home"'                                  Value = GeographyPoint.Create(32.1' 23.1)                              }'                              new ODataProperty                              {                                  Name = "Numbers"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "12345" }                                  }                              }'                              new ODataProperty                              {                                  Name = "Emails"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "a@b.cc" }                                  }                              }                          }                      }'                      NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo()                              {                                  Name = "HomeAddress"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "HomeAddress"'                                      Properties = new[]                                      {                                          new ODataProperty                                          {                                              Name = "Street"'                                              Value = "ZiXing Road"                                          }'                                          new ODataProperty                                          {                                              Name = "City"'                                              Value = "Chengdu"                                          }'                                          new ODataProperty                                          {                                              Name = "PostalCode"'                                              Value = "200241"                                          }'                                          new ODataProperty                                          {                                              Name = "FamilyName"'                                              Value = "Tigers"                                          }                                      }                                  }                              }                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(101' entry.Properties.Single(p => p.Name == "PersonID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypeProperty,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntry("People(101)"' out complexTypeResources' 204);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnDerivedComplexType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnDerivedComplexType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypePropertyClientTest,The following statement contains a magic number: Person newPerson = new Person()              {                  PersonID = 10001'                  FirstName = "New"'                  LastName = "Person"'                  MiddleName = "Guy"'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new HomeAddress                  {                      City = "Shanghai"'                      Street = "Zixing Rd"'                      PostalCode = "200241"'                      FamilyName = "New"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypePropertyClientTest,The following statement contains a magic number: Person newPerson = new Person()              {                  PersonID = 10001'                  FirstName = "New"'                  LastName = "Person"'                  MiddleName = "Guy"'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new HomeAddress                  {                      City = "Shanghai"'                      Street = "Zixing Rd"'                      PostalCode = "200241"'                      FamilyName = "New"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypePropertyClientTest,The following statement contains a magic number: Person newPerson = new Person()              {                  PersonID = 10001'                  FirstName = "New"'                  LastName = "Person"'                  MiddleName = "Guy"'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new HomeAddress                  {                      City = "Shanghai"'                      Street = "Zixing Rd"'                      PostalCode = "200241"'                      FamilyName = "New"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypePropertyClientTest,The following statement contains a magic number: var queryable0 = TestClientContext.People.Where(person => person.PersonID == 10001);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypePropertyClientTest,The following statement contains a magic number: var personToDelete = TestClientContext.People.Where(person => person.PersonID == 10001).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithDerivedComplexTypePropertyClientTest,The following statement contains a magic number: var queryDeletedPerson = People.Where(person => person.PersonID == 10001);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntityWithOpenComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryOpenPropertyUnderOpenComplexType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByAnOpenProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FilterByAnOpenProperty,The following statement contains a magic number: Assert.AreEqual(101' accountID);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeProperty,The following statement contains a magic number: bool isPersonalAccount = (i % 2 == 0);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypeProperty,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "AccountID"' Value = 10086 }'                      new ODataProperty { Name = "CountryRegion"' Value = "CN" }'                  };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(10086' entry.Properties.Single(p => p.Name == "AccountID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypeProperty,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypeProperty,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntry("Accounts(10086)"' out complexTypeResources' 204);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnOpenComplexType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,FunctionReturnOpenComplexType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryOpenComplexTypeClientTest,The following statement contains a magic number: var accountInfo = TestClientContext.Accounts.Where(a => a.AccountID == 101).Select(a => a.AccountInfo).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryOpenComplexTypeClientTest,The following statement contains a magic number: var middleName = TestClientContext.Accounts.Where(a => a.AccountID == 101).Select(a => a.AccountInfo.MiddleName).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryOpenComplexTypeClientTest,The following statement contains a magic number: var address = TestClientContext.Accounts.Where(a => a.AccountID == 101).Select(a => a.AccountInfo.Address).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeClientTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Where(a => a.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeClientTest,The following statement contains a magic number: var updatedAccount = TestClientContext.Accounts.Where(a => a.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateOpenComplexTypeWithUndeclaredPropertiesClientTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Where(a => a.AccountID == 101).First();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateAndReadOpenComplexTypeWithUndeclaredPropertiesClientTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Where(a => a.AccountID == 101).First();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,UpdateAndReadOpenComplexTypeWithUndeclaredPropertiesClientTest,The following statement contains a magic number: var accountReturned = TestClientContext.Accounts.Where(a => a.AccountID == 101).First();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: Account newAccount = new Account()              {                  AccountID = 110'                  CountryRegion = "CN"'                  AccountInfo = new AccountInfo()                  {                      FirstName = "New"'                      LastName = "Guy"'                      MiddleName = "Howard"'                      FavoriteColor = Color.Red'                      Address = new Address()                      {                          City = "Shanghai"'                          PostalCode = "200001"'                          Street = "ZiXing"                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: var queryable0 = TestClientContext.Accounts.Where(account => account.AccountID == 110);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: var accountToDelete = TestClientContext.Accounts.Where(account => account.AccountID == 110).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,InsertDeleteEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: var queryDeletedAccount = accounts.Where(account => account.AccountID == 110);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,DeleteInsertEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: var account = TestClientContext.Accounts.Where(a => a.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,DeleteInsertEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: entry.Properties = new[]              {                  new ODataProperty { Name = "AccountID"' Value = 101 }'                  new ODataProperty { Name = "CountryRegion"' Value = "CN" }              };
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,DeleteInsertEntityWithOpenComplexTypePropertyClientTest,The following statement contains a magic number: var updatedAccount = TestClientContext.Accounts.Where(a => a.AccountID == 101).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,OpenCollectionPropertyRoundTrip,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,OpenCollectionPropertyRoundTrip,The following statement contains a magic number: Assert.AreEqual(3' index);
Magic Number,Microsoft.Test.OData.Tests.Client.ComplexTypeTests,ComplexTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ComplexTypeTests\ComplexTypeTests.cs,QueryEntry,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithSinglePreferHeaderAll,The following statement contains a magic number: context.Configurations.ResponsePipeline                  .OnEntityMaterialized((args) =>                  {                      entityMaterialised = true;                      Assert.IsTrue(199 <= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                      Assert.IsTrue(200 >= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                  })                  .OnFeedEnded((args) =>                  {                      feedMaterialised = true;                      Assert.AreEqual(199' args.Feed.InstanceAnnotations.Count' "Unexpected count of feed annotations");                  });
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithSinglePreferHeaderAll,The following statement contains a magic number: context.Configurations.ResponsePipeline                  .OnEntityMaterialized((args) =>                  {                      entityMaterialised = true;                      Assert.IsTrue(199 <= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                      Assert.IsTrue(200 >= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                  })                  .OnFeedEnded((args) =>                  {                      feedMaterialised = true;                      Assert.AreEqual(199' args.Feed.InstanceAnnotations.Count' "Unexpected count of feed annotations");                  });
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithSinglePreferHeaderAll,The following statement contains a magic number: context.Configurations.ResponsePipeline                  .OnEntityMaterialized((args) =>                  {                      entityMaterialised = true;                      Assert.IsTrue(199 <= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                      Assert.IsTrue(200 >= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                  })                  .OnFeedEnded((args) =>                  {                      feedMaterialised = true;                      Assert.AreEqual(199' args.Feed.InstanceAnnotations.Count' "Unexpected count of feed annotations");                  });
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncompatiblePreferHeaders,The following statement contains a magic number: Person newPerson = new Person() { Name = "Bob"' PersonId = 5444 };
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncludeAnnotationsHeadersInvertHeaders,The following statement contains a magic number: context.Configurations.ResponsePipeline.OnEntityMaterialized((args) =>              {                  entityMaterialised = true;                  Assert.IsTrue(199 <= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                  Assert.IsTrue(200 >= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");              });
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncludeAnnotationsHeadersInvertHeaders,The following statement contains a magic number: context.Configurations.ResponsePipeline.OnEntityMaterialized((args) =>              {                  entityMaterialised = true;                  Assert.IsTrue(199 <= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");                  Assert.IsTrue(200 >= args.Entry.InstanceAnnotations.Count' "Unexpected count of entry annotations");              });
Magic Number,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests,ClientInstanceAnnotationsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\ClientInstanceAnnotationsTests.cs,RequestWithMultipleIncludeAnnotationsHeadersInvertHeaders,The following statement contains a magic number: context.Configurations.ResponsePipeline.OnFeedEnded((args) =>              {                  feedMaterialised = true;                  Assert.AreEqual(100' args.Feed.InstanceAnnotations.Count' "Unexpected count of feed annotations");              });
Magic Number,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Containment,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Derived,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Expanded,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Projection,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,PostUsingAtomShouldBeFailed,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()              {                  Resource = new ODataResource()                  {                      TypeName = NameSpacePrefix + "Person"'                      Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 101 }'                              new ODataProperty { Name = "FirstName"' Value = "Peter" }'                              new ODataProperty { Name = "LastName"' Value = "Zhang" }'                              new ODataProperty                              {                                  Name = "Home"'                                  Value = GeographyPoint.Create(32.1' 23.1)                              }'                              new ODataProperty                              {                                  Name = "Numbers"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "12345" }                                  }                              }'                              new ODataProperty                              {                                  Name = "Emails"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "a@b.cc" }                                  }                              }                          }                  }'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo()                              {                                  Name = "HomeAddress"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "HomeAddress"'                                      Properties = new[]                                      {                                          new ODataProperty                                          {                                              Name = "Street"'                                              Value = "ZiXing Road"                                          }'                                          new ODataProperty                                          {                                              Name = "City"'                                              Value = "Chengdu"                                          }'                                          new ODataProperty                                          {                                              Name = "PostalCode"'                                              Value = "200241"                                          }'                                          new ODataProperty                                          {                                              Name = "FamilyName"'                                              Value = "Tigers"                                          }                                      }                                  }                              }                          }                      }              };
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,PostUsingAtomShouldBeFailed,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()              {                  Resource = new ODataResource()                  {                      TypeName = NameSpacePrefix + "Person"'                      Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 101 }'                              new ODataProperty { Name = "FirstName"' Value = "Peter" }'                              new ODataProperty { Name = "LastName"' Value = "Zhang" }'                              new ODataProperty                              {                                  Name = "Home"'                                  Value = GeographyPoint.Create(32.1' 23.1)                              }'                              new ODataProperty                              {                                  Name = "Numbers"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "12345" }                                  }                              }'                              new ODataProperty                              {                                  Name = "Emails"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "a@b.cc" }                                  }                              }                          }                  }'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo()                              {                                  Name = "HomeAddress"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "HomeAddress"'                                      Properties = new[]                                      {                                          new ODataProperty                                          {                                              Name = "Street"'                                              Value = "ZiXing Road"                                          }'                                          new ODataProperty                                          {                                              Name = "City"'                                              Value = "Chengdu"                                          }'                                          new ODataProperty                                          {                                              Name = "PostalCode"'                                              Value = "200241"                                          }'                                          new ODataProperty                                          {                                              Name = "FamilyName"'                                              Value = "Tigers"                                          }                                      }                                  }                              }                          }                      }              };
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,PostUsingAtomShouldBeFailed,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()              {                  Resource = new ODataResource()                  {                      TypeName = NameSpacePrefix + "Person"'                      Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 101 }'                              new ODataProperty { Name = "FirstName"' Value = "Peter" }'                              new ODataProperty { Name = "LastName"' Value = "Zhang" }'                              new ODataProperty                              {                                  Name = "Home"'                                  Value = GeographyPoint.Create(32.1' 23.1)                              }'                              new ODataProperty                              {                                  Name = "Numbers"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "12345" }                                  }                              }'                              new ODataProperty                              {                                  Name = "Emails"'                                  Value = new ODataCollectionValue                                  {                                      TypeName = "Collection(Edm.String)"'                                      Items = new string[] { "a@b.cc" }                                  }                              }                          }                  }'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                      {                          new ODataNestedResourceInfoWrapper()                          {                              NestedResourceInfo = new ODataNestedResourceInfo()                              {                                  Name = "HomeAddress"'                                  IsCollection = false                              }'                              NestedResourceOrResourceSet = new ODataResourceWrapper()                              {                                  Resource = new ODataResource()                                  {                                      TypeName = NameSpacePrefix + "HomeAddress"'                                      Properties = new[]                                      {                                          new ODataProperty                                          {                                              Name = "Street"'                                              Value = "ZiXing Road"                                          }'                                          new ODataProperty                                          {                                              Name = "City"'                                              Value = "Chengdu"                                          }'                                          new ODataProperty                                          {                                              Name = "PostalCode"'                                              Value = "200241"                                          }'                                          new ODataProperty                                          {                                              Name = "FamilyName"'                                              Value = "Tigers"                                          }                                      }                                  }                              }                          }                      }              };
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,InsertUsingAtomShouldBeFailedClientTest,The following statement contains a magic number: Person newPerson = new Person()              {                  PersonID = 10001'                  FirstName = "New"'                  LastName = "Person"'                  MiddleName = "Guy"'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new HomeAddress                  {                      City = "Shanghai"'                      Street = "Zixing Rd"'                      PostalCode = "200241"'                      FamilyName = "New"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,InsertUsingAtomShouldBeFailedClientTest,The following statement contains a magic number: Person newPerson = new Person()              {                  PersonID = 10001'                  FirstName = "New"'                  LastName = "Person"'                  MiddleName = "Guy"'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new HomeAddress                  {                      City = "Shanghai"'                      Street = "Zixing Rd"'                      PostalCode = "200241"'                      FamilyName = "New"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,InsertUsingAtomShouldBeFailedClientTest,The following statement contains a magic number: Person newPerson = new Person()              {                  PersonID = 10001'                  FirstName = "New"'                  LastName = "Person"'                  MiddleName = "Guy"'                  Home = GeographyPoint.Create(32.1' 23.1)'                  HomeAddress = new HomeAddress                  {                      City = "Shanghai"'                      Street = "Zixing Rd"'                      PostalCode = "200241"'                      FamilyName = "New"                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.DisableAtomTests,DisableAtomTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DisableAtomTests\DisableAtomTests.cs,VerifyAtomBeDisabledQueryTest,The following statement contains a magic number: Assert.AreEqual(415' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitySet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitySet,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QuerySpecificEntity,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumPropertyValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,InvokeActionWithEnumParameterAndReturnType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,CallUnboundFunctionWhichReturnsEnumValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The following statement contains a magic number: Assert.AreEqual(3' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The following statement contains a magic number: Assert.AreEqual(6' entries[0].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The following statement contains a magic number: Assert.AreEqual(7' entries[1].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The following statement contains a magic number: Assert.AreEqual(9' entries[2].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesFilterByEnumProperty,The following statement contains a magic number: Assert.AreEqual(9' entries[2].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(5' entries[0].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(7' entries[1].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(8' entries[2].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(8' entries[2].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(9' entries[3].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(9' entries[3].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(6' entries[4].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesOrderByEnumProperty,The following statement contains a magic number: Assert.AreEqual(6' entries[4].Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesSelectEnumProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesSelectEnumProperty,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitySetFromODataClient,The following statement contains a magic number: Assert.AreEqual(5' result.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitySetFromODataClient,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntityFromODataClient,The following statement contains a magic number: var queryable = TestClientContext.Products.Where(p => p.ProductID == 8) as OClient.DataServiceQuery<Product>;
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntityFromODataClient,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumPropertyFromODataClient,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumCollectionPropertyFromODataClient,The following statement contains a magic number: Assert.AreEqual(Color.Blue' enumResult[0][2]);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEnumCollectionPropertyFromODataClient,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithSelectFromODataClient,The following statement contains a magic number: var queryable = TestClientContext.Products.Where(p => p.ProductID == 5).Select(p => p.UserAccess) as OClient.DataServiceQuery<AccessLevel?>;
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeQueryTests.cs,QueryEntitiesWithSelectFromODataClient,The following statement contains a magic number: Assert.AreEqual(products.Where(p => p.ProductID == 5).Single().UserAccess' result);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: var productEntry = new ODataResource              {                  TypeName = NameSpacePrefix + "Product"'                  Properties = new[]                  {                      new ODataProperty { Name = "Name"' Value = "MoonCake" }'                      new ODataProperty { Name = "ProductID"' Value = 101 }'                      new ODataProperty { Name = "QuantityInStock"' Value = 20 }'                      new ODataProperty { Name = "QuantityPerUnit"' Value = "100g Bag" }'                      new ODataProperty { Name = "UnitPrice"' Value = 8.0f }'                      new ODataProperty { Name = "Discontinued"' Value = true }'                      new ODataProperty { Name = "SkinColor"' Value = new ODataEnumValue("Green"' NameSpacePrefix + "Color") }'                      new ODataProperty {                           Name = "CoverColors"'                           Value = new ODataCollectionValue()                           {                               TypeName = string.Format("Collection({0}Color)"' NameSpacePrefix)'                              Items = new Collection<object>()                               {                                  new ODataEnumValue("Green"' NameSpacePrefix + "Color")'                                  new ODataEnumValue("Blue"' NameSpacePrefix + "Color")'                                  new ODataEnumValue("Green"' NameSpacePrefix + "Color")                              }                           }                       }'                      new ODataProperty { Name = "UserAccess"' Value = new ODataEnumValue("Read"' NameSpacePrefix + "AccessLevel") }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: var productEntry = new ODataResource              {                  TypeName = NameSpacePrefix + "Product"'                  Properties = new[]                  {                      new ODataProperty { Name = "Name"' Value = "MoonCake" }'                      new ODataProperty { Name = "ProductID"' Value = 101 }'                      new ODataProperty { Name = "QuantityInStock"' Value = 20 }'                      new ODataProperty { Name = "QuantityPerUnit"' Value = "100g Bag" }'                      new ODataProperty { Name = "UnitPrice"' Value = 8.0f }'                      new ODataProperty { Name = "Discontinued"' Value = true }'                      new ODataProperty { Name = "SkinColor"' Value = new ODataEnumValue("Green"' NameSpacePrefix + "Color") }'                      new ODataProperty {                           Name = "CoverColors"'                           Value = new ODataCollectionValue()                           {                               TypeName = string.Format("Collection({0}Color)"' NameSpacePrefix)'                              Items = new Collection<object>()                               {                                  new ODataEnumValue("Green"' NameSpacePrefix + "Color")'                                  new ODataEnumValue("Blue"' NameSpacePrefix + "Color")'                                  new ODataEnumValue("Green"' NameSpacePrefix + "Color")                              }                           }                       }'                      new ODataProperty { Name = "UserAccess"' Value = new ODataEnumValue("Read"' NameSpacePrefix + "AccessLevel") }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: var productEntry = new ODataResource              {                  TypeName = NameSpacePrefix + "Product"'                  Properties = new[]                  {                      new ODataProperty { Name = "Name"' Value = "MoonCake" }'                      new ODataProperty { Name = "ProductID"' Value = 101 }'                      new ODataProperty { Name = "QuantityInStock"' Value = 20 }'                      new ODataProperty { Name = "QuantityPerUnit"' Value = "100g Bag" }'                      new ODataProperty { Name = "UnitPrice"' Value = 8.0f }'                      new ODataProperty { Name = "Discontinued"' Value = true }'                      new ODataProperty { Name = "SkinColor"' Value = new ODataEnumValue("Green"' NameSpacePrefix + "Color") }'                      new ODataProperty {                           Name = "CoverColors"'                           Value = new ODataCollectionValue()                           {                               TypeName = string.Format("Collection({0}Color)"' NameSpacePrefix)'                              Items = new Collection<object>()                               {                                  new ODataEnumValue("Green"' NameSpacePrefix + "Color")'                                  new ODataEnumValue("Blue"' NameSpacePrefix + "Color")'                                  new ODataEnumValue("Green"' NameSpacePrefix + "Color")                              }                           }                       }'                      new ODataProperty { Name = "UserAccess"' Value = new ODataEnumValue("Read"' NameSpacePrefix + "AccessLevel") }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: Assert.AreEqual(101' entry.Properties.Single(p => p.Name == "ProductID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: Assert.AreEqual(204' deleteResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateDeleteEntityWithEnumProperties,The following statement contains a magic number: ODataResource deletedEntry = this.QueryEntityItem("Products(101)"' 204) as ODataResource;
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,UpdateEnumProperty,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateUpdateEntityFromODataClient,The following statement contains a magic number: Product product = new Product()                  {                      ProductID = (new Random()).Next()'                       Name = tmpName'                       SkinColor = Color.Red'                       Discontinued = false'                       QuantityInStock = 23'                       QuantityPerUnit = "my quantity per unit"'                       UnitPrice = 23.01f'                       UserAccess = AccessLevel.ReadWrite'                      CoverColors = new ObservableCollection<Color>()                      {                          Color.Red'                          Color.Blue                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateUpdateEntityFromODataClient,The following statement contains a magic number: Product product = new Product()                  {                      ProductID = (new Random()).Next()'                       Name = tmpName'                       SkinColor = Color.Red'                       Discontinued = false'                       QuantityInStock = 23'                       QuantityPerUnit = "my quantity per unit"'                       UnitPrice = 23.01f'                       UserAccess = AccessLevel.ReadWrite'                      CoverColors = new ObservableCollection<Color>()                      {                          Color.Red'                          Color.Blue                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,CreateUpdateEntityFromODataClient,The following statement contains a magic number: i < 2
Magic Number,Microsoft.Test.OData.Tests.Client.EnumerationTypeTests,EnumerationTypeUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\EnumerationTypeTests\EnumerationTypeUpdateTests.cs,QueryEntityItem,The following statement contains a magic number: expectedStatusCode == 200
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: person.PersonIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 7;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: Assert.AreEqual(4' address.Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var people1 = new DataServiceCollection<CustomerPlus>(this.TestClientContext.CustomersPlus.Where(p => p.PersonIDPlus == 10001));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 3;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var customer = this.TestClientContext.CustomersPlus.Expand(c => c.OrdersPlus).Where(p => p.PersonIDPlus == 10001).FirstOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var order1 = customer.OrdersPlus.Where(o => o.OrderIDPlus == 10001).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: account.AccountIDPlus = 110;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 3;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: Assert.AreEqual(4' accountInfo.Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: pi.PaymentInstrumentIDPlus = 1003;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 3;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: gc.GiftCardIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: gc.AmountPlus = 2000;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 4;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var account1 = this.TestClientContext.AccountsPlus.Expand(a => a.MyPaymentInstrumentsPlus).Expand(a => a.MyGiftCardPlus).Where(a => a.AccountIDPlus == 110).Single();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var pi1 = account1.MyPaymentInstrumentsPlus.Where(p => p.PaymentInstrumentIDPlus == 1003).SingleOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: Assert.AreEqual(2000' account1.MyGiftCardPlus.AmountPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: product.ProductIDPlus = 1000000;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: product.QuantityInStockPlus = 20;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: product.UnitPricePlus = 0.35f;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 8;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var product2 = this.TestClientContext.ProductsPlus.Where(p => p.ProductIDPlus == 1000000).FirstOrDefault();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: asset.AssetIDPlus = 4;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: asset.NumberPlus = 50;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var asset2 = pc.AssetsPlus.Where(a => a.AssetIDPlus == 4).First();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: Assert.AreEqual(50' asset2.NumberPlus);
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: department.DepartmentIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialProperties,The following statement contains a magic number: var department2 = company2.DepartmentsPlus.Where(d => d.DepartmentIDPlus == 10001).First();
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: person.PersonIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: account.AccountIDPlus = 110;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: product.ProductIDPlus = 1000000;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: product.QuantityInStockPlus = 20;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: product.UnitPricePlus = 0.35f;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: Assert.AreEqual(7' entries.Where(e => e.TypeName.Contains("CustomerPlus")).First().Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: Assert.AreEqual(2' entries.Where(e => e.TypeName.Contains("AccountPlus")).First().Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostPartialPropertiesInBatch,The following statement contains a magic number: Assert.AreEqual(7' entries.Where(e => e.TypeName.Contains("ProductPlus")).First().Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: person.PersonIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: expectedPropertyCount = 10;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: var people1 = new DataServiceCollection<CustomerPlus>(this.TestClientContext.CustomersPlus.Where(p => p.PersonIDPlus == 10001));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderIDPlus = 11111111;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: order.OrderDatePlus = new DateTimeOffset(new DateTime(2011' 5' 29' 14' 21' 12));
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullProperties,The following statement contains a magic number: expectedPropertyCount = 6;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: person.PersonIDPlus = 10001;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: account.AccountIDPlus = 110;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: product.ProductIDPlus = 1000000;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: product.QuantityInStockPlus = 20;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: product.UnitPricePlus = 0.35f;
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: Assert.AreEqual(10' entries.Where(e => e.TypeName.Contains("CustomerPlus")).First().Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: Assert.AreEqual(2' entries.Where(e => e.TypeName.Contains("AccountPlus")).First().Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PropertyTrackingTests,PostPropertyTrackingTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PropertyTrackingTests\PostPropertyTrackingTest.cs,PostFullPropertiesInBatch,The following statement contains a magic number: Assert.AreEqual(9' entries.Where(e => e.TypeName.Contains("ProductPlus")).First().Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(3' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(3' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(5' details.First().Properties.Single(p => p.Name == "ProductDetailID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(5' feed.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(2' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(5' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandBasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(5' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The following statement contains a magic number: Assert.AreEqual(8' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The following statement contains a magic number: Assert.AreEqual(2' reviews.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The following statement contains a magic number: Assert.AreEqual(9' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The following statement contains a magic number: Assert.AreEqual(3' reviews.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The following statement contains a magic number: Assert.AreEqual(4' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,ExpandQueryOptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\ExpandQueryOptionTests.cs,ExpandMiscQueryOptionsTest,The following statement contains a magic number: Assert.AreEqual(2' reviews.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionOnCollectionTypePropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionOnCollectionTypePropertyTests.cs,BasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(3' collectionValue.Items.Cast<object>().Count());
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionOnCollectionTypePropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionOnCollectionTypePropertyTests.cs,BasicQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(3' collectionValue.Items.Cast<object>().Count());
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionOnCollectionTypePropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionOnCollectionTypePropertyTests.cs,FilterOnCollectionCountTest,The following statement contains a magic number: var person = TestClientContext.People.Where(p => p.Emails.Count == 2) as DataServiceQuery<Person>;
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionOnCollectionTypePropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionOnCollectionTypePropertyTests.cs,FilterOnCollectionCountTest,The following statement contains a magic number: var product = TestClientContext.Products.Where(p => p.CoverColors.Count == 2) as DataServiceQuery<Product>;
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionOnCollectionTypePropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionOnCollectionTypePropertyTests.cs,FilterOnCollectionCountTest,The following statement contains a magic number: person = TestClientContext.People.Where(p => p.Addresses.Count == 2) as DataServiceQuery<Person>;
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionOnCollectionTypePropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionOnCollectionTypePropertyTests.cs,FilterOnCollectionCountTest,The following statement contains a magic number: var custoemers = TestClientContext.Customers.Where(p => p.Orders.Count == 2) as DataServiceQuery<Customer>;
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionTestsHelper.cs,QueryFeed,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionTestsHelper.cs,QueryEntries,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionTestsHelper.cs,QueryInnerFeed,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionTestsHelper.cs,QueryProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionTestsHelper.cs,QueryReferenceLink,The following statement contains a magic number: Assert.AreEqual(200' queryResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,QueryOptionTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\QueryOptionTestsHelper.cs,QueryReferenceLinks,The following statement contains a magic number: Assert.AreEqual(200' queryResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,FilterQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\FilterQueryTests.cs,FilterQueryTest,The following statement contains a magic number: Assert.AreEqual(4' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,FilterQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\FilterQueryTests.cs,FilterQueryTest,The following statement contains a magic number: Assert.AreEqual(2' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchTest,The following statement contains a magic number: Assert.AreEqual(2' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchTest,The following statement contains a magic number: Assert.AreEqual(2' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchTest,The following statement contains a magic number: Assert.AreEqual(4' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchCombinedWithQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(2' details.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchCombinedWithQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(7' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.QueryOptionTests,SearchQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\QueryOptionTests\SearchQueryTests.cs,SearchCombinedWithQueryOptionTest,The following statement contains a magic number: Assert.AreEqual(4' reviews.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,AttachToLoadProperty,The following statement contains a magic number: Assert.AreEqual(3' person.PersonMetadata.Count' "person.PersonMetadata.Count == 3");
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientEndToEndTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientEndToEndTests.cs,ContextReferencesTest,The following statement contains a magic number: Assert.AreEqual(2' contextWrapper.Context.Entities.Count()' "contextWrapper.Entities.Count() == 2");
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,ClientUrlConventionsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\ClientUrlConventionsTests.cs,ClientChangesUrlConventionsBetweenQueryAndUpdate,The following statement contains a magic number: var order = new Order { OrderId = 98765 };
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeFeedBoundActionDefinedOnDerivedType,The following statement contains a magic number: contextWrapper.Execute(                  new Uri(this.ServiceUri + "/Person/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/$/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'                   "POST"'                   new OperationParameter[]                      {                          new BodyOperationParameter("n"' 200)'                      });
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeActionDefinedOnDerivedTypeMultipleDollarSegments,The following statement contains a magic number: contextWrapper.Execute(                  new Uri(this.ServiceUri + "/Person/$/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/$/$/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'                   "POST"'                   new OperationParameter[]                      {                          new BodyOperationParameter("n"' -200)'                      });
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,DollarSegmentTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\DollarSegmentTests.cs,InvokeActionDefinedOnDerivedTypeDollarSegmentAtUriEnd,The following statement contains a magic number: contextWrapper.Execute(                  new Uri(this.ServiceUri + "/Person/$/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee/$/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries/$")'                   "POST"'                   new OperationParameter[]                  {                      new BodyOperationParameter("n"' -200)'                  });
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,UpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\UpdateTests.cs,InsertSave,The following statement contains a magic number: var newPerson = new Person { PersonId = 9999' Name = "Some Person" };
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,UpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\UpdateTests.cs,AddObjectSave,The following statement contains a magic number: var specialEmployee = new SpecialEmployee { PersonId = 1234 };
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,UpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\UpdateTests.cs,AddObjectAddRelatedObjectSave,The following statement contains a magic number: var customer = new Customer { CustomerId = 1234 };
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,UpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\UpdateTests.cs,AddObjectAddRelatedObjectSave,The following statement contains a magic number: var order = new Order { OrderId = 12345 };
Magic Number,Microsoft.Test.OData.Tests.Client.KeyAsSegmentTests,UpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\KeyAsSegmentTests\UpdateTests.cs,AddRelatedObjectSave,The following statement contains a magic number: var order = new Order { OrderId = 1234 };
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntitySet,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityInstance,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityNavigation,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityNavigation,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(2)' entry.Properties.Single(p => p.Name == "TimeBetweenLastTwoOrders").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,QueryEntityPropertyValue,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderID'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  ShelfLife = timespan'                  OrderShelfLifes = new ObservableCollection<TimeSpan>() { timespan }              };
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderID'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  ShelfLife = timespan'                  OrderShelfLifes = new ObservableCollection<TimeSpan>() { timespan }              };
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderID'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  ShelfLife = timespan'                  OrderShelfLifes = new ObservableCollection<TimeSpan>() { timespan }              };
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderID'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  ShelfLife = timespan'                  OrderShelfLifes = new ObservableCollection<TimeSpan>() { timespan }              };
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderID'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  ShelfLife = timespan'                  OrderShelfLifes = new ObservableCollection<TimeSpan>() { timespan }              };
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypes,DurationTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\DurationTests.cs,InsertAndUpdatePropertyValueUsingLinq,The following statement contains a magic number: Order order = new Order()              {                  OrderID = orderID'                  OrderDate = new DateTimeOffset(new DateTime(2011' 3' 4' 16' 3' 57))'                  ShelfLife = timespan'                  OrderShelfLifes = new ObservableCollection<TimeSpan>() { timespan }              };
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,QueryEntitySetLinqAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,QueryEntitySetExecuteAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,QueryEntityInstanceExecuteAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,QueryEntityInstanceBatchAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectTestAction,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(1100);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectTestAction,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectTestAction,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,UpdateObjectTestAction,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(1200);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,UpdateObjectTestAction,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,UpdateObjectTestAction,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,UpdateObjectTestAction,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(1300);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Customer customer2 = PipelineEventsTestsHelper.CreateNewCustomer(1301);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Customer customer3 = PipelineEventsTestsHelper.CreateNewCustomer(1302);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Customer customer4 = PipelineEventsTestsHelper.CreateNewCustomer(1303);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Order order = PipelineEventsTestsHelper.CreateNewOrder(1300);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Assert.AreEqual(1300' order.OrderId' "OrderId should not be altered in the pipeline delegates");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Assert.AreEqual(1302' relatedCustomer.CustomerId'                  "Associated CustomerId should be altered in the pipeline delegates");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsCrossPlatformAsyncTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsCrossPlatformAsyncTests.cs,AddObjectSetLinkTestAsync,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,QueryEntityInstance,The following statement contains a magic number: var specialEmployee =                  contextWrapper.CreateQuery<Person>("Person").Where(p => p.PersonId == -10).Single() as SpecialEmployee;
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,QueryEntityInstanceChangeTypeName,The following statement contains a magic number: this.RunOnAtomAndJsonFormats(                  this.CreateContext'                  (contextWrapper) =>                  {                      // contextWrapper.Context.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support;                      contextWrapper.Configurations.ResponsePipeline.OnEntryEnded(PipelineEventsTestsHelper.ModifyTypeName_Reading);                      contextWrapper.Configurations.RequestPipeline.OnEntryEnding(PipelineEventsTestsHelper.ModifyTypeName_Writing);                      contextWrapper.Context.ResolveType = new Func<string' Type>(this.ResolveTypeFromTypeName);                      contextWrapper.Context.ResolveName = new Func<Type' string>(this.ResolveTypeNameFromType);                        var entryResultsLinq = contextWrapper.CreateQuery<Machine>("Computer").ToArray();                      foreach (var machine in entryResultsLinq)                      {                          Assert.IsTrue(machine.Name.EndsWith("ModifyTypeName_Reading")' "Unexpected machine name");                      }                        Machine newMachine = new Machine() { ComputerId = 12345' Name = "new machine" };                      contextWrapper.AddObject("Computer"' newMachine);                      contextWrapper.SaveChanges();                        Assert.IsTrue(newMachine.Name.EndsWith("new machineModifyTypeName_Reading")' "Unexpected machine name");                        contextWrapper.DeleteObject(newMachine);                      contextWrapper.SaveChanges();                  });
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,ResolveTypeFromTypeName,The following statement contains a magic number: return this.GetType().Assembly.GetType(string.Concat("Microsoft.Test.OData.Services.TestServices.AstoriaDefaultServiceReferenceModified" +                              "ClientTypes"' typeName.Substring(51))' false);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectTestAction,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(100);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,UpdateObjectTestAction,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(200);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The following statement contains a magic number: contextWrapper.SetSaveStream(car' new MemoryStream(new byte[] { 66' 67 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The following statement contains a magic number: contextWrapper.SetSaveStream(car' new MemoryStream(new byte[] { 66' 67 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The following statement contains a magic number: contextWrapper.SetSaveStream(car' "Photo"' new MemoryStream(new byte[] { 66 })' true'                  new DataServiceRequestArgs() { ContentType = "text/plain" });
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The following statement contains a magic number: contextWrapper.SetSaveStream(car' new MemoryStream(new byte[] { 68' 69 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The following statement contains a magic number: contextWrapper.SetSaveStream(car' new MemoryStream(new byte[] { 68' 69 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateObjectStreamTest,The following statement contains a magic number: contextWrapper.SetSaveStream(car' "Video"' new MemoryStream(new byte[] { 66 })' true'                  new DataServiceRequestArgs() { ContentType = "text/plain" });
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateBatchTest,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(300);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateBatchTest,The following statement contains a magic number: Customer customer2 = PipelineEventsTestsHelper.CreateNewCustomer(301);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddUpdateBatchTest,The following statement contains a magic number: Order order = PipelineEventsTestsHelper.CreateNewOrder(300);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Customer customer = PipelineEventsTestsHelper.CreateNewCustomer(400);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Customer customer2 = PipelineEventsTestsHelper.CreateNewCustomer(401);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Customer customer3 = PipelineEventsTestsHelper.CreateNewCustomer(402);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Customer customer4 = PipelineEventsTestsHelper.CreateNewCustomer(403);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Order order = PipelineEventsTestsHelper.CreateNewOrder(400);
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Assert.AreEqual(400' order.OrderId' "OrderId should not be altered in the pipeline delegates");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTests.cs,AddObjectSetLinkTest,The following statement contains a magic number: Assert.AreEqual(402' relatedCustomer.CustomerId' "Associated CustomerId should be altered in the pipeline delegates");
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTestsHelper.cs,CreateNewCar,The following statement contains a magic number: return new Car() { VIN = 999' Description = "create" };
Magic Number,Microsoft.Test.OData.Tests.Client.PipelineEventsTests,PipelineEventsTestsHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PipelineEventsTests\PipelineEventsTestsHelper.cs,IncrementIdInUri,The following statement contains a magic number: return Regex.Replace(originalUri' pattern'                                   (match) => "(" + (int.Parse(match.Value.Substring(1' match.Length - 2)) + 1) + ")");
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueAsKeyInURL,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInFilterInURL,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PrimitiveTypesTests,PrimitiveValueFormatTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PrimitiveTypesTests\PrimitiveValueFormatTest.cs,PrimitiveValueInSkipTokenInURL,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidReadReflectionEntity,The following statement contains a magic number: Assert.IsTrue(context.Car.Count() == 10);
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidCUDReflectionEntity,The following statement contains a magic number: context.SetSaveStream(car' new MemoryStream(new byte[] { 66' 67 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidCUDReflectionEntity,The following statement contains a magic number: context.SetSaveStream(car' new MemoryStream(new byte[] { 66' 67 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidServiceOperationReflectionEntity,The following statement contains a magic number: var persons = context.GetPersonsByName(expectedPerson.Name.Substring(0' 3)).ToArray();
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(24' entities.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(3' functions.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,ReflectionServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\ReflectionServiceTests.cs,ValidServiceDocument,The following statement contains a magic number: Assert.AreEqual(24' workspace.EntitySets.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,EFServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\EFServiceTests.cs,ValidReadEFEntity,The following statement contains a magic number: Assert.AreEqual(10' context.EFCars.ToArray().Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,EFServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\EFServiceTests.cs,ValidReadEFEntity,The following statement contains a magic number: Assert.IsTrue(context.EFCars.Count() >= 10);
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,EFServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\EFServiceTests.cs,ValidServiceOperationEFEntity,The following statement contains a magic number: var persons = context.GetEFPersonsByName(expectedPerson.Name.Substring(0'3)).ToArray();
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,EFServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\EFServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(21' entities.Count(e => e.Name.StartsWith("EF")));
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,EFServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\EFServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(3' functions.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,EFServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\EFServiceTests.cs,ValidServiceDocument,The following statement contains a magic number: Assert.AreEqual(21' workspace.EntitySets.Count(e => e.Name.StartsWith("EF")));
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidReadEFEntity,The following statement contains a magic number: Assert.AreEqual(10' context.EFCars.ToArray().Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidReadEFEntity,The following statement contains a magic number: Assert.IsTrue(context.EFCars.Count() >= 10);
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidReadReflectionEntity,The following statement contains a magic number: Assert.AreEqual(10' context.Car.ToArray().Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidReadReflectionEntity,The following statement contains a magic number: Assert.IsTrue(context.Car.Count() >= 10);
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidCUDReflectionEntity,The following statement contains a magic number: context.SetSaveStream(car' new MemoryStream(new byte[] { 66' 67 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidCUDReflectionEntity,The following statement contains a magic number: context.SetSaveStream(car' new MemoryStream(new byte[] { 66' 67 })' true' "text/plain"' "slug");
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidServiceOperationEFEntity,The following statement contains a magic number: var persons = context.GetEFPersonsByName(expectedPerson.Name.Substring(0' 3)).ToArray();
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidServiceOperationReflectionEntity,The following statement contains a magic number: var persons = context.GetPersonsByName(expectedPerson.Name.Substring(0' 3)).ToArray();
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(21' entities.Count(e => e.Name.StartsWith("EF")));
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(24' entities.Count(e => !e.Name.StartsWith("EF")));
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidMetadata,The following statement contains a magic number: Assert.AreEqual(6' functions.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidServiceDocument,The following statement contains a magic number: Assert.AreEqual(21' workspace.EntitySets.Count(e => e.Name.StartsWith("EF")));
Magic Number,Microsoft.Test.OData.Tests.Client.PublicProviderTests,HybridServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\PublicProviderTests\HybridServiceTests.cs,ValidServiceDocument,The following statement contains a magic number: Assert.AreEqual(24' workspace.EntitySets.Count(e => !e.Name.StartsWith("EF")));
Magic Number,Microsoft.Test.OData.Tests.Client.RegressionTests,ODataLibRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\RegressionTests\ODataLibRegressionTests.cs,WriterShouldNotIncludeTypeNameForCollectionOfDerivedType,The following statement contains a magic number: odataWriter.WriteStart(                      new ODataResource                      {                          TypeName = "Var1.Type"'                          Properties = new[]                          {                              new ODataProperty()                              {                                  Name = "Id"'                                  Value = 1                              }'                              new ODataProperty()                              {                                  Name = "Geographies"'                                  Value = new ODataCollectionValue                                  {                                      Items = new[]                                      {                                          GeographyPoint.Create(0'0)'                                          GeographyPoint.Create(1'1)'                                          GeographyPoint.Create(2'2)                                      }                                  }                              }'                          }                      });
Magic Number,Microsoft.Test.OData.Tests.Client.RegressionTests,ODataLibRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\RegressionTests\ODataLibRegressionTests.cs,WriterShouldNotIncludeTypeNameForCollectionOfDerivedType,The following statement contains a magic number: odataWriter.WriteStart(                      new ODataResource                      {                          TypeName = "Var1.Type"'                          Properties = new[]                          {                              new ODataProperty()                              {                                  Name = "Id"'                                  Value = 1                              }'                              new ODataProperty()                              {                                  Name = "Geographies"'                                  Value = new ODataCollectionValue                                  {                                      Items = new[]                                      {                                          GeographyPoint.Create(0'0)'                                          GeographyPoint.Create(1'1)'                                          GeographyPoint.Create(2'2)                                      }                                  }                              }'                          }                      });
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,DerivedTypeSingletonClientTest,The following statement contains a magic number: Assert.IsTrue((company as PublicCompany).Assets.Count == 2);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeFunctionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(2' employeeCount);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeFunctionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(2' employeeCount);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: var newValue = TestClientContext.Execute<Int64>(new Uri(ServiceBaseUri.AbsoluteUri + "Company/Microsoft.Test.OData.Services.ODataWCFService.IncreaseRevenue")' "POST"' true' new BodyOperationParameter("IncreaseValue"' 20000));
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(newValue.Single()' company.Revenue + 20000);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: newValue = TestClientContext.Execute<Int64>(descriptor.Target' "POST"' new BodyOperationParameter("IncreaseValue"' 40000));
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonClientTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(newValue.Single()' company.Revenue + 60000);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithExpand,The following statement contains a magic number: Assert.AreEqual(2' orders.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithSelect,The following statement contains a magic number: Assert.AreEqual(2' customer.Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithSelectUnderExpand,The following statement contains a magic number: Assert.AreEqual(2' orders.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithSelectUnderExpand,The following statement contains a magic number: Assert.AreEqual(2' order.Properties.Count());
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithMiscQueryOptions,The following statement contains a magic number: Assert.AreEqual(2' orders.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,SelectDerivedPropertyWithoutTypeCastShouldFail,The following statement contains a magic number: this.BadRequest("Boss?$select=City"' /*errorCode*/400);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationProperty,The following statement contains a magic number: Assert.AreEqual(7' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderID").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonPropertyUnderNavigationProperty,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonNavigationPropertyWithFilter,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2011' 3' 4' 16' 3' 57' TimeSpan.FromHours(-8))' entries.FirstOrDefault().Properties.Single(p => p.Name == "OrderDate").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryDerivedPropertyWithoutTypeCastShouldFail,The following statement contains a magic number: this.BadRequest("Boss/City"' /*errorCode*/404);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryCollectionOfEntitiesFromSingletonNavigation,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithExpandedCollectionOfEntities,The following statement contains a magic number: Assert.AreEqual(3' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithExpandedCollectionOfEntities,The following statement contains a magic number: Assert.AreEqual(2' entries.FindAll(e => e.Id.AbsoluteUri.Contains("Employees")).Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryEntityWithExpandedSingleton,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QuerySingletonWithExpandedSingleton,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeFunctionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeFunctionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(2' amount);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: odataWriter.WriteValue("IncreaseValue"' 20000);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,InvokeActionBoundedToSingleton,The following statement contains a magic number: Assert.AreEqual((Int64)(oldValue + 20000)' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryFeed,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryEntries,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonQueryTests.cs,QueryProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonUpdateTests.cs,UpdateSingletonComplexProperty,The following statement contains a magic number: i % 2 == 0
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonUpdateTests.cs,QueryEntry,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.SingletonTests,SingletonUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\SingletonTests\SingletonUpdateTests.cs,UpdateEntry,The following statement contains a magic number: Assert.AreEqual(204' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,TransportLayerErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\TransportLayerErrorTests.cs,WriteToEntitySetWithNoRights,The following statement contains a magic number: this.CompareErrors(                  (ctx) =>                  {                      ctx.AddObject("Message"' new Message {MessageId = 4638' Body = "Var1"});                      ctx.SaveChanges();                  });
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,TransportLayerErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\TransportLayerErrorTests.cs,CompareErrors,The following statement contains a magic number: Debug.Assert(contexts.Length == 2);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,TransportLayerErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\TransportLayerErrorTests.cs,CompareErrors,The following statement contains a magic number: var results = new ResponseDetails[2];
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,InsertNewEntity,The following statement contains a magic number: ctx.Context.AddToOrder(new Order { OrderId = 993' });
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,MultipleChangesBatch,The following statement contains a magic number: ctx.Context.AddToOrder(new Order { OrderId = 953' });
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,MultipleChangesNonBatch,The following statement contains a magic number: ctx.Context.AddToOrder(new Order { OrderId = 953' });
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,LoadProperty,The following statement contains a magic number: Assert.AreEqual(200' response.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,UpdateEntityAsync,The following statement contains a magic number: ctx.BeginSaveChanges(                  (ar) =>                  {                      var response = ctx.EndSaveChanges(ar);                      Assert.AreEqual(204' response.Single().StatusCode' "Unexpected status code");                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,BatchQueriesWithJsonAsync,The following statement contains a magic number: ctx.BeginExecuteBatch(                  (ar) =>                  {                      var response = ctx.EndExecuteBatch(ar);                      Assert.IsTrue(response.IsBatchResponse' "Non-batch response received");                      Assert.AreEqual(2' response.Count()' "Unexpected number of operation responses received");                      this.EnqueueTestComplete();                  }'                  null'                  queries);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,LoadPropertyAsync,The following statement contains a magic number: ctx.BeginLoadProperty(                  product'                  "Description"'                  (ar) =>                  {                      var propertyResponse = ctx.EndLoadProperty(ar);                      Assert.AreEqual(200' propertyResponse.StatusCode' "Unexpected status code");                      Assert.IsNull(propertyResponse.Error' "Unexpected error: " + propertyResponse.Error);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,BatchUpdatesAsync,The following statement contains a magic number: ctx.AddObject("Product"' new Product { ProductId = 55443' Description = "My new product"' });
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,BatchUpdatesAsync,The following statement contains a magic number: ctx.BeginSaveChanges(                  SaveChangesOptions.BatchWithSingleChangeset'                  (ar) =>                  {                       var response = ctx.EndSaveChanges(ar);                      Assert.AreEqual(202' response.BatchStatusCode);                      Assert.AreEqual(3' response.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,BatchUpdatesAsync,The following statement contains a magic number: ctx.BeginSaveChanges(                  SaveChangesOptions.BatchWithSingleChangeset'                  (ar) =>                  {                       var response = ctx.EndSaveChanges(ar);                      Assert.AreEqual(202' response.BatchStatusCode);                      Assert.AreEqual(3' response.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,MultipleUpdatesWithPostTunnelingAsync,The following statement contains a magic number: ctx.BeginSaveChanges((ar) =>                  {                      var response = ctx.EndSaveChanges(ar);                      Assert.AreEqual(2' response.Count());                      Assert.IsTrue(response.All(r => r.Error == null)' "No errors expected");                      Assert.IsTrue(response.All(r => r.StatusCode == 204)' "Unexpected status code");                      this.EnqueueTestComplete();                  }'                   null);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,MultipleUpdatesWithPostTunnelingAsync,The following statement contains a magic number: ctx.BeginSaveChanges((ar) =>                  {                      var response = ctx.EndSaveChanges(ar);                      Assert.AreEqual(2' response.Count());                      Assert.IsTrue(response.All(r => r.Error == null)' "No errors expected");                      Assert.IsTrue(response.All(r => r.StatusCode == 204)' "Unexpected status code");                      this.EnqueueTestComplete();                  }'                   null);
Magic Number,Microsoft.Test.OData.Tests.Client.TransportLayerTests,HttpClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TransportLayerTests\HttpClientTests.cs,ClientShouldAppendParenthesisToNavigationPropertyQueryUri,The following statement contains a magic number: var product = new Product { ProductId = 55445' Description = "My new product" };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryCollectionPropertyWithTypeDefinition,The following statement contains a magic number: Assert.AreEqual(2' items.Length);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryPropertyValueWithTypeDefinition,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndFilterOnPropertyWithTypeDefinition,The following statement contains a magic number: Assert.AreEqual(4' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndOrderbyPropertyWithTypeDefinition,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithDefinedTypeProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "PersonId"' Value = 101 }'                      new ODataProperty { Name = "FirstName"' Value = "Peter" }'                      new ODataProperty { Name = "LastName"' Value = "Zhang" }'                      new ODataProperty                      {                          Name = "Descriptions"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(Edm.String)"'                              Items = new[] { "Description1"' "Description2" }                          }                      }                  };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithDefinedTypeProperties,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithDefinedTypeProperties,The following statement contains a magic number: Assert.AreEqual(101' entry.Properties.Single(p => p.Name == "PersonId").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual((UInt16)11' productid);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(100u' quantity);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(3600ul' lifetime);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual((UInt16)12' productid);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: productid = entries[2].Properties.Single(p => p.Name == "ProductId").Value;
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: quantity = entries[2].Properties.Single(p => p.Name == "Quantity").Value;
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: lifetime = entries[2].Properties.Single(p => p.Name == "LifeTimeInSeconds").Value;
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntryWithUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual((UInt16)13' productid);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual((UInt16)11' idProperty.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(100u' quantityProperty.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(3600ul' lifeTimeProperty.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryComplexPropertyWithUintMembers,The following statement contains a magic number: Assert.AreEqual((UInt16)80' combo.Properties.Single(p => p.Name == "Small").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryComplexPropertyWithUintMembers,The following statement contains a magic number: Assert.AreEqual((UInt32)196' combo.Properties.Single(p => p.Name == "Middle").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryComplexPropertyWithUintMembers,The following statement contains a magic number: Assert.AreEqual((UInt64)3' combo.Properties.Single(p => p.Name == "Large").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryCollectionPropertyOfUIntMembers,The following statement contains a magic number: Assert.AreEqual(3' items.Length);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryCollectionPropertyOfUIntMembers,The following statement contains a magic number: Assert.AreEqual((UInt64)36' items[0]);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryPropertyValueOfUintMembers,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "ProductId"' Value = (UInt16)101 }'                      new ODataProperty { Name = "Quantity"' Value = 19u }'                      new ODataProperty { Name = "LifeTimeInSeconds"' Value = 86ul }'                      new ODataProperty { Name = "NullableUInt32"' Value = 37u }'                      new ODataProperty                      {                          Name = "LargeNumbers"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(" + NameSpacePrefix + "UInt64)"'                              Items = new object[] { 32ul' 97ul }                          }                      }                    };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "ProductId"' Value = (UInt16)101 }'                      new ODataProperty { Name = "Quantity"' Value = 19u }'                      new ODataProperty { Name = "LifeTimeInSeconds"' Value = 86ul }'                      new ODataProperty { Name = "NullableUInt32"' Value = 37u }'                      new ODataProperty                      {                          Name = "LargeNumbers"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(" + NameSpacePrefix + "UInt64)"'                              Items = new object[] { 32ul' 97ul }                          }                      }                    };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "ProductId"' Value = (UInt16)101 }'                      new ODataProperty { Name = "Quantity"' Value = 19u }'                      new ODataProperty { Name = "LifeTimeInSeconds"' Value = 86ul }'                      new ODataProperty { Name = "NullableUInt32"' Value = 37u }'                      new ODataProperty                      {                          Name = "LargeNumbers"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(" + NameSpacePrefix + "UInt64)"'                              Items = new object[] { 32ul' 97ul }                          }                      }                    };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "ProductId"' Value = (UInt16)101 }'                      new ODataProperty { Name = "Quantity"' Value = 19u }'                      new ODataProperty { Name = "LifeTimeInSeconds"' Value = 86ul }'                      new ODataProperty { Name = "NullableUInt32"' Value = 37u }'                      new ODataProperty                      {                          Name = "LargeNumbers"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(" + NameSpacePrefix + "UInt64)"'                              Items = new object[] { 32ul' 97ul }                          }                      }                    };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "ProductId"' Value = (UInt16)101 }'                      new ODataProperty { Name = "Quantity"' Value = 19u }'                      new ODataProperty { Name = "LifeTimeInSeconds"' Value = 86ul }'                      new ODataProperty { Name = "NullableUInt32"' Value = 37u }'                      new ODataProperty                      {                          Name = "LargeNumbers"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(" + NameSpacePrefix + "UInt64)"'                              Items = new object[] { 32ul' 97ul }                          }                      }                    };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: entry.Properties = new[]                  {                      new ODataProperty { Name = "ProductId"' Value = (UInt16)101 }'                      new ODataProperty { Name = "Quantity"' Value = 19u }'                      new ODataProperty { Name = "LifeTimeInSeconds"' Value = 86ul }'                      new ODataProperty { Name = "NullableUInt32"' Value = 37u }'                      new ODataProperty                      {                          Name = "LargeNumbers"'                          Value = new ODataCollectionValue()                          {                              TypeName = "Collection(" + NameSpacePrefix + "UInt64)"'                              Items = new object[] { 32ul' 97ul }                          }                      }                    };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()              {                  Resource = entry'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "TheCombo"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = NameSpacePrefix + "NumberCombo"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Small"'                                          Value = (UInt16)10                                      }'                                      new ODataProperty                                      {                                          Name = "Middle"'                                          Value = 33u                                      }'                                      new ODataProperty                                      {                                          Name = "Large"'                                          Value = 101ul                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()              {                  Resource = entry'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "TheCombo"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = NameSpacePrefix + "NumberCombo"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Small"'                                          Value = (UInt16)10                                      }'                                      new ODataProperty                                      {                                          Name = "Middle"'                                          Value = 33u                                      }'                                      new ODataProperty                                      {                                          Name = "Large"'                                          Value = 101ul                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: var entryWrapper = new ODataResourceWrapper()              {                  Resource = entry'                  NestedResourceInfoWrappers = new List<ODataNestedResourceInfoWrapper>()                  {                      new ODataNestedResourceInfoWrapper()                      {                          NestedResourceInfo = new ODataNestedResourceInfo()                          {                              Name = "TheCombo"'                              IsCollection = false                          }'                          NestedResourceOrResourceSet = new ODataResourceWrapper()                          {                              Resource = new ODataResource()                              {                                  TypeName = NameSpacePrefix + "NumberCombo"'                                  Properties = new[]                                  {                                      new ODataProperty                                      {                                          Name = "Small"'                                          Value = (UInt16)10                                      }'                                      new ODataProperty                                      {                                          Name = "Middle"'                                          Value = 33u                                      }'                                      new ODataProperty                                      {                                          Name = "Large"'                                          Value = 101ul                                      }                                  }                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: Assert.AreEqual(201' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: Assert.AreEqual((UInt16)101' createdEntry.Properties.Single(p => p.Name == "ProductId").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,CreateEntityWithUIntProperties,The following statement contains a magic number: Assert.AreEqual(86ul' createdEntry.Properties.Single(p => p.Name == "LifeTimeInSeconds").Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,InvokeActionWithUintParameterAndReturnType,The following statement contains a magic number: odataWriter.WriteValue("seconds"' 1000u);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,InvokeActionWithUintParameterAndReturnType,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,InvokeActionWithUintParameterAndReturnType,The following statement contains a magic number: Assert.AreEqual(4600ul' property.Value);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndFilterByUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(100u' quantity);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndFilterByUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(2' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndOrderByUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndSelectUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(5' entries.Count);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryAndSelectUnsignedIntegerProperties,The following statement contains a magic number: Assert.AreEqual(3600ul' lifetime);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryEntry,The following statement contains a magic number: Assert.AreEqual(200' queryResponseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryFeed,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.TypeDefinitionTests,TypeDefinitionTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TypeDefinitionTests\TypeDefinitionTests.cs,QueryComplexProperty,The following statement contains a magic number: Assert.AreEqual(200' responseMessage.StatusCode);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The following statement contains a magic number: Assert.AreEqual(pathSelectItem.Count()' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithEntitySet,The following statement contains a magic number: Assert.AreEqual(odataUri.Skip' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The following statement contains a magic number: Assert.AreEqual(odataUri.Path.Count' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The following statement contains a magic number: Assert.AreEqual(pathSelectItem.Count()' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,TestODataUriBuilderWithKeySegment,The following statement contains a magic number: Assert.AreEqual(odataUri.Skip' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The following statement contains a magic number: Assert.AreEqual(odataUri.Path.Count' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The following statement contains a magic number: Assert.AreEqual(pathSelectItem.Count()' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UriBuilderTests,UriBuilderTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UriBuilderTests\UriBuilderTests.cs,ODataUriBuilderWithKeyAsSegment,The following statement contains a magic number: Assert.AreEqual(odataUri.Skip' 2);
Magic Number,Microsoft.Test.OData.Tests.Client.UrlModifyingTests,UrlModifyingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\UrlModifyingTests\UrlModifyingTests.cs,BatchRequest,The following statement contains a magic number: Assert.IsTrue(item.StatusCode == 200);
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateOrderEntry1NoMetadata,The following statement contains a magic number: var orderEntry1P1 = new ODataProperty { Name = "OrderId"' Value = -10 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateOrderEntry1NoMetadata,The following statement contains a magic number: var orderEntry1P2 = new ODataProperty { Name = "CustomerId"' Value = 8212 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateOrderEntry2NoMetadata,The following statement contains a magic number: var orderEntry2P1 = new ODataProperty { Name = "OrderId"' Value = -9 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateOrderEntry2NoMetadata,The following statement contains a magic number: var orderEntry2P2 = new ODataProperty { Name = "CustomerId"' Value = 78 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateOrderEntry2NoMetadata,The following statement contains a magic number: var Concurrency_nestedInfo = new ODataNestedResourceInfoWrapper()              {                  NestedResourceInfo = new ODataNestedResourceInfo()                  {                      Name = "Concurrency"'                      IsCollection = false                  }'                  NestedResourceOrResourceSet = new ODataResourceWrapper()                  {                      Resource = new ODataResource()                      {                          TypeName = NameSpace + "ConcurrencyInfo"'                          Properties = new[]                          {                              new ODataProperty                              {                                  Name = "Token"'                                  Value = "muunxfmcubaihvgnzoojgecdztyipapnxahnuibukrveamumfuokuvbly"                              }'                              new ODataProperty                              {                                  Name = "QueriedDateTime"'                                  Value = new DateTimeOffset(new DateTime(634646431705072026' System.DateTimeKind.Utc))                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCustomerResourceWrapperNoMetadata,The following statement contains a magic number: var customerEntryP1 = new ODataProperty { Name = "CustomerId"' Value = -9 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateLoginEntryNoMetadata,The following statement contains a magic number: var loginEntryP2 = new ODataProperty { Name = "CustomerId"' Value = 6084 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreatePersonEntryNoMetadata,The following statement contains a magic number: var personEntryP1 = new ODataProperty { Name = "PersonId"' Value = -5 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP1 = new ODataProperty { Name = "PersonId"' Value = -3 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP3 = new ODataProperty { Name = "ManagersPersonId"' Value = -465010984 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateSpecialEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP1 = new ODataProperty { Name = "PersonId"' Value = -10 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateSpecialEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP3 = new ODataProperty { Name = "ManagersPersonId"' Value = 47 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateSpecialEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP4 = new ODataProperty { Name = "Salary"' Value = 4091 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateSpecialEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP6 = new ODataProperty { Name = "CarsVIN"' Value = -1911530027 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateSpecialEmployeeEntryNoMetadata,The following statement contains a magic number: var employeeEntryP7 = new ODataProperty { Name = "Bonus"' Value = -37730565 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,CreateCarEntryNoMetadata,The following statement contains a magic number: var carEntryP1 = new ODataProperty { Name = "VIN"' Value = 11 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,SpecifySerializationInfoForFeedAndEntry,The following statement contains a magic number: var personEntryP1 = new ODataProperty { Name = "PersonId"' Value = -5 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,SpecifySerializationInfoForFeedAndEntry,The following statement contains a magic number: var personEntryP3 = new ODataProperty { Name = "ManagersPersonId"' Value = -465010984 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,SerializationInfoEdgeTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\SerializationInfoEdgeTests.cs,CreatePersonEntryWithoutSerializationInfo,The following statement contains a magic number: var personEntryP1 = new ODataProperty { Name = "PersonId"' Value = -5 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyOrderFeed,The following statement contains a magic number: Action<ODataResource> verifyEntry = (entry) =>              {                  if (entry.TypeName.Contains("Order"))                  {                      Assert.AreEqual(2' entry.Properties.Count()' "entry.Properties.Count");                  }                  else                  {                      Assert.IsTrue(entry.TypeName.Contains("ConcurrencyInfo")' "complex Property Concurrency should be read into ODataResource");                  }                  verifyEntryCalled = true;              };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The following statement contains a magic number: Action<ODataResource> verifyEntry = (entry) =>              {                  if (entry.TypeName.Contains("Customer"))                  {                      Assert.AreEqual(4' entry.Properties.Count());                      verifyEntryCalled++;                  }                    if (entry.TypeName.Contains("Login"))                  {                      Assert.AreEqual(2' entry.Properties.Count());                      verifyEntryCalled++;                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The following statement contains a magic number: Action<ODataResource> verifyEntry = (entry) =>              {                  if (entry.TypeName.Contains("Customer"))                  {                      Assert.AreEqual(4' entry.Properties.Count());                      verifyEntryCalled++;                  }                    if (entry.TypeName.Contains("Login"))                  {                      Assert.AreEqual(2' entry.Properties.Count());                      verifyEntryCalled++;                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyExpandedCustomerEntry,The following statement contains a magic number: Assert.IsTrue(verifyFeedCalled && verifyEntryCalled == 2 && verifyNavigationCalled'                                "Verification action not called.");
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyCarEntry,The following statement contains a magic number: Action<ODataResource> verifyEntry = (entry) =>              {                  Assert.AreEqual(4' entry.Properties.Count()' "entry.Properties.Count");                  Assert.IsNotNull(entry.MediaResource' "entry.MediaResource");                  Assert.IsTrue(entry.EditLink.AbsoluteUri.Contains("Car(11)")' "entry.EditLink");                  Assert.IsTrue(entry.ReadLink == null || entry.ReadLink.AbsoluteUri.Contains("Car(11)")' "entry.ReadLink");                  Assert.AreEqual(1' entry.InstanceAnnotations.Count' "entry.InstanceAnnotations.Count");                    verifyEntryCalled = true;              };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyCollection,The following statement contains a magic number: var resourceSet = new ODataResourceSetWrapper()              {                  ResourceSet = new ODataResourceSet                  {                      Count = 12'                      NextPageLink = new Uri("http://localhost")                  }'                  Resources = new List<ODataResourceWrapper>()                  {                      WritePayloadHelper.CreatePrimaryContactODataWrapper()                  }              };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyLinks,The following statement contains a magic number: Assert.AreEqual(2' linksRead.Links.Count()' "linksRead.Links.Count");
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyRequestMessage,The following statement contains a magic number: var orderP1 = new ODataProperty { Name = "OrderId"' Value = -10 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyRequestMessage,The following statement contains a magic number: var orderp2 = new ODataProperty { Name = "CustomerId"' Value = 8212 };
Magic Number,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\WriteJsonWithoutModelTests.cs,WriteAndVerifyRequestMessage,The following statement contains a magic number: Assert.AreEqual(2' entry.Properties.Count()' "entry.Properties.Count");
Magic Number,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStaticCreateMethodParameters,The following statement contains a magic number: string parameterSeparator = propertyToParameterPairs.Length > 5 ? this.ParameterSeparator : "' ";
Duplicate Code,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,TripPinServiceTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,MediaEntity_Create,The method contains a code clone-set at the following line numbers (starting from the method definition): ((15' 35)' (47' 67))
Duplicate Code,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceClientTests.cs,AddNavigationProperty,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 40)' (51' 82))
Duplicate Code,Microsoft.Test.OData.Tests.Client.ModelReferenceTests,ModelReferenceCUDTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\ModelReferenceTests\ModelReferenceCUDTests.cs,CreateVehicleGPS,The method contains a code clone-set at the following line numbers (starting from the method definition): ((98' 118)' (182' 202))
Duplicate Code,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The method contains a code clone-set at the following line numbers (starting from the method definition): ((126' 149)' (166' 189))
Missing Default,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following switch statement is missing a default case: switch (batchReader.State)                          {                              case ODataBatchReaderState.Initial:                                  break;                              case ODataBatchReaderState.ChangesetStart:                                  break;                              case ODataBatchReaderState.ChangesetEnd:                                  break;                              case ODataBatchReaderState.Operation:                                  ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                                                            using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                                  {                                      if (batchOperationId == 0)                                      {                                          // the first response message is a feed                                          var feedReader = operationResponseReader.CreateODataResourceSetReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (feedReader.Read())                                          {                                              switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                          Assert.AreEqual(3' pis.Count);                                      }                                       else if (batchOperationId == 1)                                      {                                          // the second response message is a creation response                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(201' operationResponse.StatusCode);                                          List<ODataResource> pis = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' pis.Count);                                          Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                      }                                      else if (batchOperationId == 2)                                      {                                          // the third response message is an entry                                          var entryReader = operationResponseReader.CreateODataResourceReader();                                            Assert.AreEqual(200' operationResponse.StatusCode);                                          List<ODataResource> statements = new List<ODataResource>();                                          while (entryReader.Read())                                          {                                              switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }                                          }                                          Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                          Assert.AreEqual(1' statements.Count);                                          Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                      }                                  }                                  batchOperationId++;                                  break;                          }
Missing Default,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following switch statement is missing a default case: switch (feedReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = feedReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }
Missing Default,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following switch statement is missing a default case: switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      pis.Add(entry);                                                      break;                                              }
Missing Default,Microsoft.Test.OData.Tests.Client.AsyncRequestTests,AsyncRequestTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\AsyncRequestTests\AsyncRequestTests.cs,AsyncBatchRequestTest,The following switch statement is missing a default case: switch (entryReader.State)                                              {                                                  case ODataReaderState.ResourceEnd:                                                      ODataResource entry = entryReader.Item as ODataResource;                                                      Assert.IsNotNull(entry);                                                      statements.Add(entry);                                                      break;                                              }
Missing Default,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following switch statement is missing a default case: switch (batchReader.State)                      {                          case ODataBatchReaderState.Initial:                              break;                          case ODataBatchReaderState.ChangesetStart:                              break;                          case ODataBatchReaderState.ChangesetEnd:                              break;                          case ODataBatchReaderState.Operation:                              ODataBatchOperationResponseMessage operationResponse = batchReader.CreateOperationResponseMessage();                                using (var operationResponseReader = new ODataMessageReader(operationResponse' readerSettings' Model))                              {                                  if (batchOperationId == 0)                                  {                                      // the first response message is a feed                                      var feedReader = operationResponseReader.CreateODataResourceSetReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (feedReader.Read())                                      {                                          switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' feedReader.State);                                      Assert.AreEqual(3' pis.Count);                                  }                                  else if (batchOperationId == 1)                                  {                                      // the second response message is a creation response                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(201' operationResponse.StatusCode);                                      List<ODataResource> pis = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' pis.Count);                                      Assert.AreEqual(102910' pis[0].Properties.Single(p => p.Name == "PaymentInstrumentID").Value);                                  }                                  else if (batchOperationId == 2)                                  {                                      // the third response message is an entry                                      var entryReader = operationResponseReader.CreateODataResourceReader();                                        Assert.AreEqual(200' operationResponse.StatusCode);                                      List<ODataResource> statements = new List<ODataResource>();                                      while (entryReader.Read())                                      {                                          switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }                                      }                                      Assert.AreEqual(ODataReaderState.Completed' entryReader.State);                                      Assert.AreEqual(1' statements.Count);                                      Assert.AreEqual(103901001' statements[0].Properties.Single(p => p.Name == "StatementID").Value);                                  }                              }                              batchOperationId++;                              break;                      }
Missing Default,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following switch statement is missing a default case: switch (feedReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = feedReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }
Missing Default,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following switch statement is missing a default case: switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  pis.Add(entry);                                                  break;                                          }
Missing Default,Microsoft.Test.OData.Tests.Client.BatchRequestTests,BatchRequestWithRelativeUriTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\BatchRequestTests\BatchRequestWithRelativeUriTests.cs,BatchRequestWithPayloadUriWritingOption,The following switch statement is missing a default case: switch (entryReader.State)                                          {                                              case ODataReaderState.ResourceEnd:                                                  ODataResource entry = entryReader.Item as ODataResource;                                                  Assert.IsNotNull(entry);                                                  statements.Add(entry);                                                  break;                                          }
Missing Default,Microsoft.Test.OData.Tests.Client.ODataWCFServiceTests,QueryFeedHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\TripPinServiceTests\TripPinServiceTests.cs,Execute,The following switch statement is missing a default case: switch (reader.State)                                  {                                      case ODataReaderState.ResourceSetStart:                                          {                                              OnReadFeedStart(new ReadFeedArgument() { Feed = (ODataResourceSet)reader.Item });                                              break;                                          }                                      case ODataReaderState.ResourceSetEnd:                                          {                                              var feed = (ODataResourceSet)reader.Item;                                              Assert.IsNotNull(feed);                                              OnReadFeedEnd(new ReadFeedArgument() { Feed = feed' ParentName = parentNestedResourceInfo.Count() > 0 ? parentNestedResourceInfo.Peek() : null });                                              // next link                                              webRequestUri = feed.NextPageLink;                                                break;                                          }                                      case ODataReaderState.ResourceStart:                                          {                                              OnReadEntryStart(new ReadEntryArgument() { Entry = (ODataResource)reader.Item });                                              break;                                          }                                      case ODataReaderState.ResourceEnd:                                          {                                              var entry = (ODataResource)reader.Item;                                              OnReadEntryEnd(new ReadEntryArgument() { Entry = entry' ParentName = parentNestedResourceInfo.Count() > 0 ? parentNestedResourceInfo.Peek() : null });                                              result.Add(entry);                                                break;                                          }                                      case ODataReaderState.NestedResourceInfoStart:                                          {                                              parentNestedResourceInfo.Push(((ODataNestedResourceInfo)reader.Item).Name);                                              break;                                          }                                      case ODataReaderState.NestedResourceInfoEnd:                                          {                                              parentNestedResourceInfo.Pop();                                              break;                                          }                                  }
Missing Default,Microsoft.Test.OData.Tests.Client.CustomInstanceAnnotationsTests.Utils,CustomInstanceAnnotationsReader,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\CustomInstanceAnnotationsTests\Utils\CustomInstanceAnnotationsReader.cs,ReadFeedOrEntry,The following switch statement is missing a default case: switch (reader.State)                      {                          case ODataReaderState.ResourceStart:                              {                                  var resource = reader.Item as ODataResource;                                    var parent = annotationsStack.Count == 0 ? null : annotationsStack.Peek();                                  if (parent != null)                                  {                                      parent.hasNestedResourceInfo = true;                                  }                                  if (resource != null && (resource.TypeName.EndsWith("Customer")                                  || resource.TypeName.EndsWith("Login")                                  || resource.TypeName.EndsWith("Message")                                  || resource.TypeName.EndsWith("Order")))                                  {                                      var instanceAnnotations = resource.InstanceAnnotations.Clone();                                      var current = new CustomInstanceAnnotationsDescriptor { TypeOfAnnotatedItem = reader.Item.GetType()' Parent = parent' AnnotationsOnStart = instanceAnnotations };                                      annotationsStack.Push(current);                                      allAnnotations.Add(current);                                  }                                  break;                              }                          case ODataReaderState.ResourceSetStart:                              {                                  var feed = reader.Item as ODataResourceSet;                                  var instanceAnnotations = feed.InstanceAnnotations.Clone();                                  var parent = annotationsStack.Count == 0 ? null : annotationsStack.Peek();                                  if (parent != null)                                  {                                      parent.hasNestedResourceInfo = true;                                  }                                  var current = new CustomInstanceAnnotationsDescriptor { TypeOfAnnotatedItem = reader.Item.GetType()' Parent = parent' AnnotationsOnStart = instanceAnnotations };                                  annotationsStack.Push(current);                                  if (isNavigations.Count == 0 || isNavigations.Peek())                                  {                                      allAnnotations.Add(current);                                  }                                  break;                              }                          case ODataReaderState.NestedResourceInfoStart:                              {                                  var nestedResource = reader.Item as ODataNestedResourceInfo;                                  if (nestedResource.Name.Equals("Customer")                                      || nestedResource.Name.Equals("Login")                                      || nestedResource.Name.Equals("Orders")                                      || nestedResource.Name.Equals("SentMessages")                                      || nestedResource.Name.Equals("ReceivedMessages"))                                  {                                      isNavigations.Push(true);                                  }                                  else                                  {                                      isNavigations.Push(false);                                  }                                  break;                              }                          case ODataReaderState.ResourceEnd:                              {                                  var resource = reader.Item as ODataResource;                                  if (resource != null && (resource.TypeName.EndsWith("Customer")                                      || resource.TypeName.EndsWith("Login")                                      || resource.TypeName.EndsWith("Message")                                      || resource.TypeName.EndsWith("Order")))                                  {                                      var instanceAnnotations = resource.InstanceAnnotations.Clone();                                      var current = annotationsStack.Pop();                                      current.AnnotationsOnEnd = instanceAnnotations;                                  }                                  break;                              }                          case ODataReaderState.ResourceSetEnd:                              {                                  var feed = reader.Item as ODataResourceSet;                                  var instanceAnnotations = feed.InstanceAnnotations.Clone();                                  var current = annotationsStack.Pop();                                  if (isNavigations.Count == 0 || isNavigations.Peek())                                  {                                      current.AnnotationsOnEnd = instanceAnnotations;                                  }                                                                    break;                              }                            case ODataReaderState.NestedResourceInfoEnd:                              {                                  isNavigations.Pop();                                  break;                              }                      }
Missing Default,Microsoft.Test.OData.Tests.Client.DeltaTests,DeltaTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\DeltaTests\DeltaTests.cs,RequestDeltaLink_Expanded,The following switch statement is missing a default case: switch (deltaReader.SubState)                                  {                                      case ODataReaderState.Start:                                          Assert.IsNotNull(deltaReader.Item as ODataNestedResourceInfo);                                          break;                                      case ODataReaderState.ResourceSetEnd:                                          Assert.IsNotNull(deltaReader.Item as ODataResourceSet);                                          break;                                      case ODataReaderState.ResourceEnd:                                          Assert.IsNotNull(deltaReader.Item as ODataResource);                                          break;                                      case ODataReaderState.NestedResourceInfoEnd:                                          Assert.IsNotNull(deltaReader.Item as ODataNestedResourceInfo);                                          break;                                      case ODataReaderState.Completed:                                          Assert.IsNotNull(deltaReader.Item);                                          break;                                  }
Missing Default,Microsoft.Test.OData.Tests.Client.WriteJsonPayloadTests,WritePayloadHelper,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Tests\Client\Build.Desktop\WriteJsonPayloadTests\VerifyPayloadHelper.cs,ReadAndVerifyFeedEntryMessage,The following switch statement is missing a default case: switch (reader.State)                  {                      case ODataReaderState.ResourceSetEnd:                          {                              if (verifyFeed != null)                              {                                  verifyFeed((ODataResourceSet)reader.Item);                              }                                break;                          }                      case ODataReaderState.ResourceEnd:                          {                              if (verifyEntry != null && reader.Item != null)                              {                                  verifyEntry((ODataResource)reader.Item);                              }                                break;                          }                      case ODataReaderState.NestedResourceInfoEnd:                          {                              if (verifyNavigation != null)                              {                                  verifyNavigation((ODataNestedResourceInfo)reader.Item);                              }                                break;                          }                  }
