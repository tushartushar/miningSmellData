Implementation smell,Namespace,Class,File,Method,Description
Long Method,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The method has 129 lines of code.
Long Method,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldWriteTypeInfoForPrimitiveCollectionProperties,The method has 108 lines of code.
Long Method,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The method has 131 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The method has 150 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The method has 150 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The method has 252 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The method has 171 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsSingleValueReturningOperators,The method has 160 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsCount,The method has 170 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypesLegalCasts,The method has 114 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The method has 149 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The method has 541 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The method has 153 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The method has 116 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The method has 125 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The method has 174 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqCast,The method has 197 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The method has 179 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The method has 147 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The method has 142 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The method has 152 lines of code.
Long Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The method has 188 lines of code.
Long Method,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The method has 133 lines of code.
Long Method,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The method has 212 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The method has 128 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,CollectionWireTypeNameParsing,The method has 108 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The method has 134 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The method has 110 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The method has 206 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The method has 525 lines of code.
Long Method,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The method has 118 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The method has 230 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The method has 188 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The method has 103 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The method has 310 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The method has 431 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The method has 143 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The method has 248 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The method has 166 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The method has 192 lines of code.
Long Method,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The method has 154 lines of code.
Complex Method,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementUnChangedSource,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsCount,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,Cyclomatic complexity of the method is 11
Complex Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,Cyclomatic complexity of the method is 10
Complex Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,VerifyResults,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,CompareObjects,Cyclomatic complexity of the method is 21
Complex Method,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,GeneratePayload,Cyclomatic complexity of the method is 12
Complex Method,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,Cyclomatic complexity of the method is 20
Complex Method,AstoriaUnitTests,ComplexType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,Cyclomatic complexity of the method is 30
Complex Method,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyItemAndItemPayloadMatch,Cyclomatic complexity of the method is 9
Long Parameter List,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateRoadTripServiceDefinition,The method has 5 parameters. Parameters: roadTripMetadata' defaultValues' providerKind' useComplexType' modifyPropertyValues
Long Parameter List,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateTripLegResource,The method has 6 parameters. Parameters: roadTripMetadata' id' geography1' geography2' useComplexType' modifyPropertyValues
Long Parameter List,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateAmusementParkResource,The method has 6 parameters. Parameters: roadTripMetadata' id' location' name' useComplexType' modifyPropertyValues
Long Parameter List,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateRestStopResource,The method has 5 parameters. Parameters: roadTripMetadata' id' location' useComplexType' modifyPropertyValues
Long Parameter List,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateResource,The method has 5 parameters. Parameters: metadata' entityTypeName' idValue' propertyValues' useComplexType
Long Parameter List,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,AddEntityType,The method has 5 parameters. Parameters: metadata' entityTypeName' properties' useComplexType' useOpenTypes
Long Parameter List,AstoriaUnitTests.Tests,GeographyPropertyValues,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,GeographyPropertyValues,The method has 5 parameters. Parameters: tripLegGeography1' tripLegGeography2' amusementParkGeography' amusementParkName' restStopGeography
Long Parameter List,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,DeleteLinkAsync,The method has 5 parameters. Parameters: serviceUri' iteration' maxIterations' handle' onFail
Long Parameter List,AstoriaUnitTests.Tests,TestHttpWebRequestMessage,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\TestHookConsumer.cs,TestHttpWebRequestMessage,The method has 5 parameters. Parameters: args' sendRequest' sendResponse' wrapRequestStream' wrapResponseStream
Long Parameter List,AstoriaUnitTests.Tests,WrappingStream,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\TestHookConsumer.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,AstoriaUnitTests.Tests,WrappingStream,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\TestHookConsumer.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,AstoriaUnitTests,MyDSPActionProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,AdvertiseServiceAction,The method has 5 parameters. Parameters: operationContext' serviceAction' resourceInstance' resourceInstanceInFeed' actionToSerialize
Long Parameter List,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,MyExecute,The method has 5 parameters. Parameters: ctx' uri' singleResult' isAsync' parameters
Long Parameter List,AstoriaUnitTests.DataWebClientCSharp,ClientSpatialTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientSpatialTests.cs,GetRoadTripServiceDefinition,The method has 6 parameters. Parameters: geographyType' defaultValues' useComplexType' useOpenTypes' modifyMetadata' modifyPropertyValues
Long Parameter List,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,VerifyURI,The method has 5 parameters. Parameters: context' actualQuery' expectedQueryUri' expectedResults' expectKeyInUri
Long Parameter List,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetRoadTripServiceDefinition,The method has 5 parameters. Parameters: geographyType' defaultValues' useComplexType' useOpenTypes' modifyMetadata
Long Identifier,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,,The length of the parameter JsonLightUnknownNavigationLink is 30.
Long Identifier,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,,The length of the parameter JsonLightUnknownNavigationProperty is 34.
Long Identifier,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,,The length of the parameter JsonLightUnknownODataAnnotation is 31.
Long Identifier,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ExpandWithProjectionWithoutKey,The length of the parameter referencesAreEqualAcrossEntries is 31.
Long Identifier,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The length of the parameter expectedRequestHeadersNonBatch is 30.
Long Identifier,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,,The length of the parameter CollectionParameterPayloadSize is 30.
Long Identifier,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,,The length of the parameter serviceOperationComplexCollectionPayload is 40.
Long Identifier,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,,The length of the parameter ComplexCollectionPropertyPayload is 32.
Long Identifier,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,,The length of the parameter bodyOperationParametersPositiveTestCases is 40.
Long Identifier,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,,The length of the parameter uriOperationParametersPositiveTestCases is 39.
Long Identifier,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,,The length of the parameter complexWithPrimitivesCollectionValue is 36.
Long Identifier,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,,The length of the parameter complexWithNestedComplexCollectionValues is 40.
Long Identifier,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The length of the parameter firstComplexCollectionDescription is 33.
Long Identifier,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionPropertyMaterialization,The length of the parameter materializedCollectionInstance is 30.
Long Identifier,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The length of the parameter actualSendingRequestDescriptors is 31.
Long Identifier,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The length of the parameter actualReceivingResponseDescriptors is 34.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateRoadTripMetadata,The length of the statement  "            Assert.IsTrue(typeof(ISpatial).IsAssignableFrom(geographyPropertyType)' "geographyPropertyType passed to CreateRoadTripMetadata is not a type derived from Geography."); " is 168.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateRoadTripServiceDefinition,The length of the statement  "            Assert.IsFalse(useComplexType' "Complex type support is not yet added to the property population in DSPUnitTestServiceDefinition."); " is 132.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,PopulateRoadTripData,The length of the statement  "            DSPResource tripLegResource = CreateTripLegResource(roadTripMetadata' DefaultId' defaultValues.TripLegGeography1' defaultValues.TripLegGeography2' useComplexType' modifyPropertyValues); " is 185.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,PopulateRoadTripData,The length of the statement  "            DSPResource amusementParkResource = CreateAmusementParkResource(roadTripMetadata' DefaultId' defaultValues.AmusementParkGeography' "Disneyland"' useComplexType' modifyPropertyValues); " is 183.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,PopulateRoadTripData,The length of the statement  "            DSPResource restStopResource = CreateRestStopResource(roadTripMetadata' DefaultId' defaultValues.RestStopGeography' useComplexType' modifyPropertyValues); " is 154.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateTripLegResource,The length of the statement  "            DSPResource tripLegResource = CreateResource(roadTripMetadata' "TripLeg"' id' tripLegPropertyValues.ToArray()' useComplexType); " is 127.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateAmusementParkResource,The length of the statement  "            DSPResource amusementParkResource = CreateResource(roadTripMetadata' "AmusementPark"' id' amusementParkPropertyValues.ToArray()' useComplexType); " is 145.
Long Statement,AstoriaUnitTests.Tests,SpatialTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,CreateRestStopResource,The length of the statement  "            DSPResource restStopResource = CreateResource(roadTripMetadata' "RestStop"' id' restStopPropertyValues.ToArray()' useComplexType); " is 130.
Long Statement,AstoriaUnitTests.Tests,TestLineString,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests1\Tests\SpatialTestUtil.cs,VerifyGmlContent,The length of the statement  "            Assert.AreEqual(this.Points.Count()' pos.Count()' "Number of pos elements does not equal to number of points in the linestring"); " is 129.
Long Statement,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,ServiceOperationCollectionComplex,The length of the statement  "            var addresses = context.Execute<SimpleNorthwind.Address>(new Uri("/GetAddresses"' UriKind.Relative)'"GET"' false).ToList(); " is 123.
Long Statement,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,IgnoreMissingPropertiesTestJsonLightShouldThrow,The length of the statement  "            Action test = ()=> context.Execute<SimpleNorthwind.Supplier>(new Uri("/Suppliers"' UriKind.Relative)).SingleOrDefault(); " is 120.
Long Statement,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,IgnoreMissingPropertiesTestJsonLightShouldThrow,The length of the statement  "            test.ShouldThrow<InvalidOperationException>().WithMessage("The property 'ExtraProperty' does not exist on type 'ODataDemo.Supplier'. Make sure to only use property names that are defined by the type or mark the type as open type."); " is 232.
Long Statement,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,NotModifiedTest,The length of the statement  "            DataServiceContextWithCustomTransportLayer context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' () => odataRequestMessage' () => odataResponseMessage); " is 180.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,TopBatchReturingODataError,The length of the statement  "                .And.InnerException.Message.Should().Be("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<error xmlns=\"http://docs.oasis-open.org/odata/ns/metadata\">\r\n  <code></code>\r\n  <message xml:lang=\"en-US\">This error must show up in the error returned below</message>\r\n</error>"); " is 297.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,WebExceptionShouldNotBeSurfacedWhenSaveChangesWithBatch,The length of the statement  "            var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' () => requestMessage' () => { throw new WebException("web exception on getting response"); }); " is 180.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,WebExceptionShouldNotBeSurfacedWhenSaveChangesWithNonBatch,The length of the statement  "            var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' () => requestMessage' () => { throw new WebException("web exception on getting response"); }); " is 180.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,WebExceptionShouldNotBeSurfacedWhenSaveChangesWithNonBatch,The length of the statement  "            var innerInnerException = test.ShouldThrow<DataServiceRequestException>().WithInnerException<DataServiceClientException>().And.InnerException.InnerException; " is 157.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,WebExceptionShouldNotBeSurfacedWhenGetResponseThrowsOnBatch,The length of the statement  "            var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' () => requestMessage' () => { throw new WebException("web exception on getting response"); }); " is 180.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,WebExceptionShouldeSurfacedWhenGetResponseThrowsOnNonBatch,The length of the statement  "            var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' () => requestMessage' () => { throw new WebException("web exception on getting response"); }); " is 180.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,ObjectDisposedExceptionShouldNotBeSurfacedDirectlyOnAddObjectBatchOnFailureInGetStream,The length of the statement  "            test.ShouldThrow<ObjectDisposedException>().WithMessage("Cannot access a disposed object.\r\nObject name: 'Stream already disposed'."); " is 135.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,ObjectDisposedExceptionShouldNotBeSurfacedDirectlyAddObjectInGetStream,The length of the statement  "            test.ShouldThrow<ObjectDisposedException>().WithMessage("Cannot access a disposed object.\r\nObject name: 'Stream already disposed'."); ; " is 137.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,ObjectDisposedExceptionShouldNotBeSurfacedDirectlyOnBatchOnFailureInGetStream,The length of the statement  "            test.ShouldThrow<ObjectDisposedException>().WithMessage("Cannot access a disposed object.\r\nObject name: 'Stream already disposed'."); ; " is 137.
Long Statement,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,ObjectDisposedExceptionShouldNotBeSurfacedDirectlyOnNonBatchExecute,The length of the statement  "            test.ShouldThrow<DataServiceQueryException>().WithInnerException<ObjectDisposedException>().WithInnerMessage("Cannot access a disposed object.\r\nObject name: 'Stream already disposed'."); " is 188.
Long Statement,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,EntityDescriptorShouldHaveServerTypeName,The length of the statement  "            const string responseBody = @"{""@odata.context"":""http://fake.org/$metadata#Entities""' ""value"": [ { ""ID"": ""1"" } ] }"; " is 126.
Long Statement,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,ClientShouldBeAbleToReadCollectionOfComplexValuesWithoutTypeResolver,The length of the statement  "            // Regression coverage for: Query for collection of complex values fails on JSON client when type-name resolver is not defined. " is 127.
Long Statement,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,ClientShouldBeAbleToReadCollectionOfComplexValuesWithoutTypeResolver,The length of the statement  "            const string responseBody = @"{""@odata.context"":""http://fake.org/$metadata#Collection(Server.Name.Space.ComplexType)""' ""value"": [ { ""Number"": ""1"" } ] }"; " is 163.
Long Statement,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,RunClientRequest,The length of the statement  "            using (var responseStream = responsePayload == null ? new MemoryStream() : new MemoryStream(Encoding.UTF8.GetBytes(responsePayload))) " is 133.
Long Statement,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,RunClientRequest,The length of the statement  "                DataServiceContext ctx = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' requestMessage' responseMessage); " is 130.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,SimpleQuery,The length of the statement  "                Assert.IsFalse(String.IsNullOrEmpty(product.ProductName)' "Expected ProductName to have a non-null or empty materialized value."); " is 130.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,SimpleQueryWithOpenTypes,The length of the statement  "                Assert.IsFalse(String.IsNullOrEmpty(customer.Name)' "Expected customer to have a non-null or empty materialized value."); " is 121.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,QueryWithBothMinimalAndFullMetadataShouldNotCauseDuplicateIdentities,The length of the statement  "                // using the row-based context because it intentionally puts OrderDetail's key properties in non-alphabetical order in the OM. " is 126.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,QueryWithBothMinimalAndFullMetadataShouldNotCauseDuplicateIdentities,The length of the statement  "                var firstOrderDetailProjected = ctx.CreateQuery<OrderDetail>("OrderDetails").Select(od => new OrderDetail { Quantity = od.Quantity }).First(); " is 142.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,UpdateWithAttachAndPrefer,The length of the statement  "                    ctx.AttachTo("Customers"' customer' "W/\"" + ODataUriUtils.ConvertToUriLiteral(anonymousCustomer.GuidValue' ODataVersion.V4) + "\""); " is 133.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ExpandWithProjectionWithoutKey,The length of the statement  "                // In Atom' even with NoTracking we do some level of identify resolution during materialization' within the scope of a top-level entry. " is 135.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ExpandWithProjectionWithoutKey,The length of the statement  "                // We can't do that with JSON Light because we don't always have the ID' so we never do it. With tracking the resolution should still be used. " is 142.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoAnonymousTypeWithKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new { o.ID' o.CurrencyAmount' o.DollarAmount }); " is 120.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoAnonymousTypeWithNestedProjectionAndBothParentAndChildKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new { o.ID' o.CurrencyAmount' o.DollarAmount' CustomerID = o.Customer.ID' o.Customer.Address.City }); " is 173.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoAnonymousTypeWithNestedProjectionAndParentKeyOnly,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new { o.ID' o.CurrencyAmount' o.DollarAmount' o.Customer.Address.City }); " is 145.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoAnonymousTypeWithNestedProjectionAndChildKeyOnly,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new { o.CurrencyAmount' o.DollarAmount' o.Customer.ID' o.Customer.Name }); " is 146.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { ID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount }); " is 165.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithoutKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount }); " is 154.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithNestedProjectionAndBothParentAndChildKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { ID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' Customer = new Customer() { ID = o.Customer.ID' Address = o.Customer.Address }}); " is 244.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithNestedProjectionAndParentKeyOnly,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { ID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' Customer = new Customer() { Address = o.Customer.Address }}); " is 224.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithNestedProjectionAndChildKeyOnly,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' Customer = new Customer() { ID = o.Customer.ID' Name = o.Customer.Name }}); " is 227.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { OrderID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount }); " is 186.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithoutKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount }); " is 170.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithNestedProjectionAndBothParentAndChildKey,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { OrderID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' CustomerID = o.Customer.ID' CustomerCity = o.Customer.Address.City }); " is 254.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithNestedProjectionAndParentKeyOnly,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { OrderID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' CustomerCity = o.Customer.Address.City }); " is 226.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithNestedProjectionAndChildKeyOnly,The length of the statement  "                var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' CustomerID = o.Customer.ID' CustomerCity = o.Customer.Address.City }); " is 238.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionWithSelectInFilterString,The length of the statement  "                // We should automatically escape the value in the filter before we inspect it for a projection' so this should not trigger asking for all metadata " is 147.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionWithSelectInFilterString,The length of the statement  "                ctx.SendingRequest2 += (c' args) => Assert.AreEqual("application/json;odata.metadata=minimal"' args.RequestMessage.GetHeader("Accept")); " is 136.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ClientShouldRequestAllMetadataWithProjectionInExecuteWithUriAsync,The length of the statement  "                var asyncResult = ctx.BeginExecute<Order>(new Uri("/Orders(1)?$select=DollarAmount'CurrencyAmount"' UriKind.Relative)' null' null); " is 131.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ClientShouldRequestAllMetadataWithProjectionInExecuteWithContinuation,The length of the statement  "                var response = ctx.Execute<Order>(new Uri("/Orders()?$select=Customer'DollarAmount"' UriKind.Relative)) as QueryOperationResponse<Order>; " is 137.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ClientShouldRequestAllMetadataWithProjectionInExecuteWithContinuationAsync,The length of the statement  "                IAsyncResult asyncResult = ctx.BeginExecute<Order>(new Uri("/Orders()?$select=Customer'DollarAmount"' UriKind.Relative)' null' null); " is 133.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,GetQueryForEntityWithNamedStreams,The length of the statement  "            return (DataServiceQuery<EntityWithNamedStreams1>)context.CreateQuery<EntityWithNamedStreams1>("MySet1").Where(e => e.ID == 1); " is 127.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,RunClientIntegrationTestWithNamedStreams,The length of the statement  "            // Configure one of the named streams on each type to have a different ReadStreamUri than the default' so we can verify it's correctly picked up and not built using conventions " is 176.
Long Statement,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ConfigureReadStreamUri,The length of the statement  "            var streamResourceProperty = service.Metadata.GetResourceType(resourceTypeName).GetNamedStreams().Single(ns => ns.Name == namedStreamPropertyName); " is 147.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The length of the statement  "                        where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50 " is 121.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The length of the statement  "                    url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50" " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The length of the statement  "                    url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3" " is 128.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Actors/any(a:a/DirectedMovies/all(dm:dm eq $it and $it/Awards/all(aw:aw/Movie/Director eq dm/Director)))" " is 127.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Awards/all(aw:isof($it/Director' 'NS.MegaStar') and not aw/Movie/Actors/any(a:isof(a' 'NS.MegaStar')))" " is 125.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Awards/all(aw:startswith($it/Director/FirstName''Hus') and not aw/Movie/Actors/any(a:isof(a' 'NS.MegaStar')))" " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                        where m.Awards.All(aw => m.Director is MegaStar && ((MegaStar)m.Director).MegaStartProp.StartsWith("Hus") && aw.Recepient == m.Director) " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Awards/all(aw:isof($it/Director' 'NS.MegaStar') and startswith(cast($it/Director''NS.MegaStar')/MegaStartProp''Hus') and aw/Recepient eq $it/Director)" " is 173.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                        where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any(a=> a.AwardDate > new DateTime(0' DateTimeKind.Utc) && ms.DirectedMovies.Any() && m.Director == ms)) " is 158.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any(a:a/AwardDate gt 0001-01-01T00:00:00Z and ms/DirectedMovies/any() and $it/Director eq ms))" " is 153.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                        where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any(a=> a.AwardDate > new DateTime(0' DateTimeKind.Utc) && ms.DirectedMovies.Any(dm=> dm.Awards.All(aw=> aw.Recepient.FirstName == ms.FirstName )) && m.Director == ms)) " is 222.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any(a:a/AwardDate gt 0001-01-01T00:00:00Z and ms/DirectedMovies/any(dm:dm/Awards/all(aw:aw/Recepient/FirstName eq ms/FirstName)) and $it/Director eq ms))" " is 212.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                        where m.Awards.Any(aw => aw.Recepient is MegaStar && m.Actors.OfType<MegaStar>().All(a=>a.DateOfBirth > new DateTime(2010' 1' 1' 0' 0' 0' DateTimeKind.Utc))) " is 157.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The length of the statement  "                    url = "Movies?$filter=Awards/any(aw:isof(aw/Recepient' 'NS.MegaStar') and $it/Actors/NS.MegaStar/all(a:a/DateOfBirth gt 2010-01-01T00:00:00Z))" " is 143.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,InvalidAnyAllUsage,The length of the statement  "                            "Initializing instances of the entity type AstoriaUnitTests.Tests.LinqAnyAllTests+Movie with the expression IIF(m.Awards.Any()' m.Awards' value(System.Collections.Generic.List`1[AstoriaUnitTests.Tests.LinqAnyAllTests+Award])) is not supported.")' " is 246.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,InvalidAnyAllUsage,The length of the statement  "                            "Initializing instances of the entity type AstoriaUnitTests.Tests.LinqAnyAllTests+Movie with the expression m.Actors.OrderBy(a => a.Awards.Any()) is not supported.")' " is 166.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,InvalidAnyAllUsage,The length of the statement  "                            "Constructing or initializing instances of the type <>f__AnonymousType1b`2[System.Int32'System.Boolean] with the expression m.Actors.Any() is not supported.")' " is 159.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,InvalidAnyAllUsage,The length of the statement  "                            "Constructing or initializing instances of the type <>f__AnonymousType1b`2[System.Int32'System.Collections.Generic.List`1[AstoriaUnitTests.Tests.LinqAnyAllTests+Person]] with the expression m.Actors.OrderBy(a => a.Awards.Any()) is not supported.")' " is 248.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,AnyAllClientVersionTests,The length of the statement  "                        ErrorMessage = "Error translating Linq expression to URI: The method 'Any' is not supported when MaxProtocolVersion is less than '4.0'." " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,AnyAllClientVersionTests,The length of the statement  "                        ErrorMessage = "Error translating Linq expression to URI: The method 'Any' is not supported when MaxProtocolVersion is less than '4.0'." " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,AnyAllClientVersionTests,The length of the statement  "                        ErrorMessage = "Error translating Linq expression to URI: The method 'Any' is not supported when MaxProtocolVersion is less than '4.0'." " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,AnyAllClientVersionTests,The length of the statement  "                        ErrorMessage = "Error translating Linq expression to URI: The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." " is 139.
Long Statement,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,AnyAllClientVersionTests,The length of the statement  "                        ErrorMessage = "Error translating Linq expression to URI: The method 'All' is not supported when MaxProtocolVersion is less than '4.0'." " is 136.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The length of the statement  "                new { query = ctx.Employees.Where(e => e.Employees2.EmployeeID == 2)' uri = "Employees?$filter=Employees2/EmployeeID eq 2" }' " is 125.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The length of the statement  "                new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.Employees2.EmployeeID == 1 select e' uri = "Employees(2)/Employees1?$filter=Employees2/EmployeeID eq 1" }' " is 199.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The length of the statement  "                new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.EmployeeID == 1 select e' uri = "Employees(2)/Employees1(1)" } " is 155.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The length of the statement  "            // The queries are the same' but VB handles SelectMany with a slightly different expression tree' so make sure we can handle both " is 129.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The length of the statement  "            // The queries use orderby and where to achieve this' but there is no additional significance to which operator is used in a given query. " is 137.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestDataFailedToCreateWhenSaveChangeOptionsContinueOnErrorSet,The length of the statement  "                DataServiceRequestException ex = TestUtil.RunCatching<DataServiceRequestException>(() => { context.SaveChanges(options); }); " is 124.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestDataFailedToCreateWhenSaveChangeOptionsContinueOnErrorSet,The length of the statement  "                Assert.AreEqual(DataServicesClientResourceUtil.GetString("Context_SetSaveStreamWithoutEditMediaLink")' innerEx.Message); " is 120.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqShouldThrowWhenConstantExpressionInconvertableToString,The length of the statement  "            // Alinq translator should throw better exception when constant expression are not convertable to string' but outer expression is also incorrect. " is 145.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqShouldThrowWhenConstantExpressionInconvertableToString,The length of the statement  "            // the expression .GetType() == EpmCustomer is not supported is a better message than "Cannot convert EpmCustomer to string" " is 124.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqShouldThrowWhenConstantExpressionInconvertableToString,The length of the statement  "            Assert.AreEqual(DataServicesClientResourceUtil.GetString("ALinq_CouldNotConvert"' "AstoriaUnitTests.Stubs.Address")' ex1.Message); " is 130.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The length of the statement  "            TestUtil.RunCombinations((IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))' UnitTestsUtil.BooleanValues' (mode' closeStream) => " is 147.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The length of the statement  "                        Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"' "The request uri of the second request must be the value of the location header"); " is 210.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The length of the statement  "                        Assert.AreEqual(requestMessage.GetHeader("If-Match")' "W/\"randometag\""' "the If-Match header must be specified in the second request"); " is 137.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The length of the statement  "                        Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/Customers"' "The first request must be a POST to customers"); " is 165.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The length of the statement  "                        responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"); " is 130.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The length of the statement  "                var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage); " is 125.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The length of the statement  "            // Make sure SaveChangeOptions.ContinueOnError is working as we expected' and when we don't continue on error' we fail as expected " is 130.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The length of the statement  "                            ctx.SetSaveStream(p' new MemoryStream(new byte[] { 0 })' true' new DataServiceRequestArgs() { ContentType = "image/bmp" }); " is 123.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The length of the statement  "                            Assert.AreEqual(ex.GetType()' (option == SaveChangesOptions.BatchWithSingleChangeset || option == SaveChangesOptions.BatchWithIndependentOperations) ? typeof(NotSupportedException) : typeof(InvalidOperationException)); " is 218.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The length of the statement  "                        if (option == SaveChangesOptions.BatchWithSingleChangeset) expectedCallCount = clientSideError ? 0 : 1;    // batch always fails as a whole " is 139.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The length of the statement  "                        else if (option == SaveChangesOptions.BatchWithIndependentOperations) expectedCallCount = clientSideError ? 0 : 2;    // Independent  batch always fails as a whole " is 163.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The length of the statement  "                        else if (option == SaveChangesOptions.ContinueOnError || (mode != SaveChangesMode.Synchronous && !clientSideError)) expectedCallCount = 2;  // V2 behavior: async code path always continue on server-error " is 203.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,AsyncWithVaryingSizePayload_Inner,The length of the statement  "                EntityTypeWithVaryingSizePaylod serverEntity = TypedCustomDataContext<EntityTypeWithVaryingSizePaylod>.CurrentValues.Single(e => e.ID == clientEntity.ID); " is 154.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,GetPersonProperties,The length of the statement  "            return String.Format("<d:ID>{0}</d:ID><d:Name>Person{0}</d:Name><d:Address><d:City>City{0}</d:City><d:StreetAddress>StreetAddress{0}</d:StreetAddress></d:Address>"' id); " is 169.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The length of the statement  "                // The reason for doing $select here is if we do not do $select' Orders will should up as unexpanded link' and the client already validates that the property " is 157.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The length of the statement  "                    ODataLibResourceUtil.GetString("ValidationUtils_NavigationPropertyExpected"' "BestFriend"' "AstoriaUnitTests.Tests.ClientCSharpRegressionTests_CustomerEntity"' "Structural")); " is 175.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The length of the statement  "                    ODataLibResourceUtil.GetString("ODataAtomPropertyAndValueDeserializer_NavigationPropertyInProperties"' "Address"' "AstoriaUnitTests.Tests.ClientCSharpRegressionTests_CustomerEntity")); " is 184.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The length of the statement  "                    ODataLibResourceUtil.GetString("ValidationUtils_NavigationPropertyExpected"' "Orders"' "AstoriaUnitTests.Tests.ClientCSharpRegressionTests_CustomerEntity"' "Structural")); " is 171.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The length of the statement  "                // for V1/V2' the MDSV is too low for the response' since the response contains collection properties. hence testing this only for V3. " is 134.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The length of the statement  "                    ODataLibResourceUtil.GetString("ODataAtomPropertyAndValueDeserializer_NavigationPropertyInProperties"' "OrdersNavProperty"' "AstoriaUnitTests.Tests.ClientCSharpRegressionTests_CustomerEntity")); " is 194.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,HelperMethod,The length of the statement  "                        Assert.AreEqual(expectedErrorMessage' innerException ? e.InnerException.Message : e.Message' "the error message did not match"); " is 128.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestVersionShouldNotBumpForDeletion,The length of the statement  "            IEnumerable<object> entities = new List<object> {new AstoriaUnitTests.DataWebClientCSharp.Collection.EntityWithDictionary {ID = 1' Collection = new Dictionary<string' string> {{"property1"' "value1"}' {"property2"' "value2"}}}' // non collection " is 245.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestVersionShouldNotBumpForDeletion,The length of the statement  "                var ctx = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage); " is 121.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        // Adding links where the targets are in the unchanged state will cause the links to be folded into the POST for newOrder1' instead of sent separately. " is 151.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        // Particularly in the case of batch' this means that the client has to be able to handle not seeing a response for this change. " is 128.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        // In Dev11:86477 we were trying to apply the headers from the response to the link descriptor instead of the correct entity descriptor' " is 136.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Added' newOrder1Descriptor.State' "Expected first new order to be in the Added state before SaveChanges."); " is 136.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Added' newOrder2Descriptor.State' "Expected second new order to be in the Added state before SaveChanges."); " is 137.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected first link to be in the Added state before SaveChanges."); " is 126.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected second link to be in the Added state before SaveChanges."); " is 127.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        // The bug in Dev11:86477 only applies to batch' but testing this for non-batch too to make sure it continues to work as well. " is 126.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(id' newOrder1Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on first new order after SaveChanges."); " is 128.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(id' newOrder1Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on first new order after SaveChanges."); " is 128.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Unchanged' newOrder1Descriptor.State' "Expected first new order to be in the Unchanged state after SaveChanges."); " is 143.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(id2' newOrder2Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on second new order after SaveChanges."); " is 130.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(id2' newOrder2Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on second new order after SaveChanges."); " is 130.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Unchanged' newOrder2Descriptor.State' "Expected second new order to be in the Unchanged state after SaveChanges."); " is 144.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected first link to be in the Unchanged state after SaveChanges."); " is 133.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The length of the statement  "                        Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected second link to be in the Unchanged state after SaveChanges."); " is 134.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldWriteTypeInfoForPrimitiveCollectionProperties,The length of the statement  "            XElement properties = doc.Root.Element(UnitTestsUtil.AtomNamespace + "content").Element(UnitTestsUtil.MetadataNamespace + "properties"); " is 136.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldWriteTypeInfoForPrimitiveCollectionProperties,The length of the statement  "                new KeyValuePair<XName' string>(UnitTestsUtil.DataNamespace + "CollectionDateTimeOffset"' "Collection(DateTimeOffset)")' " is 120.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldWriteTypeInfoForPrimitiveCollectionProperties,The length of the statement  "                new KeyValuePair<XName' string>(UnitTestsUtil.DataNamespace + "CollectionNDateTimeOffset"' "Collection(DateTimeOffset)")' " is 121.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,DeleteLinkAsync,The length of the statement  "                    Assert.AreEqual(1' operationResponses.Count' string.Format("Number of operation responses was wrong for iteration {0} of {1}"' iteration' maxIterations)); " is 154.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,TestMultipleKeysOfKeyAttribute,The length of the statement  "            Microsoft.OData.Client.DataServiceContext context = new Microsoft.OData.Client.DataServiceContext(new Uri("http://DoesNotExist/nope.svc")); " is 139.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientTypeCacheError_LoadProperties,The length of the statement  "            // ensure that with an error thrown' the type cache gets deleted' and that when you try again' the same error gets thrown " is 121.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,NullCheckAgainstNonEntityProperty,The length of the statement  "            // Client LINQ: NullReferenceException preceded by an Assert: atomProperty.Entry != null -- otherwise a primitive property / complex type is being rewritte with a null check; this is only supported for entities and collection " is 225.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,NullCheckAgainstNonEntityProperty,The length of the statement  "                // Repos: when the IIF statement returns an entity type when the null check is false and the null check is against a non-entity property. " is 137.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from o in ctx.CreateQuery<MyOrder>("Orders") select new Order { ID = o.ID' Customer = new Customer { Name = o.Customer.Name }}' " is 155.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Stubs.Customer with the expression o.Customer.Name is not supported."' " is 149.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                    // For entities' we do not allow projecting properties of their complex properties so that it's complex properties will always be safe for roundtrip. " is 149.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new { Customer = new Customer { ID = c.ID' Address = new Address { StreetAddress = c.Address.StreetAddress }}}' " is 195.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Stubs.Customer with the expression new Address() {StreetAddress = c.Address.StreetAddress} is not supported."' " is 189.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new { Customer = new Customer { ID = c.ID' Address = new Address { StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode' }}}' " is 279.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Stubs.Customer with the expression new Address() {StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode} is not supported."' " is 272.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new { Customer = new Customer { ID = c.ID' Address = c.Address }}' " is 150.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new MyNonEntity { Customer = new MyCustomer { ID = c.ID' Address = new MyAddress { StreetAddress = c.Address.StreetAddress }}}' " is 211.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Tests.ClientCSharpRegressionTests+MyCustomer with the expression new MyAddress() {StreetAddress = c.Address.StreetAddress} is not supported."' " is 221.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new MyNonEntity { Customer = new MyCustomer { ID = c.ID' Address = new MyAddress { StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode' }}}' " is 295.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Tests.ClientCSharpRegressionTests+MyCustomer with the expression new MyAddress() {StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode} is not supported."' " is 304.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new Customer { ID = c.ID' Address = new Address { StreetAddress = c.Address.StreetAddress }}' " is 177.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Stubs.Customer with the expression new Address() {StreetAddress = c.Address.StreetAddress} is not supported."' " is 189.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new Customer { ID = c.ID' Address = new Address { StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode' }}' " is 261.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Stubs.Customer with the expression new Address() {StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode} is not supported."' " is 272.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new Customer { ID = c.ID' Address = c.Address }' " is 132.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new MyCustomer { ID = c.ID' Address = new MyAddress { StreetAddress = c.Address.StreetAddress }}' " is 181.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Tests.ClientCSharpRegressionTests+MyCustomer with the expression new MyAddress() {StreetAddress = c.Address.StreetAddress} is not supported."' " is 221.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new MyCustomer { ID = c.ID' Address = new MyAddress { StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode }}' " is 264.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        ExceptionMessage = "Initializing instances of the entity type AstoriaUnitTests.Tests.ClientCSharpRegressionTests+MyCustomer with the expression new MyAddress() {StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode} is not supported."' " is 304.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new MyNonEntity { Address = new MyAddress { StreetAddress = c.Address.StreetAddress }}' " is 171.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new MyNonEntity { Address = new MyAddress { StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode }}' " is 254.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new { ID = c.ID' Address = c.Address }' " is 123.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new { ID = c.ID' Address = new { StreetAddress = c.Address.StreetAddress }}' " is 160.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,EnumerateProjectionIntoComplexTypeShouldThrow,The length of the statement  "                        Query = (IQueryable<object>)from c in ctx.CreateQuery<Customer>("Customers") select new  { ID = c.ID' Address = new { StreetAddress = c.Address.StreetAddress' City = c.Address.City' State = c.Address.State' PostalCode = c.Address.PostalCode }}' " is 244.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,LoadNavigationPropertyToSetNotAssignableFromListOfT,The length of the statement  "            // Assert followed by an ArgumentException when loading a navigation property to a set whose type is not assignable from List<T> " is 128.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,LoadNavigationPropertyToSetNotAssignableFromListOfT,The length of the statement  "                Type[] testCollectionTypes = new Type[] { typeof(List<Order>)' typeof(ICollection<Order>)' typeof(MyCollection)' typeof(MyList) }; " is 130.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldOverwriteDefaultMessageQuotasLimits,The length of the statement  "            Assert.AreNotEqual("The current change set contains too many operations. Only change sets with a maximum number of '1000' operations are allowed."' ex.Message' "Client failed to override ODL default value for maxOperationsPerChangeset"); " is 237.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldOverwriteDefaultMessageQuotasLimits,The length of the statement  "                batchRequests.Add(new DataServiceRequest<CustomDataClient.Customer>(new Uri(DataServiceContextWithCustomTransportLayer.DummyUri + "/foo" + i))); " is 144.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldOverwriteDefaultMessageQuotasLimits,The length of the statement  "                Assert.AreNotEqual("The current batch message contains too many parts. Only batch messages with a maximum number of '100' query operations and change sets are allowed."' ex.Message' "Client failed to override ODL default value for maxPartsPerBatch"); " is 250.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ShouldThrowIfUsingJsonLightWithoutModel,The length of the statement  "            // InvalidOperationException if client user try to use jsonlight but doesn't provide IEdmModel and the model is used by odatalib " is 128.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ShouldThrowIfUsingJsonLightWithoutModel,The length of the statement  "                Exception ex = TestUtil.RunCatching(() => context.Execute<Customer>(new Uri(request.ServiceRoot + "/Customers?$format=json"))); " is 127.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ShouldThrowIfUsingJsonLightWithoutModel,The length of the statement  "                Assert.AreEqual(DataServicesClientResourceUtil.GetString("DataServiceClientFormat_ValidServiceModelRequiredForJson")' ex.InnerException.Message); " is 145.
Long Statement,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ChangeAcceptHeaderToJsonInSendingRequestWithoutModel,The length of the statement  "                Assert.AreEqual(DataServicesClientResourceUtil.GetString("DataServiceClientFormat_ValidServiceModelRequiredForJson")' ex.InnerException.Message); " is 145.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,BeginLoadPropertyTest,The length of the statement  "                            result = this.context.BeginLoadProperty(customer' "Orders"' (DataServiceQueryContinuation)null' (r) => { this.callbackFlag = true; }' myState); " is 143.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,BeginLoadPropertyTest,The length of the statement  "                result = this.context.BeginLoadProperty(customer' "Orders"' qor.GetContinuation()' (r) => { this.callbackFlag = true; }' myState); " is 130.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,BeginLoadPropertyTest,The length of the statement  "                result = this.context.BeginLoadProperty(customer' "Orders"' qor.GetContinuation()' (r) => { this.callbackFlag = true; }' myState); " is 130.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementUnChangedSource,The length of the statement  "                            OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) => { config.SetEntitySetPageSize("Orders"' usePaging ? 1 : 5); }; " is 132.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementDeletedSource,The length of the statement  "                        var changedDescritors = this.context.Entities.Cast<Descriptor>().Union(this.context.Links.Cast<Descriptor>()).Where(d => d.State != EntityStates.Unchanged); " is 156.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,ExerciseApplyItemsToCollectionViaMergeLists,The length of the statement  "                            .Select(c => new NarrowCustomer() { ID = c.ID' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList() }); " is 142.
Long Statement,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,ExerciseApplyItemsToCollectionViaMergeLists,The length of the statement  "                            .Select(c => new NarrowCustomer() { ID = c.ID' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList() }); " is 142.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Get_ProjectNavOnly,The length of the statement  "            var q = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Select(c => new EFFKClient.NarrowCustomerWithNavOrder() " is 133.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Get_ProjectFKOnly,The length of the statement  "            var q = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Select(c => new EFFKClient.NarrowCustomerWithFKOrder() " is 132.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_SimpleUpdate,The length of the statement  "            var cust = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Expand("Orders($expand=Customers)").FirstOrDefault(); " is 134.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_NarrowingUpdate1,The length of the statement  "            var cust = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Select(c => new EFFKClient.NarrowCustomerWithFKOrder() " is 135.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_NarrowingUpdate2,The length of the statement  "            var cust = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Select(c => new EFFKClient.NarrowCustomerWithNavOrder() " is 136.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_NarrowingUpdate2,The length of the statement  "            var cust2 = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Select(c => new EFFKClient.NarrowCustomerWithNavOrder() " is 137.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The length of the statement  "            var cust1 = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Where(c => c.ID == 1).FirstOrDefault(); " is 121.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The length of the statement  "                Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new " is 124.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The length of the statement  "                Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new " is 124.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_DeleteLinks,The length of the statement  "            var cust = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Expand("Orders($expand=Customers)").FirstOrDefault(); " is 134.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_SettingTheSameRelationshipAgain,The length of the statement  "            var cust = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Expand("Orders($expand=Customers)").FirstOrDefault(); " is 134.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsert_Bind_Delete,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsert_Bind_Delete,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsert_Bind_Delete,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 0' "There should be no offices left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_PrincipalToDependent,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_PrincipalToDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_PrincipalToDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 0' "There should be no offices left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_PrincipalToDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_DependentToPrincipal,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_DependentToPrincipal,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_DependentToPrincipal,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 0' "There should be no offices left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_DependentToPrincipal,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 1' "There should be exactly one office instance"); " is 141.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 0' "There should be no offices left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsertAndBind_Batch,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsertAndBind_Batch_ChangedUriCompositionRulesOnServer,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "            EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 }; " is 125.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "            EFFKClient.Office o1 = new EFFKClient.Office() { ID = 2' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2174 }; " is 126.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "                Assert.IsTrue(ex.Response.First().Error.Message.Contains("A referential integrity constraint violation occurred")' "Making sure appropriate EF exception is thrown"); " is 165.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "                ctx.DetachLink(o1' "Worker"' w); // To clear this operation from the context so that next test doesn't hit the same issue " is 121.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "                Assert.IsTrue(ex1.Response.First().Error.Message.Contains("The principal object must be tracked and not marked for deletion.")' "Making sure appropriate EF exception is thrown"); " is 178.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "                ctx.DetachLink(w' "Office"' o1); // To clear this operation from the context so that next test doesn't hit the same issue " is 121.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 2' "Unexpected number of office instances encountered"); " is 147.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 1' "Unexpected number of worker instances encountered"); " is 147.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 0' "There should be no offices left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The length of the statement  "            Assert.AreEqual(ctx.CreateQuery<EFFKClient.Worker>("CustomObjectContext.Workers").Count()' 0' "There should be no workers left"); " is 129.
Long Statement,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,VerifyServerOrderId,The length of the statement  "            var order = _ctx.CreateQuery<EFFKClient.Order>("CustomObjectContext.Orders").Expand("Customers").Where(o => o.ID == orderId).FirstOrDefault(); " is 142.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientPost,The length of the statement  "                Tuple.Create(typeof(Dev10TypeDef.EntityWithDynamicComplexProperty)' true' "Contains:The type 'AstoriaUnitTests.Tests.UnitTestModule+Dev10TypeTests+ComplexTypeWithDynamicInterface' is not supported by the client library.")' " is 222.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientPost,The length of the statement  "                Tuple.Create(typeof(Dev10TypeDef.EntityWithDynamicInterface)'       true' "Contains:The type 'AstoriaUnitTests.Tests.UnitTestModule+Dev10TypeTests+EntityWithDynamicInterface' is not supported by the client library.")' " is 217.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientPost,The length of the statement  "                Tuple.Create(typeof(Dev10TypeDef.EntityWithDynamicProperties)'      true' "Contains:The complex type 'System.Object' has no settable properties.")' " is 147.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientPost,The length of the statement  "                Tuple.Create(typeof(Dev10TypeDef.EntityWithTupleProperty)'          true' "Contains:The type 'System.Tuple`2[System.String'System.String]' is not supported by the client library.")                 " is 180.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientPost,The length of the statement  "                this.GetType().GetMethod("PostToDev10TypeService"' BindingFlags.NonPublic | BindingFlags.Instance).MakeGenericMethod(typedef.Item1).Invoke(this' new object[] { typedef.Item2' typedef.Item3 }); " is 192.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientQuery,The length of the statement  "                Tuple.Create(typeof(Dev10TypeDef.EntityWithBigIntProperty)' true' "Contains:The property 'BigInt' on type 'AstoriaUnitTests.Tests.UnitTestModule_Dev10TypeTests_EntityWithBigIntProperty' is not a valid property. Make sure that the type of the property is a public type and a supported primitive type or a entity type with a valid key or a complex type.")' " is 354.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientQuery,The length of the statement  "                Tuple.Create(typeof(Dev10TypeDef.EntityWithDynamicComplexProperty)' true' "Contains:Internal Server Error. The property 'DynamicComplexProperty' is of type 'AstoriaUnitTests.Tests.UnitTestModule_Dev10TypeTests_EntityWithDynamicComplexProperty' which is an unsupported type.")' " is 276.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientQuery,The length of the statement  "                this.GetType().GetMethod("QueryDev10TypeService"' BindingFlags.NonPublic | BindingFlags.Instance).MakeGenericMethod(typedef.Item1).Invoke(this' new object[] { typedef.Item2' typedef.Item3 }); " is 191.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientDynamicExpand,The length of the statement  "                    Assert.IsTrue(innerEx.Message.Contains("Internal Server Error. The type 'AstoriaUnitTests.Tests.UnitTestModule+Dev10TypeTests+EntityWithDynamicInterface' is not supported.")' ex.InnerException.Message); " is 202.
Long Statement,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,Dev10Type_ClientQueryTupleWithALinq,The length of the statement  "                    Assert.AreEqual("The type 'System.Tuple`2[System.String'System.String]' is not supported by the client library."' innerEx.Message); " is 131.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "            // Execute a query using a variety of methods (including sync' async' batch) and verify the response headers and payloads " is 121.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                    bool isBatchQuery = queryMode == QueryMode.BatchAsyncExecute || queryMode == QueryMode.BatchAsyncExecuteWithCallback || queryMode == QueryMode.BatchExecute; " is 156.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                    PlaybackService.ProcessRequestOverride.Value = (r) => { throw new InvalidOperationException("ResponseHeadersAndStreamExceptionTest -- Bad Request."); }; " is 152.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                    Assert.AreEqual(1' testHookConsumer.ResponseHeaders.Count' "Wrong number of response headers being tracked by the test hook."); " is 127.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                    Assert.AreEqual(1' testHookConsumer.ResponseWrappingStreams.Count' "Unexpected number of response streams tracked by the test hook."); " is 134.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                        Assert.AreEqual(""' actualResponsePayload' "In batch the client calls the hook to get the stream but never reads from it."); " is 124.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                        TestUtil.AssertContains(actualResponsePayload' "System.InvalidOperationException: ResponseHeadersAndStreamExceptionTest -- Bad Request."); " is 138.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                    // Sanity check on the count of request streams' but not verifying them here. That functionality is tested more fully in another test method. " is 141.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,ResponseHeadersAndStreamExceptionTest,The length of the statement  "                    Assert.AreEqual(expectedRequestStreamsCount' testHookConsumer.RequestWrappingStreams.Count' "Unexpected number of request streams."); " is 133.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The length of the statement  "            // SaveChanges with multiple changes' using a variety of configurations (including sync' async' batch) and verify the request headers and payloads " is 146.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The length of the statement  "                string batchHttpResponse = PlaybackService.ConvertToBatchResponsePayload(nonBatchHttpResponses' false' out batchPayload); " is 121.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The length of the statement  "                var saveChangesOptions = new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset }; " is 123.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The length of the statement  "                            Dictionary<string' string> expectedRequestHeaders = isBatch ? expectedRequestHeadersBatch : expectedRequestHeadersNonBatch; " is 123.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The length of the statement  "                            Assert.AreEqual(1' testHookConsumer.RequestWrappingStreams.Count' "Wrong number of request streams tracked by the test hook"); " is 126.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,VerifyHeaders,The length of the statement  "                Assert.IsTrue(actualHeaders.ContainsKey(expectedHeaderKey)' "Headers do not contain the header {0}."' expectedHeaderKey); " is 121.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,VerifyHeaders,The length of the statement  "                    // For batch' content type contains a GUID that can change on each request or response' so just verify it starts with the expected value " is 136.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,VerifyHeaders,The length of the statement  "                    Assert.IsTrue(actualHeaders[expectedHeaderKey].StartsWith(expectedHeaders[expectedHeaderKey])' "Header Content-Type does not start with the expected value."); " is 158.
Long Statement,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,VerifyHeaders,The length of the statement  "                    Assert.AreEqual(expectedHeaders[expectedHeaderKey]' actualHeaders[expectedHeaderKey]' "Header {0} is not the expected value."' expectedHeaderKey); " is 146.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ClassInitialize,The length of the statement  "            request.AddToInitializeService(new DataServicesFeaturesSection() { ReplaceFunction = new DataServicesReplaceFunctionFeature() { Enable = true } }); " is 147.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,VerifyQueriesNotSupported,The length of the statement  "            var q3 = context.CreateQuery<Team>("Teams").Where(t => t.TeamID > 1).Select(t => new { field = t.Players.Select(p => new { id = p.ID }).Select(a => a) }); " is 154.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,VerifyQueriesNotSupported,The length of the statement  "            var q4 = context.CreateQuery<Team>("Teams").Where(t => t.TeamID > 1).Select(t => new { field = t.Players.SelectMany(p => p.Team.Players' (a' p) => new { id = p.ID }).Select(a => a) }); " is 184.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,VerifyQueriesNotSupported,The length of the statement  "            var q5 = context.CreateQuery<Team>("Teams").Where(t => t.TeamID > 1).Select(t => new { field = t.Players.Select(p => new { id = p.ID }).ToList().Select(a => a) }); " is 163.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ShouldThrowNullExceptionForEntryReturnedByNavigationProperty,The length of the statement  "                Assert.AreEqual("An entry returned by the navigation property 'HomeStadium' is null and cannot be initialized. You should check for a null value before accessing this property."' nre.Message); " is 192.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeyAndNavigate,The length of the statement  "            var writer3 = TestURIWriter.CreateURIWriter<Team>(_baseUri.OriginalString' "Teams").FindByKey("ID"' 1).Navigate(t => t.HomeStadium); " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeyAndNavigate,The length of the statement  "            var writer4 = TestURIWriter.CreateURIWriter<Team>(_baseUri.OriginalString' "Teams").FindByKey("TeamID"' 3).Navigate(t => t.City); " is 129.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexPaths,The length of the statement  "            var queryable = context.CreateQuery<Team>("Teams").Where(t => t.TeamID == 1).Select(t => t.HomeStadium).Select(s => s.Name); " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The length of the statement  "            // - SelectMany(IQ<TSource>source' Exp<Func<TSource' IEnum<TCollection>>> collection' Exp<Func<TSource' TCollection' TResult>> selector) " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The length of the statement  "            // - SelectMany(IQ<TSource>source' Exp<Func<TSource' int' IEnum<TCollection>>> collection' Exp<Func<TSource' TCollection' TResult>> selector) " is 141.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The length of the statement  "                Trace.WriteLine("Transparent identifier in leaf of projection (not supported' projection doesn't implement SelectMany-style projection)."); " is 139.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The length of the statement  "                Trace.WriteLine("Transparent identifier (not supported' trailed with .Where() but both members still in scope for projection)."); " is 129.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectManyWithPosition,The length of the statement  "                    System.Data.Test.Astoria.TestUtil.AssertContains(e.ToString()' "System.NotSupportedException: The method 'SelectMany' is not supported."); " is 138.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectManyWithPosition,The length of the statement  "                var q = context.CreateQuery<Team>("Teams").Where(t => t.TeamID == 1).SelectMany(t => t.Players' (t' p) => new { fn = p.FirstName }); " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectManyWithPosition,The length of the statement  "                var q = context.CreateQuery<Team>("Teams").Where(t => t.TeamID == 1).SelectMany((t' n) => t.Players' (t' p) => new { fn = p.FirstName }); " is 137.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectManyWithPosition,The length of the statement  "                var b = baseLineContext.Teams.Where(t => t.TeamID == 1).SelectMany((t' n) => t.Players' (t' p) => new { fn = p.FirstName }); " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectManyWithPosition,The length of the statement  "                    System.Data.Test.Astoria.TestUtil.AssertContains(e.ToString()' "System.NotSupportedException: The method 'SelectMany' is not supported."); " is 138.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_DirectProjection1,The length of the statement  "                System.Data.Test.Astoria.TestUtil.AssertContains(zz' "/Customers('ALFKI')/Orders(10643)/Order_Details(OrderID=10643'ProductID=28)?$expand=Orders'Products&$select=OrderID'ProductID"); " is 182.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_NestedSelect_Collection,The length of the statement  "            int teamId = baseLineContext.Teams.First(t => t.HomeStadium != null && t.HomeStadium.FormerNames != null && t.HomeStadium.FormerNames.Count > 0).TeamID; " is 152.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_NestedSelect_Navigation_1,The length of the statement  "            int leagueId = baseLineContext.Leagues.First(l => l.Teams != null && l.Teams.Where(t => t.TeamID == teamId).Count() > 0).ID; " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_NestedSelect_Navigation_2,The length of the statement  "            int leagueId = baseLineContext.Leagues.First(l => l.Teams != null && l.Teams.Where(t => t.TeamID == teamId).Count() > 0).ID; " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_NestedSelect_Navigation_3,The length of the statement  "            int leagueId = baseLineContext.Leagues.First(l => l.Teams != null && l.Teams.Where(t => t.TeamID == teamId).Count() > 0).ID; " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_NestedSelect_Navigation_5,The length of the statement  "            int leagueId = baseLineContext.Leagues.First(l => l.Teams != null && l.Teams.Where(t => t.TeamID == teamId).Count() > 0).ID; " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The length of the statement  "                             select new Team() { City = x.City' Players = null' HomeStadium = new Stadium() { Name = "KingDome" }' TeamID = x.TeamID' TeamName = x.TeamName }; " is 145.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The length of the statement  "                            select new Team() { City = t.City' Players = null' HomeStadium = new Stadium() { Name = "KingDome" }' TeamID = t.TeamID' TeamName = t.TeamName }; " is 145.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2SimpleProjections,The length of the statement  "                             select new NarrowStadium { ID = s.ID' City = s.City' Sponsor = new NarrowStadiumSponsor { StadiumSponsorID = s.Sponsor.StadiumSponsorID } }; " is 140.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2SimpleProjections,The length of the statement  "                            select new NarrowStadium { ID = s.ID' City = s.City' Sponsor = new NarrowStadiumSponsor { StadiumSponsorID = s.Sponsor.StadiumSponsorID } }; " is 140.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2SimpleProjections,The length of the statement  "                             select new { B = s.ID' SponserId = s.Sponsor.StadiumSponsorID' Sponsor = new NarrowStadiumSponsor { StadiumSponsorID = s.Sponsor.StadiumSponsorID } }; " is 150.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2SimpleProjections,The length of the statement  "                            select new { B = s.ID' SponserId = s.Sponsor.StadiumSponsorID' Sponsor = new NarrowStadiumSponsor { StadiumSponsorID = s.Sponsor.StadiumSponsorID } }; " is 150.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                 TopCity = new LittleCity() { Mayor = s.TopCity.Mayor' Name = s.TopCity.Name' Population = s.TopCity.Population' BigCityID = s.TopCity.BigCityID }' " is 146.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                 Cities = s.Cities.Select(bc => new LittleCity() { Mayor = bc.Mayor' Population = bc.Population' BigCityID = bc.BigCityID }).ToList() " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                TopCity = new LittleCity() { Mayor = s.TopCity.Mayor' Name = s.TopCity.Name' Population = s.TopCity.Population' BigCityID = s.TopCity.BigCityID }' " is 146.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                Cities = s.Cities.Select(bc => new LittleCity() { Mayor = bc.Mayor' Population = bc.Population' BigCityID = bc.BigCityID }).ToList() " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                 TopCity = new LittleCity() { Mayor = s.TopCity.Mayor' Population = s.TopCity.Population' BigCityID = s.TopCity.BigCityID }' " is 123.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                 Cities = s.Cities.Select(bc => new LittleCity() { Mayor = bc.Mayor' Population = bc.Population' BigCityID = bc.BigCityID }).ToList() " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                TopCity = new LittleCity() { Mayor = s.TopCity.Mayor' Population = s.TopCity.Population' BigCityID = s.TopCity.BigCityID }' " is 123.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "                                Cities = s.Cities.Select(bc => new LittleCity() { Mayor = bc.Mayor' Population = bc.Population' BigCityID = bc.BigCityID }).ToList() " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypes,The length of the statement  "            Assert.AreEqual("?$filter=Population%20gt%201&$orderby=TopCity/Mayor&$expand=TopCity($select=Mayor)'TopCity($select=Population)'TopCity($select=BigCityID)'Cities($select=Mayor)'Cities($select=Population)'Cities($select=BigCityID)&$select=StateName"' " is 249.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypesLegalCasts,The length of the statement  "                                 TopCity = new LittleCity3() { BigCityID = s.TopCity.BigCityID' Mayor = (string)s.TopCity.Mayor' Population = (int)s.TopCity.Population } " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypesLegalCasts,The length of the statement  "                                TopCity = new LittleCity3() { BigCityID = s.TopCity.BigCityID' Mayor = (string)s.TopCity.Mayor' Population = (int)s.TopCity.Population } " is 136.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypesLegalCasts,The length of the statement  "                if (e.Message == "Initializing instances of the entity type AstoriaUnitTests.LittleState3 with the expression Convert(s.TopCity) is not supported.") " is 148.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsKnownEntityTypesLegalCasts,The length of the statement  "                if (e.Message == "Initializing instances of the entity type AstoriaUnitTests.BigCity with the expression Convert(s.TopCity) is not supported.") " is 143.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                BC = new BigCity { Name = p.Name' BigCityID = p.BigCityID' HasBaseballTeam = p.HasBaseballTeam' Population = p.Population' MiscInfo = p.MiscInfo' Mayor = p.Mayor' Streets = null }' " is 180.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                BC = new BigCity { Name = p.Name' BigCityID = p.BigCityID' HasBaseballTeam = p.HasBaseballTeam' Population = p.Population' MiscInfo = p.MiscInfo' Mayor = p.Mayor' Streets = null }' " is 180.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable3.ToString()' "$expand=Streets($select=StreetName)&$select=*'Name"); " is 126.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                BC = new BigCity { Name = p.Name' BigCityID = p.BigCityID' HasBaseballTeam = p.HasBaseballTeam' Population = p.Population' MiscInfo = p.MiscInfo' Mayor = p.Mayor' Streets = null }' " is 180.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable4.ToString()' "$expand=Streets($select=StreetName)&$select=*'Name"); " is 126.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                 SmallStreets = (from s in p.Streets select new Street { StreetName = s.StreetName' NumberOfBlocks = s.NumberOfBlocks }).ToList() " is 128.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                BC = new BigCity { Name = p.Name' BigCityID = p.BigCityID' HasBaseballTeam = p.HasBaseballTeam' Population = p.Population' MiscInfo = p.MiscInfo' Mayor = p.Mayor' Streets = null }' " is 180.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                SmallStreets = (from s in p.Streets select new Street { StreetName = s.StreetName' NumberOfBlocks = s.NumberOfBlocks }).ToList() " is 128.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable5.ToString()' "$expand=Streets($select=StreetName'NumberOfBlocks)&$select=*'Name"); " is 141.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                A = new BigCity { Name = p.TopCity.Name' BigCityID = p.TopCity.BigCityID' HasBaseballTeam = p.TopCity.HasBaseballTeam' Population = p.TopCity.Population' MiscInfo = p.TopCity.MiscInfo' Mayor = p.TopCity.Mayor' Streets = null }' " is 227.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "                                B = (from bc in p.Cities select new BigCity { Name = bc.Name' BigCityID = bc.BigCityID' HasBaseballTeam = bc.HasBaseballTeam' Population = bc.Population' MiscInfo = bc.MiscInfo' Mayor = bc.Mayor' Streets = null }).ToList()' " is 223.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsProjectingEntireEntity,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable7.ToString()' "$expand=TopCity' $expand=Cities($expand=Streets)"); " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable1' "Initializing instances of the entity type AstoriaUnitTests.LittleState with the expression b.Cities.OrderBy(x => x.Name) is not supported."); " is 178.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            //VerifyNotSupportedQuery(queryable2' "Constructing or initializing instances of the type <>f__AnonymousType15`1[System.Collections.Generic.List`1[AstoriaUnitTests.LittleCity]] with the expression b.Cities.OrderBy(x => x.Var1.DateTime) is not supported."); " is 256.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable3' "Construction of entity type instances must use object initializer with default constructor."); " is 131.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            //VerifyNotSupportedQuery(queryables4' "Constructing or initializing instances of the type <>f__AnonymousType16`1[AstoriaUnitTests.LittleState] with the expression new LittleState(b.ID) is not supported."); " is 206.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable5' "Referencing of local entity type instances not supported when projecting results."); " is 121.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable6' "Cannot assign the value from the Population property to the ID property.  When projecting results into a entity type' the property names of the source type and the target type must match for the properties being projected."); " is 262.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable8' "Initializing instances of the entity type AstoriaUnitTests.LittleCity with the expression b.MiscInfo.A is not supported."); " is 160.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable9' "Cannot initialize an instance of entity type 'AstoriaUnitTests.LittleCity' because 'b' and 'b.State.TopCity' do not refer to the same source entity."); " is 188.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsIllegalCases,The length of the statement  "            VerifyNotSupportedQuery(queryable11' DataServicesClientResourceUtil.GetString("ALinq_CantNavigateWithoutKeyPredicate")); " is 120.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsNonEntityTypes,The length of the statement  "                                 TopCity = new { Mayor = s.TopCity.Mayor' Name = s.TopCity.Name' Population = s.TopCity.Population' BigCityID = s.TopCity.BigCityID }' " is 133.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsNonEntityTypes,The length of the statement  "                                TopCity = new { Mayor = s.TopCity.Mayor' Name = s.TopCity.Name' Population = s.TopCity.Population' BigCityID = s.TopCity.BigCityID }' " is 133.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The length of the statement  "            Trace.WriteLine("non entity type - referecing locals' constants in the closure' Invocation - no paths for primitives' complex types."); " is 135.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The length of the statement  "                                 n = (c.MiscInfo > c.MiscInfo) && (c.MiscInfo < c.MiscInfo) && (c.MiscInfo <= c.MiscInfo) && (c.MiscInfo >= c.MiscInfo)' // <' >' <=' >= " is 135.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The length of the statement  "                                n = (c.MiscInfo > c.MiscInfo) && (c.MiscInfo < c.MiscInfo) && (c.MiscInfo <= c.MiscInfo) && (c.MiscInfo >= c.MiscInfo)' // <' >' <=' >= " is 135.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The length of the statement  "            var queryable5 = ((DataServiceQuery<YetAnotherAllPrimitiveTypesNotEntityType>)from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1") " is 148.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable.ToString()' "with the expression new DataServiceCollection`1(s.Cities' None).Continuation is not supported"); " is 168.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable2.ToString()' "with the expression new DataServiceCollection`1(s.Cities.ToList()' None).Continuation is not supported"); " is 178.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable3.ToString()' "with the expression new DataServiceCollection`1(s.Cities' None).Count is not supported"); " is 162.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable4.ToString()' "with the expression new DataServiceCollection`1(s.Cities' None).GetEnumerator() is not supported"); " is 172.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable5.ToString()' "with the expression new DataServiceCollection`1(s.Cities' None).Distinct() is not supported"); " is 167.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable6.ToString()' "with the expression new DataServiceCollection`1(s.Cities' None).ToList() is not supported"); " is 165.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "                             select new { X = new DataServiceCollection<BigCityComplexType>(new BigCityComplexType[] { s.CoolestCity.MiscInfo }' TrackingMode.None).ToList() }; " is 146.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable7.ToString()' "with the expression new DataServiceCollection`1(new [] {s.CoolestCity.MiscInfo}' None).ToList() is not supported"); " is 188.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2Projections,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(queryable8.ToString()' "with the expression new MiscList(s.CoolestCity.MiscInfo).ToList() is not supported."); " is 159.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The length of the statement  "            MethodCallExpression e2 = Expression.Call(null' mi2.MakeGenericMethod(typeof(Team))' baseQuery.Expression' Expression.Constant(2)); " is 131.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqToString,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(error' "Error translating Linq expression to URI: The method 'Select' is not supported."); " is 139.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(query9.ToString()' "Error translating Linq expression to URI: The method 'Select' is not supported."); " is 151.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The length of the statement  "                if (e.Message != "Referencing public field 'Name' not supported in query option expression.  Use public property instead.") " is 123.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegression4,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(error' "Error translating Linq expression to URI: The method 'Select' is not supported."); " is 139.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegression4,The length of the statement  "            System.Data.Test.Astoria.TestUtil.AssertContains(error' "Error translating Linq expression to URI: The method 'Select' is not supported."); " is 139.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The length of the statement  "            DataServiceQuery<Parent> query12 = (DataServiceQuery<Parent>)context.CreateQuery<Parent>("Parents").Where(p => p.Id == 1); " is 122.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The length of the statement  "                if (e.Message != "Can't add query option '$top' because it would conflict with the query options from the translated Linq expression.") " is 135.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The length of the statement  "            MethodInfo mi = typeof(Queryable).GetMethods().Where(m => m.Name == "LongCount" && m.GetParameters().Count() == 1).FirstOrDefault(); " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The length of the statement  "                MethodInfo IncludeTotalCountMethod = typeof(DataServiceQuery<>).MakeGenericType(q.ElementType).GetMethod("IncludeTotalCount"); " is 126.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The length of the statement  "                IQueryable valueQuery = q.Provider.CreateQuery(Expression.Call(null' mi.MakeGenericMethod(q.ElementType)' q.Expression)); " is 121.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ResourceBinderAnalyzeProjectionTest,The length of the statement  "                        qint = canProject ? q.Select((o' position) => o.TeamID + position) : q.Select((o' position) => new Team().TeamID + position); " is 125.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,VerifyMimeTypeForCountRequests,The length of the statement  "                Assert.AreEqual(args.RequestMessage.GetHeader("Accept")' "text/plain"' "the accept header should be set before firing sending request event"); " is 142.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qCustomers = from c in ctx.CreateQuery<northwindClient.Customers>("LondonCustomers").Expand("Orders").Expand("Orders($expand=Order_Details)") " is 141.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qOrders = from o in ctx.CreateQuery<northwindClient.Orders>("LondonCustomers('AROUT')/Orders").Expand("Customers") select o; " is 124.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qOrders = from o in ctx.CreateQuery<northwindClient.Orders>("LondonCustomers('AROUT')/Orders").Expand("Customers'Order_Details") select o; " is 138.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(customerList.First().Orders.All(o => o.Order_Details.Count() == 0)' "Orders details are not materialized"); " is 121.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qCustomers = from c in ctx.CreateQuery<northwindClient.Customers>("LondonCustomers").Expand("Orders'Orders($expand=Order_Details)") select c; " is 141.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qCustomers = from c in ctx.CreateQuery<northwindClient.Customers>("GetCustomersByCity").AddQueryOption("city"' "'London'") " is 122.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qCustomers = from c in ctx.CreateQuery<northwindClient.Customers>("GetCustomersByCity").AddQueryOption("city"' "'London'") select c; " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qCustomers = from c in ctx.CreateQuery<northwindClient.Customers>("GetCustomersByCity").Expand("Orders").AddQueryOption("city"' "'London'") select c; " is 149.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qCustomers = from c in ctx.CreateQuery<northwindClient.Customers>("GetCustomersByCity").Expand("Orders'Orders($expand=Order_Details)").AddQueryOption("city"' "'London'") select c; " is 179.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qOrders = from o in ctx.CreateQuery<northwindClient.Orders>("GetCustomersByCity('AROUT')/Orders").AddQueryOption("city"' "'London'").Expand("Customers") select o; " is 162.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(aCustomer.City == "London" && aCustomer.CustomerID == "AROUT"' "aCustomer.City == 'London' && aCustomer.CustomerID == 'AROUT'"); " is 142.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(orderList.All(o => o.OrderID != 0 && o.OrderDate == null && o.ShipAddress == null && o.ShipName == null)' "only OrderID is materialized"); " is 152.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(orderList.Any(o => o.OrderID != 0 && o.Customers.CustomerID == "AROUT" && o.OrderDate == null && o.ShipAddress == null && o.ShipName == null)' "only OrderID and Customers are materialized"); " is 204.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qOrders = from o in ctx.CreateQuery<northwindClient.Orders>("GetCustomersByCity('AROUT')/Orders").AddQueryOption("city"' "'London'") " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(orderList.All(o => o.OrderID != 0 && o.Customers.CustomerID == "AROUT" && o.OrderDate == null && o.ShipAddress == null && o.ShipName == null)' "only OrderID and Customers are materialized"); " is 204.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qOrders = from o in ctx.CreateQuery<northwindClient.Orders>("GetCustomersByCity('AROUT')/Orders").AddQueryOption("city"' "'London'") " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(orderList.All(o => o.OrderID != 0 && o.Customers.CustomerID == "AROUT" && o.Customers.ContactName == null && o.Customers.Address == null " is 150.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                qOrders = from o in ctx.CreateQuery<northwindClient.Orders>("GetCustomersByCity('AROUT')/Orders").AddQueryOption("city"' "'London'") " is 132.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                Assert.IsTrue(orderList.All(o => o.OrderID != 0 && o.Customers.CustomerID == "AROUT" && o.Customers.ContactName == null && o.Customers.Address == null " is 150.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The length of the statement  "                                            && o.OrderDate == null && o.ShipAddress == null && o.ShipName == null && o.Employees == null)' "only OrderID and Customers are materialized"); " is 142.
Long Statement,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,VerifyResults,The length of the statement  "                    Assert.IsTrue(CompareObjects(l.Current' r.Current' new List<object>())' "Left value(" + l.Current + ") equals right value(" + r.Current + ")"); " is 143.
Long Statement,AstoriaUnitTests.Tests,HttpTestHookConsumer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\TestHookConsumer.cs,OnMessageCreating,The length of the statement  "            this.testMessage = new TestHttpWebRequestMessage(args' this.SendRequest' this.SendResponse' this.GetRequestWrappingStream' this.GetResponseWrappingStream); " is 155.
Long Statement,AstoriaUnitTests.Tests,AssertUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Utils\AssertUtil.cs,RunCatch,The length of the statement  "                    Assert.IsNotNull(resourceString' "the resourceName '{0}' was not found in the assembly {1}"' resourceName' resourceAssembly.FullName); " is 134.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeCollectionParameterPayload,The length of the statement  "            parameters.Add(new Provider.ServiceActionParameter("collectionParameter"' Provider.ResourceType.GetCollectionResourceType(Provider.ResourceType.GetPrimitiveResourceType(typeof(string))))); " is 188.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeCollectionParameterPayload,The length of the statement  "            actionProvider.AddAction("ActionWithLargeCollectionParameterPayload"' null' null' parameters' Provider.OperationParameterBindingKind.Sometimes' null' null); " is 156.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetupLargeNumberOfActions,The length of the statement  "                actionProvider.AddAction("Action_" + i' null' null' parameters' Provider.OperationParameterBindingKind.Sometimes' null' null); " is 126.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeParameterPayload,The length of the statement  "                parameters.Add(new Provider.ServiceActionParameter(pName' Provider.ResourceType.GetPrimitiveResourceType(typeof(Int32)))); " is 122.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeParameterPayload,The length of the statement  "                parameters.Add(new Provider.ServiceActionParameter(pName' Provider.ResourceType.GetPrimitiveResourceType(typeof(string)))); " is 123.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeParameterPayload,The length of the statement  "                parameters.Add(new Provider.ServiceActionParameter(pName' Provider.ResourceType.GetPrimitiveResourceType(typeof(double)))); " is 123.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeParameterPayload,The length of the statement  "                parameters.Add(new Provider.ServiceActionParameter(pName' Provider.ResourceType.GetPrimitiveResourceType(typeof(DateTimeOffset)))); " is 131.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,SetUpActionWithLargeParameterPayload,The length of the statement  "            actionProvider.AddAction("ActionWithLargeParameterPayload"' null' null' parameters' Provider.OperationParameterBindingKind.Sometimes' null' null); " is 146.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,GetParametersWithLargePayload,The length of the statement  "                parameters.Add(new BodyOperationParameter("p_complex_" + j++' new AddressComplexType() { City = "Redmond"' ZipCode = 98052 }));    " is 127.
Long Statement,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,AdvertiseLargeNumberOfActionsTests,The length of the statement  "                    Assert.AreEqual(ed.OperationDescriptors.Count()' TotalNumberOfActions' "Invalid count of total number of advertised actions."); " is 127.
Long Statement,AstoriaUnitTests,MyDSPInvokableAction,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,Invoke,The length of the statement  "                    Assert.IsTrue(this.parameters.Count() == ActionTestsWithLargePayload.TotalParameterPayloadSize' "unexpected parameter count."); " is 127.
Long Statement,AstoriaUnitTests,MyDSPActionProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,AdvertiseServiceAction,The length of the statement  "                    return SubstituteAdvertiseServiceAction(operationContext' serviceAction' resourceInstance' resourceInstanceInFeed' ref actionToSerialize); " is 138.
Long Statement,AstoriaUnitTests,MyDSPActionProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,AdvertiseServiceAction,The length of the statement  "                return base.AdvertiseServiceAction(operationContext' serviceAction' resourceInstance' resourceInstanceInFeed' ref actionToSerialize); " is 133.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,AllNumericConversionsShouldWorkForJsonIfValuesWouldNotBeQuoted,The length of the statement  "            this.InvokeForAll(this.numericConversions.Where(kvp => !(kvp.Value is long || kvp.Value is decimal))' UnitTestsUtil.JsonLightMimeTypeIeee754Compatible); " is 152.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,ValidatePrimitiveCollectionConversion,The length of the statement  "            var ctx = this.CreateContextWithHardcodedResponse<TServer' List<TClient>>(serverPropertyValue' contentType' false' true); " is 121.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,ValidatePrimitiveCollectionConversion,The length of the statement  "            List<TClient> property = ctx.CreateQuery<ClientEntityType<List<TClient>>>("Entities").Where(e => e.ID == 0).First().Property; " is 125.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,ValidateComplexConversion,The length of the statement  "            var ctx = this.CreateContextWithHardcodedResponse<TServer' ClientComplexType<TClient>>(serverPropertyValue' contentType' true' false); " is 134.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,ValidateComplexConversion,The length of the statement  "            TClient property = ctx.CreateQuery<ClientEntityType<ClientComplexType<TClient>>>("Entities").Where(e => e.ID == 0).First().Property.Property; " is 141.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,ValidateComplexCollectionConversion,The length of the statement  "            var ctx = this.CreateContextWithHardcodedResponse<TServer' List<ClientComplexType<TClient>>>(serverPropertyValue' contentType' true' true); " is 139.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,ValidateComplexCollectionConversion,The length of the statement  "            List<ClientComplexType<TClient>> property = ctx.CreateQuery<ClientEntityType<List<ClientComplexType<TClient>>>>("Entities").Where(e => e.ID == 0).First().Property; " is 163.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,GeneratePayload,The length of the statement  "<entry xml:base=""/"" xmlns:ads=""http://docs.oasis-open.org/odata/ns/data"" xmlns:adsm=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 175.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,GeneratePayload,The length of the statement  "                const string jsonTemplate = @"{{ @odata.context:""http://temp.org/$metadata#Fake.Container.Entities/$entity""' ID:0'{0} Property:{1} }}"; " is 137.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,GeneratePayload,The length of the statement  "                    propertyValue = '"' + XmlConvert.ToString((DateTime)(object)serverPropertyValue' XmlDateTimeSerializationMode.RoundtripKind) + '"'; " is 131.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,CreateContextWithHardcodedResponse,The length of the statement  "            var responseMessage = new ODataTestMessage { StatusCode = 200' MemoryStream = new MemoryStream(Encoding.UTF8.GetBytes(payload)) }; " is 130.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,CreateContextWithHardcodedResponse,The length of the statement  "                        edmEntityType.AddStructuralProperty("Property"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetPrimitive(kind' false)))); " is 152.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,CreateContextWithHardcodedResponse,The length of the statement  "                        edmEntityType.AddStructuralProperty("Property"' new EdmCollectionTypeReference(new EdmCollectionType(new EdmComplexTypeReference(complexType' false)))); " is 152.
Long Statement,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,InvokeForAll,The length of the statement  "            var method = this.GetType().GetMethods(BindingFlags.Instance | BindingFlags.NonPublic).Single(m => m.Name == "ValidateAllConversions" && m.GetGenericArguments().Count() == 2); " is 175.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,GetServiceAction,The length of the statement  "            return new ServiceAction(title' /*returnType*/null' /*resultSet*/null' OperationParameterBindingKind.Sometimes' new ServiceActionParameter[] { new ServiceActionParameter("p1"' bindingType) }); " is 192.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,GetMyOperationDescriptor,The length of the statement  "                // JSON Light builds the title and target with entity container name in front of the simple title name. Atom doesn't include the container name. " is 144.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,GetMyOperationDescriptor,The length of the statement  "                return new MyOperationDescriptor() { Title = title' Metadata = String.Format("$metadata#{0}"' title)' Target = uri + "/" + title }; " is 131.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,GetMyOperationDescriptor,The length of the statement  "            return new MyOperationDescriptor() { Title = title' Metadata = String.Format("$metadata#TestNamespace.{0}"' title)' Target = uri + "/TestNamespace." + title }; " is 159.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,SingleEntityWithMultipleActions,The length of the statement  "                Operations = new ServiceAction[] { this.GetServiceAction("Action1"' CustomerResourceType)' this.GetServiceAction("Action2"' CustomerResourceType) }' " is 148.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,SingleEntityWithMultipleActions,The length of the statement  "                    this.GetMyOperationDescriptor(format' "Action1"' "CustomerEntities(1)")' this.GetMyOperationDescriptor(format' "Action2"' "CustomerEntities(1)") " is 144.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,SingleEntityWithNoActions,The length of the statement  "                InitializeExpectedDescriptors = (format) => new List<List<MyOperationDescriptor>> { new List<MyOperationDescriptor> { } }' " is 122.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,RelativeUriInActionTarget,The length of the statement  "                        new MyOperationDescriptor() { Title = title ' Metadata = "$metadata#TestNamespace.Action1"' Target = "CustomerEntities(1)/Action1" } " is 132.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,RelativeUriInActionTarget,The length of the statement  "                SubstituteAdvertiseServiceAction = new MyDSPActionProvider.AdvertiseServiceActionDelegate((DataServiceOperationContext oc' ServiceAction so' object o' bool inFeed' ref ODataAction od) => " is 186.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,RelativeUriInActionTarget,The length of the statement  "                    // Note that the relative Uri should not starts with a '/'. If it does' the output absolute uri will be incorrect. This behavior is defined by  " is 142.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,MetadataStartsWithHash,The length of the statement  "                        new MyOperationDescriptor() { Title = title' Metadata = "#TestNamespace.Action1"' Target = "CustomerEntities(1)/TestNamespace.Action1" } " is 136.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,MetadataStartsWithHash,The length of the statement  "                SubstituteAdvertiseServiceAction = new MyDSPActionProvider.AdvertiseServiceActionDelegate((DataServiceOperationContext oc' ServiceAction so' object o' bool inFeed' ref ODataAction od) => " is 186.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,TargetAndRelationValuesSetInAdvertiseServiceAction,The length of the statement  "                SubstituteAdvertiseServiceAction = new MyDSPActionProvider.AdvertiseServiceActionDelegate((DataServiceOperationContext oc' ServiceAction so' object o' bool inFeed' ref ODataAction od) => " is 186.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithNullTitle,The length of the statement  "                    // With JSON Light' if the title is not on the wire (which it's not' if it's null)' then the metadata builder kicks in and a non-null value is reported " is 151.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithNullTitle,The length of the statement  "                    // There is no real scenario where the title would need to actually be null' so we have decided to not do anything to make this match the Atom behavior. " is 152.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithNullTitle,The length of the statement  "                        new MyOperationDescriptor() { Title = title' Target= target' Metadata = String.Format("$metadata#TestNamespace.{0}"' "Action1")} " is 128.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithNullTitle,The length of the statement  "                SubstituteAdvertiseServiceAction = new MyDSPActionProvider.AdvertiseServiceActionDelegate((DataServiceOperationContext oc' ServiceAction so' object o' bool inFeed' ref ODataAction od) => " is 186.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithEmptyTitle,The length of the statement  "                        new MyOperationDescriptor() {Title = ""' Target = target' Metadata = String.Format("$metadata#TestNamespace.{0}"' "Action1") } " is 126.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithEmptyTitle,The length of the statement  "                SubstituteAdvertiseServiceAction = new MyDSPActionProvider.AdvertiseServiceActionDelegate((DataServiceOperationContext oc' ServiceAction so' object o' bool inFeed' ref ODataAction od) => " is 186.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithReservedURICharactersInTitle,The length of the statement  "                    var target = string.Format("CustomerEntities(1)/TestNamespace.{0}"' format == ODataFormat.Json ? unescaped : escapedRelativeUri); " is 129.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,ActionWithReservedURICharactersInTitle,The length of the statement  "                        new MyOperationDescriptor() { Title = title' Target = target' Metadata = String.Format("$metadata#TestNamespace.{0}"' format == ODataFormat.Json ? escapedFragment : escapedRelativeUri) } " is 186.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,RunPositiveTest,The length of the statement  "            DSPServiceDefinition service = new DSPServiceDefinition() { Metadata = Metadata' CreateDataSource = CreateDataSource' ActionProvider = actionProvider }; " is 152.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,SingleEntityWithSingleFunction,The length of the statement  "                        new MyOperationDescriptor() { Title="TestNamespace.Function1"' Target="http://sometarget/"' Metadata="#TestNamespace.Function1" } " is 129.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,SingleEntityWithMultipleFunctions,The length of the statement  "                    new MyOperationDescriptor() { Title="TestNamespace.Function2"' Target="http://sometarget2/"' Metadata="#TestNamespace.Function2" }' " is 131.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,SingleEntityWithBothActionsAndFunctions,The length of the statement  "                        new MyOperationDescriptor() { Title="TestNamespace.Action1"' Target="http://sometarget1/"' Metadata="#TestNamespace.Action1" }' " is 127.
Long Statement,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,RunPositiveFunctionTest,The length of the statement  "            // The PlaybackService itself will not automatically turn Metadata into an absolute URI' so set that to false on all tests. " is 123.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The length of the statement  "                    return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }); " is 163.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The length of the statement  "                    return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } }); " is 140.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The length of the statement  "                    return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() }); " is 138.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The length of the statement  "                    return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } }); " is 158.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The length of the statement  "                    return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } }); " is 200.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The length of the statement  "                    return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } }); " is 298.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,ExecuteActionParametersErrorTestsWithJsonLight,The length of the statement  "            RunExecuteActionParametersErrorTests(ODataFormat.Json' (ctx' uri' testCase) => ctx.Execute(uri' testCase.HttpMethod' testCase.Parameters)); " is 139.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,ExecuteActionParametersErrorTestsAsyncWithJsonLight,The length of the statement  "            RunExecuteActionParametersErrorTests(ODataFormat.Json' (ctx' uri' testCase) => ctx.BeginExecute<object>(uri' asyncResult => ctx.EndExecute<object>(asyncResult)' null' testCase.HttpMethod' false' testCase.Parameters)); " is 217.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,ExecuteUriWithExistingEscapedCollectionValueWithJsonLight,The length of the statement  "                    ActualUriString = this.defaultUriString + "?IntCollection1=%7B%22odata.type%22%3A%22Collection(Edm.Int32)%22'%22value%22%3A%5B1%5D%7D"' " is 135.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,ExecuteUriWithExistingEscapedCollectionValueWithJsonLight,The length of the statement  "                    //"/ActionWithParameters(p1='%7B%2526*%7D')IntCollection1=%7B%22odata.type%22%3A%22Collection(Edm.Int32)%22'%22value%22%3A%5B1%5D%7D" " is 133.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,ExecuteUriWithExistingEscapedCollectionValueWithJsonLight,The length of the statement  "                    ExpectedBaseUriString = "/ActionWithParameters?IntCollection1=%7B%22odata.type%22%3A%22Collection(Edm.Int32)%22'%22value%22%3A%5B1%5D%7D&p1='%7B%2526*%7D'"' " is 156.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunExecuteActionParameterTests,The length of the statement  "                            var parameterQueryString = UriOperationParameterGenerator.Generate(operationUriBuilder' expectedParameterFormat' payloadGeneratorSettings); " is 139.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The length of the statement  "                    Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }' " is 141.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The length of the statement  "                    Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }' " is 184.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The length of the statement  "                    Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }' " is 120.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The length of the statement  "                    Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }' " is 148.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunPassUriParameterWithoutResolveNameTest,The length of the statement  "                Parameters = new OperationParameter[] { new UriOperationParameter("p1"' new AddressComplexType() { City = "Seattle"' ZipCode = 98101' Enum1 = BasicParamValues.EnumPara1 }) } " is 173.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunPassUriParameterWithoutResolveNameTest,The length of the statement  "                    Assert.AreEqual(ioException.Message' DataServicesClientResourceUtil.GetString("DataServiceException_GeneralError")' "Incorrect error message"); " is 143.
Long Statement,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunExecuteActionNullUriParameterValueTests,The length of the statement  "                    Parameters = new UriOperationParameter[] { new UriOperationParameter("p1"' new ODataNullValue())' new UriOperationParameter("p2"' new ODataNullValue())' " is 152.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The length of the statement  "            metadata.AddCollectionProperty(entityType' "PrimitiveCollectionProperty"' Provider.ResourceType.GetPrimitiveResourceType(typeof(string))); " is 138.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The length of the statement  "            var resourceReferenceProperty = metadata.AddResourceReferenceProperty(entityType' "ResourceReferenceProperty"' entityType); " is 123.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The length of the statement  "            var resourceSetReferenceProperty = metadata.AddResourceSetReferenceProperty(entityType' "ResourceSetReferenceProperty"' entityType); " is 132.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The length of the statement  "            var resourceReferenceProperty2 = metadata.AddResourceReferenceProperty(entityType' "ResourceReferenceProperty2"' entityType2); " is 126.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The length of the statement  "            var resourceSetReferenceProperty2 = metadata.AddResourceSetReferenceProperty(entityType' "ResourceSetReferenceProperty2"' entityType2); " is 135.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The length of the statement  "                DataServiceBehavior = new OpenWebDataServiceDefinition.OpenWebDataServiceBehavior() { IncludeRelationshipLinksInResponse = true' MaxProtocolVersion = ODataProtocolVersion.V4 }' " is 176.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,GetActionsFromContextType,The length of the statement  "            return typeof(ActionContext).GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly).Where(m => m.GetCustomAttributes(typeof(DSPActionAttribute)' true).FirstOrDefault() != null).ToArray(); " is 238.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}' " is 128.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}' " is 127.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}' " is 140.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}' " is 138.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}' " is 138.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}' " is 137.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}' " is 170.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                    OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}' " is 170.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The length of the statement  "                            OperationResponse operationResponse = testCase.ExecuteMethodWithParams.Invoke(ctx' uri' isAsync' testCase.OperationParameters); " is 127.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTests,The length of the statement  "            // Use Execute to invoke service actions from the client. Success cases. Uses QueryOperationResponse without the type parameter. " is 128.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTests2,The length of the statement  "            // Use Execute to invoke service actions from the client. Success cases. Ensures behavior when QueryOperationResponse<T> (with the type parameter) is correct. " is 158.
Long Statement,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionClientErrorTests,The length of the statement  "            // Use Execute to invoke service actions from the client. Cases for errors that occur on the client during materialization. " is 123.
Long Statement,AstoriaUnitTests,UriOperationParameterGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\UriOperationParameterGenerator.cs,GetLiteralValue,The length of the statement  "            // Use the key syntax since that will give us single quotes and other formatting that is not used for literals as property values " is 129.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientSpatialTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientSpatialTests.cs,TestCollectionOfSpatialTypes,The length of the statement  "            DSPUnitTestServiceDefinition roadTripServiceDefinition = GetRoadTripServiceDefinition(typeof(GeographyPoint)' TestPoint.DefaultValues' false' false' " is 148.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientSpatialTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientSpatialTests.cs,TestCollectionOfSpatialTypes,The length of the statement  "                var tripLegs = context.CreateQuery<TripLegWithCollection<GeographyPoint>>("TripLegs").Where(t => t.ID == SpatialTestUtil.DefaultId).ToList(); " is 141.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientSpatialTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientSpatialTests.cs,GetRoadTripServiceDefinition,The length of the statement  "            DSPMetadata roadTripMetadata = SpatialTestUtil.CreateRoadTripMetadata(geographyType' useComplexType' useOpenTypes' modifyMetadata); " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientSpatialTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientSpatialTests.cs,GetRoadTripServiceDefinition,The length of the statement  "            return SpatialTestUtil.CreateRoadTripServiceDefinition(roadTripMetadata' defaultValues' DSPDataProviderKind.CustomProvider' useComplexType' modifyPropertyValues); " is 162.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                    EntityType = typeof(EntityWithCollection<ObservableCollection<ComplexTypeWithCollection<ComplexTypeWithCollection<int>>>>)' " is 123.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                    EntityType = typeof(EntityWithComplex<ComplexTypeWithCollection<ComplexTypeWithCollection<ComplexTypeWithPrimitives>>>)' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                    EntityType = typeof(EntityWithCollection<ObservableCollection<ComplexTypeWithCollection<ComplexTypeWithCollection<ComplexTypeWithPrimitives>>>>)' " is 145.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                // Entity with complex type with a collection of complex types with a collection of complex types with nested complex type " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                    EntityType = typeof(EntityWithComplex<ComplexTypeWithCollection<ComplexTypeWithCollection<ComplexTypeWithNestedComplexType>>>)' " is 127.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                // Entity with collection of complex type with a collection of complex types with a collection of complex types with nested complex type " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                    EntityType = typeof(EntityWithCollection<ObservableCollection<ComplexTypeWithCollection<ComplexTypeWithCollection<ComplexTypeWithNestedComplexType>>>>)' " is 152.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateCollectionValues,The length of the statement  "                // This is sufficient to test that a non-generic collection type for complex types works' no need to test with all combinations of complex types " is 144.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,ComplexTypePropertyChanges,The length of the statement  "            TestInfo[] complexTestInfos = allTestInfos.Where(tti => typeof(ComplexTypeBase).IsAssignableFrom(tti.CollectionItemType)).ToArray(); " is 132.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,ErrorOnCollectionDoesntImplementINotifyCollectionChanged,The length of the statement  "                // Entity with a complex type with a collection of complex type with a collection that doesn't implement INotifyCollectionChanged " is 129.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,ErrorOnInvalidItemsInCollection,The length of the statement  "            TestInfo[] complexWithPrimitivesInfos = allTestInfos.Where(tti => typeof(ComplexTypeWithPrimitives) == tti.CollectionItemType).ToArray(); " is 137.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateAtomPayload,The length of the statement  "<feed xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 154.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,GetCollectionItemType,The length of the statement  "                    Assert.IsNull(collectionItemType' "Test error: Found multiple implementations of ICollection<T> on collection type {0}"' collectionType); " is 137.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,GetCollectionItemType,The length of the statement  "            Assert.IsNotNull(collectionItemType' "Test error: Couldn't find ICollection<T> implementation on collection type {0}"' collectionType); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,GetEdmCollectionItemTypeName,The length of the statement  "                Assert.IsTrue(typeof(ComplexTypeBase).IsAssignableFrom(collectionItemType)' "Test error: Unexpected collection item type found' {0}"' collectionItemType); " is 154.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,HasNestedCollection,The length of the statement  "                if (collectionItemType.IsGenericType && typeof(ComplexTypeWithCollectionBase<>) == collectionItemType.GetGenericTypeDefinition()) " is 129.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestCases,The length of the statement  "                    Type testType = testCaseType.MakeGenericType(testInfo.EntityType' testInfo.CollectionType' testInfo.CollectionItemType); " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionChangedBaseCollection<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,FireEventWithNull,The length of the statement  "                    CollectionChanged(senderNull ? null : this' eventArgsNull ? null : new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)); " is 142.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,CollectionTestBase<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,Setup,The length of the statement  "                DataServiceCollection<EntityType> dsc = new DataServiceCollection<EntityType>(context' null' TrackingMode.AutoChangeTracking' null' this.entityChangedHandler' null); " is 165.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunCollectionActionOnCollection,The length of the statement  "                Assert.AreNotSame(previousCollection' entity.TestCollection' "Expected the current entity collection instance to be different from the previous value."); " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunCollectionActionOnCollection,The length of the statement  "                // Test 3: Verify that a change to the disconnected collection does not cause the entity to be updated' but an operation on the new collection does cause an update " is 163.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunCollectionActionOnCollection,The length of the statement  "                PerformCollectionAction(previousCollection' collection => { CreateItemAndAddToCollection(previousCollection); return true; }' isCollectionConnected:false); " is 155.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,GetItemInCollection,The length of the statement  "                Assert.IsTrue(TryGetItemInCollection(collection' searchItem' out foundItem)' "Test error: Expected to find the specified value in the collection."); " is 148.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,TryGetItemInCollection,The length of the statement  "                        Assert.AreNotSame(searchItem' foundValue' "Test error: Item in collection should be a different object than the test item."); " is 125.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,VerifyValueIsInCollection,The length of the statement  "                Assert.IsTrue(TryGetItemInCollection(collection' searchItem' out foundItem)' "Test error: Expected to find the specified value in collection."); " is 144.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,VerifyValueNotInCollection,The length of the statement  "                Assert.IsFalse(TryGetItemInCollection(collection' searchItem' out foundItem)' "Test error: Expected not to find the specified value in collection."); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,PerformCollectionAction,The length of the statement  "                Assert.AreEqual(shouldChangeCollection' this.collectionChanged' "Collection action did not have the expected effect on the collection."); " is 137.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,PerformCollectionAction,The length of the statement  "                Assert.AreEqual(shouldChangeCollection && isCollectionConnected' this.entityChanged' "Collection action did not have the expected effect on the entity."); " is 154.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ComplexPropertyChangesTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunModifyPropertyTest,The length of the statement  "                    ComplexTypeWithNestedComplexType complex = GetFirstCollectionItem((CollectionType)entity.TestCollection) as ComplexTypeWithNestedComplexType; " is 141.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ErrorOnCollectionChangedNotImplemented<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestOnEntity,The length of the statement  "                            "An attempt to track an entity or complex type failed because the entity or complex type contains a collection property of type '{0}' that does not implement the INotifyCollectionChanged interface."' " is 199.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,InvalidItemsTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestOnEntity,The length of the statement  "                    // Exception should not occur when adding the item to the collection' since we can only do validation after the item is already in the collection. " is 146.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,InvalidItemsTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestOnEntity,The length of the statement  "                            expectedExceptionMessage = "An item in the collection property has a null value. Collection properties that contain items with null values are not supported."; " is 159.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,InvalidItemsTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestOnEntity,The length of the statement  "                            Assert.IsTrue(actualException.Message.Contains(expectedExceptionMessage)' "Message: '{0}' does not contain expected '{1}'"' expectedExceptionMessage' actualException.Message); " is 175.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,InvalidItemsTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestOnEntity,The length of the statement  "                        string expectedExceptionMessage = "The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null."; " is 168.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,InvalidItemsTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,RunTestOnEntity,The length of the statement  "                        Assert.IsTrue(actualException.Message.Contains(expectedExceptionMessage)' "Message: '{0}' does not contain expected '{1}'"' expectedExceptionMessage' actualException.Message);       " is 175.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,GetContextForCollectionMaterializationTestCases,The length of the statement  "                        Assert.IsFalse(typeName.StartsWith("Collection(") && typeName.EndsWith(")")' "Collection must not be tried to be resolved"); " is 124.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,GetEntityTypeForCollectionMaterializationTestCases,The length of the statement  "                entityType = entityGenericType.MakeGenericType(collectionGenericType.MakeGenericType(collectionItemType)' collectionItemType); " is 126.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,GetEntityTypeForCollectionMaterializationTestCases,The length of the statement  "                entityType = entityGenericType.MakeGenericType(collectionGenericType.MakeGenericType(typeof(int)' collectionItemType)' collectionItemType); " is 139.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "            // it's not really feasible to test it against .LoadProperty and the variety of generic types. Move this back to the common materialization test cases once the bug is fixed. " is 173.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                    CollectionPropertyPayload = @"<m:value xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata""> " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException(DataServicesClientResourceUtil.GetString("AtomMaterializer_InvalidEntityType"' typeof(BaseEntity)))' " is 161.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                TestUtil.RunCombinations(updatedTestCases' collectionGenericTypes' initializeEntityCollection' includeTypeAttribute' entityGenericTypes' includeCollectionProjections' " is 166.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                    (testCase' collectionGenericType' initializeCollection' includeTypeAttr' entityGenericType' projectCollectionProperty) => " is 121.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                        // for negative testcases we don't want to touch the payload so we skip them if m:type attribute is supposed to be removed " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                                    @"<d:Complex m:type=""Complex"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"">"' " is 144.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                        Type entityType = GetEntityTypeForCollectionMaterializationTestCases(entityGenericType' collectionGenericType' testCase.CollectionItemType); " is 140.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                        entityType.GetProperty("InitialCollectionValues"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).SetValue(null' initializeCollection ? testCase.ValuesToInitializeCollection : null' null); " is 215.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                        MethodInfo createQueryMethod = typeof(DataServiceContext).GetMethod("CreateQuery"' new Type[] { typeof(string) }).MakeGenericMethod(entityType); " is 144.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                            MethodInfo select = typeof(System.Linq.Queryable).GetMethods(BindingFlags.Public | BindingFlags.Static).Where(m => m.Name == "Select").First(); " is 143.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                            Assert.IsNull(testCase.GetException(projectCollectionProperty' includeTypeAttr' false' true)' "Exception expected but not thrown"); " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                                if (expectedException.Message == DataServicesClientResourceUtil.GetString("AtomMaterializer_InvalidEntityType"' typeof(BaseEntity))) " is 132.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                                    if (entityType.Name == typeof(MaterializationTestComplextTypeWithCollection<'>).Name || entityType.Name == typeof(MaterializationTestsEntityWithComplexTypeWithCollection<'>).Name) " is 179.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                                        TestUtil.AssertContains(actualException.Message' "The property 'Collection' is of entity type and it cannot be a property of the type '"); " is 138.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                                        TestUtil.AssertContains(actualException.Message' "'' which is not of entity type.  Only entity types can contain navigation properties."); " is 138.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,MaterializationOfCollection,The length of the statement  "                            entityType.GetProperty("InitialCollectionValues"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).SetValue(null' null' null); " is 152.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                TestUtil.RunCombinations(payloadTestCases' collectionGenericTypes' initializeEntityCollection' includeTypeAttribute' entityGenericTypes' " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                        // .LoadProperty should behave the same as the regular materialization if the collection property is not the top level property being loaded but its descendant. " is 160.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                        // for negative testcases we don't want to touch the payload so we skip them if m:type attribute is supposed to be removed " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                            @"<m:value m:type=""Complex"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"">"' " is 142.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                        Type entityType = GetEntityTypeForCollectionMaterializationTestCases(entityGenericType' collectionGenericType' testCase.CollectionItemType); " is 140.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                        entityType.GetProperty("InitialCollectionValues"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).SetValue(null' initializeCollection ? testCase.ValuesToInitializeCollection : null' null); " is 215.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                            string propertyName = entityGenericType == typeof(MaterializationTestsEntityWithComplexTypeWithCollection<'>) ? "Complex" : testCase.PropertyName; " is 146.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                            Assert.IsNull(testCase.GetException(false' includeTypeAttr' loadProperty' isComplexTypeTesting)' "Exception expected but not thrown"); " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                                Exception actualException = ex is TargetInvocationException || ex is DataServiceQueryException ? ex.InnerException : ex; " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                                if (expectedException.Message == DataServicesClientResourceUtil.GetString("AtomMaterializer_InvalidEntityType"' typeof(BaseEntity)) && " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                                    (entityType.Name == typeof(MaterializationTestComplextTypeWithCollection<'>).Name || entityType.Name == typeof(MaterializationTestsEntityWithComplexTypeWithCollection<'>).Name)) " is 177.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                                    TestUtil.AssertContains(actualException.Message' "The property 'Collection' is of entity type and it cannot be a property of the type '"); " is 138.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                                    TestUtil.AssertContains(actualException.Message' "'' which is not of entity type.  Only entity types can contain navigation properties."); " is 138.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,LoadPropertyTests,The length of the statement  "                            entityType.GetProperty("InitialCollectionValues"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).SetValue(null' null' null); " is 152.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" } " is 143.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")' " is 196.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")' " is 126.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) } " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                        new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] { " is 144.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                            new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }' " is 171.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                            new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}' " is 173.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                        new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] { " is 144.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                            new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }' " is 171.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                            new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}} " is 173.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass " is 123.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")' " is 254.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                TestUtil.RunCombinations(testCases' collectionGenericTypes' new string[] { "POST"' "PUT"' "PATCH" }' (testCase' collectionGenericType' httpMethod) => " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    // negative test cases does not apply to PUT and PATCH - since there is no way of creating the entity that will be updated " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                    Type entityType = typeof(Entity<'>).MakeGenericType(collectionGenericType.MakeGenericType(testCase.CollectionItemType)' testCase.CollectionItemType); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                        Assert.AreEqual(testCase.ExpectedCollectionWireType' (string)collectionPayload.Attribute(UnitTestsUtil.MetadataNamespace + "type")); " is 132.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                        VerifyCollectionAndPayloadMatch(collectionPayload' (IEnumerable)entity.GetType().GetProperty("Collection").GetValue(entity' null)); " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The length of the statement  "                            Assert.IsTrue(actualException.Message.Contains(testCase.ExpectedException.Message)' "Message: '{0}' does not contain expected '{1}'"' testCase.ExpectedException.Message' actualException.Message); " is 195.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    Collection  = (object)new UntypedCollection<string>(new object[] { "primitive"' new ComplexType() { Number = 1' Description = "ComplexTypes" } })' " is 146.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("A collection property of primitive types cannot contain an item of a complex type.") " is 146.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    Collection  = (object)new UntypedCollection<ComplexType>(new object[] { new ComplexType() { Number = 1' Description = "ComplexTypes" }' "primitive" })' " is 151.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("A collection property of complex types cannot contain an item of a primitive type.") " is 146.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.") " is 213.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.") " is 213.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                    ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.") " is 213.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The length of the statement  "                        Assert.IsTrue(actualException.Message.Contains(testCase.ExpectedException.Message)' "Message: '{0}' does not contain expected '{1}'"' testCase.ExpectedException.Message' actualException.Message); " is 195.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfEntityWithDictionary,The length of the statement  "            // Validates that IDictionary (can be used as a storage for open property key/value pairs) is not treated as a collection. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfEntityWithDictionary,The length of the statement  "                    XElement collectionPayload = XDocument.Load(payload).Descendants(UnitTestsUtil.DataNamespace + "Collection").FirstOrDefault(); " is 126.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The length of the statement  "            ComplexType[] baseComplexCollection = new ComplexType[] { new ComplexType { Description = "Description 1"' Number = 1 }' new ComplexType { Description = "Description 2"' Number = 2 } }; " is 185.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The length of the statement  "                    Assert.AreEqual(request.BaseUri + "/Entities(0)?$expand=SelfReference($select=ID)'SelfReference($select=Names)&$select=ID"' q.ToString()); " is 138.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The length of the statement  "                    ValidateComplexCollection(baseComplexCollection.Where(cb => cb.Description == "Description 1").ToArray()' complexCollection); " is 125.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The length of the statement  "                    ValidateComplexCollection((from cb in baseComplexCollection select new ComplexType() { Description = cb.Description + "abc" }).ToArray()' " is 137.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The length of the statement  "                    Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }' " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The length of the statement  "                    Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }' " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The length of the statement  "                    Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }' " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The length of the statement  "                            XElement collectionProperty = XDocument.Load(r.GetRequestStream()).Root.Element(UnitTestsUtil.AtomNamespace + "content") " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The length of the statement  "                                Assert.IsNotNull(collectionProperty.Elements(CollectionElementXName).FirstOrDefault()' "The type should be recognized as a collection and thus the payload should have he m:element child."); " is 189.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The length of the statement  "                                Assert.IsNull(collectionProperty.Elements(CollectionElementXName).FirstOrDefault()' "The type should not be recognized as a collection and thus the payload should not have he m:element child."); " is 194.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvokeWebUtilMethod,The length of the statement  "                MethodInfo mi = webUtilType.GetMethods(BindingFlags.NonPublic | BindingFlags.Static).Where(m => m.Name == methodName && m.GetParameters().Count() == parameters.Length).Single(); " is 177.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,CreatePayload,The length of the statement  "<feed xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 154.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionPropertyMaterialization,The length of the statement  "            GetCollectionParentForCollectionMaterializationTestCases(entity' out collectionParentType' out collectionParentInstance); " is 121.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionPropertyMaterialization,The length of the statement  "            object materializedCollectionInstance = collectionParentType.GetProperty("Collection").GetValue(collectionParentInstance' null); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionPropertyMaterialization,The length of the statement  "                List<string> log = (List<string>)typeof(LoggingCollection<>).MakeGenericType(new Type[] { materializedCollectionInstance.GetType().GetGenericArguments()[0] }).GetProperty("Log").GetValue(materializedCollectionInstance' null); " is 225.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionPropertyMaterialization,The length of the statement  "            // The client will instantiate ObservableCollection only if the property was null. Therefore this check does not apply if initializeCollection  " is 142.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionPropertyMaterialization,The length of the statement  "            // is true since the ObservableCollection instance will be populated in the constructor and the client will re-use it instead of creating a new one.  " is 148.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyCollectionAndPayloadMatch,The length of the statement  "            Assert.IsTrue(collectionPayload.Elements(CollectionElementXName).Count() == 0' "The payload contains some elements that are not present in the collection. Outstanding elements in the payload: " + collectionPayload.ToString()); " is 226.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyItemAndItemPayloadMatch,The length of the statement  "                Assert.IsTrue(itemPayloadElement == null || (bool)itemPayloadElement.Attribute(UnitTestsUtil.MetadataNamespace + "null")' "item is null but the payload property for this item exists and is not marked as null."); " is 211.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyItemAndItemPayloadMatch,The length of the statement  "                        if (XmlConvert.IsWhitespaceChar(itemStringValue[0]) || XmlConvert.IsWhitespaceChar(itemStringValue[itemStringValue.Length - 1])) " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyItemAndItemPayloadMatch,The length of the statement  "                            Assert.AreEqual((string)xmlSpaceAttr' "preserve"' "xml:space=\"preserve\" expected' found: " + xmlSpaceAttr.ToString()); " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyItemAndItemPayloadMatch,The length of the statement  "                    XElement propertyElement = itemPayloadElement.Elements(XName.Get(pi.Name' UnitTestsUtil.DataNamespace.NamespaceName)).SingleOrDefault(); " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,VerifyItemAndItemPayloadMatch,The length of the statement  "                    // is this a collection? Note: navigation properties not handled correctly here as they are not expected to be present in the test data " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,IsPrimitiveType,The length of the statement  "            return t == typeof(string) || t == typeof(int) || t == typeof(DateTimeOffset) || t == typeof(char[]) || t == typeof(byte[]); " is 124.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,GetModelFullName,The length of the statement  "            MethodInfo methodInfo = typeof(DataServiceContext).Assembly.GetType("Microsoft.OData.Client.CommonUtil").GetMethod("GetModelTypeName"' BindingFlags.NonPublic | BindingFlags.Static); " is 181.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,MaterializationTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,GetException,The length of the statement  "                // alternateException can be returned only if any of the setting is not null. Settings set to null mean return the alternate exception regardless of the value " is 158.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjectionTest,The length of the statement  "                Assert(q.ToString() == serviceRoot.AbsoluteUri + "/MySet1?$expand=Collection($select=ID)'Collection($select=ColStream)'Collection($expand=Collection($select=ID))'Collection($expand=Collection($select=RefStream1))&$select=ID'Stream1"' "make sure the right uri is produced by the linq translator"); " is 296.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjectionTest,The length of the statement  "                    Assert(o.StreamLink.EditLink.AbsoluteUri == serviceRoot.AbsoluteUri + "/photolink"' "the stream url for Stream1 must be populated correctly"); " is 142.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjectionTest,The length of the statement  "                    Assert(o.Collection.First().StreamLink.EditLink.AbsoluteUri == serviceRoot.AbsoluteUri + "/outerCollectionStreamLink1"' "the stream url of the collection stream must be populated correctly - index 0"); " is 201.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjectionTest,The length of the statement  "                    Assert(o.Collection.First().Collection.First().StreamLink.EditLink.AbsoluteUri == serviceRoot.AbsoluteUri + "/innerCollectionStreamLink1"' "the stream url of the collection stream must be populated correctly - index 0 - index 0"); " is 230.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjectionTest,The length of the statement  "                    Assert(o.Collection.First().Collection.ElementAt(1).StreamLink.EditLink.AbsoluteUri == serviceRoot.AbsoluteUri + "/innerCollectionStreamLink2"' "the stream url of the collection stream must be populated correctly - index 0 - index 1"); " is 235.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,GetMediumTrustDomain,The length of the statement  "                permissions.AddPermission(new EnvironmentPermission(EnvironmentPermissionAccess.Read' "TEMP;TMP;USERNAME;OS;COMPUTERNAME")); " is 124.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,GetMediumTrustDomain,The length of the statement  "                permissions.AddPermission(new IsolatedStorageFilePermission(PermissionState.Unrestricted) { UsageAllowed = IsolatedStorageContainment.AssemblyIsolationByUser' UserQuota = 9223372036854775807 }); " is 194.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,GetMediumTrustDomain,The length of the statement  "                permissions.AddPermission(new SecurityPermission(SecurityPermissionFlag.Execution | SecurityPermissionFlag.ControlThread | SecurityPermissionFlag.ControlPrincipal | SecurityPermissionFlag.RemotingConfiguration | SecurityPermissionFlag.SerializationFormatter)); " is 260.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,GetRunningSandbox,The length of the statement  "            return (ClientPartialTrustTestContext)domain.CreateInstanceFromAndUnwrap(typeof(ClientPartialTrustTestContext).Assembly.Location' typeof(ClientPartialTrustTestContext).FullName); " is 178.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjection,The length of the statement  "                AnyEntry(serviceRoot' "e4"' "<d:ID>4</d:ID>"' LinkEditNamedStream("RefStream1"' "image/jpeg"' serviceRoot + "/innerCollectionStreamLink1")) + " is 141.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjection,The length of the statement  "                AnyEntry(serviceRoot' "e5"' "<d:ID>5</d:ID>"' LinkEditNamedStream("RefStream1"' "image/jpeg"' serviceRoot + "/innerCollectionStreamLink2")) + " is 141.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjection,The length of the statement  "                    AnyEntry(serviceRoot' "e2"' "<d:ID>2</d:ID>"' LinkEditNamedStream("ColStream"' "image/jpeg"'  serviceRoot + "/outerCollectionStreamLink1")' LinkFeed("Collection"' innerCollectionXml)) + " is 185.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientNamedStreamProjection,The length of the statement  "                AstoriaUnitTests.Stubs.PlaybackService.OverridingPlayback.Value = AstoriaUnitTests.Stubs.PlaybackService.ConvertToPlaybackServicePayload(null' xml); " is 148.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,LinkEditNamedStream,The length of the statement  "            return String.Format("<link rel='http://docs.oasis-open.org/odata/ns/edit-media/{0}' type='{1}' title='{0}' href='{2}' />"' " is 123.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleProjectionWithoutStreams,The length of the statement  "            // Doing projection of non-stream properties should work and there should be no stream descriptors populated in the context " is 123.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleProjectionWithoutStreams,The length of the statement  "            Assert.AreEqual(context.Entities[0].StreamDescriptors.Count' 0' "There must be no named streams associated with the entity yet' since we didn't specify the named streams in the projection query"); " is 196.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleProjectionWithStreams,The length of the statement  "            Assert.AreEqual(context.Entities[0].StreamDescriptors.Count' 1' "There must be named streams associated with the entity"); " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_LoadPropertyTest,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(DataServicesResourceUtil.GetString("DataService_VersionTooLow"' "1.0"' "3"' "0"))' String.Format("The error message was not as expected: {0}"' ex.Message)); " is 190.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_LoadPropertyTest,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(DataServicesResourceUtil.GetString("DataService_VersionTooLow"' "1.0"' "3"' "0"))' String.Format("The error message was not as expected: {0}"' ex.Message)); " is 190.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleLinkProjection,The length of the statement  "                Assert.AreEqual(q.ToString()' request.ServiceRoot.AbsoluteUri + "/MySet1?$select=ID'Stream1"' "make sure the right uri is produced by the linq translator"); " is 156.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleLinkProjection,The length of the statement  "                    Assert.AreEqual(o.Stream11.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Stream1"' "make sure the url property is correctly populated"); " is 158.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleLinkProjection,The length of the statement  "                Assert.AreEqual(q.ToString()' request.ServiceRoot.AbsoluteUri + "/MySet1?$select=ID'Stream1"' "make sure the right uri is produced by the linq translator"); " is 156.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_SimpleLinkProjection,The length of the statement  "                    Assert.AreEqual(o.Stream1.EditLink' context.GetReadStreamUri(o' "Stream1")' "the value in the entity descriptor must match with the property value"); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_ProjectingOnlyStreamLinkProperty,The length of the statement  "                Assert.AreEqual(q.ToString()' request.ServiceRoot.AbsoluteUri + "/MySet1?$select=Stream1"' "make sure the right uri is produced by the linq translator"); " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_ProjectingOnlyStreamLinkProperty,The length of the statement  "                    Assert.AreEqual(o.Stream11.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Stream1"' "make sure the url property is correctly populated"); " is 158.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_ProjectingOnlyStreamLinkProperty,The length of the statement  "                Assert.AreEqual(q.ToString()' request.ServiceRoot.AbsoluteUri + "/MySet1?$select=Stream1"' "make sure the right uri is produced by the linq translator"); " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_ProjectingOnlyStreamLinkProperty,The length of the statement  "                    Assert.AreEqual(o.Stream1.EditLink' context.GetReadStreamUri(o' "Stream1")' "the value in the entity descriptor must match with the property value"); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_CannotReferenceDeepLinksDuringEntityMaterialization,The length of the statement  "                    Assert.AreEqual(ex.Message' DataServicesClientResourceUtil.GetString("ALinq_ProjectionMemberAssignmentMismatch"' typeof(EntityWithNamedStreams1).FullName' "s"' "s.Ref")); " is 170.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_CannotReferenceDeepLinksDuringEntityMaterialization,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 0' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_CannotReferenceDeepLinksDuringEntityMaterialization,The length of the statement  "                    Assert.AreEqual(ex.Message' DataServicesClientResourceUtil.GetString("ALinq_ProjectionMemberAssignmentMismatch"' typeof(EntityWithNamedStreams1).FullName' "s.Ref"' "s")); " is 170.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_CannotReferenceDeepLinksDuringEntityMaterialization,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 0' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NonEntity_AccessPropertiesFromDifferentLevels,The length of the statement  "            // If the entity getting projected out in an anonymous type' one should be able to project out links from various levels " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NonEntity_AccessPropertiesFromDifferentLevels,The length of the statement  "                    Assert.AreEqual(o.Stream1Url.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet2(3)/RefStream1"' "link must be populated"); " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NonEntity_AccessPropertiesFromDifferentLevels,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 0' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NonEntity_AccessPropertiesFromDifferentLevels,The length of the statement  "                    Assert.AreEqual(o.Stream1Url.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Stream1"' "link must be populated"); " is 133.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NonEntity_AccessPropertiesFromDifferentLevels,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 0' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_Projection,The length of the statement  "                Assert.AreEqual(o.Stream1.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Stream1"' "link must be populated"); " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_PayloadDrivenMaterialization,The length of the statement  "                    Assert.AreEqual(o.Stream1.EditLink' context.GetReadStreamUri(o' "Stream1")' "the value in the entity descriptor must match with the property value"); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_PayloadDrivenMaterialization,The length of the statement  "                    Assert.IsNull(o.SomeRandomProperty' "SomeRandomProperty must be null' since the payload does not have the link with the property name"); " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                Assert.AreEqual(request.ServiceRoot.AbsoluteUri + "/MySet1?$expand=Ref($select=ID)'Ref($select=RefStream1)"' q.ToString()' "make sure the right uri is produced by the linq translator"); " is 185.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                    Assert.AreEqual(o.Url.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet2(3)/RefStream1"' "the stream url must be populated correctly"); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                    Assert.IsNull(context.GetEntityDescriptor(o)' "the entity must not be tracked by the context since we are trying to flatten the hierarchy"); " is 140.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 0' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                Assert.AreEqual(request.ServiceRoot.AbsoluteUri + "/MySet1?$expand=Ref($select=ID)'Ref($select=RefStream1)"' q.ToString()' "make sure the right uri is produced by the linq translator"); " is 185.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                    Assert.AreEqual(o.RefStream1.EditLink' context.GetReadStreamUri(o' "RefStream1")' "the stream url must be populated correctly"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 1' "there should be exactly one entity tracked by the context - the nested entity"); " is 124.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection,The length of the statement  "                Assert.AreEqual(context.Entities[0].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet2(3)"' "the nested entity is the one that should be tracked"); " is 161.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "            // projecting out deep links to get stream url in DSSL property with multiple parameters in scope - both narrow type and anonymous type " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "                Assert.AreEqual(q.ToString()' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Collection?$select=Name'ColStream"' "make sure the right uri is produced by the linq translator"); " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "                Assert.AreEqual(entities[0].Url.EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet3('ABCDE')/ColStream"' "the stream url must be populated correctly - index 0"); " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 0' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "                Assert.AreEqual(q.ToString()' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Collection?$select=ID'ColStream"' "make sure the right uri is produced by the linq translator"); " is 172.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "                Assert.AreEqual(entities[0].ColStream.EditLink' context.GetReadStreamUri(entities[0]' "ColStream")' "the stream url must be populated correctly - index 0"); " is 156.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepLinkProjection_MultipleParametersInScope,The length of the statement  "                Assert.AreEqual(context.Entities.Count' 1' "there should be no entities tracked by the context' since we are doing flattening"); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepEntityProjection_CannotAccessEntitiesAcrossLevels,The length of the statement  "            // projecting out deep links to get stream url in DSSL property with multiple parameters in scope - both narrow type and anonymous type " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_DeepEntityProjection_CannotAccessEntitiesAcrossLevels,The length of the statement  "                    Assert.AreEqual(ex.Message' DataServicesClientResourceUtil.GetString("ALinq_CanOnlyProjectTheLeaf")' "error message should match as expected"); " is 143.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                Assert.AreEqual(request.ServiceRoot.AbsoluteUri + "/MySet1?$expand=Ref($select=ID)'Ref($select=RefStream1)'Collection($select=ID)'Collection($select=ColStream)&$select=ID'Stream1"' q.ToString()' "make sure the right uri is produced by the linq translator"); " is 257.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                    Assert.AreEqual(o.Stream1.EditLink' context.GetReadStreamUri(o' "Stream1")' "the stream url for Stream1 must be populated correctly"); " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                    Assert.AreEqual(o.Ref.RefStream1.EditLink' context.GetReadStreamUri(o.Ref' "RefStream1")' "the stream url for RefStream1 must be populated correctly"); " is 151.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                        Assert.AreEqual(c.ColStream.EditLink' context.GetReadStreamUri(c' "ColStream")' "the url for the nested collection entity should match"); " is 137.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                Assert.AreEqual(context.Entities[0].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet1(1)"' "top level entity must be tracked"); " is 142.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                Assert.AreEqual(context.Entities[1].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet2(3)"' "the nested entity must be tracked"); " is 143.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                Assert.AreEqual(context.Entities[2].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet3('ABCDE')"' "top level entity must be tracked"); " is 148.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                Assert.AreEqual(request.ServiceRoot.AbsoluteUri + "/MySet1?$expand=Ref($select=ID)'Ref($select=RefStream1)'Collection($select=Name)'Collection($select=ColStream)&$select=ID'Stream1"' q.ToString()' "make sure the right uri is produced by the linq translator"); " is 259.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                    Assert.AreEqual(o.Stream1Url.EditLink' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Stream1"' "the stream url for Stream1 must be populated correctly"); " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                    Assert.AreEqual(o.Ref.Stream1Url.EditLink' request.ServiceRoot.AbsoluteUri + "/MySet2(3)/RefStream1"' "the stream url for RefStream1 must be populated correctly"); " is 163.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The length of the statement  "                    Assert.AreEqual(o.Collection.First().Stream1Url.EditLink' request.ServiceRoot.AbsoluteUri + "/MySet3('ABCDE')/ColStream"' "the stream url of the collection stream must be populated correctly - index 0"); " is 203.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                DataServiceQuery<EntityWithNamedStreams1> q = (DataServiceQuery<EntityWithNamedStreams1>)from s in context.CreateQuery<EntityWithNamedStreams1>("MySet1") " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                Assert.AreEqual(request.ServiceRoot.AbsoluteUri + "/MySet1?$expand=Collection($select=ID)'Collection($select=ColStream)'Collection($expand=Collection1($select=ID))'Collection($expand=Collection1($select=RefStream1))&$select=ID'Stream1"' q.ToString()' "make sure the right uri is produced by the linq translator"); " is 313.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                    Assert.AreEqual(o.Stream1.EditLink' context.GetReadStreamUri(o' "Stream1")' "the stream url for Stream1 must be populated correctly"); " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                        Assert.AreEqual(c.ColStream.EditLink' context.GetReadStreamUri(c' "ColStream")' "the url for the nested collection entity should match - Level 0"); " is 147.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                            Assert.AreEqual(c1.RefStream1.EditLink' context.GetReadStreamUri(c1' "RefStream1")' "the url for the nested collection entity should match - Level 1"); " is 151.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                Assert.AreEqual(context.Entities[0].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet1(1)"' "top level entity must be tracked"); " is 142.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                Assert.AreEqual(context.Entities[1].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet3('ABCDE')"' "top level entity must be tracked"); " is 148.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                Assert.AreEqual(context.Entities[2].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet2(3)"' "the nested entity must be tracked"); " is 143.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                    Assert.AreEqual(entity.ColStream.EditLink' context.GetReadStreamUri(entity' "ColStream")' "the url for the nested collection entity should match - Level 1"); " is 157.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                        Assert.AreEqual(c1.RefStream1.EditLink' context.GetReadStreamUri(c1' "RefStream1")' "the url for the nested collection entity should match - Level 1"); " is 151.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                Assert.AreEqual(request.ServiceRoot.AbsoluteUri + "/MySet1?$expand=Collection($select=Name)'Collection($select=ColStream)'Collection($expand=Collection1($select=ID))'Collection($expand=Collection1($select=RefStream1))&$select=ID'Stream1"' q.ToString()' "make sure the right uri is produced by the linq translator"); " is 315.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                    Assert.AreEqual(o.Stream1Url.EditLink' request.ServiceRoot.AbsoluteUri + "/MySet1(1)/Stream1"' "the stream url for Stream1 must be populated correctly"); " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                    Assert.AreEqual(o.Collection.First().Stream1Url.EditLink' request.ServiceRoot.AbsoluteUri + "/MySet3('ABCDE')/ColStream"' "the stream url of the collection stream must be populated correctly - index 0"); " is 203.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The length of the statement  "                    Assert.AreEqual(o.Collection.First().Collection1.Single().Stream1Url.EditLink' request.ServiceRoot.AbsoluteUri + "/MySet2(3)/RefStream1"' "the stream url of the collection stream must be populated correctly - index 0 - index 0"); " is 229.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchQueryResponsesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two queries. " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(product1)' ctx.GetEntityDescriptor(product2) }); " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two inserts' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two insert operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(product1)' ctx.GetEntityDescriptor(product2) }); " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two inserts' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two insert operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertsShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(product1)' ctx.GetEntityDescriptor(product2) }); " is 134.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertsShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two inserts' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertsShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two insert operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(customer)' ctx.GetEntityDescriptor(customer2) }); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two updates' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The length of the statement  "                customers.Select(d => d.Entity).Should().Contain(e => ((Customer)e).Name == "NewSampleTestNameAfterUpdate").And.Contain(e => ((Customer)e).Name == "NewSampleTestNameAfterUpdate2"); " is 180.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two update operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(customer)' ctx.GetEntityDescriptor(customer2) }); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two updates' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The length of the statement  "                customers.Select(d => d.Entity).Should().Contain(e => ((Customer)e).Name == "NewSampleTestNameAfterUpdate").And.Contain(e => ((Customer)e).Name == "NewSampleTestNameAfterUpdate2"); " is 180.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two update operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(customer)' ctx.GetEntityDescriptor(customer2) }); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two updates' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The length of the statement  "                customers.Select(d => d.Entity).Should().Contain(e => ((Customer)e).Name == "NewSampleTestNameAfterUpdate").And.Contain(e => ((Customer)e).Name == "NewSampleTestNameAfterUpdate2"); " is 180.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two update operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchDeletesShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(customer)' ctx.GetEntityDescriptor(customer2) }); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchDeletesShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two deletes' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchDeletesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two delete operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsDeletesShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(customer)' ctx.GetEntityDescriptor(customer2) }); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsDeletesShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two deletes' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsDeletesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two delete operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The length of the statement  "                var expectedDescriptors = new Queue<Descriptor>(new[] { null' ctx.GetEntityDescriptor(customer)' ctx.GetEntityDescriptor(customer2) }); " is 135.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The length of the statement  "                // For $batch top level' no descriptor is expected. For the inner two deletes' we expect the appropriate EntityDescriptor. " is 122.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The length of the statement  "                // We expect ReceivingResponse to be called 3 times - one for the top level batch' and once for each of the two delete operations. " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchExceptionEmptyResponseEnumerableTest,The length of the statement  "                        foreach (var tmp in ex.Response)      // here verify that we can iterate ex.Response's inner IEnumerable<OperationResponse> " is 123.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,GetBlobResponse,The length of the statement  "<entry xml:base=""http://services.odata.org/V3/Northwind/Northwind.svc/"" xmlns=""http://www.w3.org/2005/Atom"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata""> " is 222.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,ExecuteGetServiceOperationWithExtraQueryItemsInExecute,The length of the statement  "                Action actionToTest = () => ctx.Execute(new Uri(web.ServiceRoot + "/VoidServiceOperation()?Foo=baz&bar= should have escaped this&NoValueThing")' "GET"); " is 152.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,ExecuteUriPaging,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => args.RequestUri.AbsoluteUri.Contains("skiptoken")' args => args.RequestMessage.Url.AbsoluteUri.Contains("skiptoken")); " is 178.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,ExecuteUriPagingAsync,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => args.RequestUri.AbsoluteUri.Contains("skiptoken")' args => args.RequestMessage.Url.AbsoluteUri.Contains("skiptoken")); " is 178.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,LoadPropertyPaging,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => args.RequestUri.AbsoluteUri.Contains("skiptoken")' args => args.RequestMessage.Url.AbsoluteUri.Contains("skiptoken")); " is 178.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,LoadPropertyPagingAsync,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => args.RequestUri.AbsoluteUri.Contains("skiptoken")' args => args.RequestMessage.Url.AbsoluteUri.Contains("skiptoken")); " is 178.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,LoadPropertyPagingAsync,The length of the statement  "                    IAsyncResult result = ctx.BeginLoadProperty(customer' "Orders"' new Uri(web.ServiceRoot + "/Customers(1)/Orders")' null' null); " is 127.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchTopLevel,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => args.RequestUri.AbsoluteUri.Contains("$batch")' args => args.RequestMessage.Url.AbsoluteUri.Contains("$batch")); " is 172.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInserts,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => !args.RequestUri.AbsoluteUri.Contains("$batch")' args => !args.RequestMessage.Url.AbsoluteUri.Contains("$batch")); " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQuery,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => !args.RequestUri.AbsoluteUri.Contains("$batch")' args => !args.RequestMessage.Url.AbsoluteUri.Contains("$batch")); " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQuery,The length of the statement  "                var response = ctx.ExecuteBatch((DataServiceRequest)(ctx.CreateQuery<Customer>("Customers").Where(c => c.Name.Contains("1")))); " is 127.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQueryAsync,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => !args.RequestUri.AbsoluteUri.Contains("$batch")' args => !args.RequestMessage.Url.AbsoluteUri.Contains("$batch")); " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQueryAsync,The length of the statement  "                IAsyncResult asyncResult = ctx.BeginExecuteBatch(null' null' (DataServiceRequest)(ctx.CreateQuery<Customer>("Customers").Where(c => c.Name.Contains("1")))); " is 156.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInsertAndAddRelatedObject,The length of the statement  "                var ctx = GetContextWithBuildingRequestHandler(web' args => !args.RequestUri.AbsoluteUri.Contains("$batch")' args => !args.RequestMessage.Url.AbsoluteUri.Contains("$batch")); " is 174.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQueryExecuteCallOrder,The length of the statement  "                var response = ctx.ExecuteBatch((DataServiceRequest)(ctx.CreateQuery<Customer>("Customers"))' (DataServiceRequest)(ctx.CreateQuery<Order>("Orders"))); " is 150.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                string expectedLog = string.Concat("_BR_$batch_SR2_$batch_WSC_"'                 // BuildingRequest' SendingRequest2' MessageWriterSettings for $batch " is 150.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                    "_BR_Customers_SR2_Customers_WSC_"'                                          // BuildingRequest' SendingRequest2' MessageWriterSettings' WritingEntity for inner request 1 " is 170.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                    "_BR_Customers(2)_SR2_Customers(2)_WSC_"'                                    // BuildingRequest' SendingRequest2' MessageWriterSettings' WritingEntity for inner request 2 " is 170.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                    "_BR_Orders_SR2_Orders_WSC_"'                                                // BuildingRequest' SendingRequest2' MessageWriterSettings' WritingEntity for inner request 3 " is 170.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                    "_RR_$batch_RSC_"'                                                           // ReceivingResponse' MessageReaderSettings for $batch " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                    "_RR_Added_RSC_"'                                                            // ReceivingResponse' MessageReaderSettings' ReadingEntity for inner request 1 " is 155.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The length of the statement  "                    "_RR_Added_RSC_");                                                           // ReceivingResponse' MessageReaderSettings' ReadingEntity for inner request 3 " is 155.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The length of the statement  "                            arg.RequestUri = new Uri(uriString + "?CustomHeader=CustomHeaderValue&Custom_Header2=Custom_Header2_Value"' UriKind.RelativeOrAbsolute); " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The length of the statement  "                            if (!arg.IsBatchPart && (arg.ResponseMessage as HttpWebResponseMessage).Response.ResponseUri.Segments.Last() == "$batch") " is 121.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The length of the statement  "                            if (!(option == SaveChangesOptions.BatchWithSingleChangeset && actualSendingRequestDescriptors[i].State == EntityStates.Modified && actualReceivingResponseDescriptors[i].State == EntityStates.Unchanged)) " is 203.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RunTest,The length of the statement  "                Assert.IsTrue(ex.InnerException.Message.Contains("SendingRequest2 received user altered request correctly.") || ex.InnerException.Message.Contains("Server received user altered request correctly.")); " is 199.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RunTest,The length of the statement  "                Assert.IsTrue(ex.Message.Contains("SendingRequest2 received user altered request correctly.") || ex.Message.Contains("Server received user altered request correctly.")); " is 169.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RunTest,The length of the statement  "                new StreamReader(ex.Response.GetResponseStream()).ReadToEnd().Should().Contain("Server received user altered request correctly."); " is 130.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeNullVerifier,The length of the statement  "            ctx.BuildingRequest += (sender' e) => e.Descriptor.Should().BeNull("no Descriptor should be present for this kind of request."); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeNullVerifier,The length of the statement  "            ctx.SendingRequest2 += (sender' e) => e.Descriptor.Should().BeNull("no Descriptor should be present for this kind of request."); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeEntityVerifier,The length of the statement  "                    entityDescriptor.Should().NotBeNull("an EntityDescriptor was expected for this kind of request' but found: " + e.Descriptor); " is 125.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeEntityVerifier,The length of the statement  "                    entityDescriptor.Should().NotBeNull("an EntityDescriptor was expected for this kind of request' but found: " + e.Descriptor); " is 125.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeStreamVerifier,The length of the statement  "                    streamDescriptor.Should().NotBeNull("a StreamDescriptor was expected for this kind of request' but found: " + e.Descriptor); " is 124.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeStreamVerifier,The length of the statement  "                    streamDescriptor.Should().NotBeNull("a StreamDescriptor was expected for this kind of request' but found: " + e.Descriptor); " is 124.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeLinkVerifier,The length of the statement  "                    linkDescriptor.Should().NotBeNull("a LinkDescriptor was expected for this kind of request' but found: " + e.Descriptor); " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddDescriptorShouldBeLinkVerifier,The length of the statement  "                    linkDescriptor.Should().NotBeNull("a LinkDescriptor was expected for this kind of request' but found: " + e.Descriptor); " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,GetContextWithBuildingRequestHandler,The length of the statement  "                    // To reduce the number of test requests' we verify the parameter and headers in SendingRequest2 in some tests and do not send the altered request to actual service " is 164.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RequireQueryParameter,The length of the statement  "                throw new DataServiceException(418' CustomQueryParameter + " is expected to always be " + SampleValue + "' but was " + value); " is 126.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,EnsureValueIsCorrect,The length of the statement  "                throw new DataServiceException(418' "'" + headerName + "' is expected to always be '" + expected + "'' but was: '" + headerValue + "'"); " is 136.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries,The length of the statement  "                LinqTestCase[] tests_GeographyPoint = GetSupportedLinqQueries_GeographyPoint((IQueryable<TripLeg<GeographyPoint>>)allTripLegsActual' (IQueryable<TripLeg<GeographyPoint>>)allTripLegsExpected); " is 191.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries,The length of the statement  "                LinqTestCase[] tests_GeographyLineString = GetSupportedLinqQueries_GeographyLineString((IQueryable<TripLeg<GeographyLineString>>)allTripLegsActual' (IQueryable<TripLeg<GeographyLineString>>)allTripLegsExpected); " is 211.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_BaseGeography,The length of the statement  "                    ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                    ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })' " is 192.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                    ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                    ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })' " is 248.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                    ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                                GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null) " is 147.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                    ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })' " is 208.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The length of the statement  "                    ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The length of the statement  "                    ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The length of the statement  "                    ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The length of the statement  "                    ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })' " is 137.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The length of the statement  "                                GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude) " is 216.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The length of the statement  "                    ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })' " is 278.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The length of the statement  "                    ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })' " is 120.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,VerifyURI,The length of the statement  "            Assert.AreEqual(Uri.UnescapeDataString(expectedUri)' Uri.UnescapeDataString(actualQuery.ToString())' "LINQ query did not produce the expected URI."); " is 149.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSamplePropertyPayload,The length of the statement  "            return new UnitTestPayloadGenerator(HttpStatusCode.OK' "application/xml").GetSamplePropertyPayload(propertyName' propertyValue); " is 128.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSampleEntityPayload,The length of the statement  "            return new UnitTestPayloadGenerator(HttpStatusCode.OK' "application/atom+xml").GetSampleEntityPayload(entity' projectedProperties); " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSampleFeedPayload,The length of the statement  "            return new UnitTestPayloadGenerator(HttpStatusCode.OK' "application/atom+xml").GetSampleFeedPayload(entities' projectedProperties); " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetRoadTripServiceDefinition,The length of the statement  "            DSPMetadata roadTripMetadata = SpatialTestUtil.CreateRoadTripMetadata(geographyType' useComplexType' useOpenTypes' modifyMetadata); " is 131.
Long Statement,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetRoadTripServiceDefinition,The length of the statement  "            return SpatialTestUtil.CreateRoadTripServiceDefinition(roadTripMetadata' defaultValues' DSPDataProviderKind.CustomProvider' useComplexType); " is 140.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => (e as Employee).Manager).SelectMany(m => m.DirectReports)' " is 129.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => e).OfType<Employee>().SelectMany(e => e.Manager.DirectReports)' " is 134.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).Select(e => e.Manager).SelectMany(m => m.DirectReports) " is 133.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)' " is 188.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)' " is 193.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)' " is 193.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).OfType<PeopleManager>().Where(e => e.ID == 2).SelectMany(m => m.DirectReports)' " is 198.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)' " is 188.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)' " is 193.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (((p.BestFriend as Employee).Manager as PeopleManager).BestFriend as Employee).Manager.DirectReports)' " is 177.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People(5)/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports"' " is 177.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (((p.BestFriend as Employee).Manager as PeopleManager).BestFriend as Employee).Manager.DirectReports).OfType<PeopleManager>()' " is 201.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "                c => c.BaseUri + "People(5)/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"' " is 230.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (p as Employee).Manager.ID' (p as Employee).Manager.Name select p' " is 140.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People") orderby (p as Employee).Manager.ID' (p as Employee).Manager.Name select p' " is 121.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Name"' " is 155.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID"' " is 147.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                                c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (p as PeopleManager).Manager.ID' (p as PeopleManager).Manager.Name select p' " is 150.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Name"' " is 213.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People") orderby ((p as Employee).Manager as PeopleManager).Manager.ID' ((p as Employee).Manager as PeopleManager).Manager.Name select p' " is 175.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Manager/Name"' " is 171.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People") orderby ((p as PeopleManager).Manager as Employee).Manager.ID' ((p as PeopleManager).Manager as Employee).Manager.Name select p' " is 175.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Manager/Name"' " is 181.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby ((p as Employee).Manager as PeopleManager).Manager.ID select p' " is 137.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby ((p as Employee).Manager as PeopleManager).Manager.ID' ((p as Employee).Manager as PeopleManager).Manager.Name select p' " is 194.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=Manager/Manager/ID'Manager/Manager/Name"' " is 123.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            //yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 153.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            //        c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (((p as Employee).BestFriend as Employee).Manager.BestFriend as PeopleManager).Manager.ID select p' " is 183.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            //    c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID"' " is 231.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            //yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 153.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            //        c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).OfType<PeopleManager>().Where(e => e.ID == 2).SelectMany(m => m.DirectReports).OrderBy(e => (((e as Employee).BestFriend as Employee).Manager.BestFriend as PeopleManager).Manager.ID)' " is 312.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The length of the statement  "            //    c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports?$orderby=BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID"' " is 326.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as PeopleManager as Employee as Person).ID == 2 select p' " is 137.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<Employee>() where (p as Employee as Person as PeopleManager).ID == 2 select p' " is 132.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$filter=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID eq 2"' " is 143.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People") where (p as PeopleManager).ID > 0 && (p as Employee).Name != "Nil the Nameless" orderby (p as Employee).Manager.ID select p " is 170.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                c => c.BaseUri + "People?$filter=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID gt 0 and AstoriaUnitTests.Tests.DerivedProperty.Employee/Name ne 'Nil the Nameless'&$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/ID"' " is 242.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as PeopleManager).ID > 0 && (p as PeopleManager).Name != "Nil the Nameless" orderby (p as PeopleManager).Manager.ID select p' " is 205.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Employee).ID > 0 && (p as Employee).Name != "Nil the Nameless" orderby (p as Employee).Manager.ID select p' " is 190.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                    c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Person).ID > 0 && (p as Person).Name != "Nil the Nameless" orderby (p as Employee).Manager.ID select p' " is 186.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager?$filter=ID gt 0 and Name ne 'Nil the Nameless'&$orderby=Manager/ID"' " is 146.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            //yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 153.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            //        c => from p in c.CreateQuery<Person>("People") where (((p as PeopleManager).Manager as Employee).BestFriend as Employee).ID > 0 orderby ((p as PeopleManager).Manager as Employee).Manager.ID select p' " is 209.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            //    c => c.BaseUri + "People?$filter=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/ID gt 0&$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Manager/ID"' " is 249.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            //yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 153.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            //        c => from p in c.CreateQuery<Person>("People") where (((p as Employee).BestFriend as Employee).Manager.BestFriend as PeopleManager).Manager.ID > 0 orderby (((p as Employee).BestFriend as Employee).Manager.BestFriend as PeopleManager).Manager.ID select p as Employee' " is 276.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The length of the statement  "            //    c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$filter=AstoriaUnitTests.Tests.DerivedProperty.Employee/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID gt 0&$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID"' " is 482.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).OfType<Employee>()' " is 137.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"' " is 234.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand(p => (p as Employee).Manager)' " is 155.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"' " is 242.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend").Expand(p => (p as Employee).Manager)' " is 176.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))'BestFriend'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"' " is 253.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                    c => ((DataServiceQuery<PeopleManager>)((DataServiceQuery<Employee>)c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2)).Expand(p => p.Manager).Expand("BestFriend").Select(e => e.Manager)).Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend")' " is 312.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager?$expand=Manager'BestFriend'Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"' " is 216.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new Employee { ID = p.ID' Manager = (p as Employee).Manager})' " is 159.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"' " is 139.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new PeopleManager { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})' " is 181.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"' " is 150.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeEntity { ID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})' " is 233.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeEntity { ID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})' " is 272.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=Manager($select=ID)'Manager($select=Name)&$select=ID"' " is 135.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Manager = (e as Employee).Manager == null ? null : new MyEmployeeEntity { ID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 230.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new MyEmployeeEntity { ID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})' " is 296.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=Name)&$select=ID"' " is 183.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = cw.Name }).ToList() })' " is 245.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=Name)&$select=ID"' " is 189.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })' " is 264.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"' " is 242.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeEntity { ID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeEntity { ID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })' " is 565.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"' " is 868.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})' " is 137.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name"' " is 148.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Office = (e as PeopleManager).Office})' " is 122.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Skills = (e as PeopleManager).Skills})' " is 122.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new Employee { ID = e.ID' Vacations = (e as PeopleManager).Vacations})' " is 120.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Photo = (e as PeopleManager).Photo})' " is 120.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations})' " is 176.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' Manager = (p as Employee).Manager})' " is 150.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"' " is 139.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    Assert.AreEqual(2' o.Where(p => p.GetType().GetProperty("Manager").GetValue(p' null) == null ? false : p.GetType().GetProperty("Manager").GetValue(p' null) == shyam).Count()); " is 175.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})' " is 167.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"' " is 150.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { ID = e.ID' Manager = e.Manager == null ? null : new { ID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})' " is 199.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { ID = e.ID' Manager = e.Manager == null ? null : new { ID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})' " is 238.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { MyID = e.ID' Manager = new { MyID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})' " is 176.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { MyID = e.ID' Manager = new { MyID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})' " is 215.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeNonEntity { MyID = e.Manager.ID' Name = (e.Manager as Employee).Name }})' " is 231.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})' " is 282.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=Manager($select=ID)'Manager($select=Name)&$select=ID"' " is 135.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Manager = (e as Employee).Manager == null ? null : new { MyID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 200.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new { MyID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})' " is 266.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = (e as Employee).Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 240.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})' " is 306.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=Name)&$select=ID"' " is 183.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = cw.Name }).ToList() })' " is 215.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = cw.Name }).ToList() })' " is 255.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=Name)&$select=ID"' " is 189.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })' " is 234.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })' " is 274.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"' " is 242.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })' " is 505.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeNonEntity { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeNonEntity { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })' " is 585.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"' " is 868.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})' " is 122.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})' " is 142.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name"' " is 148.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(p => new MyEmployeeNonEntity { MyID = p.ID' Office = (p as PeopleManager).Office})' " is 127.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Office = (e as PeopleManager).Office == null ? null : new { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})' " is 240.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyOffice = (e as PeopleManager).Office == null ? null : new MyOfficeComplexType { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})' " is 282.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"' " is 157.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                        Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new { MyID = co.ID' Name = co.Name }).ToList())' " is 209.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                        SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })' " is 206.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                        Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new MyEmployeeNonEntity { MyID = co.ID' Name = co.Name }).ToList())' " is 229.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                        SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })' " is 226.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=Name))&$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"' " is 581.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                        Assert.IsTrue((id == 2 && officeBuilding != null && officeNumber > 0) || (id == 5 && officeBuilding != null && officeNumber > 0) || (id > 0 && officeBuilding == null && officeNumber == 0)); " is 189.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Skills = (e as PeopleManager).Skills})' " is 127.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})' " is 133.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' MyVacations = default(Vacation)' Vacations = (e as PeopleManager).Vacations })' " is 147.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' MyVacations = default(Vacation)' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})' " is 298.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations })' " is 134.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new Vacation { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})' " is 294.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyVacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new MyVacationComplexType { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})' " is 309.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "            yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>( " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The length of the statement  "                    c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Photo = (e as PeopleManager).Photo})' " is 125.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    from p in people where p.ID == 1 from e in p.Aquaintances.OfType<Employee>().Cast<Person>().OfType<PeopleManager>() select e' " is 125.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    from p in people where p.ID == 1 from e in p.Aquaintances.OfType<Employee>().OfType<Person>().OfType<PeopleManager>() select e' " is 127.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    from p in people where p.ID == 1 from e in p.Aquaintances.OfType<Employee>().Select(pp => pp).OfType<PeopleManager>() select e' " is 127.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "The expression 'p => (p As PeopleManager)' is not a valid expression for navigation path. The only supported operations inside the lambda expression body are MemberAccess and TypeAs. The expression must contain at least one MemberAccess and it cannot end with TypeAs."' " is 270.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "The expression 'p => ((p As Employee).BestFriend As PeopleManager)' is not a valid expression for navigation path. The only supported operations inside the lambda expression body are MemberAccess and TypeAs. The expression must contain at least one MemberAccess and it cannot end with TypeAs."' " is 295.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "The expression 'p => ((p As Employee).BestFriend As PeopleManager).Office.Building' is not a valid expression for navigation path. The only supported operations inside the lambda expression body are MemberAccess and TypeAs. The expression must contain at least one MemberAccess and it cannot end with TypeAs."' " is 311.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    ((DataServiceQuery<PeopleManager>)((DataServiceQuery<Employee>)people.Expand(p => (p as Employee).Manager).OfType<Employee>().Where(e => e.ID == 2)).Expand("BestFriend").Select(e => e.Manager)).Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend")' " is 296.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "<?xml version=\"1.0\" encoding=\"utf-8\"?><m:error xmlns:m=\"http://docs.oasis-open.org/odata/ns/metadata\"><m:code /><m:message>The type name 'AstoriaUnitTests.Tests.DerivedProperty.Employee' specified in the URI is not a valid type. Please make sure that the type name is valid and that it derives from the type 'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager'.</m:message></m:error>"' " is 394.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    people.Select(e => new { ID = e.ID' Vacations = (e as Employee).Vacations.Select(v => new { Desc = v.Description' Start = v.StartDate' End = v.EndDate }).ToList()})' " is 165.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyVacations = (e as Employee).Vacations.Select(v => new MyVacationComplexType { Description= v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})' " is 225.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "Constructing or initializing instances of the type <>f__AnonymousType19`2[System.Int32'AstoriaUnitTests.Tests.DerivedProperty.Employee] with the expression (e.BestFriend As Employee) is not supported."' " is 203.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    people.Select(e => new { ID = e.ID' BestFriend = new { ID = e.BestFriend.ID' BestFriend = e.BestFriend.BestFriend as Employee }})' " is 130.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "Constructing or initializing instances of the type <>f__AnonymousType19`2[System.Int32'<>f__AnonymousType19`2[System.Int32'AstoriaUnitTests.Tests.DerivedProperty.Employee]] with the expression (e.BestFriend.BestFriend As Employee) is not supported."' " is 251.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "Initializing instances of the entity type AstoriaUnitTests.Tests.DerivedProperty.Person with the expression (e.BestFriend As Employee) is not supported."' " is 155.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                    people.OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Vacations = e.Vacations.Select(v => new Vacation { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})' " is 211.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The length of the statement  "                "Constructing or initializing instances of the type AstoriaUnitTests.Tests.DerivedProperty.MyEmployeeEntity with the expression e.Vacations.Select(v => new Vacation() {Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate}).ToList() is not supported."' " is 272.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { ID = e.ID' Manager = new { ID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 125.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { ID = e.ID' Manager = new { ID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = new MyEmployeeNonEntity { MyID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 169.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeEntity { ID = e.ID' Manager = new MyEmployeeEntity { ID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 159.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new Employee { ID = e.ID' Manager = new PeopleManager { ID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})' " is 148.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { Manager = new MyEmployeeNonEntity { Name = (e as Employee).Manager.Name }})' " is 121.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { ID = e.ID' Colleagues = (e as Employee).Colleagues.Select(c => new { ID = c.ID' Name = c.Name }).ToList()})' " is 133.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues.Select(c => new MyEmployeeNonEntity { MyID = c.ID' Name = c.Name }).ToList()})' " is 177.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues.Select(c => new MyEmployeeEntity { ID = c.ID' Name = c.Name }).ToList()})' " is 167.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new Employee { ID = e.ID' Colleagues = (e as Employee).Colleagues.Select(c => new Employee { ID = c.ID' Name = c.Name }).ToList()})' " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { Colleagues = (e as Employee).Colleagues.Select(c => new MyEmployeeNonEntity {Name = c.Name }).ToList()})' " is 150.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeEntity { Colleagues = (e as Employee).Colleagues.Select(c => new MyEmployeeEntity { Name = c.Name }).ToList()})' " is 145.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new Employee { Colleagues = (e as Employee).Colleagues.Select(c => new Employee { Name = c.Name }).ToList()})' " is 129.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { ID = e.ID' OfficeBuilding = (e as Employee).Office.Building' OfficeNumber = (e as Employee).Office.OfficeNumber })' " is 140.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { ID = e.ID' Office = new { Building = (e as Employee).Office.Building' OfficeNumber = (e as Employee).Office.OfficeNumber }})' " is 150.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyOffice = new MyOfficeComplexType { BuildingName = (e as Employee).Office.Building' OfficeNumber = (e as Employee).Office.OfficeNumber }})' " is 198.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { OfficeBuilding = (e as Employee).Office.Building' OfficeNumber = (e as Employee).Office.OfficeNumber })' " is 129.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new { Office = new { Building = (e as Employee).Office.Building' OfficeNumber = (e as Employee).Office.OfficeNumber }})' " is 139.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTestsForMissingProperty,The length of the statement  "                    people.Select(e => new MyEmployeeNonEntity { MyOffice = new MyOfficeComplexType { BuildingName = (e as Employee).Office.Building' OfficeNumber = (e as Employee).Office.OfficeNumber }})' " is 185.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,VerifyNegativeQueryErrorMessage,The length of the statement  "                            Assert.AreEqual(AstoriaUnitTests.Tests.LinqTests.Normalize(expectedError)' AstoriaUnitTests.Tests.LinqTests.Normalize(errorMsg)); " is 129.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The length of the statement  "                    Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name"); " is 156.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The length of the statement  "                Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo)); " is 127.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The length of the statement  "                Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "DirectReports" && l.Source == shyam && l.Target == pratik)); " is 129.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The length of the statement  "                Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101)); " is 123.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The length of the statement  "                Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101)); " is 123.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The length of the statement  "                    Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name"); " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The length of the statement  "                    Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name"); " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The length of the statement  "                    Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name"); " is 151.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The length of the statement  "                Assert.IsNotNull(ctx.Links.Single(l => l.Source == pratik && l.Target == bestFriend && l.SourceProperty == "BestFriend")); " is 122.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The length of the statement  "                Assert.IsNotNull(ctx.Links.Single(l => l.Source == pratik && l.Target == bestFriend && l.SourceProperty == "BestFriend")); " is 122.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The length of the statement  "            "<?xml version=\"1.0\" encoding=\"utf-8\"?><m:error xmlns:m=\"http://docs.oasis-open.org/odata/ns/metadata\"><m:code /><m:message>Resource not found for the segment 'Manager'.</m:message></m:error>"); " is 200.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The length of the statement  "            "The stream named 'Photo' cannot be modified because it does not have an edit-media link. Make sure that the stream name is correct and that an edit-media link for this stream is included in the entry element in the response."); " is 228.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The length of the statement  "            "The entity does not have a stream named 'Photo'. Make sure that the name of the stream is correct.\r\nParameter name: name"); " is 126.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendSaveChangesAndVerifyContext,The length of the statement  "            t.TestUtil.RunCombinations(testCases' saveChangesOptions ?? new SaveChangesOptions[] { SaveChangesOptions.BatchWithSingleChangeset' SaveChangesOptions.None }' (testCase' saveChangesOption) => " is 191.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendSaveChangesAndVerifyContext,The length of the statement  "                            Assert.AreEqual(dsv == null ? null : dsv.Major + "." + dsv.Minor' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch."); " is 138.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The length of the statement  "                DataServiceBehavior = new OpenWebDataServiceDefinition.OpenWebDataServiceBehavior() { IncludeRelationshipLinksInResponse = true }' " is 130.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,LoadModelFromString,The length of the statement  "				<NavigationProperty Name=""Manager"" Type=""AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"" Partner=""DirectReports"" /> " is 127.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,LoadModelFromString,The length of the statement  "				<NavigationProperty Name=""DirectReports"" Type=""Collection(AstoriaUnitTests.Tests.DerivedProperty.Employee)"" Partner=""Manager"" /> " is 134.
Long Statement,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,LoadModelFromString,The length of the statement  "					<NavigationPropertyBinding Path=""AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"" Target=""People"" /> " is 123.
Long Statement,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The length of the statement  "            ResourceProperty streamInfo1 = new ResourceProperty("Stream1"' ResourcePropertyKind.Stream' ResourceType.GetPrimitiveResourceType(typeof(Stream))); " is 147.
Long Statement,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The length of the statement  "            ResourceProperty streamInfo2 = new ResourceProperty("Stream2"' ResourcePropertyKind.Stream' ResourceType.GetPrimitiveResourceType(typeof(Stream))); " is 147.
Long Statement,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The length of the statement  "            ResourceProperty refStreamInfo1 = new ResourceProperty("RefStream1"' ResourcePropertyKind.Stream' ResourceType.GetPrimitiveResourceType(typeof(Stream))); " is 153.
Long Statement,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The length of the statement  "            ResourceProperty collectionStreamInfo = new ResourceProperty("ColStream"' ResourcePropertyKind.Stream' ResourceType.GetPrimitiveResourceType(typeof(Stream))); " is 158.
Complex Conditional,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,CompareObjects,The conditional expression  "(lv == null && rv != null) || (lv != null && rv == null)"  is complex.
Complex Conditional,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,CompareObjects,The conditional expression  "(lv == null && rv != null) || (lv != null && rv == null)"  is complex.
Complex Conditional,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,CompareObjects,The conditional expression  "(lit.Current == null && rit.Current != null) || (lit.Current != null && rit.Current == null)"  is complex.
Complex Conditional,AstoriaUnitTests.Tests,AssertUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Utils\AssertUtil.cs,RunCatch,The conditional expression  "(ex.GetType() == typeof(System.OutOfMemoryException)) ||                           (ex.GetType() == typeof(System.StackOverflowException)) ||                           (ex.GetType() == typeof(System.Threading.ThreadAbortException)) ||                           (ex.GetType() == typeof(AssertFailedException))"  is complex.
Complex Conditional,AstoriaUnitTests.DataWebClientCSharp,MaterializationTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,GetException,The conditional expression  "(this.isProjection.HasValue || this.typeAttributePresent.HasValue || this.loadProperty.HasValue) &&                      (!this.isProjection.HasValue || this.isProjection == isProjection) &&                      (!this.typeAttributePresent.HasValue || this.typeAttributePresent == typeAttributePresent) &&                      (!this.loadProperty.HasValue || this.loadProperty == loadProperty)"  is complex.
Complex Conditional,AstoriaUnitTests.DataWebClientCSharp.AlternativeNS,BaseballLeague,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\AlternativeContext.cs,Equals,The conditional expression  "(right == null) ||                 (right.ID != left.ID) ||                 (right.Name != left.Name) ||                 (right.ConceptionDate != left.ConceptionDate)"  is complex.
Empty Catch Block,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_PayloadDrivenMaterialization,The method has an empty catch block.
Magic Number,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,ServiceOperationCollectionComplex,The following statement contains a magic number: addresses.Should().HaveCount(2);
Magic Number,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,ServiceOperationCollectionPrimitive,The following statement contains a magic number: numbers.Should().HaveCount(2);
Magic Number,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,ServiceOperationCollectionPrimitive,The following statement contains a magic number: numbers[1].Should().Be(2);
Magic Number,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,NotModifiedTest,The following statement contains a magic number: var odataResponseMessage = new ODataTestMessage()              {                  StatusCode = 304'                  MemoryStream = new MemoryStream(Encoding.UTF8.GetBytes(@""))              };
Magic Number,AstoriaUnitTests.Tests,ClientShortIntegrationUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientShortIntegrationRegressionTests.cs,CreateTransportLayerContext,The following statement contains a magic number: responseMessage.StatusCode = 200;
Magic Number,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,TopBatchReturingODataError,The following statement contains a magic number: responseMessage.StatusCode = 400;
Magic Number,AstoriaUnitTests.Tests,ClientErrorHandlingShortIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientErrorHandlingShortIntegrationTests.cs,CreateResponseMessageWithGetStreamThrowingObjectDisposeException,The following statement contains a magic number: responseMessage.StatusCode = 400;
Magic Number,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,EntityDescriptorShouldHaveServerTypeName,The following statement contains a magic number: RunClientRequest(ctx =>              {                  ctx.Format.UseJson(this.serverModel);                    var query = (DataServiceQuery<TestClientEntityType>)ctx.CreateQuery<TestClientEntityType>("Entities").Take(1);                    var results = (QueryOperationResponse<TestClientEntityType>)query.Execute();                  var entity = results.First();                    var descriptor = ctx.GetEntityDescriptor(entity);                  Assert.IsNotNull(descriptor);                  Assert.AreEqual("Server.Name.Space.EntityType"' descriptor.ServerTypeName);              }'               responsePayload: responseBody'               setupResponse: r =>              {                  r.StatusCode = 200;                  r.SetHeader("Content-Type"' "application/json");              });
Magic Number,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,ClientShouldBeAbleToReadCollectionOfComplexValuesWithoutTypeResolver,The following statement contains a magic number: RunClientRequest(ctx =>              {                  ctx.Format.UseJson(this.serverModel);                    var results = ctx.Execute<TestClientComplexType>(new Uri("http://something.org/")' "GET"' false);                  Assert.AreEqual(1' results.First().Number);              }'              responsePayload: responseBody'              setupResponse: r =>              {                  r.StatusCode = 200;                  r.SetHeader("Content-Type"' "application/json");              });
Magic Number,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,ClientShouldSendTypeAnnotationsForOpenServerPropertiesForAddRelatedObject,The following statement contains a magic number: this.TestClientOpenPropertyPayload((ctx' e) =>              {                  var parent = new TestClientEntityType { ID = 1234 };                  ctx.AttachTo("Parents"' parent);                  ctx.AddRelatedObject(parent' "Navigation"' e);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,TestClientOpenPropertyPayload,The following statement contains a magic number: RunClientRequest(ctx =>              {                  ctx.Format.UseJson(this.serverModel);                  setupClient(ctx' new TestClientEntityType {ID = 12345});                  ctx.SaveChanges();              }'              expectedRequestPayload: expectedRequestPayload'               setupResponse: r =>              {                  r.StatusCode = 204;                   r.SetHeader("Location"' "http://somewhere.org/");               });
Magic Number,AstoriaUnitTests.Tests,JsonLightTypeResolverTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightTypeResolverTests.cs,TestClientOpenPropertyPayload,The following statement contains a magic number: RunClientRequest(ctx =>              {                  ctx.Format.UseJson(this.serverModel);                  setupClient(ctx' new TestClientEntityType {ID = 12345});                  ctx.SaveChanges();              }'              expectedRequestPayload: expectedRequestPayload'               setupResponse: r =>              {                  r.StatusCode = 204;                   r.SetHeader("Location"' "http://somewhere.org/");               });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,SimpleInsertAndUpdate,The following statement contains a magic number: RunClientIntegrationTestWithTrackingOnly(ctx =>              {                  var product = new Product { ID = 12345 };                  ctx.AddObject("Products"' product);                  ctx.SaveChanges();                  var entityDesc = ctx.GetEntityDescriptor(product);                  string expectedIdLink = string.Format("{0}/Products(12345)"' ctx.BaseUri);                  Assert.AreEqual(expectedIdLink' entityDesc.EditLink.AbsoluteUri);                  Assert.AreEqual(expectedIdLink' entityDesc.Identity.AbsoluteUri);                    product = ctx.CreateQuery<Product>("Products").First();                  ctx.UpdateObject(product);                  ctx.SaveChanges();              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,BatchedInsertWithLinks,The following statement contains a magic number: RunClientIntegrationTestWithTrackingOnly(ctx =>                  {                      var customer = new Customer                      {                          ID = 123456'                      };                        var newOrder = new Order                      {                          ID = 7890'                      };                        var existingOrder = ctx.CreateQuery<Order>("Orders").First();                        ctx.ResolveName = t => t.FullName;                        ctx.AddObject("Customers"' customer);                      ctx.AddRelatedObject(customer' "Orders"' newOrder);                      ctx.SetLink(newOrder' "Customer"' customer);                      ctx.AddLink(customer' "Orders"' existingOrder);                        ctx.SaveChanges(SaveChangesOptions.BatchWithSingleChangeset);                  });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,BatchedInsertWithLinks,The following statement contains a magic number: RunClientIntegrationTestWithTrackingOnly(ctx =>                  {                      var customer = new Customer                      {                          ID = 123456'                      };                        var newOrder = new Order                      {                          ID = 7890'                      };                        var existingOrder = ctx.CreateQuery<Order>("Orders").First();                        ctx.ResolveName = t => t.FullName;                        ctx.AddObject("Customers"' customer);                      ctx.AddRelatedObject(customer' "Orders"' newOrder);                      ctx.SetLink(newOrder' "Customer"' customer);                      ctx.AddLink(customer' "Orders"' existingOrder);                        ctx.SaveChanges(SaveChangesOptions.BatchWithSingleChangeset);                  });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,QueryWithExpand,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  // Verify we can do an expand with a couple levels of nesting                  var query = ((DataServiceQuery<Customer>)(ctx.CreateQuery<Customer>("Customers")                      .Where(c => c.ID == 1)))                      .Expand("BestFriend($expand=Orders)");                    var results = query.First();                    // Ensure the expanded entities were materialized                  Assert.IsNotNull(results.BestFriend' "Expected expanded BestFriend to be non-null.");                  Assert.IsNotNull(results.BestFriend.Orders' "Expected expanded BestFriend/Orders to be non-null.");                  Assert.AreEqual(2' results.BestFriend.Orders.Count' "Unexpected number of Orders on the expanded BestFriend.");              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,V1ProjectionWithSingleKeyProperty,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var query = ctx.CreateQuery<Order>("Orders").Where(c => c.ID == 100).Select(o => o.ID);                  var projection = query.Single();                  Assert.AreEqual(100' projection);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,V1ProjectionWithSingleKeyProperty,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var query = ctx.CreateQuery<Order>("Orders").Where(c => c.ID == 100).Select(o => o.ID);                  var projection = query.Single();                  Assert.AreEqual(100' projection);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,V1ProjectionWithSingleNonKeyProperty,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var query = ctx.CreateQuery<Order>("Orders").Where(c => c.ID == 100).Select(o => o.DollarAmount);                  var projection = query.Single();                  Assert.IsTrue(projection > 0' "Expected a non-zero DollarAmount in projection query results.");              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,V1ProjectionWithSingleNavigationProperty,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var query = ctx.CreateQuery<Order>("Orders").Where(c => c.ID == 100).Select(o => o.Customer);                  var projection = query.Single();                  Assert.IsNotNull(projection.Name' "Expected Customer.Name to have a value in projection query results.");              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoAnonymousTypeWithKey,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new { o.ID' o.CurrencyAmount' o.DollarAmount });                  Assert.AreEqual(100' projection.ID);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoAnonymousTypeWithNestedProjectionAndBothParentAndChildKey,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new { o.ID' o.CurrencyAmount' o.DollarAmount' CustomerID = o.Customer.ID' o.Customer.Address.City });                  Assert.AreEqual(100' projection.ID);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithKey,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { ID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount });                  Assert.AreEqual(100' projection.ID);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoEntityWithNestedProjectionAndBothParentAndChildKey,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new Order() { ID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' Customer = new Customer() { ID = o.Customer.ID' Address = o.Customer.Address }});                  Assert.AreEqual(100' projection.ID);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithKey,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { OrderID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount });                  Assert.AreEqual(100' projection.OrderID);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ProjectionIntoComplexTypeWithNestedProjectionAndBothParentAndChildKey,The following statement contains a magic number: RunClientIntegrationTestWithBothTrackingAndNoTracking(ctx =>              {                  var projection = this.ExecuteQueryWithProjectionOnSingleOrder(ctx' o => new ProjectionComplexType() { OrderID = o.ID' CurrencyAmount = o.CurrencyAmount' DollarAmount = o.DollarAmount' CustomerID = o.Customer.ID' CustomerCity = o.Customer.Address.City });                  Assert.AreEqual(100' projection.OrderID);              });
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,ExecuteQueryWithProjectionOnSingleOrder,The following statement contains a magic number: var query = ctx.CreateQuery<Order>("Orders").Where(o => o.ID == 100).Select(projection);
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,RunClientIntegrationTestWithPagingAndBothTrackingAndNoTracking,The following statement contains a magic number: Action<DataServiceConfiguration' Type> pageSizeCustomizer = (config' type) => config.SetEntitySetPageSize("*"' 2);
Magic Number,AstoriaUnitTests.Tests,JsonLightIntegrationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\JsonLightIntegrationTests.cs,RunClientIntegrationTestWithPagingAndTrackingOnly,The following statement contains a magic number: Action<DataServiceConfiguration' Type> pageSizeCustomizer = (config' type) => config.SetEntitySetPageSize("*"' 2);
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterCollectionWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from e in values                          where e.CollectionOfInt.Any()                          select e'                      url = "Values?$filter=CollectionOfInt/any()"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any() && e.ID == 0                          select e'                      url = "Values?$filter=CollectionOfInt/any() and ID eq 0"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv == 2 )                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv eq 2)"                  }'                  new{                      q = from e in values                          where e.CollectionOfInt.Any(mv => mv > e.ID ) && e.ID <100                          select e'                      url = "Values?$filter=CollectionOfInt/any(mv:mv gt $it/ID) and ID lt 100"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.Any(mv => e.CollectionOfString.All(s => s.StartsWith(mv.Name)) || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/any(mv:$it/CollectionOfString/all(s:startswith(s'mv/Name)) or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.StartsWith("a") || e.ID <100) && e.ID > 50                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:startswith(mv/Name''a') or $it/ID lt 100) and ID gt 50"                  }'                  new{                      q = from e in values                          where e.CollectionOfComplexType.All(mv => mv.Name.Contains("a") || mv.Numbers.All(n=>n % 2 == 0)) && e.ID/5 == 3                          select e'                      url = "Values?$filter=CollectionOfComplexType/all(mv:contains(mv/Name''a') or mv/Numbers/all(n:n mod 2 eq 0)) and ID div 5 eq 3"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from m in movies                          where m.Awards.Any()                          select m'                      url = "Movies?$filter=Awards/any()"                  }'                  new{                      q = from m in movies                          where m.Awards.Any() && m.ID == 0                          select m'                      url = "Movies?$filter=Awards/any() and ID eq 0"                  }'                  new{                      q = from m in movies                          where m.Awards.Any(a => a.ID == 2)                          select m'                      url = "Movies?$filter=Awards/any(a:a/ID eq 2)"                  }'                  new{                      q = from m in movies                          where m.Awards.Any(a => a.ID == m.ID)                          select m'                      url = "Movies?$filter=Awards/any(a:a/ID eq $it/ID)"                  }'                  new{                      q = from m in movies                          where m.Director.Awards.All(a => a.Movie == m)                          select m'                      url = "Movies?$filter=Director/Awards/all(a:a/Movie eq $it)"                  }'                  new{                      q = from m in movies                          where m.Actors.Any(a => a.DirectedMovies.All(dm => dm == m))                          select m'                      url = "Movies?$filter=Actors/any(a:a/DirectedMovies/all(dm:dm eq $it))"                  }'                  new{                      q = from m in movies                          where m.Actors.Any(a => a.DirectedMovies.All(dm => dm == m && m.Awards.All(aw=>aw.Movie.Director == dm.Director)))                          select m'                      url = "Movies?$filter=Actors/any(a:a/DirectedMovies/all(dm:dm eq $it and $it/Awards/all(aw:aw/Movie/Director eq dm/Director)))"                  }'                  new{                      q = from m in movies                          where m.Actors.Any(a => a is MegaStar)                          select m'                      url = "Movies?$filter=Actors/any(a:isof(a' 'NS.MegaStar'))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => aw.Movie.Director is MegaStar)                          select m'                      url = "Movies?$filter=Awards/all(aw:isof(aw/Movie/Director' 'NS.MegaStar'))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => m.Director is MegaStar && !aw.Movie.Actors.Any(a=> a is MegaStar))                          select m'                      url = "Movies?$filter=Awards/all(aw:isof($it/Director' 'NS.MegaStar') and not aw/Movie/Actors/any(a:isof(a' 'NS.MegaStar')))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => m.Director.FirstName.StartsWith("Hus") && !aw.Movie.Actors.Any(a=> a is MegaStar))                          select m'                      url = "Movies?$filter=Awards/all(aw:startswith($it/Director/FirstName''Hus') and not aw/Movie/Actors/any(a:isof(a' 'NS.MegaStar')))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => m.Director is MegaStar && ((MegaStar)m.Director).MegaStartProp.StartsWith("Hus") && aw.Recepient == m.Director)                          select m'                      url = "Movies?$filter=Awards/all(aw:isof($it/Director' 'NS.MegaStar') and startswith(cast($it/Director''NS.MegaStar')/MegaStartProp''Hus') and aw/Recepient eq $it/Director)"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().Any()                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/any()"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().Any( ms=> ms.Awards.Any())                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/any(ms:ms/Awards/any())"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any())                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any())"                  }'                  new{                      q = from m in movies                          where m.Actors.All(a=> a is MegaStar && a.Awards.Any())                          select m'                      url = "Movies?$filter=Actors/all(a:isof(a' 'NS.MegaStar') and a/Awards/any())"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any(a=> a.AwardDate > new DateTime(0' DateTimeKind.Utc) && ms.DirectedMovies.Any() && m.Director == ms))                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any(a:a/AwardDate gt 0001-01-01T00:00:00Z and ms/DirectedMovies/any() and $it/Director eq ms))"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any(a=> a.AwardDate > new DateTime(0' DateTimeKind.Utc) && ms.DirectedMovies.Any(dm=> dm.Awards.All(aw=> aw.Recepient.FirstName == ms.FirstName )) && m.Director == ms))                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any(a:a/AwardDate gt 0001-01-01T00:00:00Z and ms/DirectedMovies/any(dm:dm/Awards/all(aw:aw/Recepient/FirstName eq ms/FirstName)) and $it/Director eq ms))"                  }'                  new{                      q = from m in movies                          where m.Awards.Any(aw => aw.Recepient is MegaStar && m.Actors.OfType<MegaStar>().All(a=>a.DateOfBirth > new DateTime(2010' 1' 1' 0' 0' 0' DateTimeKind.Utc)))                          select m'                      url = "Movies?$filter=Awards/any(aw:isof(aw/Recepient' 'NS.MegaStar') and $it/Actors/NS.MegaStar/all(a:a/DateOfBirth gt 2010-01-01T00:00:00Z))"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,FilterNavigationWithAnyAll,The following statement contains a magic number: var testCases = new[]              {                  new{                      q = from m in movies                          where m.Awards.Any()                          select m'                      url = "Movies?$filter=Awards/any()"                  }'                  new{                      q = from m in movies                          where m.Awards.Any() && m.ID == 0                          select m'                      url = "Movies?$filter=Awards/any() and ID eq 0"                  }'                  new{                      q = from m in movies                          where m.Awards.Any(a => a.ID == 2)                          select m'                      url = "Movies?$filter=Awards/any(a:a/ID eq 2)"                  }'                  new{                      q = from m in movies                          where m.Awards.Any(a => a.ID == m.ID)                          select m'                      url = "Movies?$filter=Awards/any(a:a/ID eq $it/ID)"                  }'                  new{                      q = from m in movies                          where m.Director.Awards.All(a => a.Movie == m)                          select m'                      url = "Movies?$filter=Director/Awards/all(a:a/Movie eq $it)"                  }'                  new{                      q = from m in movies                          where m.Actors.Any(a => a.DirectedMovies.All(dm => dm == m))                          select m'                      url = "Movies?$filter=Actors/any(a:a/DirectedMovies/all(dm:dm eq $it))"                  }'                  new{                      q = from m in movies                          where m.Actors.Any(a => a.DirectedMovies.All(dm => dm == m && m.Awards.All(aw=>aw.Movie.Director == dm.Director)))                          select m'                      url = "Movies?$filter=Actors/any(a:a/DirectedMovies/all(dm:dm eq $it and $it/Awards/all(aw:aw/Movie/Director eq dm/Director)))"                  }'                  new{                      q = from m in movies                          where m.Actors.Any(a => a is MegaStar)                          select m'                      url = "Movies?$filter=Actors/any(a:isof(a' 'NS.MegaStar'))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => aw.Movie.Director is MegaStar)                          select m'                      url = "Movies?$filter=Awards/all(aw:isof(aw/Movie/Director' 'NS.MegaStar'))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => m.Director is MegaStar && !aw.Movie.Actors.Any(a=> a is MegaStar))                          select m'                      url = "Movies?$filter=Awards/all(aw:isof($it/Director' 'NS.MegaStar') and not aw/Movie/Actors/any(a:isof(a' 'NS.MegaStar')))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => m.Director.FirstName.StartsWith("Hus") && !aw.Movie.Actors.Any(a=> a is MegaStar))                          select m'                      url = "Movies?$filter=Awards/all(aw:startswith($it/Director/FirstName''Hus') and not aw/Movie/Actors/any(a:isof(a' 'NS.MegaStar')))"                  }'                  new{                      q = from m in movies                          where m.Awards.All(aw => m.Director is MegaStar && ((MegaStar)m.Director).MegaStartProp.StartsWith("Hus") && aw.Recepient == m.Director)                          select m'                      url = "Movies?$filter=Awards/all(aw:isof($it/Director' 'NS.MegaStar') and startswith(cast($it/Director''NS.MegaStar')/MegaStartProp''Hus') and aw/Recepient eq $it/Director)"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().Any()                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/any()"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().Any( ms=> ms.Awards.Any())                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/any(ms:ms/Awards/any())"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any())                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any())"                  }'                  new{                      q = from m in movies                          where m.Actors.All(a=> a is MegaStar && a.Awards.Any())                          select m'                      url = "Movies?$filter=Actors/all(a:isof(a' 'NS.MegaStar') and a/Awards/any())"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any(a=> a.AwardDate > new DateTime(0' DateTimeKind.Utc) && ms.DirectedMovies.Any() && m.Director == ms))                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any(a:a/AwardDate gt 0001-01-01T00:00:00Z and ms/DirectedMovies/any() and $it/Director eq ms))"                  }'                  new{                      q = from m in movies                          where m.Actors.OfType<MegaStar>().All( ms=> ms.Awards.Any(a=> a.AwardDate > new DateTime(0' DateTimeKind.Utc) && ms.DirectedMovies.Any(dm=> dm.Awards.All(aw=> aw.Recepient.FirstName == ms.FirstName )) && m.Director == ms))                          select m'                      url = "Movies?$filter=Actors/NS.MegaStar/all(ms:ms/Awards/any(a:a/AwardDate gt 0001-01-01T00:00:00Z and ms/DirectedMovies/any(dm:dm/Awards/all(aw:aw/Recepient/FirstName eq ms/FirstName)) and $it/Director eq ms))"                  }'                  new{                      q = from m in movies                          where m.Awards.Any(aw => aw.Recepient is MegaStar && m.Actors.OfType<MegaStar>().All(a=>a.DateOfBirth > new DateTime(2010' 1' 1' 0' 0' 0' DateTimeKind.Utc)))                          select m'                      url = "Movies?$filter=Awards/any(aw:isof(aw/Recepient' 'NS.MegaStar') and $it/Actors/NS.MegaStar/all(a:a/DateOfBirth gt 2010-01-01T00:00:00Z))"                  }'              };
Magic Number,AstoriaUnitTests.Tests,LinqAnyAllTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqAnyAllTests.cs,AnyAllClientVersionTests,The following statement contains a magic number: TestUtil.RunCombinations(ServiceVersion.DataServiceProtocolVersions' maxProtocolVersion =>              {                  DataServiceContext ctx = new DataServiceContext(new Uri("http://localhost")' maxProtocolVersion);                    var movies = ctx.CreateQuery<Movie>("Movies");                  var testCases = new[]                  {                      new{                          q = from m in movies                              where m.Awards.Any()                              select m'                          ErrorMessage = "Error translating Linq expression to URI: The method 'Any' is not supported when MaxProtocolVersion is less than '4.0'."                      }'                      new{                          q = from m in movies                              where m.Awards.Any(a => a.ID == 2)                              select m'                          ErrorMessage = "Error translating Linq expression to URI: The method 'Any' is not supported when MaxProtocolVersion is less than '4.0'."                      }'                      new{                          q = from m in movies                              where m.Titles.Any(t => t.Contains("Space"))                              select m'                          ErrorMessage = "Error translating Linq expression to URI: The method 'Any' is not supported when MaxProtocolVersion is less than '4.0'."                      }'                      new{                          q = from m in movies                              where m.Actors.OfType<MegaStar>().Any()                              select m'                          ErrorMessage = "Error translating Linq expression to URI: The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'."                      }'                      new{                          q = from m in movies                              where m.Director.Awards.All(a => a.Movie == m)                              select m'                          ErrorMessage = "Error translating Linq expression to URI: The method 'All' is not supported when MaxProtocolVersion is less than '4.0'."                      }'                  };                    TestUtil.RunCombinations(testCases' testCase =>                  {                      string qstr = testCase.q.ToString();                      if (maxProtocolVersion < ODataProtocolVersion.V4)                      {                          Assert.AreEqual(testCase.ErrorMessage' qstr' "ErrorMessage == qstr");                      }                      else                      {                          Assert.IsTrue(qstr.Contains("any(") || qstr.Contains("all(")' "qstr should contain any(...) or all(...)");                      }                  });              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The following statement contains a magic number: TestUtil.RunCombinations(new[] {                  new { query = ctx.Employees.Where(e => e.Employees2.EmployeeID == 2)' uri = "Employees?$filter=Employees2/EmployeeID eq 2" }'                  new { query = ctx.Employees.Where(e => e.EmployeeID == 2)' uri = "Employees(2)" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.Employees2.EmployeeID == 1 select e' uri = "Employees(2)/Employees1?$filter=Employees2/EmployeeID eq 1" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.EmployeeID == 1 select e' uri = "Employees(2)/Employees1(1)" }              }' value =>              {                  string actual = value.query.ToString();                  Assert.AreEqual("http://localhost/TheTest/" + value.uri' actual);              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The following statement contains a magic number: TestUtil.RunCombinations(new[] {                  new { query = ctx.Employees.Where(e => e.Employees2.EmployeeID == 2)' uri = "Employees?$filter=Employees2/EmployeeID eq 2" }'                  new { query = ctx.Employees.Where(e => e.EmployeeID == 2)' uri = "Employees(2)" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.Employees2.EmployeeID == 1 select e' uri = "Employees(2)/Employees1?$filter=Employees2/EmployeeID eq 1" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.EmployeeID == 1 select e' uri = "Employees(2)/Employees1(1)" }              }' value =>              {                  string actual = value.query.ToString();                  Assert.AreEqual("http://localhost/TheTest/" + value.uri' actual);              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The following statement contains a magic number: TestUtil.RunCombinations(new[] {                  new { query = ctx.Employees.Where(e => e.Employees2.EmployeeID == 2)' uri = "Employees?$filter=Employees2/EmployeeID eq 2" }'                  new { query = ctx.Employees.Where(e => e.EmployeeID == 2)' uri = "Employees(2)" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.Employees2.EmployeeID == 1 select e' uri = "Employees(2)/Employees1?$filter=Employees2/EmployeeID eq 1" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.EmployeeID == 1 select e' uri = "Employees(2)/Employees1(1)" }              }' value =>              {                  string actual = value.query.ToString();                  Assert.AreEqual("http://localhost/TheTest/" + value.uri' actual);              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ALinqKeyPropertyPredicate,The following statement contains a magic number: TestUtil.RunCombinations(new[] {                  new { query = ctx.Employees.Where(e => e.Employees2.EmployeeID == 2)' uri = "Employees?$filter=Employees2/EmployeeID eq 2" }'                  new { query = ctx.Employees.Where(e => e.EmployeeID == 2)' uri = "Employees(2)" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.Employees2.EmployeeID == 1 select e' uri = "Employees(2)/Employees1?$filter=Employees2/EmployeeID eq 1" }'                  new { query = from c in ctx.Employees where c.EmployeeID == 2 from e in c.Employees1 where e.EmployeeID == 1 select e' uri = "Employees(2)/Employees1(1)" }              }' value =>              {                  string actual = value.query.ToString();                  Assert.AreEqual("http://localhost/TheTest/" + value.uri' actual);              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The following statement contains a magic number: IQueryable[] testQueries = new IQueryable[] {                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer.Reference'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Reference.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Reference }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Member' outer.ID' Nested = outer.Reference.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  where secondInner.ID == 2                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner.Member' secondInner }'              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The following statement contains a magic number: IQueryable[] testQueries = new IQueryable[] {                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer.Reference'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Reference.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Reference }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Member' outer.ID' Nested = outer.Reference.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  where secondInner.ID == 2                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner.Member' secondInner }'              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The following statement contains a magic number: IQueryable[] testQueries = new IQueryable[] {                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer.Reference'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Reference.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Reference }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Member' outer.ID' Nested = outer.Reference.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  where secondInner.ID == 2                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner.Member' secondInner }'              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The following statement contains a magic number: IQueryable[] testQueries = new IQueryable[] {                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer.Reference'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Reference.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Reference }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Member' outer.ID' Nested = outer.Reference.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  where secondInner.ID == 2                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner.Member' secondInner }'              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SelectManyInvalidProjectionWithSelfReferencingType_CSharp,The following statement contains a magic number: IQueryable[] testQueries = new IQueryable[] {                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select outer.Reference'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select outer.Reference.Member'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Reference }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  where inner.ID == 2                  select new { outer.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from inner in outer.Collection                  orderby inner.ID                  select new { outer.Member' outer.ID' Nested = outer.Reference.Reference.Member }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  where secondInner.ID == 2                  select new { firstInner }'                    from outer in baseQuery                  where outer.ID == 1                  from firstInner in outer.Collection                  where firstInner.ID == 1                  from secondInner in firstInner.DSC                  orderby secondInner.ID                  select new { firstInner.Member' secondInner }'              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestDataFailedToCreateWhenSaveChangeOptionsContinueOnErrorSet,The following statement contains a magic number: TestUtil.RunCombinations(new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.ContinueOnError }'              (options) =>              {                  DataServiceContext context = new DataServiceContext(new Uri("http://localhost/TheTest.svc")' ODataProtocolVersion.V4);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    Customer c = new Customer() { ID = 1' Name = "Foo" };                  context.AttachTo("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceRequestException ex = TestUtil.RunCatching<DataServiceRequestException>(() => { context.SaveChanges(options); });                  TestUtil.AssertExceptionExpected(ex' true);                  InvalidOperationException innerEx = ex.InnerException as InvalidOperationException;                  Assert.IsNotNull(innerEx' "Expected invalid operation exception in the inner exception");                  Assert.AreEqual(DataServicesClientResourceUtil.GetString("Context_SetSaveStreamWithoutEditMediaLink")' innerEx.Message);              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestDataFailedToCreateWhenSaveChangeOptionsContinueOnErrorSet,The following statement contains a magic number: TestUtil.RunCombinations(new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.ContinueOnError }'              (options) =>              {                  DataServiceContext context = new DataServiceContext(new Uri("http://localhost/TheTest.svc")' ODataProtocolVersion.V4);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    Customer c = new Customer() { ID = 1' Name = "Foo" };                  context.AttachTo("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceRequestException ex = TestUtil.RunCatching<DataServiceRequestException>(() => { context.SaveChanges(options); });                  TestUtil.AssertExceptionExpected(ex' true);                  InvalidOperationException innerEx = ex.InnerException as InvalidOperationException;                  Assert.IsNotNull(innerEx' "Expected invalid operation exception in the inner exception");                  Assert.AreEqual(DataServicesClientResourceUtil.GetString("Context_SetSaveStreamWithoutEditMediaLink")' innerEx.Message);              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The following statement contains a magic number: TestUtil.RunCombinations((IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))' UnitTestsUtil.BooleanValues' (mode' closeStream) =>              {                  var requestMessage = new ODataTestMessage();                  Func<IODataRequestMessage> getRequestMessage = () => requestMessage;                    int i = 0;                  Func<IODataResponseMessage> getResponseMessage = () =>                  {                      var responseMessage = new ODataTestMessage();                      if (i == 1)                      {                          // Verify the second request was a PATCH request to the MLE                          Assert.AreEqual(requestMessage.Method' "PATCH"' "The second request must be a PATCH request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"' "The request uri of the second request must be the value of the location header");                          Assert.AreEqual(requestMessage.GetHeader("If-Match")' "W/\"randometag\""' "the If-Match header must be specified in the second request");                          responseMessage.StatusCode = 200;                      }                      else if (i == 0)                      {                          // Verify the first request was a POST request                          Assert.AreEqual(requestMessage.Method' "POST"' "The first request must be a POST request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/Customers"' "The first request must be a POST to customers");                            responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)");                          responseMessage.SetHeader("OData-EntityId"' "http://idservice/identity");                          responseMessage.SetHeader("ETag"' "W/\"randometag\"");                          responseMessage.StatusCode = 200;                      }                        i++;                      return responseMessage;                  };                    var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    CustomerWithStream c = new CustomerWithStream() { ID = 1' Name = "Foo" };                  context.AddObject("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' closeStream' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceContextTestUtil.SaveChanges(context' SaveChangesOptions.None' mode);                  Assert.AreEqual(i' 2' "Only 2 request should have been made");              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The following statement contains a magic number: TestUtil.RunCombinations((IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))' UnitTestsUtil.BooleanValues' (mode' closeStream) =>              {                  var requestMessage = new ODataTestMessage();                  Func<IODataRequestMessage> getRequestMessage = () => requestMessage;                    int i = 0;                  Func<IODataResponseMessage> getResponseMessage = () =>                  {                      var responseMessage = new ODataTestMessage();                      if (i == 1)                      {                          // Verify the second request was a PATCH request to the MLE                          Assert.AreEqual(requestMessage.Method' "PATCH"' "The second request must be a PATCH request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"' "The request uri of the second request must be the value of the location header");                          Assert.AreEqual(requestMessage.GetHeader("If-Match")' "W/\"randometag\""' "the If-Match header must be specified in the second request");                          responseMessage.StatusCode = 200;                      }                      else if (i == 0)                      {                          // Verify the first request was a POST request                          Assert.AreEqual(requestMessage.Method' "POST"' "The first request must be a POST request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/Customers"' "The first request must be a POST to customers");                            responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)");                          responseMessage.SetHeader("OData-EntityId"' "http://idservice/identity");                          responseMessage.SetHeader("ETag"' "W/\"randometag\"");                          responseMessage.StatusCode = 200;                      }                        i++;                      return responseMessage;                  };                    var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    CustomerWithStream c = new CustomerWithStream() { ID = 1' Name = "Foo" };                  context.AddObject("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' closeStream' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceContextTestUtil.SaveChanges(context' SaveChangesOptions.None' mode);                  Assert.AreEqual(i' 2' "Only 2 request should have been made");              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The following statement contains a magic number: TestUtil.RunCombinations((IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))' UnitTestsUtil.BooleanValues' (mode' closeStream) =>              {                  var requestMessage = new ODataTestMessage();                  Func<IODataRequestMessage> getRequestMessage = () => requestMessage;                    int i = 0;                  Func<IODataResponseMessage> getResponseMessage = () =>                  {                      var responseMessage = new ODataTestMessage();                      if (i == 1)                      {                          // Verify the second request was a PATCH request to the MLE                          Assert.AreEqual(requestMessage.Method' "PATCH"' "The second request must be a PATCH request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"' "The request uri of the second request must be the value of the location header");                          Assert.AreEqual(requestMessage.GetHeader("If-Match")' "W/\"randometag\""' "the If-Match header must be specified in the second request");                          responseMessage.StatusCode = 200;                      }                      else if (i == 0)                      {                          // Verify the first request was a POST request                          Assert.AreEqual(requestMessage.Method' "POST"' "The first request must be a POST request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/Customers"' "The first request must be a POST to customers");                            responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)");                          responseMessage.SetHeader("OData-EntityId"' "http://idservice/identity");                          responseMessage.SetHeader("ETag"' "W/\"randometag\"");                          responseMessage.StatusCode = 200;                      }                        i++;                      return responseMessage;                  };                    var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    CustomerWithStream c = new CustomerWithStream() { ID = 1' Name = "Foo" };                  context.AddObject("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' closeStream' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceContextTestUtil.SaveChanges(context' SaveChangesOptions.None' mode);                  Assert.AreEqual(i' 2' "Only 2 request should have been made");              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The following statement contains a magic number: TestUtil.RunCombinations((IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))' UnitTestsUtil.BooleanValues' (mode' closeStream) =>              {                  var requestMessage = new ODataTestMessage();                  Func<IODataRequestMessage> getRequestMessage = () => requestMessage;                    int i = 0;                  Func<IODataResponseMessage> getResponseMessage = () =>                  {                      var responseMessage = new ODataTestMessage();                      if (i == 1)                      {                          // Verify the second request was a PATCH request to the MLE                          Assert.AreEqual(requestMessage.Method' "PATCH"' "The second request must be a PATCH request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"' "The request uri of the second request must be the value of the location header");                          Assert.AreEqual(requestMessage.GetHeader("If-Match")' "W/\"randometag\""' "the If-Match header must be specified in the second request");                          responseMessage.StatusCode = 200;                      }                      else if (i == 0)                      {                          // Verify the first request was a POST request                          Assert.AreEqual(requestMessage.Method' "POST"' "The first request must be a POST request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/Customers"' "The first request must be a POST to customers");                            responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)");                          responseMessage.SetHeader("OData-EntityId"' "http://idservice/identity");                          responseMessage.SetHeader("ETag"' "W/\"randometag\"");                          responseMessage.StatusCode = 200;                      }                        i++;                      return responseMessage;                  };                    var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    CustomerWithStream c = new CustomerWithStream() { ID = 1' Name = "Foo" };                  context.AddObject("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' closeStream' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceContextTestUtil.SaveChanges(context' SaveChangesOptions.None' mode);                  Assert.AreEqual(i' 2' "Only 2 request should have been made");              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientReadEtagOnlyIfStatusCode201,The following statement contains a magic number: TestUtil.RunCombinations((IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))' UnitTestsUtil.BooleanValues' (mode' closeStream) =>              {                  var requestMessage = new ODataTestMessage();                  Func<IODataRequestMessage> getRequestMessage = () => requestMessage;                    int i = 0;                  Func<IODataResponseMessage> getResponseMessage = () =>                  {                      var responseMessage = new ODataTestMessage();                      if (i == 1)                      {                          // Verify the second request was a PATCH request to the MLE                          Assert.AreEqual(requestMessage.Method' "PATCH"' "The second request must be a PATCH request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)"' "The request uri of the second request must be the value of the location header");                          Assert.AreEqual(requestMessage.GetHeader("If-Match")' "W/\"randometag\""' "the If-Match header must be specified in the second request");                          responseMessage.StatusCode = 200;                      }                      else if (i == 0)                      {                          // Verify the first request was a POST request                          Assert.AreEqual(requestMessage.Method' "POST"' "The first request must be a POST request");                          Assert.AreEqual(requestMessage.Url' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/Customers"' "The first request must be a POST to customers");                            responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri + "/location/Customers(1)");                          responseMessage.SetHeader("OData-EntityId"' "http://idservice/identity");                          responseMessage.SetHeader("ETag"' "W/\"randometag\"");                          responseMessage.StatusCode = 200;                      }                        i++;                      return responseMessage;                  };                    var context = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage);                  context.AddAndUpdateResponsePreference = DataServiceResponsePreference.NoContent;                    CustomerWithStream c = new CustomerWithStream() { ID = 1' Name = "Foo" };                  context.AddObject("Customers"' c);                  MemoryStream stream = new MemoryStream(new byte[] { 0' 1' 2' 3 });                  context.SetSaveStream(c' stream' closeStream' new DataServiceRequestArgs() { ContentType = "image/bmp" });                    DataServiceContextTestUtil.SaveChanges(context' SaveChangesOptions.None' mode);                  Assert.AreEqual(i' 2' "Only 2 request should have been made");              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SetSaveStreamOnMultipleObjects,The following statement contains a magic number: MemoryStream stream1 = new MemoryStream(new byte[] { 0' 1' 2' 3 });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SetSaveStreamOnMultipleObjects,The following statement contains a magic number: MemoryStream stream1 = new MemoryStream(new byte[] { 0' 1' 2' 3 });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SetSaveStreamOnMultipleObjects,The following statement contains a magic number: MemoryStream stream2 = new MemoryStream(new byte[] { 0' 1' 2' 3 });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SetSaveStreamOnMultipleObjects,The following statement contains a magic number: MemoryStream stream2 = new MemoryStream(new byte[] { 0' 1' 2' 3 });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SetSaveStreamOnMultipleObjects,The following statement contains a magic number: Assert.AreEqual(2' context.Entities.Count);
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The following statement contains a magic number: TestUtil.RunCombinations(                      // Dimension1: all save change option values                      (IEnumerable<SaveChangesOptions>)Enum.GetValues(typeof(SaveChangesOptions))'                      (IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))'                      UnitTestsUtil.BooleanValues'                      (option' mode' clientSideError) =>                      {                            DataServiceContext ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1000 });                          if (clientSideError)                          {                              // to generate a client side error' we attach an entity and set its MLE                              // if we support this scenario in the future' replace this with anything that throws in the CreateNextRequest() path                              CustomDataClient.Product p = new CustomDataClient.Product() { ID = 0 };                              ctx.AttachTo("Products"' p);                              ctx.SetSaveStream(p' new MemoryStream(new byte[] { 0 })' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                          }                          else                          {                              ctx.AddObject("Orders"' new CustomDataClient.Order() { ID = 1010 });                          }                          ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1001 });                            TestService4.ChangeCounter = 0;                          Exception ex = TestUtil.RunCatching(() => DataServiceContextTestUtil.SaveChanges(ctx' option' mode));                          Assert.IsNotNull(ex);                            if (clientSideError)                          {                              // assert that the error is actually on the client side:                              while (ex.InnerException != null)                              {                                  ex = ex.InnerException;                              }                                // batch and MLE = not supported' rest = IOE because no edit link                              Assert.AreEqual(ex.GetType()' (option == SaveChangesOptions.BatchWithSingleChangeset || option == SaveChangesOptions.BatchWithIndependentOperations) ? typeof(NotSupportedException) : typeof(InvalidOperationException));                          }                            int expectedCallCount;                          if (option == SaveChangesOptions.BatchWithSingleChangeset) expectedCallCount = clientSideError ? 0 : 1;    // batch always fails as a whole                          else if (option == SaveChangesOptions.BatchWithIndependentOperations) expectedCallCount = clientSideError ? 0 : 2;    // Independent  batch always fails as a whole                          else if (option == SaveChangesOptions.PostOnlySetProperties) expectedCallCount = 0;                          else if (option == SaveChangesOptions.ContinueOnError || (mode != SaveChangesMode.Synchronous && !clientSideError)) expectedCallCount = 2;  // V2 behavior: async code path always continue on server-error                          else expectedCallCount = 1;                            Assert.AreEqual(expectedCallCount' TestService4.ChangeCounter);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The following statement contains a magic number: TestUtil.RunCombinations(                      // Dimension1: all save change option values                      (IEnumerable<SaveChangesOptions>)Enum.GetValues(typeof(SaveChangesOptions))'                      (IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))'                      UnitTestsUtil.BooleanValues'                      (option' mode' clientSideError) =>                      {                            DataServiceContext ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1000 });                          if (clientSideError)                          {                              // to generate a client side error' we attach an entity and set its MLE                              // if we support this scenario in the future' replace this with anything that throws in the CreateNextRequest() path                              CustomDataClient.Product p = new CustomDataClient.Product() { ID = 0 };                              ctx.AttachTo("Products"' p);                              ctx.SetSaveStream(p' new MemoryStream(new byte[] { 0 })' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                          }                          else                          {                              ctx.AddObject("Orders"' new CustomDataClient.Order() { ID = 1010 });                          }                          ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1001 });                            TestService4.ChangeCounter = 0;                          Exception ex = TestUtil.RunCatching(() => DataServiceContextTestUtil.SaveChanges(ctx' option' mode));                          Assert.IsNotNull(ex);                            if (clientSideError)                          {                              // assert that the error is actually on the client side:                              while (ex.InnerException != null)                              {                                  ex = ex.InnerException;                              }                                // batch and MLE = not supported' rest = IOE because no edit link                              Assert.AreEqual(ex.GetType()' (option == SaveChangesOptions.BatchWithSingleChangeset || option == SaveChangesOptions.BatchWithIndependentOperations) ? typeof(NotSupportedException) : typeof(InvalidOperationException));                          }                            int expectedCallCount;                          if (option == SaveChangesOptions.BatchWithSingleChangeset) expectedCallCount = clientSideError ? 0 : 1;    // batch always fails as a whole                          else if (option == SaveChangesOptions.BatchWithIndependentOperations) expectedCallCount = clientSideError ? 0 : 2;    // Independent  batch always fails as a whole                          else if (option == SaveChangesOptions.PostOnlySetProperties) expectedCallCount = 0;                          else if (option == SaveChangesOptions.ContinueOnError || (mode != SaveChangesMode.Synchronous && !clientSideError)) expectedCallCount = 2;  // V2 behavior: async code path always continue on server-error                          else expectedCallCount = 1;                            Assert.AreEqual(expectedCallCount' TestService4.ChangeCounter);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The following statement contains a magic number: TestUtil.RunCombinations(                      // Dimension1: all save change option values                      (IEnumerable<SaveChangesOptions>)Enum.GetValues(typeof(SaveChangesOptions))'                      (IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))'                      UnitTestsUtil.BooleanValues'                      (option' mode' clientSideError) =>                      {                            DataServiceContext ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1000 });                          if (clientSideError)                          {                              // to generate a client side error' we attach an entity and set its MLE                              // if we support this scenario in the future' replace this with anything that throws in the CreateNextRequest() path                              CustomDataClient.Product p = new CustomDataClient.Product() { ID = 0 };                              ctx.AttachTo("Products"' p);                              ctx.SetSaveStream(p' new MemoryStream(new byte[] { 0 })' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                          }                          else                          {                              ctx.AddObject("Orders"' new CustomDataClient.Order() { ID = 1010 });                          }                          ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1001 });                            TestService4.ChangeCounter = 0;                          Exception ex = TestUtil.RunCatching(() => DataServiceContextTestUtil.SaveChanges(ctx' option' mode));                          Assert.IsNotNull(ex);                            if (clientSideError)                          {                              // assert that the error is actually on the client side:                              while (ex.InnerException != null)                              {                                  ex = ex.InnerException;                              }                                // batch and MLE = not supported' rest = IOE because no edit link                              Assert.AreEqual(ex.GetType()' (option == SaveChangesOptions.BatchWithSingleChangeset || option == SaveChangesOptions.BatchWithIndependentOperations) ? typeof(NotSupportedException) : typeof(InvalidOperationException));                          }                            int expectedCallCount;                          if (option == SaveChangesOptions.BatchWithSingleChangeset) expectedCallCount = clientSideError ? 0 : 1;    // batch always fails as a whole                          else if (option == SaveChangesOptions.BatchWithIndependentOperations) expectedCallCount = clientSideError ? 0 : 2;    // Independent  batch always fails as a whole                          else if (option == SaveChangesOptions.PostOnlySetProperties) expectedCallCount = 0;                          else if (option == SaveChangesOptions.ContinueOnError || (mode != SaveChangesMode.Synchronous && !clientSideError)) expectedCallCount = 2;  // V2 behavior: async code path always continue on server-error                          else expectedCallCount = 1;                            Assert.AreEqual(expectedCallCount' TestService4.ChangeCounter);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The following statement contains a magic number: TestUtil.RunCombinations(                      // Dimension1: all save change option values                      (IEnumerable<SaveChangesOptions>)Enum.GetValues(typeof(SaveChangesOptions))'                      (IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))'                      UnitTestsUtil.BooleanValues'                      (option' mode' clientSideError) =>                      {                            DataServiceContext ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1000 });                          if (clientSideError)                          {                              // to generate a client side error' we attach an entity and set its MLE                              // if we support this scenario in the future' replace this with anything that throws in the CreateNextRequest() path                              CustomDataClient.Product p = new CustomDataClient.Product() { ID = 0 };                              ctx.AttachTo("Products"' p);                              ctx.SetSaveStream(p' new MemoryStream(new byte[] { 0 })' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                          }                          else                          {                              ctx.AddObject("Orders"' new CustomDataClient.Order() { ID = 1010 });                          }                          ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1001 });                            TestService4.ChangeCounter = 0;                          Exception ex = TestUtil.RunCatching(() => DataServiceContextTestUtil.SaveChanges(ctx' option' mode));                          Assert.IsNotNull(ex);                            if (clientSideError)                          {                              // assert that the error is actually on the client side:                              while (ex.InnerException != null)                              {                                  ex = ex.InnerException;                              }                                // batch and MLE = not supported' rest = IOE because no edit link                              Assert.AreEqual(ex.GetType()' (option == SaveChangesOptions.BatchWithSingleChangeset || option == SaveChangesOptions.BatchWithIndependentOperations) ? typeof(NotSupportedException) : typeof(InvalidOperationException));                          }                            int expectedCallCount;                          if (option == SaveChangesOptions.BatchWithSingleChangeset) expectedCallCount = clientSideError ? 0 : 1;    // batch always fails as a whole                          else if (option == SaveChangesOptions.BatchWithIndependentOperations) expectedCallCount = clientSideError ? 0 : 2;    // Independent  batch always fails as a whole                          else if (option == SaveChangesOptions.PostOnlySetProperties) expectedCallCount = 0;                          else if (option == SaveChangesOptions.ContinueOnError || (mode != SaveChangesMode.Synchronous && !clientSideError)) expectedCallCount = 2;  // V2 behavior: async code path always continue on server-error                          else expectedCallCount = 1;                            Assert.AreEqual(expectedCallCount' TestService4.ChangeCounter);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SaveChangeOptionsContinueOnErrorShouldWork,The following statement contains a magic number: TestUtil.RunCombinations(                      // Dimension1: all save change option values                      (IEnumerable<SaveChangesOptions>)Enum.GetValues(typeof(SaveChangesOptions))'                      (IEnumerable<SaveChangesMode>)Enum.GetValues(typeof(SaveChangesMode))'                      UnitTestsUtil.BooleanValues'                      (option' mode' clientSideError) =>                      {                            DataServiceContext ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1000 });                          if (clientSideError)                          {                              // to generate a client side error' we attach an entity and set its MLE                              // if we support this scenario in the future' replace this with anything that throws in the CreateNextRequest() path                              CustomDataClient.Product p = new CustomDataClient.Product() { ID = 0 };                              ctx.AttachTo("Products"' p);                              ctx.SetSaveStream(p' new MemoryStream(new byte[] { 0 })' true' new DataServiceRequestArgs() { ContentType = "image/bmp" });                          }                          else                          {                              ctx.AddObject("Orders"' new CustomDataClient.Order() { ID = 1010 });                          }                          ctx.AddObject("Products"' new CustomDataClient.Product() { ID = 1001 });                            TestService4.ChangeCounter = 0;                          Exception ex = TestUtil.RunCatching(() => DataServiceContextTestUtil.SaveChanges(ctx' option' mode));                          Assert.IsNotNull(ex);                            if (clientSideError)                          {                              // assert that the error is actually on the client side:                              while (ex.InnerException != null)                              {                                  ex = ex.InnerException;                              }                                // batch and MLE = not supported' rest = IOE because no edit link                              Assert.AreEqual(ex.GetType()' (option == SaveChangesOptions.BatchWithSingleChangeset || option == SaveChangesOptions.BatchWithIndependentOperations) ? typeof(NotSupportedException) : typeof(InvalidOperationException));                          }                            int expectedCallCount;                          if (option == SaveChangesOptions.BatchWithSingleChangeset) expectedCallCount = clientSideError ? 0 : 1;    // batch always fails as a whole                          else if (option == SaveChangesOptions.BatchWithIndependentOperations) expectedCallCount = clientSideError ? 0 : 2;    // Independent  batch always fails as a whole                          else if (option == SaveChangesOptions.PostOnlySetProperties) expectedCallCount = 0;                          else if (option == SaveChangesOptions.ContinueOnError || (mode != SaveChangesMode.Synchronous && !clientSideError)) expectedCallCount = 2;  // V2 behavior: async code path always continue on server-error                          else expectedCallCount = 1;                            Assert.AreEqual(expectedCallCount' TestService4.ChangeCounter);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,AsyncWithLargePayload,The following statement contains a magic number: i < 100
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,AsyncWithVaryingSizePayload_Inner,The following statement contains a magic number: int entityCount = 20;
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,AsyncWithVaryingSizePayload_Inner,The following statement contains a magic number: EntityTypeWithVaryingSizePaylod entity = new EntityTypeWithVaryingSizePaylod()                  {                      ID = id'                      Bin = new byte[rand.Next(0' 100000)]'                  };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldCheckIdOrEditLinks,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.BooleanValues' (useAttach) =>                      {                          var ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            var o1 = new Order() { ID = 10 };                          if (useAttach)                          {                              ctx.AttachTo("Orders"' o1);                          }                          else                          {                              ctx.AddObject("Orders"' o1);                          }                            var o2 = new Order() { ID = 11 };                          ctx.AddObject("Orders"' o2);                            Exception ex = TestUtil.RunCatching(() => ctx.SaveChanges());                          Assert.AreEqual(DataServicesClientResourceUtil.GetString("Context_DifferentEntityAlreadyContained")' ex.Message);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldCheckIdOrEditLinks,The following statement contains a magic number: TestUtil.RunCombinations(UnitTestsUtil.BooleanValues' (useAttach) =>                      {                          var ctx = new DataServiceContext(service.ServiceRoot);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            var o1 = new Order() { ID = 10 };                          if (useAttach)                          {                              ctx.AttachTo("Orders"' o1);                          }                          else                          {                              ctx.AddObject("Orders"' o1);                          }                            var o2 = new Order() { ID = 11 };                          ctx.AddObject("Orders"' o2);                            Exception ex = TestUtil.RunCatching(() => ctx.SaveChanges());                          Assert.AreEqual(DataServicesClientResourceUtil.GetString("Context_DifferentEntityAlreadyContained")' ex.Message);                      });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,MaterializationOfEntitesIntoComplexTypeShouldNotBeAllowed,The following statement contains a magic number: complex1.SetValue("DollarAmount"' 100);
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestVersionShouldNotBumpForDeletion,The following statement contains a magic number: IEnumerable<object> entities = new List<object> {new AstoriaUnitTests.DataWebClientCSharp.Collection.EntityWithDictionary {ID = 1' Collection = new Dictionary<string' string> {{"property1"' "value1"}' {"property2"' "value2"}}}' // non collection                  new Entity<ICollection<int>' int>(new int[] {100' 101' 200})' // collection                  new Customer {ID = 1' Name = "Customer"} // EPM              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestVersionShouldNotBumpForDeletion,The following statement contains a magic number: IEnumerable<object> entities = new List<object> {new AstoriaUnitTests.DataWebClientCSharp.Collection.EntityWithDictionary {ID = 1' Collection = new Dictionary<string' string> {{"property1"' "value1"}' {"property2"' "value2"}}}' // non collection                  new Entity<ICollection<int>' int>(new int[] {100' 101' 200})' // collection                  new Customer {ID = 1' Name = "Customer"} // EPM              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestVersionShouldNotBumpForDeletion,The following statement contains a magic number: IEnumerable<object> entities = new List<object> {new AstoriaUnitTests.DataWebClientCSharp.Collection.EntityWithDictionary {ID = 1' Collection = new Dictionary<string' string> {{"property1"' "value1"}' {"property2"' "value2"}}}' // non collection                  new Entity<ICollection<int>' int>(new int[] {100' 101' 200})' // collection                  new Customer {ID = 1' Name = "Customer"} // EPM              };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,RequestVersionShouldNotBumpForDeletion,The following statement contains a magic number: TestUtil.RunCombinations(entities' (entity) =>              {                  Func<IODataRequestMessage> getRequestMessage = () => new ODataTestMessage();                  Func<IODataResponseMessage> getResponseMessage = () =>                  {                      var responseMessage = new ODataTestMessage();                      responseMessage.StatusCode = 201;                      responseMessage.SetHeader("Content-Length"' "0");                      responseMessage.SetHeader("Location"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri);                      responseMessage.SetHeader("OData-EntityId"' DataServiceContextWithCustomTransportLayer.DummyUri.AbsoluteUri);                      return responseMessage;                  };                    var ctx = new DataServiceContextWithCustomTransportLayer(ODataProtocolVersion.V4' getRequestMessage' getResponseMessage);                  //ctx.EnableAtom = true;                  //ctx.Format.UseAtom();                    ctx.AddObject("Entities"' entity);                  ctx.SaveChanges();                    ctx.SendingRequest2 += (sender' args) =>                  {                      Assert.IsTrue(args.RequestMessage.GetHeader("OData-Version").StartsWith("4.0"));                  };                    ctx.DeleteObject(entity);                  ctx.SaveChanges();              });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The following statement contains a magic number: TestUtil.RunCombinations(                  (DataServiceResponsePreference[])Enum.GetValues(typeof(DataServiceResponsePreference))'                  new ODataProtocolVersion[] { ODataProtocolVersion.V4 }'                  new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset }'                  (responsePreference' protocolVersion' saveChangesOption) =>                  {                      if (responsePreference != DataServiceResponsePreference.None && protocolVersion < ODataProtocolVersion.V4)                      {                          // Response preference only applies to V3 and higher                          return;                      }                        using (TestWebRequest request = TestWebRequest.CreateForInProcessWcf())                      {                          request.DataServiceType = typeof(CustomDataContext);                          request.StartService();                            // Verify the correct URIs are used whether they come from the payload or the headers                          DataServiceContext ctx = new DataServiceContext(request.ServiceRoot' protocolVersion);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddAndUpdateResponsePreference = responsePreference;                            Order newOrder1 = new Order();                          newOrder1.ID = 1000;                          ctx.AddObject("Orders"' newOrder1);                            // Attach some existing order details so we can create links to them from the new order                          OrderDetail existingOrderDetail1 = new OrderDetail();                          existingOrderDetail1.OrderID = 1;                          existingOrderDetail1.ProductID = 1;                          ctx.AttachTo("OrderDetails"' existingOrderDetail1);                            OrderDetail existingOrderDetail2 = new OrderDetail();                          existingOrderDetail2.OrderID = 2;                          existingOrderDetail2.ProductID = 2;                          ctx.AttachTo("OrderDetails"' existingOrderDetail2);                            // Adding links where the targets are in the unchanged state will cause the links to be folded into the POST for newOrder1' instead of sent separately.                          // Particularly in the case of batch' this means that the client has to be able to handle not seeing a response for this change.                          // In Dev11:86477 we were trying to apply the headers from the response to the link descriptor instead of the correct entity descriptor'                          // because we forgot to skip over the link descriptor when processing the changes.                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail1);                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail2);                            // Need a second object that will show up in the batch after the position where the folded link would have been'                          // so we can verify we're really skipping the link properly.                          Order newOrder2 = new Order();                          newOrder2.ID = 1001;                          ctx.AddObject("Orders"' newOrder2);                            EntityDescriptor newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          Assert.IsNull(newOrder1Descriptor.EditLink' "EditLink should be null before first new order is saved.");                          Assert.IsNull(newOrder1Descriptor.Identity' "Identity should be null before first new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder1Descriptor.State' "Expected first new order to be in the Added state before SaveChanges.");                            EntityDescriptor newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          Assert.IsNull(newOrder2Descriptor.EditLink' "EditLink should be null before second new order is saved.");                          Assert.IsNull(newOrder2Descriptor.Identity' "Identity should be null before second new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder2Descriptor.State' "Expected second new order to be in the Added state before SaveChanges.");                            LinkDescriptor linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected first link to be in the Added state before SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected second link to be in the Added state before SaveChanges.");                            // The bug in Dev11:86477 only applies to batch' but testing this for non-batch too to make sure it continues to work as well.                          ctx.SaveChanges(saveChangesOption);                            string orderIdUri = request.ServiceRoot + "/Orders({0})";                            newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          string id = String.Format(orderIdUri' newOrder1.ID);                            Assert.AreEqual(id' newOrder1Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on first new order after SaveChanges.");                          Assert.AreEqual(id' newOrder1Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on first new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder1Descriptor.State' "Expected first new order to be in the Unchanged state after SaveChanges.");                            newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          string id2 = String.Format(orderIdUri' newOrder2.ID);                          Assert.AreEqual(id2' newOrder2Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on second new order after SaveChanges.");                          Assert.AreEqual(id2' newOrder2Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on second new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder2Descriptor.State' "Expected second new order to be in the Unchanged state after SaveChanges.");                            linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected first link to be in the Unchanged state after SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected second link to be in the Unchanged state after SaveChanges.");                      }                  });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The following statement contains a magic number: TestUtil.RunCombinations(                  (DataServiceResponsePreference[])Enum.GetValues(typeof(DataServiceResponsePreference))'                  new ODataProtocolVersion[] { ODataProtocolVersion.V4 }'                  new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset }'                  (responsePreference' protocolVersion' saveChangesOption) =>                  {                      if (responsePreference != DataServiceResponsePreference.None && protocolVersion < ODataProtocolVersion.V4)                      {                          // Response preference only applies to V3 and higher                          return;                      }                        using (TestWebRequest request = TestWebRequest.CreateForInProcessWcf())                      {                          request.DataServiceType = typeof(CustomDataContext);                          request.StartService();                            // Verify the correct URIs are used whether they come from the payload or the headers                          DataServiceContext ctx = new DataServiceContext(request.ServiceRoot' protocolVersion);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddAndUpdateResponsePreference = responsePreference;                            Order newOrder1 = new Order();                          newOrder1.ID = 1000;                          ctx.AddObject("Orders"' newOrder1);                            // Attach some existing order details so we can create links to them from the new order                          OrderDetail existingOrderDetail1 = new OrderDetail();                          existingOrderDetail1.OrderID = 1;                          existingOrderDetail1.ProductID = 1;                          ctx.AttachTo("OrderDetails"' existingOrderDetail1);                            OrderDetail existingOrderDetail2 = new OrderDetail();                          existingOrderDetail2.OrderID = 2;                          existingOrderDetail2.ProductID = 2;                          ctx.AttachTo("OrderDetails"' existingOrderDetail2);                            // Adding links where the targets are in the unchanged state will cause the links to be folded into the POST for newOrder1' instead of sent separately.                          // Particularly in the case of batch' this means that the client has to be able to handle not seeing a response for this change.                          // In Dev11:86477 we were trying to apply the headers from the response to the link descriptor instead of the correct entity descriptor'                          // because we forgot to skip over the link descriptor when processing the changes.                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail1);                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail2);                            // Need a second object that will show up in the batch after the position where the folded link would have been'                          // so we can verify we're really skipping the link properly.                          Order newOrder2 = new Order();                          newOrder2.ID = 1001;                          ctx.AddObject("Orders"' newOrder2);                            EntityDescriptor newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          Assert.IsNull(newOrder1Descriptor.EditLink' "EditLink should be null before first new order is saved.");                          Assert.IsNull(newOrder1Descriptor.Identity' "Identity should be null before first new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder1Descriptor.State' "Expected first new order to be in the Added state before SaveChanges.");                            EntityDescriptor newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          Assert.IsNull(newOrder2Descriptor.EditLink' "EditLink should be null before second new order is saved.");                          Assert.IsNull(newOrder2Descriptor.Identity' "Identity should be null before second new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder2Descriptor.State' "Expected second new order to be in the Added state before SaveChanges.");                            LinkDescriptor linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected first link to be in the Added state before SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected second link to be in the Added state before SaveChanges.");                            // The bug in Dev11:86477 only applies to batch' but testing this for non-batch too to make sure it continues to work as well.                          ctx.SaveChanges(saveChangesOption);                            string orderIdUri = request.ServiceRoot + "/Orders({0})";                            newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          string id = String.Format(orderIdUri' newOrder1.ID);                            Assert.AreEqual(id' newOrder1Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on first new order after SaveChanges.");                          Assert.AreEqual(id' newOrder1Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on first new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder1Descriptor.State' "Expected first new order to be in the Unchanged state after SaveChanges.");                            newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          string id2 = String.Format(orderIdUri' newOrder2.ID);                          Assert.AreEqual(id2' newOrder2Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on second new order after SaveChanges.");                          Assert.AreEqual(id2' newOrder2Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on second new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder2Descriptor.State' "Expected second new order to be in the Unchanged state after SaveChanges.");                            linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected first link to be in the Unchanged state after SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected second link to be in the Unchanged state after SaveChanges.");                      }                  });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The following statement contains a magic number: TestUtil.RunCombinations(                  (DataServiceResponsePreference[])Enum.GetValues(typeof(DataServiceResponsePreference))'                  new ODataProtocolVersion[] { ODataProtocolVersion.V4 }'                  new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset }'                  (responsePreference' protocolVersion' saveChangesOption) =>                  {                      if (responsePreference != DataServiceResponsePreference.None && protocolVersion < ODataProtocolVersion.V4)                      {                          // Response preference only applies to V3 and higher                          return;                      }                        using (TestWebRequest request = TestWebRequest.CreateForInProcessWcf())                      {                          request.DataServiceType = typeof(CustomDataContext);                          request.StartService();                            // Verify the correct URIs are used whether they come from the payload or the headers                          DataServiceContext ctx = new DataServiceContext(request.ServiceRoot' protocolVersion);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddAndUpdateResponsePreference = responsePreference;                            Order newOrder1 = new Order();                          newOrder1.ID = 1000;                          ctx.AddObject("Orders"' newOrder1);                            // Attach some existing order details so we can create links to them from the new order                          OrderDetail existingOrderDetail1 = new OrderDetail();                          existingOrderDetail1.OrderID = 1;                          existingOrderDetail1.ProductID = 1;                          ctx.AttachTo("OrderDetails"' existingOrderDetail1);                            OrderDetail existingOrderDetail2 = new OrderDetail();                          existingOrderDetail2.OrderID = 2;                          existingOrderDetail2.ProductID = 2;                          ctx.AttachTo("OrderDetails"' existingOrderDetail2);                            // Adding links where the targets are in the unchanged state will cause the links to be folded into the POST for newOrder1' instead of sent separately.                          // Particularly in the case of batch' this means that the client has to be able to handle not seeing a response for this change.                          // In Dev11:86477 we were trying to apply the headers from the response to the link descriptor instead of the correct entity descriptor'                          // because we forgot to skip over the link descriptor when processing the changes.                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail1);                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail2);                            // Need a second object that will show up in the batch after the position where the folded link would have been'                          // so we can verify we're really skipping the link properly.                          Order newOrder2 = new Order();                          newOrder2.ID = 1001;                          ctx.AddObject("Orders"' newOrder2);                            EntityDescriptor newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          Assert.IsNull(newOrder1Descriptor.EditLink' "EditLink should be null before first new order is saved.");                          Assert.IsNull(newOrder1Descriptor.Identity' "Identity should be null before first new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder1Descriptor.State' "Expected first new order to be in the Added state before SaveChanges.");                            EntityDescriptor newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          Assert.IsNull(newOrder2Descriptor.EditLink' "EditLink should be null before second new order is saved.");                          Assert.IsNull(newOrder2Descriptor.Identity' "Identity should be null before second new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder2Descriptor.State' "Expected second new order to be in the Added state before SaveChanges.");                            LinkDescriptor linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected first link to be in the Added state before SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected second link to be in the Added state before SaveChanges.");                            // The bug in Dev11:86477 only applies to batch' but testing this for non-batch too to make sure it continues to work as well.                          ctx.SaveChanges(saveChangesOption);                            string orderIdUri = request.ServiceRoot + "/Orders({0})";                            newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          string id = String.Format(orderIdUri' newOrder1.ID);                            Assert.AreEqual(id' newOrder1Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on first new order after SaveChanges.");                          Assert.AreEqual(id' newOrder1Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on first new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder1Descriptor.State' "Expected first new order to be in the Unchanged state after SaveChanges.");                            newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          string id2 = String.Format(orderIdUri' newOrder2.ID);                          Assert.AreEqual(id2' newOrder2Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on second new order after SaveChanges.");                          Assert.AreEqual(id2' newOrder2Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on second new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder2Descriptor.State' "Expected second new order to be in the Unchanged state after SaveChanges.");                            linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected first link to be in the Unchanged state after SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected second link to be in the Unchanged state after SaveChanges.");                      }                  });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,VerifyUriAppliedToDescriptorWhenLinkFoldingUsed,The following statement contains a magic number: TestUtil.RunCombinations(                  (DataServiceResponsePreference[])Enum.GetValues(typeof(DataServiceResponsePreference))'                  new ODataProtocolVersion[] { ODataProtocolVersion.V4 }'                  new SaveChangesOptions[] { SaveChangesOptions.None' SaveChangesOptions.BatchWithSingleChangeset }'                  (responsePreference' protocolVersion' saveChangesOption) =>                  {                      if (responsePreference != DataServiceResponsePreference.None && protocolVersion < ODataProtocolVersion.V4)                      {                          // Response preference only applies to V3 and higher                          return;                      }                        using (TestWebRequest request = TestWebRequest.CreateForInProcessWcf())                      {                          request.DataServiceType = typeof(CustomDataContext);                          request.StartService();                            // Verify the correct URIs are used whether they come from the payload or the headers                          DataServiceContext ctx = new DataServiceContext(request.ServiceRoot' protocolVersion);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            ctx.AddAndUpdateResponsePreference = responsePreference;                            Order newOrder1 = new Order();                          newOrder1.ID = 1000;                          ctx.AddObject("Orders"' newOrder1);                            // Attach some existing order details so we can create links to them from the new order                          OrderDetail existingOrderDetail1 = new OrderDetail();                          existingOrderDetail1.OrderID = 1;                          existingOrderDetail1.ProductID = 1;                          ctx.AttachTo("OrderDetails"' existingOrderDetail1);                            OrderDetail existingOrderDetail2 = new OrderDetail();                          existingOrderDetail2.OrderID = 2;                          existingOrderDetail2.ProductID = 2;                          ctx.AttachTo("OrderDetails"' existingOrderDetail2);                            // Adding links where the targets are in the unchanged state will cause the links to be folded into the POST for newOrder1' instead of sent separately.                          // Particularly in the case of batch' this means that the client has to be able to handle not seeing a response for this change.                          // In Dev11:86477 we were trying to apply the headers from the response to the link descriptor instead of the correct entity descriptor'                          // because we forgot to skip over the link descriptor when processing the changes.                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail1);                          ctx.AddLink(newOrder1' "OrderDetails"' existingOrderDetail2);                            // Need a second object that will show up in the batch after the position where the folded link would have been'                          // so we can verify we're really skipping the link properly.                          Order newOrder2 = new Order();                          newOrder2.ID = 1001;                          ctx.AddObject("Orders"' newOrder2);                            EntityDescriptor newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          Assert.IsNull(newOrder1Descriptor.EditLink' "EditLink should be null before first new order is saved.");                          Assert.IsNull(newOrder1Descriptor.Identity' "Identity should be null before first new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder1Descriptor.State' "Expected first new order to be in the Added state before SaveChanges.");                            EntityDescriptor newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          Assert.IsNull(newOrder2Descriptor.EditLink' "EditLink should be null before second new order is saved.");                          Assert.IsNull(newOrder2Descriptor.Identity' "Identity should be null before second new order is saved.");                          Assert.AreEqual(EntityStates.Added' newOrder2Descriptor.State' "Expected second new order to be in the Added state before SaveChanges.");                            LinkDescriptor linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected first link to be in the Added state before SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Added' linkDescriptor.State' "Expected second link to be in the Added state before SaveChanges.");                            // The bug in Dev11:86477 only applies to batch' but testing this for non-batch too to make sure it continues to work as well.                          ctx.SaveChanges(saveChangesOption);                            string orderIdUri = request.ServiceRoot + "/Orders({0})";                            newOrder1Descriptor = ctx.GetEntityDescriptor(newOrder1);                          string id = String.Format(orderIdUri' newOrder1.ID);                            Assert.AreEqual(id' newOrder1Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on first new order after SaveChanges.");                          Assert.AreEqual(id' newOrder1Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on first new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder1Descriptor.State' "Expected first new order to be in the Unchanged state after SaveChanges.");                            newOrder2Descriptor = ctx.GetEntityDescriptor(newOrder2);                          string id2 = String.Format(orderIdUri' newOrder2.ID);                          Assert.AreEqual(id2' newOrder2Descriptor.EditLink.AbsoluteUri' "Wrong value for EditLink on second new order after SaveChanges.");                          Assert.AreEqual(id2' newOrder2Descriptor.Identity.AbsoluteUri' "Wrong value for Identity on second new order after SaveChanges.");                          Assert.AreEqual(EntityStates.Unchanged' newOrder2Descriptor.State' "Expected second new order to be in the Unchanged state after SaveChanges.");                            linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail1);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected first link to be in the Unchanged state after SaveChanges.");                          linkDescriptor = ctx.GetLinkDescriptor(newOrder1' "OrderDetails"' existingOrderDetail2);                          Assert.AreEqual(EntityStates.Unchanged' linkDescriptor.State' "Expected second link to be in the Unchanged state after SaveChanges.");                      }                  });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldWriteTypeInfoForPrimitiveCollectionProperties,The following statement contains a magic number: var responseMessage = new ODataTestMessage { StatusCode = 201 };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,DeleteLinkAsyncExtraLinkDescriptorTest,The following statement contains a magic number: DeleteLinkAsync(request.ServiceRoot' 0' 4000' waitHandle' e => { exc = e; waitHandle.Set(); });
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,DeleteLinkAsyncExtraLinkDescriptorTest,The following statement contains a magic number: WaitHandle.WaitAll(new WaitHandle[] { waitHandle }' TimeSpan.FromMinutes(3));
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,TestMultipleKeysOfKeyAttribute,The following statement contains a magic number: TestType7 instance = new TestType7 { FkID = 11' TypeID = 22 };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,TestMultipleKeysOfKeyAttribute,The following statement contains a magic number: TestType7 instance = new TestType7 { FkID = 11' TypeID = 22 };
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientTypeCacheError_LoadProperties,The following statement contains a magic number: i < 2
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,NullCheckAgainstNonEntityProperty,The following statement contains a magic number: Assert.AreEqual(3' customers.Count);
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,OperationResponseErrorShouldAcceptNull,The following statement contains a magic number: newOrder1.ID = 2332;
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldOverwriteDefaultMessageQuotasLimits,The following statement contains a magic number: i < 1001
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientShouldOverwriteDefaultMessageQuotasLimits,The following statement contains a magic number: i < 101
Magic Number,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,CreateContextWithTransportLayer,The following statement contains a magic number: responseMessage.StatusCode = 200;
Magic Number,AstoriaUnitTests.Tests,TestService5,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,OrderChanged,The following statement contains a magic number: o.ID = 10;
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,BeginLoadPropertyTest,The following statement contains a magic number: AssertEntityCount(1 + 2' "One customer with two orders");
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,BeginLoadPropertyTest,The following statement contains a magic number: AssertLinkCount(2' "Two customer-to-order links");
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,BeginLoadPropertyTest,The following statement contains a magic number: i < 3
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementUnChangedSource,The following statement contains a magic number: OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) => { config.SetEntitySetPageSize("Orders"' usePaging ? 1 : 5); };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementUnChangedSource,The following statement contains a magic number: Customer c2 = new Customer() { ID = 2 };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementUnChangedSource,The following statement contains a magic number: Order o = new Order() { ID = 102 };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementDeletedSource,The following statement contains a magic number: OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) => { config.SetEntitySetPageSize("Orders"' 5); };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementDeletedSource,The following statement contains a magic number: Customer c2 = new Customer() { ID = 2 };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementDeletedSource,The following statement contains a magic number: Order o = new Order() { ID = 102 };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,ExerciseApplyItemsToCollectionViaMergeLists,The following statement contains a magic number: OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) => { config.SetEntitySetPageSize("Orders"' 5); };
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,ExerciseApplyItemsToCollectionViaMergeLists,The following statement contains a magic number: Assert.IsTrue(c0.Orders.Count == 2);
Magic Number,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,WritingEntityWithControlChars,The following statement contains a magic number: customer.ID = 1234;
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_SimpleUpdate,The following statement contains a magic number: order.CustomerId = 2;
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_ProjectedUpdate,The following statement contains a magic number: order.CustomerId = 2;
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_NarrowingUpdate1,The following statement contains a magic number: order.CustomerId = 2;
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_NarrowingUpdate2,The following statement contains a magic number: var cust2 = ctx.CreateQuery<EFFKClient.Customer>("CustomObjectContext.Customers").Select(c => new EFFKClient.NarrowCustomerWithNavOrder()              {                  ID = c.ID              }).Where(c => c.ID == 2).FirstOrDefault();
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_Update_NarrowingUpdate2,The following statement contains a magic number: VerifyServerOrderId(order.ID' 2);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var newCust = new EFFKClient.Customer() { ID = 10' Name = "New Cust"' EditTimeStamp = new byte[] { 0' 1' 2' 3 } };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var newCust = new EFFKClient.Customer() { ID = 10' Name = "New Cust"' EditTimeStamp = new byte[] { 0' 1' 2' 3 } };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var newCust = new EFFKClient.Customer() { ID = 10' Name = "New Cust"' EditTimeStamp = new byte[] { 0' 1' 2' 3 } };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: var orders = new Tuple<EFFKClient.Order' int>[]              {                  Tuple.Create(new EFFKClient.Order(){ ID=100000' Customers=null }'  0)'                          // Set None                  Tuple.Create(new EFFKClient.Order(){ ID=100007' CustomerId =10 }' 10)'                          // Set FK only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100008' Customers = newCust }' 10)'                     // Set Nav only' new                  Tuple.Create(new EFFKClient.Order(){ ID=100009' CustomerId =10' Customers=newCust }' 10)'       // Set FK + Nav to same' new                  Tuple.Create(new EFFKClient.Order(){ ID=100010' CustomerId =1' Customers=newCust }' 10)'        // Set FK + Nav to diff' new                    // Order Object | Expected Customer ID                  Tuple.Create(new EFFKClient.Order(){ ID=100001' CustomerId =1' Customers=null }'  1)'           // Set FK only                  Tuple.Create(new EFFKClient.Order(){ ID=100002' Customers=cust1 }'  1)'                         // Set Nav only                  Tuple.Create(new EFFKClient.Order(){ ID=100003' CustomerId =1' Customers=cust1 }' 1)'           // Set FK + Nav to same                  Tuple.Create(new EFFKClient.Order(){ ID=100004' CustomerId =2' Customers=null }' 1)'            // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100005' CustomerId =2' Customers=cust1 }' 1)'           // Set FK + Nav to diff                  Tuple.Create(new EFFKClient.Order(){ ID=100006' CustomerId =2' Customers=newCust }' 1)'         // Set FK + Nav to diff              };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertTest,The following statement contains a magic number: t.Item1.CustomerId == 2
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: var newCust = new EFFKClient.Customer() { ID = 11' EditTimeStamp = new byte[] { 0 } };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: var newOrder1 = new EFFKClient.Order() { ID = 100020' CustomerId = 11 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: var newOrder1 = new EFFKClient.Order() { ID = 100020' CustomerId = 11 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: var newOrder2 = new EFFKClient.Order() { ID = 100021' CustomerId = 1 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: var newOrder3 = new EFFKClient.Order() { ID = 100022 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: VerifyServerOrderId(100020' 11);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: VerifyServerOrderId(100020' 11);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: VerifyServerOrderId(100021' 11);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: VerifyServerOrderId(100021' 11);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: VerifyServerOrderId(100022' 11);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_InsertAddRelated,The following statement contains a magic number: VerifyServerOrderId(100022' 11);
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsert_Bind_Delete,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsert_Bind_Delete,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_PrincipalToDependent,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_PrincipalToDependent,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_DependentToPrincipal,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_CascadeDelete_DependentToPrincipal,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_DeleteDependent,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsertAndBind_Batch,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsertAndBind_Batch,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsertAndBind_Batch_ChangedUriCompositionRulesOnServer,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_BasicInsertAndBind_Batch_ChangedUriCompositionRulesOnServer,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The following statement contains a magic number: EFFKClient.Office o = new EFFKClient.Office() { ID = 1' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2173 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The following statement contains a magic number: EFFKClient.Office o1 = new EFFKClient.Office() { ID = 2' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2174 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The following statement contains a magic number: EFFKClient.Office o1 = new EFFKClient.Office() { ID = 2' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2174 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The following statement contains a magic number: EFFKClient.Office o1 = new EFFKClient.Office() { ID = 2' BuildingName = "Building 35"' FloorNumber = 2' OfficeNumber = 2174 };
Magic Number,AstoriaUnitTests.Tests,EFFKTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,EFFK_1To1_UpdateRelationship,The following statement contains a magic number: Assert.AreEqual(ctx.CreateQuery<EFFKClient.Office>("CustomObjectContext.Offices").Count()' 2' "Unexpected number of office instances encountered");
Magic Number,AstoriaUnitTests.Tests,Dev10TypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10TypeTestsClient.cs,QueryDev10TypeService,The following statement contains a magic number: Assert.AreEqual(result.Count()' 3);
Magic Number,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The following statement contains a magic number: newCustomer2.ID = 2;
Magic Number,AstoriaUnitTests.Tests,InternalTestHookTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\InternalTestHookTests.cs,RequestHeadersAndStreamTest,The following statement contains a magic number: TestUtil.RunCombinations(saveChangesModes' saveChangesOptions' (saveChangesMode' saveChangesOption) =>                      {                          DataServiceContext context = new DataServiceContext(new Uri(request.BaseUri));                          //context.EnableAtom = true;                          //context.Format.UseAtom();                          HttpTestHookConsumer testHookConsumer = new HttpTestHookConsumer(context' false);                            bool isBatch = saveChangesOption == SaveChangesOptions.BatchWithSingleChangeset;                          int actualRequestCount = 0;                          PlaybackService.InspectRequestPayload.Value = (requestStream) =>                          {                              // Verify request headers                              Assert.AreEqual(1' testHookConsumer.RequestHeaders.Count' "Wrong number of request headers tracked by the test hook");                              Dictionary<string' string> actualRequestHeaders = testHookConsumer.RequestHeaders[0];                              Dictionary<string' string> expectedRequestHeaders = isBatch ? expectedRequestHeadersBatch : expectedRequestHeadersNonBatch;                              VerifyHeaders(expectedRequestHeaders' actualRequestHeaders);                              testHookConsumer.RequestHeaders.Clear();                                // Verify request stream                              Assert.AreEqual(1' testHookConsumer.RequestWrappingStreams.Count' "Wrong number of request streams tracked by the test hook");                              string actualString = testHookConsumer.RequestWrappingStreams[0].GetLoggingStreamAsString();                              StreamReader reader = new StreamReader(requestStream);                              string expectedString = reader.ReadToEnd();                              Assert.AreEqual(expectedString' actualString' "Request stream does not contain the expected value in the test hook.");                              testHookConsumer.RequestWrappingStreams.Clear();                                // Set the response payload here because a single SaveChanges call can produce multiple requests that                              // require different responses' when not using batching.                              string httpResponse = isBatch ? batchHttpResponse : nonBatchHttpResponses[actualRequestCount];                              PlaybackService.OverridingPlayback.Value = httpResponse;                              actualRequestCount++;                          };                            // Add multiple objects to ensure that multiple streams in a single API call will still get passed to the test hook                          context.AddObject("Customers"' newCustomer1);                          context.AddObject("Customers"' newCustomer2);                            // Verify no requests have been made yet                          Assert.AreEqual(0' actualRequestCount' "No HTTP requests should have been made yet.");                            DataServiceContextTestUtil.SaveChanges(context' saveChangesOption' saveChangesMode);                            // Verify that the expected number of requests were made during SaveChanges                          int expectedRequestCount = isBatch ? 1 : 2;                          Assert.AreEqual(expectedRequestCount' actualRequestCount' "Wrong number of HTTP requests made during SaveChanges.");                      });
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,TestContinuation,The following statement contains a magic number: OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) =>                  {                      config.SetEntitySetPageSize("*"' 2);                  };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var baseline = baseLineContext.Teams.Where(t => t.TeamID == 3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Where(t => t.TeamID == 3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var writer = TestURIWriter.CreateURIWriter<Team>(context.BaseUri.ToString()' "Teams").                  FindByKey("TeamID"' 3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: int x = 2;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var baseline2 = baseLineContext.Teams.Where(t => t.TeamID == 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var writer2 = TestURIWriter.CreateURIWriter<Team>(context.BaseUri.ToString()' "Teams").                  FindByKey("TeamID"' 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var baseline4 = baseLineContext.Teams.Where(t => t.TeamID == 4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var queryable4 = context.CreateQuery<Team>("Teams").Where(c => x * 2 == c.TeamID);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: x = 2;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeySimple,The following statement contains a magic number: var writer4 = TestURIWriter.CreateURIWriter<Team>(context.BaseUri.ToString()' "Teams").                  FindByKey("TeamID"' 4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeyAndNavigate,The following statement contains a magic number: var writer4 = TestURIWriter.CreateURIWriter<Team>(_baseUri.OriginalString' "Teams").FindByKey("TeamID"' 3).Navigate(t => t.City);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeyAndNavigate,The following statement contains a magic number: var queryable4 = context.CreateQuery<Team>("Teams").Where(t => t.TeamID == 3).Select(t => t.City);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFindByKeyAndNavigate,The following statement contains a magic number: var baseline4 = baseLineContext.Teams.Where(t => t.TeamID == 3).Select(t => t.City);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline2 = baseLineContext.Teams.Take(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable2 = context.CreateQuery<Team>("Teams").Take(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Take(2).Take(3).Take(4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Take(2).Take(3).Take(4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Take(2).Take(3).Take(4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Take(2).Take(3).Take(4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Take(2).Take(3).Take(4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Take(2).Take(3).Take(4);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable3 = (from l in context.CreateQuery<League>("Leagues")                                where l.ID == 0                                from t in l.Teams                                select t).Skip(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline3 = (from l in baseLineContext.Leagues                               where l.ID == 0                               from t in l.Teams                               select t).Skip(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Skip(2).Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Skip(2).Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Skip(2).Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Skip(2).Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline4 = baseLineContext.Teams.Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable4 = context.CreateQuery<Team>("Teams").Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Skip(1).Take(5).Skip(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Skip(1).Take(5).Skip(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var baseline = baseLineContext.Teams.Take(5).Skip(1).Take(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTakeAndSkip,The following statement contains a magic number: var queryable = context.CreateQuery<Team>("Teams").Take(5).Skip(1).Take(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The following statement contains a magic number: var q = context.CreateQuery<Team>("Teams")                      .Where(t => t.TeamID == 1).SelectMany(t => t.Players' (t' p) => new { t' p })                      .Where(anon => anon.p.ID == 1001);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The following statement contains a magic number: var q = context.CreateQuery<Team>("Teams")                      .Where(t => t.TeamID == 1).SelectMany(t => t.Players' (t' p) => new { t' p })                      .Where(anon => anon.p.ID == 1001).Select(anon => new { anon.p.Team });
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSelectMany,The following statement contains a magic number: var b = baseLineContext.Teams                      .Where(t => t.TeamID == 1).SelectMany(t => t.Players' (t' p) => new { t' p })                      .Where(anon => anon.p.ID == 1001).Select(anon => new { anon.p.Team });
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSimpleFilter,The following statement contains a magic number: var queryable3 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity > 50000                               where s.City == "Seattle"                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSimpleFilter,The following statement contains a magic number: var baseline3 = from s in baseLineContext.Stadiums                              where s.Capacity > 50000                              where s.City == "Seattle"                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable = from s in context.CreateQuery<Stadium>("Stadiums")                              where s.Capacity < 50000                              && s.City == "Seattle"                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline = from s in baseLineContext.Stadiums                             where s.Capacity < 50000                             && s.City == "Seattle"                             select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable2 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity < 50000                               || s.City == "Seattle"                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline2 = from s in baseLineContext.Stadiums                              where s.Capacity < 50000                              || s.City == "Seattle"                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable5 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity < 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline5 = from s in baseLineContext.Stadiums                              where s.Capacity < 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable6 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity <= 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline6 = from s in baseLineContext.Stadiums                              where s.Capacity <= 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable7 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity > 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline7 = from s in baseLineContext.Stadiums                              where s.Capacity > 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable8 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity >= 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline8 = from s in baseLineContext.Stadiums                              where s.Capacity >= 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable9 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity + 20000 > 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable9 = from s in context.CreateQuery<Stadium>("Stadiums")                               where s.Capacity + 20000 > 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline9 = from s in baseLineContext.Stadiums                              where s.Capacity + 20000 > 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline9 = from s in baseLineContext.Stadiums                              where s.Capacity + 20000 > 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable10 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity - 20000 > 30000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable10 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity - 20000 > 30000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline10 = from s in baseLineContext.Stadiums                               where s.Capacity - 20000 > 30000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline10 = from s in baseLineContext.Stadiums                               where s.Capacity - 20000 > 30000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable11 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity * 2 > 100000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable11 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity * 2 > 100000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline11 = from s in baseLineContext.Stadiums                               where s.Capacity * 2 > 100000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline11 = from s in baseLineContext.Stadiums                               where s.Capacity * 2 > 100000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable12 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity / 2 < 20000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable12 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity / 2 < 20000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline12 = from s in baseLineContext.Stadiums                               where s.Capacity / 2 < 20000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline12 = from s in baseLineContext.Stadiums                               where s.Capacity / 2 < 20000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable13 = from s in context.CreateQuery<Stadium>("Stadiums")                                where s.Capacity % 2 == 0                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline13 = from s in baseLineContext.Stadiums                               where s.Capacity % 2 == 0                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable14 = from s in context.CreateQuery<Stadium>("Stadiums")                                where checked(s.Capacity + 20000) > 70000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable14 = from s in context.CreateQuery<Stadium>("Stadiums")                                where checked(s.Capacity + 20000) > 70000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline14 = from s in baseLineContext.Stadiums                               where checked(s.Capacity + 20000) > 70000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline14 = from s in baseLineContext.Stadiums                               where checked(s.Capacity + 20000) > 70000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable15 = from s in context.CreateQuery<Stadium>("Stadiums")                                where checked(s.Capacity - 20000) > 30000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable15 = from s in context.CreateQuery<Stadium>("Stadiums")                                where checked(s.Capacity - 20000) > 30000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline15 = from s in baseLineContext.Stadiums                               where checked(s.Capacity - 20000) > 30000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline15 = from s in baseLineContext.Stadiums                               where checked(s.Capacity - 20000) > 30000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable16 = from s in context.CreateQuery<Stadium>("Stadiums")                                where checked(s.Capacity * 2) > 100000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var queryable16 = from s in context.CreateQuery<Stadium>("Stadiums")                                where checked(s.Capacity * 2) > 100000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline16 = from s in baseLineContext.Stadiums                               where checked(s.Capacity * 2) > 100000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInFilter,The following statement contains a magic number: var baseline16 = from s in baseLineContext.Stadiums                               where checked(s.Capacity * 2) > 100000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable = from s in context.CreateQuery<Stadium>("Stadiums")                              orderby s.Capacity < 50000                              && s.City == "Seattle"                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline = from s in baseLineContext.Stadiums                             orderby s.Capacity < 50000                             && s.City == "Seattle"                             select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable2 = from s in context.CreateQuery<Stadium>("Stadiums")                               orderby s.Capacity < 50000                               || s.City == "Seattle"                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline2 = from s in baseLineContext.Stadiums                              orderby s.Capacity < 50000                              || s.City == "Seattle"                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable5 = from s in context.CreateQuery<Stadium>("Stadiums")                               orderby s.Capacity < 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline5 = from s in baseLineContext.Stadiums                              orderby s.Capacity < 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable6 = from s in context.CreateQuery<Stadium>("Stadiums")                               orderby s.Capacity <= 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline6 = from s in baseLineContext.Stadiums                              orderby s.Capacity <= 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable7 = from s in context.CreateQuery<Stadium>("Stadiums")                               orderby s.Capacity > 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline7 = from s in baseLineContext.Stadiums                              orderby s.Capacity > 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable8 = from s in context.CreateQuery<Stadium>("Stadiums")                               orderby s.Capacity >= 50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline8 = from s in baseLineContext.Stadiums                              orderby s.Capacity >= 50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable9 = from s in context.CreateQuery<Stadium>("Stadiums")                               orderby s.Capacity + 20000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline9 = from s in baseLineContext.Stadiums                              orderby s.Capacity + 20000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable10 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby s.Capacity - 20000                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline10 = from s in baseLineContext.Stadiums                               orderby s.Capacity - 20000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable11 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby s.Capacity * 2                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline11 = from s in baseLineContext.Stadiums                               orderby s.Capacity * 2                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable12 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby s.Capacity / 2                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline12 = from s in baseLineContext.Stadiums                               orderby s.Capacity / 2                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable13 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby s.Capacity % 1000 == 0                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline13 = from s in baseLineContext.Stadiums                               orderby s.Capacity % 1000 == 0                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable14 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby checked(s.Capacity + 20000)                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline14 = from s in baseLineContext.Stadiums                               orderby checked(s.Capacity + 20000)                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable15 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby checked(s.Capacity - 20000)                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline15 = from s in baseLineContext.Stadiums                               orderby checked(s.Capacity - 20000)                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var queryable16 = from s in context.CreateQuery<Stadium>("Stadiums")                                orderby checked(s.Capacity * 2)                                select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqBinaryExpressionsInOrderBy,The following statement contains a magic number: var baseline16 = from s in baseLineContext.Stadiums                               orderby s.Capacity * 2                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqUnaryExpressionsInFilter,The following statement contains a magic number: var queryable4 = from s in context.CreateQuery<Stadium>("Stadiums")                               where -s.Capacity < -50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqUnaryExpressionsInFilter,The following statement contains a magic number: var baseline4 = from s in baseLineContext.Stadiums                              where -s.Capacity < -50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqUnaryExpressionsInFilter,The following statement contains a magic number: var queryable5 = from s in context.CreateQuery<Stadium>("Stadiums")                               where checked(-s.Capacity) < -50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqUnaryExpressionsInFilter,The following statement contains a magic number: var baseline5 = from s in baseLineContext.Stadiums                              where checked(-s.Capacity) < -50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqUnaryExpressionsInFilter,The following statement contains a magic number: var queryable6 = from s in context.CreateQuery<Stadium>("Stadiums")                               where +s.Capacity < +50000                               select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqUnaryExpressionsInFilter,The following statement contains a magic number: var baseline6 = from s in baseLineContext.Stadiums                              where +s.Capacity < +50000                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Negative_1,The following statement contains a magic number: var queryable = from le in context.CreateQuery<League>("Leagues")                              where (le.ID == 1 && le.ID == 2)                              select le;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Negative_2,The following statement contains a magic number: var queryable = (from le in context.CreateQuery<League>("Leagues")                               where (le.ID == 1)                               select le).Where(le => le.ID == 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Positive,The following statement contains a magic number: queryable = (from t in context.CreateQuery<Team>("Teams")                           where t.TeamID == 1 && t.TeamName != ""                           select t).Where(t => t.TeamID == 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Positive,The following statement contains a magic number: baseline = (from t in baseLineContext.Teams                          where t.TeamID == 1 && t.TeamName != ""                          select t).Where(t => t.TeamID == 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Positive,The following statement contains a magic number: queryable = (from t in context.CreateQuery<Team>("Teams")                           where t.TeamID == 1                           select t)                          .Where(t => t.TeamName != "")                          .Where(t => t.TeamID == 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Positive,The following statement contains a magic number: baseline = (from t in baseLineContext.Teams                          where t.TeamID == 1 && t.TeamName != ""                          select t)                          .Where(t => t.TeamName != "")                          .Where(t => t.TeamID == 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Order,The following statement contains a magic number: var queryable = (from t in context.CreateQuery<MultipleKeyType>("MoreVar1")                                   where t.Key1 == 1 && t.Key2 == "23" && t.Key3 == 37                                   select t.Data1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Order,The following statement contains a magic number: var baseline = (from t in baseLineContext.MoreVar1                                  where t.Key1 == 1 && t.Key2 == "23" && t.Key3 == 37                                  select t.Data1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Order,The following statement contains a magic number: var queryable = (from t in context.CreateQuery<MultipleKeyType>("MoreVar1")                                   where t.Key2 == "23" && t.Key1 == 1 && t.Key3 == 37                                   select t.Data1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqKeyPredicate_Order,The following statement contains a magic number: var baseline = (from t in baseLineContext.MoreVar1                                  where t.Key2 == "23" && t.Key1 == 1 && t.Key3 == 37                                  select t.Data1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_DirectProjection1,The following statement contains a magic number: var queryable = from c in context.CreateQuery<northwindClient.Customers>("Customers")                                  where c.CustomerID == "ALFKI"                                  from o in c.Orders                                  where o.OrderID == 10643                                  from od in o.Order_Details                                  where (od.OrderID == 10643 && od.ProductID == 28)                                  select new { OrderID = od.OrderID' ProductID = od.ProductID' Orders = od.Orders' Products = od.Products };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_DirectProjection1,The following statement contains a magic number: var queryable = from c in context.CreateQuery<northwindClient.Customers>("Customers")                                  where c.CustomerID == "ALFKI"                                  from o in c.Orders                                  where o.OrderID == 10643                                  from od in o.Order_Details                                  where (od.OrderID == 10643 && od.ProductID == 28)                                  select new { OrderID = od.OrderID' ProductID = od.ProductID' Orders = od.Orders' Products = od.Products };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTransparentIdentifier_DirectProjection1,The following statement contains a magic number: var queryable = from c in context.CreateQuery<northwindClient.Customers>("Customers")                                  where c.CustomerID == "ALFKI"                                  from o in c.Orders                                  where o.OrderID == 10643                                  from od in o.Order_Details                                  where (od.OrderID == 10643 && od.ProductID == 28)                                  select new { OrderID = od.OrderID' ProductID = od.ProductID' Orders = od.Orders' Products = od.Products };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var queryable = from s in context.CreateQuery<Stadium>("Stadiums")                              where (s.Capacity > 30000 && s.Capacity < 60000) ||                              s.City == "Chicago" || s.ID != 1                              orderby s.City                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var queryable = from s in context.CreateQuery<Stadium>("Stadiums")                              where (s.Capacity > 30000 && s.Capacity < 60000) ||                              s.City == "Chicago" || s.ID != 1                              orderby s.City                              select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var baseline = from s in baseLineContext.Stadiums                             where (s.Capacity > 30000 && s.Capacity < 60000) ||                             s.City == "Chicago" || s.ID != 1                             orderby s.City                             select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var baseline = from s in baseLineContext.Stadiums                             where (s.Capacity > 30000 && s.Capacity < 60000) ||                             s.City == "Chicago" || s.ID != 1                             orderby s.City                             select s;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var queryable3 = from t in context.CreateQuery<Stadium>("Stadiums")                               orderby t.City' t.Capacity * 2' t.Capacity * 3                               select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var queryable3 = from t in context.CreateQuery<Stadium>("Stadiums")                               orderby t.City' t.Capacity * 2' t.Capacity * 3                               select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var baseline3 = from t in baseLineContext.Stadiums                              orderby t.City' t.Capacity * 2' t.Capacity * 3                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqComplexExpressionsInQueryOptions,The following statement contains a magic number: var baseline3 = from t in baseLineContext.Stadiums                              orderby t.City' t.Capacity * 2' t.Capacity * 3                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,TestMethod1,The following statement contains a magic number: return 5;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqPathsInQueryOptions,The following statement contains a magic number: var queryable = from t in context.CreateQuery<Team>("Teams")                              where t.HomeStadium != null &&                                  t.HomeStadium.Capacity > 10000                              orderby t.HomeStadium.City                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqPathsInQueryOptions,The following statement contains a magic number: var baseline = from t in baseLineContext.Teams                             where t.HomeStadium != null &&                                  t.HomeStadium.Capacity > 10000                             orderby t.HomeStadium.City                             select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Decimal != 5.57M                          orderby t.Decimal                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Decimal != 5.57M                         orderby t.Decimal                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Double != 1.1112d                          orderby t.Double                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Double != 1.1112d                         orderby t.Double                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Float != 1.1112f                          orderby t.Float                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Float != 1.1112f                         orderby t.Float                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                          orderby t.Guid                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Guid != new Guid(1' 1' 3' new byte[] { 4' 6' 4' 1' 7' 3' 3' 3 })                         orderby t.Guid                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Short > -3                          orderby t.Short                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Short > -3                         orderby t.Short                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Int != -3                          orderby t.Int                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Int != -3                         orderby t.Int                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.Long > -3                          orderby t.Long                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.Long > -3                         orderby t.Long                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                          orderby t.DateTimeOffset                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                          orderby t.DateTimeOffset                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                          orderby t.DateTimeOffset                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                          orderby t.DateTimeOffset                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                         orderby t.DateTimeOffset                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                         orderby t.DateTimeOffset                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                         orderby t.DateTimeOffset                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.DateTimeOffset != new DateTimeOffset(new DateTime(1985' 5' 24)' TimeSpan.FromHours(-8.0))                         orderby t.DateTimeOffset                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: queryable = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where t.TimeSpan != TimeSpan.FromHours(2.0)                          orderby t.TimeSpan                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDataTypes,The following statement contains a magic number: baseline = from t in baseLineContext.Var1                         where t.TimeSpan != TimeSpan.FromHours(2.0)                         orderby t.TimeSpan                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqSpecialVBAndOr,The following statement contains a magic number: int? y = 63;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The following statement contains a magic number: var queryable5 = from x in                                   (from l in context.CreateQuery<League>("Leagues")                                    where l.ID == 1                                    from t in l.Teams                                    select t).AsEnumerable()                               select new { x.City' x.TeamName' Stadium = x.HomeStadium' constant = 5 };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The following statement contains a magic number: var baseline5 = from l in baseLineContext.Leagues                              where l.ID == 1                              from t in l.Teams                              select new { t.City' t.TeamName' Stadium = t.HomeStadium' constant = 5 };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The following statement contains a magic number: var queryable6 = from x in                                   (from s in context.CreateQuery<Stadium>("Stadiums")                                    where s.Capacity > 30000                                    orderby s.Name                                    select s).AsEnumerable()                               select new { x.City' x.Capacity };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The following statement contains a magic number: var baseline6 = from s in baseLineContext.Stadiums                              where s.Capacity > 30000                              orderby s.Name                              select new { s.City' s.Capacity };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The following statement contains a magic number: var queryable7 = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                        orderby t.TeamName                                                        select t).Expand("HomeStadium").AsEnumerable().                               Select(t => new { t.City' t.TeamName' t.HomeStadium' constant = 5 });
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV1Projections,The following statement contains a magic number: var baseline7 = from t in baseLineContext.Teams                              orderby t.TeamName                              select new { t.City' t.TeamName' t.HomeStadium' constant = 5 };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2SimpleProjections,The following statement contains a magic number: var queryable4 = from s in context.CreateQuery<Stadium>("Stadiums")                               select new { A = s.ID' City = s.City + "City"' Sponsor = new { StadiumSponsorID = s.Sponsor.StadiumSponsorID * 2 } };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2SimpleProjections,The following statement contains a magic number: var baseline4 = from s in baseLineContext.Stadiums                              select new { A = s.ID' City = s.City + "City"' Sponsor = new { StadiumSponsorID = s.Sponsor.StadiumSponsorID * 2 } };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var queryable3 = ((DataServiceQuery<LittleCity>)(from s in context.CreateQuery<BigCity>("BigCities")                                                               select new LittleCity                                                               {                                                                   Mayor = s.Mayor'                                                                   BigCityID = s.BigCityID'                                                               }).Skip(2).Take(2)).AddQueryOption("foo"' 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var queryable3 = ((DataServiceQuery<LittleCity>)(from s in context.CreateQuery<BigCity>("BigCities")                                                               select new LittleCity                                                               {                                                                   Mayor = s.Mayor'                                                                   BigCityID = s.BigCityID'                                                               }).Skip(2).Take(2)).AddQueryOption("foo"' 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var queryable3 = ((DataServiceQuery<LittleCity>)(from s in context.CreateQuery<BigCity>("BigCities")                                                               select new LittleCity                                                               {                                                                   Mayor = s.Mayor'                                                                   BigCityID = s.BigCityID'                                                               }).Skip(2).Take(2)).AddQueryOption("foo"' 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var baseline3 = (from s in baseLineContext.BigCities                               select new LittleCity                               {                                   Mayor = s.Mayor'                                   BigCityID = s.BigCityID'                               }).Skip(2).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var baseline3 = (from s in baseLineContext.BigCities                               select new LittleCity                               {                                   Mayor = s.Mayor'                                   BigCityID = s.BigCityID'                               }).Skip(2).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var queryable4 = ((DataServiceQuery<LittleCityNotAnEntity>)(from s in context.CreateQuery<BigCity>("BigCities")                                                                          select new LittleCityNotAnEntity                                                                          {                                                                              Mayor = s.Mayor'                                                                              BigCityID = s.BigCityID.ToString()'                                                                          }).Skip(2).Take(2)).AddQueryOption("foo"' 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var queryable4 = ((DataServiceQuery<LittleCityNotAnEntity>)(from s in context.CreateQuery<BigCity>("BigCities")                                                                          select new LittleCityNotAnEntity                                                                          {                                                                              Mayor = s.Mayor'                                                                              BigCityID = s.BigCityID.ToString()'                                                                          }).Skip(2).Take(2)).AddQueryOption("foo"' 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var queryable4 = ((DataServiceQuery<LittleCityNotAnEntity>)(from s in context.CreateQuery<BigCity>("BigCities")                                                                          select new LittleCityNotAnEntity                                                                          {                                                                              Mayor = s.Mayor'                                                                              BigCityID = s.BigCityID.ToString()'                                                                          }).Skip(2).Take(2)).AddQueryOption("foo"' 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var baseline4 = (from s in baseLineContext.BigCities                               select new LittleCityNotAnEntity                               {                                   Mayor = s.Mayor'                                   BigCityID = s.BigCityID.ToString()'                               }).Skip(2).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsQueryOptions,The following statement contains a magic number: var baseline4 = (from s in baseLineContext.BigCities                               select new LittleCityNotAnEntity                               {                                   Mayor = s.Mayor'                                   BigCityID = s.BigCityID.ToString()'                               }).Skip(2).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsCount,The following statement contains a magic number: var count1 = (from c in context.CreateQuery<BigCity>("BigCities")                            select new                            {                                Id = c.BigCityID / 2'                                Name = c.Name + "ghghghg"                            }).Count();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsCount,The following statement contains a magic number: var baselineCount1 = (from c in baseLineContext.BigCities                                    select new                                    {                                        Id = c.BigCityID / 2'                                        Name = c.Name + "ghghghg"                                    }).Count();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsCount,The following statement contains a magic number: var count3 = (from c in context.CreateQuery<BigCity>("BigCities")                            select new                            {                                Id = c.BigCityID / 2'                                Name = c.Name + "ghghghg"                            }).LongCount();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsCount,The following statement contains a magic number: var baselineCount3 = (from c in baseLineContext.BigCities                                    select new                                    {                                        Id = c.BigCityID / 2'                                        Name = c.Name + "ghghghg"                                    }).LongCount();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable1 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   a = c.BigCityID + c.BigCityID'   // add                                   b = checked(c.BigCityID + c.BigCityID)' // add checked                                   c = c.Name != null && c.State.StateName != null'  // and                                   d = c.Name != null || c.State.StateName != null'  // or                                   e = (new string[] { c.Name }[0])' // array init' array index                                   f = (new string[] { c.Name }).Length' // array length                                   h = c.Name.EndsWith(c.Name)' // method call - object and param.                                   i = (int)c.BigCityID' // cast                                   j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                   k = 5' // constant                                   l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                   m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                   n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                   o = (object)(c.BigCityID) is long' // type is                                   p = c.Name as string' // type as                                   q = c.BigCityID - c.BigCityID' // subtraction                                   r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                   s = c.BigCityID % c.BigCityID' // modula                                   t = checked(c.BigCityID % c.BigCityID)' // modula checked                                   u = -c.BigCityID' // negate                                   v = checked(-c.BigCityID)' // negate checked                                   w = !c.HasBaseballTeam' // not                                   x = c.BigCityID == c.BigCityID' // equal                                   y = c.BigCityID != c.BigCityID' // not equal                                   z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                   bb = c.BigCityID | c.BigCityID' // |                                   cc = c.BigCityID << 5' // <<                                   dd = c.BigCityID >> 3' // >>                                   ee = c.Mayor ?? c.Name // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable1 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   a = c.BigCityID + c.BigCityID'   // add                                   b = checked(c.BigCityID + c.BigCityID)' // add checked                                   c = c.Name != null && c.State.StateName != null'  // and                                   d = c.Name != null || c.State.StateName != null'  // or                                   e = (new string[] { c.Name }[0])' // array init' array index                                   f = (new string[] { c.Name }).Length' // array length                                   h = c.Name.EndsWith(c.Name)' // method call - object and param.                                   i = (int)c.BigCityID' // cast                                   j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                   k = 5' // constant                                   l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                   m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                   n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                   o = (object)(c.BigCityID) is long' // type is                                   p = c.Name as string' // type as                                   q = c.BigCityID - c.BigCityID' // subtraction                                   r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                   s = c.BigCityID % c.BigCityID' // modula                                   t = checked(c.BigCityID % c.BigCityID)' // modula checked                                   u = -c.BigCityID' // negate                                   v = checked(-c.BigCityID)' // negate checked                                   w = !c.HasBaseballTeam' // not                                   x = c.BigCityID == c.BigCityID' // equal                                   y = c.BigCityID != c.BigCityID' // not equal                                   z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                   bb = c.BigCityID | c.BigCityID' // |                                   cc = c.BigCityID << 5' // <<                                   dd = c.BigCityID >> 3' // >>                                   ee = c.Mayor ?? c.Name // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable1 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   a = c.BigCityID + c.BigCityID'   // add                                   b = checked(c.BigCityID + c.BigCityID)' // add checked                                   c = c.Name != null && c.State.StateName != null'  // and                                   d = c.Name != null || c.State.StateName != null'  // or                                   e = (new string[] { c.Name }[0])' // array init' array index                                   f = (new string[] { c.Name }).Length' // array length                                   h = c.Name.EndsWith(c.Name)' // method call - object and param.                                   i = (int)c.BigCityID' // cast                                   j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                   k = 5' // constant                                   l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                   m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                   n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                   o = (object)(c.BigCityID) is long' // type is                                   p = c.Name as string' // type as                                   q = c.BigCityID - c.BigCityID' // subtraction                                   r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                   s = c.BigCityID % c.BigCityID' // modula                                   t = checked(c.BigCityID % c.BigCityID)' // modula checked                                   u = -c.BigCityID' // negate                                   v = checked(-c.BigCityID)' // negate checked                                   w = !c.HasBaseballTeam' // not                                   x = c.BigCityID == c.BigCityID' // equal                                   y = c.BigCityID != c.BigCityID' // not equal                                   z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                   bb = c.BigCityID | c.BigCityID' // |                                   cc = c.BigCityID << 5' // <<                                   dd = c.BigCityID >> 3' // >>                                   ee = c.Mayor ?? c.Name // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable1 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   a = c.BigCityID + c.BigCityID'   // add                                   b = checked(c.BigCityID + c.BigCityID)' // add checked                                   c = c.Name != null && c.State.StateName != null'  // and                                   d = c.Name != null || c.State.StateName != null'  // or                                   e = (new string[] { c.Name }[0])' // array init' array index                                   f = (new string[] { c.Name }).Length' // array length                                   h = c.Name.EndsWith(c.Name)' // method call - object and param.                                   i = (int)c.BigCityID' // cast                                   j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                   k = 5' // constant                                   l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                   m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                   n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                   o = (object)(c.BigCityID) is long' // type is                                   p = c.Name as string' // type as                                   q = c.BigCityID - c.BigCityID' // subtraction                                   r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                   s = c.BigCityID % c.BigCityID' // modula                                   t = checked(c.BigCityID % c.BigCityID)' // modula checked                                   u = -c.BigCityID' // negate                                   v = checked(-c.BigCityID)' // negate checked                                   w = !c.HasBaseballTeam' // not                                   x = c.BigCityID == c.BigCityID' // equal                                   y = c.BigCityID != c.BigCityID' // not equal                                   z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                   bb = c.BigCityID | c.BigCityID' // |                                   cc = c.BigCityID << 5' // <<                                   dd = c.BigCityID >> 3' // >>                                   ee = c.Mayor ?? c.Name // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable1 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   a = c.BigCityID + c.BigCityID'   // add                                   b = checked(c.BigCityID + c.BigCityID)' // add checked                                   c = c.Name != null && c.State.StateName != null'  // and                                   d = c.Name != null || c.State.StateName != null'  // or                                   e = (new string[] { c.Name }[0])' // array init' array index                                   f = (new string[] { c.Name }).Length' // array length                                   h = c.Name.EndsWith(c.Name)' // method call - object and param.                                   i = (int)c.BigCityID' // cast                                   j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                   k = 5' // constant                                   l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                   m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                   n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                   o = (object)(c.BigCityID) is long' // type is                                   p = c.Name as string' // type as                                   q = c.BigCityID - c.BigCityID' // subtraction                                   r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                   s = c.BigCityID % c.BigCityID' // modula                                   t = checked(c.BigCityID % c.BigCityID)' // modula checked                                   u = -c.BigCityID' // negate                                   v = checked(-c.BigCityID)' // negate checked                                   w = !c.HasBaseballTeam' // not                                   x = c.BigCityID == c.BigCityID' // equal                                   y = c.BigCityID != c.BigCityID' // not equal                                   z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                   bb = c.BigCityID | c.BigCityID' // |                                   cc = c.BigCityID << 5' // <<                                   dd = c.BigCityID >> 3' // >>                                   ee = c.Mayor ?? c.Name // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline1 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  a = c.BigCityID + c.BigCityID'   // add                                  b = checked(c.BigCityID + c.BigCityID)' // add checked                                  c = c.Name != null && c.State != null'  // and                                  d = c.Name != null || c.State != null'  // or                                  e = (new string[] { c.Name' c.Name' c.Name }[c.BigCityID])' // array init' array index                                  f = (new string[] { c.Name }).Length' // array length                                  h = c.Name.EndsWith(c.Name)' // method call - object and param.                                  i = (int)c.BigCityID' // cast                                  j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                  k = 5' // constant                                  l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                  m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                  n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                  o = (object)(c.BigCityID) is long' // type is                                  p = c.Name as string' // type as                                  q = c.BigCityID - c.BigCityID' // subtraction                                  r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                  s = c.BigCityID % c.BigCityID' // modula                                  t = checked(c.BigCityID % c.BigCityID)' // modula checked                                  u = -c.BigCityID' // negate                                  v = checked(-c.BigCityID)' // negate checked                                  w = !c.HasBaseballTeam' // not                                  x = c.BigCityID == c.BigCityID' // equal                                  y = c.BigCityID != c.BigCityID' // not equal                                  z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                  bb = c.BigCityID | c.BigCityID' // |                                  cc = c.BigCityID << 5' // <<                                  dd = c.BigCityID >> 3' // >>                                  ee = c.Mayor ?? c.Name // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline1 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  a = c.BigCityID + c.BigCityID'   // add                                  b = checked(c.BigCityID + c.BigCityID)' // add checked                                  c = c.Name != null && c.State != null'  // and                                  d = c.Name != null || c.State != null'  // or                                  e = (new string[] { c.Name' c.Name' c.Name }[c.BigCityID])' // array init' array index                                  f = (new string[] { c.Name }).Length' // array length                                  h = c.Name.EndsWith(c.Name)' // method call - object and param.                                  i = (int)c.BigCityID' // cast                                  j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                  k = 5' // constant                                  l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                  m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                  n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                  o = (object)(c.BigCityID) is long' // type is                                  p = c.Name as string' // type as                                  q = c.BigCityID - c.BigCityID' // subtraction                                  r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                  s = c.BigCityID % c.BigCityID' // modula                                  t = checked(c.BigCityID % c.BigCityID)' // modula checked                                  u = -c.BigCityID' // negate                                  v = checked(-c.BigCityID)' // negate checked                                  w = !c.HasBaseballTeam' // not                                  x = c.BigCityID == c.BigCityID' // equal                                  y = c.BigCityID != c.BigCityID' // not equal                                  z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                  bb = c.BigCityID | c.BigCityID' // |                                  cc = c.BigCityID << 5' // <<                                  dd = c.BigCityID >> 3' // >>                                  ee = c.Mayor ?? c.Name // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline1 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  a = c.BigCityID + c.BigCityID'   // add                                  b = checked(c.BigCityID + c.BigCityID)' // add checked                                  c = c.Name != null && c.State != null'  // and                                  d = c.Name != null || c.State != null'  // or                                  e = (new string[] { c.Name' c.Name' c.Name }[c.BigCityID])' // array init' array index                                  f = (new string[] { c.Name }).Length' // array length                                  h = c.Name.EndsWith(c.Name)' // method call - object and param.                                  i = (int)c.BigCityID' // cast                                  j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                  k = 5' // constant                                  l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                  m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                  n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                  o = (object)(c.BigCityID) is long' // type is                                  p = c.Name as string' // type as                                  q = c.BigCityID - c.BigCityID' // subtraction                                  r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                  s = c.BigCityID % c.BigCityID' // modula                                  t = checked(c.BigCityID % c.BigCityID)' // modula checked                                  u = -c.BigCityID' // negate                                  v = checked(-c.BigCityID)' // negate checked                                  w = !c.HasBaseballTeam' // not                                  x = c.BigCityID == c.BigCityID' // equal                                  y = c.BigCityID != c.BigCityID' // not equal                                  z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                  bb = c.BigCityID | c.BigCityID' // |                                  cc = c.BigCityID << 5' // <<                                  dd = c.BigCityID >> 3' // >>                                  ee = c.Mayor ?? c.Name // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline1 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  a = c.BigCityID + c.BigCityID'   // add                                  b = checked(c.BigCityID + c.BigCityID)' // add checked                                  c = c.Name != null && c.State != null'  // and                                  d = c.Name != null || c.State != null'  // or                                  e = (new string[] { c.Name' c.Name' c.Name }[c.BigCityID])' // array init' array index                                  f = (new string[] { c.Name }).Length' // array length                                  h = c.Name.EndsWith(c.Name)' // method call - object and param.                                  i = (int)c.BigCityID' // cast                                  j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                  k = 5' // constant                                  l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                  m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                  n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                  o = (object)(c.BigCityID) is long' // type is                                  p = c.Name as string' // type as                                  q = c.BigCityID - c.BigCityID' // subtraction                                  r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                  s = c.BigCityID % c.BigCityID' // modula                                  t = checked(c.BigCityID % c.BigCityID)' // modula checked                                  u = -c.BigCityID' // negate                                  v = checked(-c.BigCityID)' // negate checked                                  w = !c.HasBaseballTeam' // not                                  x = c.BigCityID == c.BigCityID' // equal                                  y = c.BigCityID != c.BigCityID' // not equal                                  z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                  bb = c.BigCityID | c.BigCityID' // |                                  cc = c.BigCityID << 5' // <<                                  dd = c.BigCityID >> 3' // >>                                  ee = c.Mayor ?? c.Name // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline1 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  a = c.BigCityID + c.BigCityID'   // add                                  b = checked(c.BigCityID + c.BigCityID)' // add checked                                  c = c.Name != null && c.State != null'  // and                                  d = c.Name != null || c.State != null'  // or                                  e = (new string[] { c.Name' c.Name' c.Name }[c.BigCityID])' // array init' array index                                  f = (new string[] { c.Name }).Length' // array length                                  h = c.Name.EndsWith(c.Name)' // method call - object and param.                                  i = (int)c.BigCityID' // cast                                  j = c.BigCityID > 0 ? c.Name : c.State.StateName' // conditional                                  k = 5' // constant                                  l = (c.BigCityID * c.BigCityID) / c.BigCityID' // multiply' divide                                  m = checked((checked(c.BigCityID * c.BigCityID)) / c.BigCityID)' // multiply' divide checked                                  n = (c.BigCityID > 1) && (c.BigCityID < 5) && (c.BigCityID <= 4) && (c.BigCityID >= 1)' // <' >' <=' >=                                  o = (object)(c.BigCityID) is long' // type is                                  p = c.Name as string' // type as                                  q = c.BigCityID - c.BigCityID' // subtraction                                  r = checked(c.BigCityID - c.BigCityID)' //subtraction checked                                  s = c.BigCityID % c.BigCityID' // modula                                  t = checked(c.BigCityID % c.BigCityID)' // modula checked                                  u = -c.BigCityID' // negate                                  v = checked(-c.BigCityID)' // negate checked                                  w = !c.HasBaseballTeam' // not                                  x = c.BigCityID == c.BigCityID' // equal                                  y = c.BigCityID != c.BigCityID' // not equal                                  z = (int)c.BigCityID' // cast                                   aa = c.BigCityID & c.BigCityID' // &                                  bb = c.BigCityID | c.BigCityID' // |                                  cc = c.BigCityID << 5' // <<                                  dd = c.BigCityID >> 3' // >>                                  ee = c.Mayor ?? c.Name // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' object>>> selectors = new List<Expression<Func<BigCity' object>>>()               {                   bc => new { a = bc + bc }'  // addition                  bc => new { a = checked( bc + bc) }' // addition checked                  bc => new { a = bc - bc }' // subtraction                  bc => new { a = checked( bc - bc) }' // subtraction checked                  bc => new { a = bc * bc }'  // multiplication                  bc => new { a = checked( bc * bc) }' // multiplication checked                  bc => new { a = bc / bc }' // division                  bc => new { a = checked( bc / bc) }' // division checked                  bc => new { a = bc % bc }'  // modula                  bc => new { a = checked( bc % bc) }' // modula checked                  bc => new { a = (LittleCity3)bc }' // cast                  bc => new { a = (BigCityComplexType)bc }' // cast                  bc => new { a = bc ? 1 : 0 }' // conditional                  bc => new { a = true ? bc : null }' // conditional                  bc => new { a = false ? null : bc }' // conditional                  bc => new { a = bc < new BigCity() }' // <                  bc => new { a = new BigCity() <= bc }' // <=                  bc => new { a = new BigCity() < bc }' // >                  bc => new { a = bc <= new BigCity() }' // >=                  bc => new { a = bc is DerivedBigCity }' // type is                  bc => new { a = bc as DerivedBigCity }' // type as                  bc => new { a = - bc  }' // negate                  bc => new { a = checked (-bc)}' // negate checked                  bc => new { a = !bc  }' // not                  bc => new { a = new BigCity() == bc }' // equal                  bc => new { a = bc != new BigCity() }' // not equal                  bc => new { a = bc&bc }' // &                  bc => new { a = bc|bc }' // |                  bc => new { a = bc << 5 }' // <<                  bc => new { a = bc >> 3 }' // >>                  bc => new { a = ~bc }' // ~                  bc => new { a = bc.GetType() }' // method call                  bc => new { a = FuncThatTakesBigCity(bc) }'  // parameter to method                  bc => new { a = func2(bc) }' // delegate                  bc => new { a = bc ?? bc } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' object>>> selectors = new List<Expression<Func<BigCity' object>>>()               {                   bc => new { a = bc + bc }'  // addition                  bc => new { a = checked( bc + bc) }' // addition checked                  bc => new { a = bc - bc }' // subtraction                  bc => new { a = checked( bc - bc) }' // subtraction checked                  bc => new { a = bc * bc }'  // multiplication                  bc => new { a = checked( bc * bc) }' // multiplication checked                  bc => new { a = bc / bc }' // division                  bc => new { a = checked( bc / bc) }' // division checked                  bc => new { a = bc % bc }'  // modula                  bc => new { a = checked( bc % bc) }' // modula checked                  bc => new { a = (LittleCity3)bc }' // cast                  bc => new { a = (BigCityComplexType)bc }' // cast                  bc => new { a = bc ? 1 : 0 }' // conditional                  bc => new { a = true ? bc : null }' // conditional                  bc => new { a = false ? null : bc }' // conditional                  bc => new { a = bc < new BigCity() }' // <                  bc => new { a = new BigCity() <= bc }' // <=                  bc => new { a = new BigCity() < bc }' // >                  bc => new { a = bc <= new BigCity() }' // >=                  bc => new { a = bc is DerivedBigCity }' // type is                  bc => new { a = bc as DerivedBigCity }' // type as                  bc => new { a = - bc  }' // negate                  bc => new { a = checked (-bc)}' // negate checked                  bc => new { a = !bc  }' // not                  bc => new { a = new BigCity() == bc }' // equal                  bc => new { a = bc != new BigCity() }' // not equal                  bc => new { a = bc&bc }' // &                  bc => new { a = bc|bc }' // |                  bc => new { a = bc << 5 }' // <<                  bc => new { a = bc >> 3 }' // >>                  bc => new { a = ~bc }' // ~                  bc => new { a = bc.GetType() }' // method call                  bc => new { a = FuncThatTakesBigCity(bc) }'  // parameter to method                  bc => new { a = func2(bc) }' // delegate                  bc => new { a = bc ?? bc } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' DummyEntity>>> selectors2 = new List<Expression<Func<BigCity' DummyEntity>>>()               {                   bc => new DummyEntity{ a = bc + bc }'  // addition                  bc => new DummyEntity{ a = checked( bc + bc) }' // addition checked                  bc => new DummyEntity{ a = bc - bc }' // subtraction                  bc => new DummyEntity{ a = checked( bc - bc) }' // subtraction checked                  bc => new DummyEntity{ a = bc * bc }'  // multiplication                  bc => new DummyEntity{ a = checked( bc * bc) }' // multiplication checked                  bc => new DummyEntity{ a = bc / bc }' // division                  bc => new DummyEntity{ a = checked( bc / bc) }' // division checked                  bc => new DummyEntity{ a = bc % bc }'  // modula                  bc => new DummyEntity{ a = checked( bc % bc) }' // modula checked                  bc => new DummyEntity{ a = (LittleCity3)bc }' // cast                  bc => new DummyEntity{ a = (BigCityComplexType)bc }' // cast                  bc => new DummyEntity{ a = bc ? 1 : 0 }' // conditional                  bc => new DummyEntity{ a = true ? bc : null }' // conditional                  bc => new DummyEntity{ a = false ? null : bc }' // conditional                  bc => new DummyEntity{ a = bc < new BigCity() }' // <                  bc => new DummyEntity{ a = new BigCity() <= bc }' // <=                  bc => new DummyEntity{ a = new BigCity() < bc }' // >                  bc => new DummyEntity{ a = bc <= new BigCity() }' // >=                  bc => new DummyEntity{ a = bc is DerivedBigCity }' // type is                  bc => new DummyEntity{ a = bc as DerivedBigCity }' // type as                  bc => new DummyEntity{ a = - bc  }' // negate                  bc => new DummyEntity{ a = checked (-bc)}' // negate checked                  bc => new DummyEntity{ a = !bc  }' // not                  bc => new DummyEntity{ a = new BigCity() == bc }' // equal                  bc => new DummyEntity{ a = bc != new BigCity() }' // not equal                  bc => new DummyEntity{ a = bc&bc }' // &                  bc => new DummyEntity{ a = bc|bc }' // |                  bc => new DummyEntity{ a = bc << 5 }' // <<                  bc => new DummyEntity{ a = bc >> 3 }' // >>                  bc => new DummyEntity{ a = ~bc }' // ~                  bc => new DummyEntity{ a = bc.GetType() }' // method call                  bc => new DummyEntity{ a = FuncThatTakesBigCity(bc) }'  // parameter to method                  bc => new DummyEntity{ a = func2(bc) }'  // parameter to delegate                  bc => new DummyEntity{ a = bc ?? bc.State.TopCity } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' DummyEntity>>> selectors2 = new List<Expression<Func<BigCity' DummyEntity>>>()               {                   bc => new DummyEntity{ a = bc + bc }'  // addition                  bc => new DummyEntity{ a = checked( bc + bc) }' // addition checked                  bc => new DummyEntity{ a = bc - bc }' // subtraction                  bc => new DummyEntity{ a = checked( bc - bc) }' // subtraction checked                  bc => new DummyEntity{ a = bc * bc }'  // multiplication                  bc => new DummyEntity{ a = checked( bc * bc) }' // multiplication checked                  bc => new DummyEntity{ a = bc / bc }' // division                  bc => new DummyEntity{ a = checked( bc / bc) }' // division checked                  bc => new DummyEntity{ a = bc % bc }'  // modula                  bc => new DummyEntity{ a = checked( bc % bc) }' // modula checked                  bc => new DummyEntity{ a = (LittleCity3)bc }' // cast                  bc => new DummyEntity{ a = (BigCityComplexType)bc }' // cast                  bc => new DummyEntity{ a = bc ? 1 : 0 }' // conditional                  bc => new DummyEntity{ a = true ? bc : null }' // conditional                  bc => new DummyEntity{ a = false ? null : bc }' // conditional                  bc => new DummyEntity{ a = bc < new BigCity() }' // <                  bc => new DummyEntity{ a = new BigCity() <= bc }' // <=                  bc => new DummyEntity{ a = new BigCity() < bc }' // >                  bc => new DummyEntity{ a = bc <= new BigCity() }' // >=                  bc => new DummyEntity{ a = bc is DerivedBigCity }' // type is                  bc => new DummyEntity{ a = bc as DerivedBigCity }' // type as                  bc => new DummyEntity{ a = - bc  }' // negate                  bc => new DummyEntity{ a = checked (-bc)}' // negate checked                  bc => new DummyEntity{ a = !bc  }' // not                  bc => new DummyEntity{ a = new BigCity() == bc }' // equal                  bc => new DummyEntity{ a = bc != new BigCity() }' // not equal                  bc => new DummyEntity{ a = bc&bc }' // &                  bc => new DummyEntity{ a = bc|bc }' // |                  bc => new DummyEntity{ a = bc << 5 }' // <<                  bc => new DummyEntity{ a = bc >> 3 }' // >>                  bc => new DummyEntity{ a = ~bc }' // ~                  bc => new DummyEntity{ a = bc.GetType() }' // method call                  bc => new DummyEntity{ a = FuncThatTakesBigCity(bc) }'  // parameter to method                  bc => new DummyEntity{ a = func2(bc) }'  // parameter to delegate                  bc => new DummyEntity{ a = bc ?? bc.State.TopCity } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' DummyEntity>>> selectors3 = new List<Expression<Func<BigCity' DummyEntity>>>()               {                   bc => new DummyEntity{ a = bc.BigCityID + bc.BigCityID }'  // addition                  bc => new DummyEntity{ a = checked( bc.BigCityID + bc.BigCityID) }' // addition checked                  bc => new DummyEntity{ a = bc.BigCityID - bc.BigCityID }' // subtraction                  bc => new DummyEntity{ a = checked( bc.BigCityID - bc.BigCityID) }' // subtraction checked                  bc => new DummyEntity{ a = bc.BigCityID * bc.BigCityID }'  // multiplication                  bc => new DummyEntity{ a = checked( bc.BigCityID * bc.BigCityID) }' // multiplication checked                  bc => new DummyEntity{ a = bc.BigCityID / bc.BigCityID }' // division                  bc => new DummyEntity{ a = checked( bc.BigCityID / bc.BigCityID) }' // division checked                  bc => new DummyEntity{ a = bc.BigCityID % bc.BigCityID }'  // modula                  bc => new DummyEntity{ a = checked( bc.BigCityID % bc.BigCityID) }' // modula checked                  bc => new DummyEntity{ a = (bool) bc.HasBaseballTeam ? 1 : 0 }' // conditional                  bc => new DummyEntity{ a = true ? bc.HasBaseballTeam : null }' // conditional                  bc => new DummyEntity{ a = false ? null : bc.HasBaseballTeam }' // conditional                  bc => new DummyEntity{ a = bc.BigCityID < new BigCity().BigCityID }' // <                  bc => new DummyEntity{ a = new BigCity().BigCityID <= bc.BigCityID }' // <=                  bc => new DummyEntity{ a = new BigCity().BigCityID < bc.BigCityID }' // >                  bc => new DummyEntity{ a = bc.BigCityID <= new BigCity().BigCityID }' // >=                  bc => new DummyEntity{ a = (object) bc.BigCityID is short }' // type is                  bc => new DummyEntity{ a = - bc.BigCityID  }' // negate                  bc => new DummyEntity{ a = checked (-bc.BigCityID)}' // negate checked                  bc => new DummyEntity{ a = !bc.HasBaseballTeam  }' // not                  bc => new DummyEntity{ a = new BigCity().BigCityID == bc.BigCityID }' // equal                  bc => new DummyEntity{ a = bc.HasBaseballTeam != new BigCity().HasBaseballTeam }' // not equal                  bc => new DummyEntity{ a = bc.BigCityID&bc.BigCityID }' // &                  bc => new DummyEntity{ a = bc.BigCityID|bc.BigCityID }' // |                  bc => new DummyEntity{ a = bc.BigCityID << 5 }' // <<                  bc => new DummyEntity{ a = bc.BigCityID >> 3 }' // >>                  bc => new DummyEntity{ a = ~bc.BigCityID }' // ~                  bc => new DummyEntity{ a = bc.BigCityID.GetType() }' // method call                  bc => new DummyEntity{ a = string.Concat(bc.Mayor' bc.Mayor) }'  // parameter to method                  bc => new DummyEntity{ a = func(bc.BigCityID' bc.Mayor)}'  // parameter to delegate                  bc => new DummyEntity{ a = bc.Name ?? bc.Mayor } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' DummyEntity>>> selectors3 = new List<Expression<Func<BigCity' DummyEntity>>>()               {                   bc => new DummyEntity{ a = bc.BigCityID + bc.BigCityID }'  // addition                  bc => new DummyEntity{ a = checked( bc.BigCityID + bc.BigCityID) }' // addition checked                  bc => new DummyEntity{ a = bc.BigCityID - bc.BigCityID }' // subtraction                  bc => new DummyEntity{ a = checked( bc.BigCityID - bc.BigCityID) }' // subtraction checked                  bc => new DummyEntity{ a = bc.BigCityID * bc.BigCityID }'  // multiplication                  bc => new DummyEntity{ a = checked( bc.BigCityID * bc.BigCityID) }' // multiplication checked                  bc => new DummyEntity{ a = bc.BigCityID / bc.BigCityID }' // division                  bc => new DummyEntity{ a = checked( bc.BigCityID / bc.BigCityID) }' // division checked                  bc => new DummyEntity{ a = bc.BigCityID % bc.BigCityID }'  // modula                  bc => new DummyEntity{ a = checked( bc.BigCityID % bc.BigCityID) }' // modula checked                  bc => new DummyEntity{ a = (bool) bc.HasBaseballTeam ? 1 : 0 }' // conditional                  bc => new DummyEntity{ a = true ? bc.HasBaseballTeam : null }' // conditional                  bc => new DummyEntity{ a = false ? null : bc.HasBaseballTeam }' // conditional                  bc => new DummyEntity{ a = bc.BigCityID < new BigCity().BigCityID }' // <                  bc => new DummyEntity{ a = new BigCity().BigCityID <= bc.BigCityID }' // <=                  bc => new DummyEntity{ a = new BigCity().BigCityID < bc.BigCityID }' // >                  bc => new DummyEntity{ a = bc.BigCityID <= new BigCity().BigCityID }' // >=                  bc => new DummyEntity{ a = (object) bc.BigCityID is short }' // type is                  bc => new DummyEntity{ a = - bc.BigCityID  }' // negate                  bc => new DummyEntity{ a = checked (-bc.BigCityID)}' // negate checked                  bc => new DummyEntity{ a = !bc.HasBaseballTeam  }' // not                  bc => new DummyEntity{ a = new BigCity().BigCityID == bc.BigCityID }' // equal                  bc => new DummyEntity{ a = bc.HasBaseballTeam != new BigCity().HasBaseballTeam }' // not equal                  bc => new DummyEntity{ a = bc.BigCityID&bc.BigCityID }' // &                  bc => new DummyEntity{ a = bc.BigCityID|bc.BigCityID }' // |                  bc => new DummyEntity{ a = bc.BigCityID << 5 }' // <<                  bc => new DummyEntity{ a = bc.BigCityID >> 3 }' // >>                  bc => new DummyEntity{ a = ~bc.BigCityID }' // ~                  bc => new DummyEntity{ a = bc.BigCityID.GetType() }' // method call                  bc => new DummyEntity{ a = string.Concat(bc.Mayor' bc.Mayor) }'  // parameter to method                  bc => new DummyEntity{ a = func(bc.BigCityID' bc.Mayor)}'  // parameter to delegate                  bc => new DummyEntity{ a = bc.Name ?? bc.Mayor } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable8 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   nid = c.BigCityID'                                   a = c.MiscInfo + c.MiscInfo'   // add                                   b = checked(c.MiscInfo + c.MiscInfo)' // add checked                                   c = c.MiscInfo != null && c.MiscInfo == null'  // and                                   d = c.MiscInfo == null || c.MiscInfo != null'  // or                                   e = (new BigCityComplexType[] { c.MiscInfo }[0])' // array init' array index                                   f = (new BigCityComplexType[] { c.MiscInfo }).Length' // array length                                   h = c.MiscInfo.GetType()' // method call                                   i = (int)c.MiscInfo' // cast                                   j = c.MiscInfo > new BigCityComplexType() ? c.MiscInfo == null : c.MiscInfo != null' // conditional                                   k = new BigCityComplexType()' // constant                                   l = (c.MiscInfo * c.MiscInfo) / c.MiscInfo' // multiply' divide                                   m = checked((checked(c.MiscInfo * c.MiscInfo)) / c.MiscInfo)' // multiply' divide checked                                   n = (c.MiscInfo > c.MiscInfo) && (c.MiscInfo < c.MiscInfo) && (c.MiscInfo <= c.MiscInfo) && (c.MiscInfo >= c.MiscInfo)' // <' >' <=' >=                                   o = c.MiscInfo is object' // type is                                   p = c.MiscInfo as BigCityComplexType2' // type as                                   q = c.MiscInfo - c.MiscInfo' // subtraction                                   r = checked(c.MiscInfo - c.MiscInfo)' //subtraction checked                                   s = c.MiscInfo % c.MiscInfo' // modula                                   t = checked(c.MiscInfo % c.MiscInfo)' // modula checked                                   u = -c.MiscInfo' // negate                                   v = checked(-c.MiscInfo)' // negate checked                                   w = !c.MiscInfo' // not                                   x = c.MiscInfo == c.MiscInfo' // equal                                   y = c.MiscInfo != c.MiscInfo' // not equal                                   z = (int)c.MiscInfo' // cast                                   aa = c.MiscInfo & c.MiscInfo' // &                                   bb = c.MiscInfo | c.MiscInfo' // |                                   cc = c.MiscInfo << 5' // <<                                   dd = c.MiscInfo >> 3' // >>                                   ee = c.MiscInfo ?? c.MiscInfo // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var queryable8 = from c in context.CreateQuery<BigCity>("BigCities")                               where c.Name == "Salem"                               select new                               {                                   nid = c.BigCityID'                                   a = c.MiscInfo + c.MiscInfo'   // add                                   b = checked(c.MiscInfo + c.MiscInfo)' // add checked                                   c = c.MiscInfo != null && c.MiscInfo == null'  // and                                   d = c.MiscInfo == null || c.MiscInfo != null'  // or                                   e = (new BigCityComplexType[] { c.MiscInfo }[0])' // array init' array index                                   f = (new BigCityComplexType[] { c.MiscInfo }).Length' // array length                                   h = c.MiscInfo.GetType()' // method call                                   i = (int)c.MiscInfo' // cast                                   j = c.MiscInfo > new BigCityComplexType() ? c.MiscInfo == null : c.MiscInfo != null' // conditional                                   k = new BigCityComplexType()' // constant                                   l = (c.MiscInfo * c.MiscInfo) / c.MiscInfo' // multiply' divide                                   m = checked((checked(c.MiscInfo * c.MiscInfo)) / c.MiscInfo)' // multiply' divide checked                                   n = (c.MiscInfo > c.MiscInfo) && (c.MiscInfo < c.MiscInfo) && (c.MiscInfo <= c.MiscInfo) && (c.MiscInfo >= c.MiscInfo)' // <' >' <=' >=                                   o = c.MiscInfo is object' // type is                                   p = c.MiscInfo as BigCityComplexType2' // type as                                   q = c.MiscInfo - c.MiscInfo' // subtraction                                   r = checked(c.MiscInfo - c.MiscInfo)' //subtraction checked                                   s = c.MiscInfo % c.MiscInfo' // modula                                   t = checked(c.MiscInfo % c.MiscInfo)' // modula checked                                   u = -c.MiscInfo' // negate                                   v = checked(-c.MiscInfo)' // negate checked                                   w = !c.MiscInfo' // not                                   x = c.MiscInfo == c.MiscInfo' // equal                                   y = c.MiscInfo != c.MiscInfo' // not equal                                   z = (int)c.MiscInfo' // cast                                   aa = c.MiscInfo & c.MiscInfo' // &                                   bb = c.MiscInfo | c.MiscInfo' // |                                   cc = c.MiscInfo << 5' // <<                                   dd = c.MiscInfo >> 3' // >>                                   ee = c.MiscInfo ?? c.MiscInfo // Coalesce                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline8 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  nid = c.BigCityID'                                  a = c.MiscInfo + c.MiscInfo'   // add                                  b = checked(c.MiscInfo + c.MiscInfo)' // add checked                                  c = c.MiscInfo != null && c.MiscInfo == null'  // and                                  d = c.MiscInfo == null || c.MiscInfo != null'  // or                                  e = (new BigCityComplexType[] { c.MiscInfo }[0])' // array init' array index                                  f = (new BigCityComplexType[] { c.MiscInfo }).Length' // array length                                  h = c.MiscInfo.GetType()' // method call                                  i = (int)c.MiscInfo' // cast                                  j = c.MiscInfo > new BigCityComplexType() ? c.MiscInfo == null : c.MiscInfo != null' // conditional                                  k = new BigCityComplexType()' // constant                                  l = (c.MiscInfo * c.MiscInfo) / c.MiscInfo' // multiply' divide                                  m = checked((checked(c.MiscInfo * c.MiscInfo)) / c.MiscInfo)' // multiply' divide checked                                  n = (c.MiscInfo > c.MiscInfo) && (c.MiscInfo < c.MiscInfo) && (c.MiscInfo <= c.MiscInfo) && (c.MiscInfo >= c.MiscInfo)' // <' >' <=' >=                                  o = c.MiscInfo is object' // type is                                  p = c.MiscInfo as BigCityComplexType2' // type as                                  q = c.MiscInfo - c.MiscInfo' // subtraction                                  r = checked(c.MiscInfo - c.MiscInfo)' //subtraction checked                                  s = c.MiscInfo % c.MiscInfo' // modula                                  t = checked(c.MiscInfo % c.MiscInfo)' // modula checked                                  u = -c.MiscInfo' // negate                                  v = checked(-c.MiscInfo)' // negate checked                                  w = !c.MiscInfo' // not                                  x = c.MiscInfo == c.MiscInfo' // equal                                  y = c.MiscInfo != c.MiscInfo' // not equal                                  z = (int)c.MiscInfo' // cast                                  aa = c.MiscInfo & c.MiscInfo' // &                                  bb = c.MiscInfo | c.MiscInfo' // |                                  cc = c.MiscInfo << 5' // <<                                  dd = c.MiscInfo >> 3' // >>                                  ee = c.MiscInfo ?? c.MiscInfo // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: var baseline8 = from c in baseLineContext.BigCities                              where c.Name == "Salem"                              select new                              {                                  nid = c.BigCityID'                                  a = c.MiscInfo + c.MiscInfo'   // add                                  b = checked(c.MiscInfo + c.MiscInfo)' // add checked                                  c = c.MiscInfo != null && c.MiscInfo == null'  // and                                  d = c.MiscInfo == null || c.MiscInfo != null'  // or                                  e = (new BigCityComplexType[] { c.MiscInfo }[0])' // array init' array index                                  f = (new BigCityComplexType[] { c.MiscInfo }).Length' // array length                                  h = c.MiscInfo.GetType()' // method call                                  i = (int)c.MiscInfo' // cast                                  j = c.MiscInfo > new BigCityComplexType() ? c.MiscInfo == null : c.MiscInfo != null' // conditional                                  k = new BigCityComplexType()' // constant                                  l = (c.MiscInfo * c.MiscInfo) / c.MiscInfo' // multiply' divide                                  m = checked((checked(c.MiscInfo * c.MiscInfo)) / c.MiscInfo)' // multiply' divide checked                                  n = (c.MiscInfo > c.MiscInfo) && (c.MiscInfo < c.MiscInfo) && (c.MiscInfo <= c.MiscInfo) && (c.MiscInfo >= c.MiscInfo)' // <' >' <=' >=                                  o = c.MiscInfo is object' // type is                                  p = c.MiscInfo as BigCityComplexType2' // type as                                  q = c.MiscInfo - c.MiscInfo' // subtraction                                  r = checked(c.MiscInfo - c.MiscInfo)' //subtraction checked                                  s = c.MiscInfo % c.MiscInfo' // modula                                  t = checked(c.MiscInfo % c.MiscInfo)' // modula checked                                  u = -c.MiscInfo' // negate                                  v = checked(-c.MiscInfo)' // negate checked                                  w = !c.MiscInfo' // not                                  x = c.MiscInfo == c.MiscInfo' // equal                                  y = c.MiscInfo != c.MiscInfo' // not equal                                  z = (int)c.MiscInfo' // cast                                  aa = c.MiscInfo & c.MiscInfo' // &                                  bb = c.MiscInfo | c.MiscInfo' // |                                  cc = c.MiscInfo << 5' // <<                                  dd = c.MiscInfo >> 3' // >>                                  ee = c.MiscInfo ?? c.MiscInfo // Coalesce                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' DummyEntity>>> selectors4 = new List<Expression<Func<BigCity' DummyEntity>>>()               {                   bc => new DummyEntity{ a = bc.MiscInfo + bc.MiscInfo }'  // addition                  bc => new DummyEntity{ a = checked( bc.MiscInfo + bc.MiscInfo) }' // addition checked                  bc => new DummyEntity{ a = bc.MiscInfo - bc.MiscInfo }' // subtraction                  bc => new DummyEntity{ a = checked( bc.MiscInfo - bc.MiscInfo) }' // subtraction checked                  bc => new DummyEntity{ a = bc.MiscInfo * bc.MiscInfo }'  // multiplication                  bc => new DummyEntity{ a = checked( bc.MiscInfo * bc.MiscInfo) }' // multiplication checked                  bc => new DummyEntity{ a = bc.MiscInfo / bc.MiscInfo }' // division                  bc => new DummyEntity{ a = checked( bc.MiscInfo / bc.MiscInfo) }' // division checked                  bc => new DummyEntity{ a = bc.MiscInfo % bc.MiscInfo }'  // modula                  bc => new DummyEntity{ a = checked( bc.MiscInfo % bc.MiscInfo) }' // modula checked                  bc => new DummyEntity{ a = bc.MiscInfo ? 1 : 0 }' // conditional                  bc => new DummyEntity{ a = true ? bc.MiscInfo : null }' // conditional                  bc => new DummyEntity{ a = false ? null : bc.MiscInfo }' // conditional                  bc => new DummyEntity{ a = bc.MiscInfo < new BigCityComplexType() }' // <                  bc => new DummyEntity{ a = new BigCityComplexType() <= bc.MiscInfo }' // <=                  bc => new DummyEntity{ a = new BigCityComplexType() < bc.MiscInfo }' // >                  bc => new DummyEntity{ a = bc.MiscInfo <= new BigCityComplexType() }' // >=                  bc => new DummyEntity{ a = bc.MiscInfo is BigCityComplexType2 }' // type is                  bc => new DummyEntity{ a = bc.MiscInfo as BigCityComplexType2}'                  bc => new DummyEntity{ a = - bc.MiscInfo }' // negate                  bc => new DummyEntity{ a = checked (-bc.MiscInfo)}' // negate checked                  bc => new DummyEntity{ a = !bc.MiscInfo  }' // not                  bc => new DummyEntity{ a = bc.MiscInfo == bc.MiscInfo }' // equal                  bc => new DummyEntity{ a = bc.MiscInfo != bc.MiscInfo }' // not equal                  bc => new DummyEntity{ a = bc.MiscInfo & bc.MiscInfo }' // &                  bc => new DummyEntity{ a = bc.MiscInfo | bc.MiscInfo }' // |                  bc => new DummyEntity{ a = bc.MiscInfo << 5 }' // <<                  bc => new DummyEntity{ a = bc.MiscInfo >> 3 }' // >>                  bc => new DummyEntity{ a = ~bc.MiscInfo }' // ~                  bc => new DummyEntity{ a = bc.MiscInfo.GetType() }' // method call                  bc => new DummyEntity{ a = bc.MiscInfo ?? bc.MiscInfo } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The following statement contains a magic number: List<Expression<Func<BigCity' DummyEntity>>> selectors4 = new List<Expression<Func<BigCity' DummyEntity>>>()               {                   bc => new DummyEntity{ a = bc.MiscInfo + bc.MiscInfo }'  // addition                  bc => new DummyEntity{ a = checked( bc.MiscInfo + bc.MiscInfo) }' // addition checked                  bc => new DummyEntity{ a = bc.MiscInfo - bc.MiscInfo }' // subtraction                  bc => new DummyEntity{ a = checked( bc.MiscInfo - bc.MiscInfo) }' // subtraction checked                  bc => new DummyEntity{ a = bc.MiscInfo * bc.MiscInfo }'  // multiplication                  bc => new DummyEntity{ a = checked( bc.MiscInfo * bc.MiscInfo) }' // multiplication checked                  bc => new DummyEntity{ a = bc.MiscInfo / bc.MiscInfo }' // division                  bc => new DummyEntity{ a = checked( bc.MiscInfo / bc.MiscInfo) }' // division checked                  bc => new DummyEntity{ a = bc.MiscInfo % bc.MiscInfo }'  // modula                  bc => new DummyEntity{ a = checked( bc.MiscInfo % bc.MiscInfo) }' // modula checked                  bc => new DummyEntity{ a = bc.MiscInfo ? 1 : 0 }' // conditional                  bc => new DummyEntity{ a = true ? bc.MiscInfo : null }' // conditional                  bc => new DummyEntity{ a = false ? null : bc.MiscInfo }' // conditional                  bc => new DummyEntity{ a = bc.MiscInfo < new BigCityComplexType() }' // <                  bc => new DummyEntity{ a = new BigCityComplexType() <= bc.MiscInfo }' // <=                  bc => new DummyEntity{ a = new BigCityComplexType() < bc.MiscInfo }' // >                  bc => new DummyEntity{ a = bc.MiscInfo <= new BigCityComplexType() }' // >=                  bc => new DummyEntity{ a = bc.MiscInfo is BigCityComplexType2 }' // type is                  bc => new DummyEntity{ a = bc.MiscInfo as BigCityComplexType2}'                  bc => new DummyEntity{ a = - bc.MiscInfo }' // negate                  bc => new DummyEntity{ a = checked (-bc.MiscInfo)}' // negate checked                  bc => new DummyEntity{ a = !bc.MiscInfo  }' // not                  bc => new DummyEntity{ a = bc.MiscInfo == bc.MiscInfo }' // equal                  bc => new DummyEntity{ a = bc.MiscInfo != bc.MiscInfo }' // not equal                  bc => new DummyEntity{ a = bc.MiscInfo & bc.MiscInfo }' // &                  bc => new DummyEntity{ a = bc.MiscInfo | bc.MiscInfo }' // |                  bc => new DummyEntity{ a = bc.MiscInfo << 5 }' // <<                  bc => new DummyEntity{ a = bc.MiscInfo >> 3 }' // >>                  bc => new DummyEntity{ a = ~bc.MiscInfo }' // ~                  bc => new DummyEntity{ a = bc.MiscInfo.GetType() }' // method call                  bc => new DummyEntity{ a = bc.MiscInfo ?? bc.MiscInfo } // ??              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The following statement contains a magic number: var queryable7 = from s in context.CreateQuery<BigState>("BigStates")                               from c in s.Cities                               where s.StateName == "Oregon"                               where c.BigCityID == 1                               from st in c.Streets                               select new { StreetName = st.StreetName' NumberOfBlocks = st.NumberOfBlocks' A = 5 };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The following statement contains a magic number: var baseline7 = from s in baseLineContext.BigStates                              from c in s.Cities                              where s.StateName == "Oregon"                              where c.BigCityID == 1                              from st in c.Streets                              select new { StreetName = st.StreetName' NumberOfBlocks = st.NumberOfBlocks' A = 5 };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The following statement contains a magic number: var queryable8 = from x in                                   (from s in context.CreateQuery<BigState>("BigStates")                                    from c in s.Cities                                    where s.StateName == "Oregon"                                    where c.BigCityID == 1                                    from st in c.Streets                                    where st.NumberOfBlocks > 100 && st.NumberOfBlocks < 200                                    orderby st.StreetName                                    select st).Take(1)                               select new NarrowStreet { StreetName = x.StreetName' NumberOfBlocks = x.NumberOfBlocks };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The following statement contains a magic number: var queryable8 = from x in                                   (from s in context.CreateQuery<BigState>("BigStates")                                    from c in s.Cities                                    where s.StateName == "Oregon"                                    where c.BigCityID == 1                                    from st in c.Streets                                    where st.NumberOfBlocks > 100 && st.NumberOfBlocks < 200                                    orderby st.StreetName                                    select st).Take(1)                               select new NarrowStreet { StreetName = x.StreetName' NumberOfBlocks = x.NumberOfBlocks };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The following statement contains a magic number: var baseline8 = from x in                                  (from s in baseLineContext.BigStates                                   from c in s.Cities                                   where s.StateName == "Oregon"                                   where c.BigCityID == 1                                   from st in c.Streets                                   where st.NumberOfBlocks > 100 && st.NumberOfBlocks < 200                                   orderby st.StreetName                                   select st).Take(1)                              select new NarrowStreet { StreetName = x.StreetName' NumberOfBlocks = x.NumberOfBlocks };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsTransparentIdentifiers,The following statement contains a magic number: var baseline8 = from x in                                  (from s in baseLineContext.BigStates                                   from c in s.Cities                                   where s.StateName == "Oregon"                                   where c.BigCityID == 1                                   from st in c.Streets                                   where st.NumberOfBlocks > 100 && st.NumberOfBlocks < 200                                   orderby st.StreetName                                   select st).Take(1)                              select new NarrowStreet { StreetName = x.StreetName' NumberOfBlocks = x.NumberOfBlocks };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The following statement contains a magic number: var queryable = from t in context.CreateQuery<Team>("Teams")                              where ReturnBool()                              orderby ReturnString("foo")                              select new { Id = ReturnInt(96) };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The following statement contains a magic number: var baseline = from t in baseLineContext.Teams                             where ReturnBool()                             orderby ReturnString("foo")                             select new { Id = ReturnInt(96) };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The following statement contains a magic number: var queryable2 = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                               where t.NullableDateTimeOffset != null                               select new                               {                                   a = t.NullableDateTimeOffset.Value'                                   b = t.NullableDecimal.Value'                                   c = t.DateTimeOffset.Year'                                   d = t.String.Length'                                   e = t.Int.In(5)'                                   f = t.Long.GetType()                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The following statement contains a magic number: var baseline2 = from t in baseLineContext.Var1                              where t.NullableDateTimeOffset != null                              select new                              {                                  a = t.NullableDateTimeOffset.Value'                                  b = t.NullableDecimal.Value'                                  c = t.DateTimeOffset.Year'                                  d = t.String.Length'                                  e = t.Int.In(5)'                                  f = t.Long.GetType()                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The following statement contains a magic number: var queryable3 = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                               where (string)(object)(t.String) != "foo"                               select new                               {                                   a = (int)(t.Float * 100) + "% Off"'                                   b = (object)(t.Int)                               };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsRegressions,The following statement contains a magic number: var baseline3 = from t in baseLineContext.Var1                              where (string)(object)(t.String) != "foo"                              select new                              {                                  a = (int)(t.Float * 100) + "% Off"'                                  b = (object)(t.Int)                              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqConvert,The following statement contains a magic number: var query = from t in context.CreateQuery<Team>("Teams")                          where t.HomeStadium != null &&                          ((Stadium)t.HomeStadium).Capacity > 40000                          select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqConvert,The following statement contains a magic number: var baseline = from t in baseLineContext.Teams                             where t.HomeStadium != null &&                             ((Stadium)t.HomeStadium).Capacity > 40000                             select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var left = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                  where t.HomeStadium != null &&                                                  t.HomeStadium.Capacity > 40000                                                  select t).Expand("HomeStadium").First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var right = (from t in baseLineContext.Teams                           where t.HomeStadium != null &&                             t.HomeStadium.Capacity > 40000                           select t).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var left3 = (from t in context.CreateQuery<Team>("Teams")                           where t.TeamID == 2                           select t.HomeStadium).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var right3 = (from t in baseLineContext.Teams                            where t.TeamID == 2                            select t.HomeStadium).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var left4 = (from t in context.CreateQuery<Team>("Teams")                           where t.TeamID == 2                           select t.TeamName).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var right4 = (from t in baseLineContext.Teams                            where t.TeamID == 2                            select t.TeamName).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var left5 = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                   where t.HomeStadium != null &&                                                   t.HomeStadium.Capacity > 40000                                                   orderby t.TeamName                                                   select t).Expand("HomeStadium").Skip(1).Take(2).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var left5 = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                   where t.HomeStadium != null &&                                                   t.HomeStadium.Capacity > 40000                                                   orderby t.TeamName                                                   select t).Expand("HomeStadium").Skip(1).Take(2).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var right5 = (from t in baseLineContext.Teams                            where t.HomeStadium != null &&                           t.HomeStadium.Capacity > 40000                            orderby t.TeamName                            select t).Skip(1).Take(2).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqImmediateExecute,The following statement contains a magic number: var right5 = (from t in baseLineContext.Teams                            where t.HomeStadium != null &&                           t.HomeStadium.Capacity > 40000                            orderby t.TeamName                            select t).Skip(1).Take(2).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The following statement contains a magic number: IQueryable baseQuery = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                              where t.HomeStadium != null &&                                                              t.HomeStadium.Capacity > 40000                                                              select t).Expand("HomeStadium");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The following statement contains a magic number: object right = (from t in baseLineContext.Teams                              where t.HomeStadium != null &&                              t.HomeStadium.Capacity > 40000                              select t).First();
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The following statement contains a magic number: IQueryable baseQuery2 = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                               where t.HomeStadium != null &&                                                               t.HomeStadium.Capacity > 40000                                                               select t).Expand("HomeStadium");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The following statement contains a magic number: MethodCallExpression e2 = Expression.Call(null' mi2.MakeGenericMethod(typeof(Team))' baseQuery.Expression' Expression.Constant(2));
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The following statement contains a magic number: var baseline = (from t in baseLineContext.Teams                              where t.HomeStadium != null &&                              t.HomeStadium.Capacity > 40000                              select t).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqNonGenericQueryableAPI,The following statement contains a magic number: var baseline = (from t in baseLineContext.Teams                              where t.HomeStadium != null &&                              t.HomeStadium.Capacity > 40000                              select t).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqToString,The following statement contains a magic number: var query = from l in context.CreateQuery<League>("League")                          where l.ID == 999                          select l.Teams;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LingDoubleInFilter,The following statement contains a magic number: var query = from l in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where l.Double != 16d                          select l;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LingDoubleInFilter,The following statement contains a magic number: query = from l in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where l.Double != 16.1234d                      select l;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LingDoubleInFilter,The following statement contains a magic number: query = from l in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where l.Double != 1.3e15d                      select l;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query3 = context.CreateQuery<League>("Leagues")                              .Where(l => l.ID == 2)                              .SelectMany(x => x.Teams);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var baseline3 = baseLineContext.Leagues                              .Where(l => l.ID == 2)                              .SelectMany(x => x.Teams);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query4 = context.CreateQuery<League>("Leagues")                              .Where(l => l.ID == 2)                              .SelectMany(x => x.Teams)                              .Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query4 = context.CreateQuery<League>("Leagues")                              .Where(l => l.ID == 2)                              .SelectMany(x => x.Teams)                              .Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var baseline4 = baseLineContext.Leagues                              .Where(l => l.ID == 2)                              .SelectMany(x => x.Teams)                              .Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var baseline4 = baseLineContext.Leagues                              .Where(l => l.ID == 2)                              .SelectMany(x => x.Teams)                              .Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query5 = from t in context.CreateQuery<Team>("Teams")                           where t.TeamID == 4                           select t.HomeStadium.Sponsor;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var baseline5 = from t in baseLineContext.Teams                              where t.TeamID == 4                              select t.HomeStadium.Sponsor;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query6 = from s in                               (from t in context.CreateQuery<Team>("Teams")                                where t.TeamID == 4                                select t.HomeStadium)                           select s.Sponsor;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var baseline6 = from s in                                  (from t in baseLineContext.Teams                                   where t.TeamID == 4                                   select t.HomeStadium)                              select s.Sponsor;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query7 = (from t in context.CreateQuery<Team>("Teams")                            where t.TeamID == 4                            select t).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query7 = (from t in context.CreateQuery<Team>("Teams")                            where t.TeamID == 4                            select t).Take(2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query7b = (from t in context.CreateQuery<Team>("Teams")                             where t.TeamID == 4                             select t.City).Where(t => t != "Seattle");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions2,The following statement contains a magic number: var query7c = (from t in context.CreateQuery<Team>("Teams")                             where t.TeamID == 4                             select t).OrderBy(t => t.City);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var query = (from t in context.CreateQuery<Team>("Teams")                           select t).Take(2).Where(t => t.City == "Seattle");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var query2 = (from t in context.CreateQuery<Team>("Teams")                            select t).Skip(2).Where(t => t.City == "Seattle");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var query3 = (from t in context.CreateQuery<Team>("Teams")                            select t).Take(2).OrderBy(t => t.City);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var query4 = (from t in context.CreateQuery<Team>("Teams")                            select t).Take(2).Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var query4 = (from t in context.CreateQuery<Team>("Teams")                            select t).Take(2).Skip(3);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: query5 = (DataServiceQuery<Team>)query5.AddQueryOption("fog"' 89).OrderBy(t => t.TeamName).Take(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var query7 = from t in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                           where t.NullableDateTimeOffset != null                           && t.NullableDateTimeOffset.Value.Year > 1965                           orderby t.NullableDateTimeOffset.Value.Year                           select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqRegressions3,The following statement contains a magic number: var baseline7 = from t in baseLineContext.Var1                              where t.NullableDateTimeOffset != null                              && t.NullableDateTimeOffset.Value.Year > 1965                              orderby t.NullableDateTimeOffset.Value.Year                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: DataServiceQuery<Team> query3 = (DataServiceQuery<Team>)from Team t in context.CreateQuery<Team>("Teams")                                                                      where t.TeamID == 2                                                                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: var baseline3 = from Team t in baseLineContext.Teams                              where t.TeamID == 2                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: Assert.AreEqual(p.Children.Single().Parents.Count' 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: DataServiceQuery<League> query13 = (DataServiceQuery<League>)(from l in context.CreateQuery<League>("Leagues")                                                  .Expand("Teams")                                                                            where l.ConceptionDate > new DateTime(1800' 1' 1)                                                                            orderby l.ConceptionDate descending' l.Name descending                                                                            select l).Take(10);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: DataServiceQuery<League> query13 = (DataServiceQuery<League>)(from l in context.CreateQuery<League>("Leagues")                                                  .Expand("Teams")                                                                            where l.ConceptionDate > new DateTime(1800' 1' 1)                                                                            orderby l.ConceptionDate descending' l.Name descending                                                                            select l).Take(10);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: var baseline13 = (from League l in baseLineContext.Leagues                                where l.ConceptionDate > new DateTime(1800' 1' 1)                                orderby l.ConceptionDate descending' l.Name descending                                select l).Take(10);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqExpand,The following statement contains a magic number: var baseline13 = (from League l in baseLineContext.Leagues                                where l.ConceptionDate > new DateTime(1800' 1' 1)                                orderby l.ConceptionDate descending' l.Name descending                                select l).Take(10);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query = from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                          where m.Key1 == 1                          where m.Key2 == "23"                          where m.Key3 == 37                          select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var baseline = from m in baseLineContext.MoreVar1                             where m.Key1 == 1                             where m.Key2 == "23"                             where m.Key3 == 37                             select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query2 = from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                           where m.Key1 == 1                           && m.Key2 == "23"                           && m.Key3 == 37                           select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var baseline2 = from m in baseLineContext.MoreVar1                              where m.Key1 == 1                              && m.Key2 == "23"                              && m.Key3 == 37                              select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query3 = from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                           where m.Key2 == "23"                           && m.Key1 == 1                           && m.Key3 == 37                           select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var baseline3 = from m in baseLineContext.MoreVar1                              where m.Key2 == "23"                           && m.Key1 == 1                           && m.Key3 == 37                              select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query4 = from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                           where m.Key1 == 1                           && m.Key2 == "23"                           && m.Key3 == 37                           from n in m.Related                           select n;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var baseline4 = from m in baseLineContext.MoreVar1                              where m.Key1 == 1                              && m.Key2 == "23"                              && m.Key3 == 37                              from n in m.Related                              select n;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query5 = (from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                            where m.Key1 == 1                            && m.Key2 == "23"                            && m.Key3 == 37                            from n in m.Related                            orderby n.Data2                            select n).Take(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var baseline5 = (from m in baseLineContext.MoreVar1                               where m.Key1 == 1                               && m.Key2 == "23"                               && m.Key3 == 37                               from n in m.Related                               orderby n.Data2                               select n).Take(1);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query7 = from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                           where m.Key1 == 1                           && m.Key3 == 37                           from n in m.Related                           select n;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var query8 = from m in context.CreateQuery<MultipleKeyType>("MoreVar1")                           where m.Key1 == 1                           && m.Key2 == "23"                           || m.Key3 == 37                           from n in m.Related                           select n;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMultipleKeys,The following statement contains a magic number: var baseline9 = from m in baseLineContext.MoreVar1                              where m.Key1 == 1                              where m.Key2 == "23"                              where m.Key3 == 37                              select m;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var query1 = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                    where t.HomeStadium != null && t.HomeStadium.City.Trim().ToUpper().Length != 7                                                    orderby (t.HomeStadium.City.Trim() + "abcde").Replace("abcde"' "")                                                    select t).Expand("HomeStadium");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var baseline1 = from t in baseLineContext.Teams                              where t.HomeStadium != null && t.HomeStadium.City.Trim().ToUpper().Length != 7                              orderby (t.HomeStadium.City.Trim() + "abcde").Replace("abcde"' "")                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var query2 = from t in context.CreateQuery<Team>("Teams")                           where String.Concat((t.City + t.City).Trim()' "foo").Length > 8                              && t.City.Length < 100                           orderby String.Concat(t.City' "bar").Trim().Length + 17                           select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var query2 = from t in context.CreateQuery<Team>("Teams")                           where String.Concat((t.City + t.City).Trim()' "foo").Length > 8                              && t.City.Length < 100                           orderby String.Concat(t.City' "bar").Trim().Length + 17                           select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var query2 = from t in context.CreateQuery<Team>("Teams")                           where String.Concat((t.City + t.City).Trim()' "foo").Length > 8                              && t.City.Length < 100                           orderby String.Concat(t.City' "bar").Trim().Length + 17                           select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var baseline2 = from t in baseLineContext.Teams                              where String.Concat((t.City + t.City).Trim()' "foo").Length > 8                                  && t.City.Length < 100                              orderby String.Concat(t.City' "bar").Trim().Length + 17                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var baseline2 = from t in baseLineContext.Teams                              where String.Concat((t.City + t.City).Trim()' "foo").Length > 8                                  && t.City.Length < 100                              orderby String.Concat(t.City' "bar").Trim().Length + 17                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var baseline2 = from t in baseLineContext.Teams                              where String.Concat((t.City + t.City).Trim()' "foo").Length > 8                                  && t.City.Length < 100                              orderby String.Concat(t.City' "bar").Trim().Length + 17                              select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var query100 = ((DataServiceQuery<Team>)from t in context.CreateQuery<Team>("Teams")                                                      where t.HomeStadium != null && t.HomeStadium.City.Length > 7                                                      orderby t.HomeStadium.City.Length                                                      select t).Expand("HomeStadium");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMethods,The following statement contains a magic number: var baseline100 = from t in baseLineContext.Teams                                where t.HomeStadium != null && t.HomeStadium.City.Length > 7                                orderby t.HomeStadium.City.Length                                select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: query = from t in context.CreateQuery<Team>("Teams")                      where t.City.Substring(1) != "eattle"                      orderby t.TeamName.Substring(4)                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: baseline = from t in baseLineContext.Teams                         where t.City.Substring(1) != "eattle"                         orderby t.TeamName.Substring(4)                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: query = from t in context.CreateQuery<Team>("Teams")                      where t.City.Substring(1' 2) != "ea"                      orderby t.TeamName.Substring(2' 2)                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: query = from t in context.CreateQuery<Team>("Teams")                      where t.City.Substring(1' 2) != "ea"                      orderby t.TeamName.Substring(2' 2)                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: query = from t in context.CreateQuery<Team>("Teams")                      where t.City.Substring(1' 2) != "ea"                      orderby t.TeamName.Substring(2' 2)                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: baseline = from t in baseLineContext.Teams                         where t.City.Substring(1' 2) != "ea"                         orderby t.TeamName.Substring(2' 2)                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: baseline = from t in baseLineContext.Teams                         where t.City.Substring(1' 2) != "ea"                         orderby t.TeamName.Substring(2' 2)                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: baseline = from t in baseLineContext.Teams                         where t.City.Substring(1' 2) != "ea"                         orderby t.TeamName.Substring(2' 2)                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: query = from t in context.CreateQuery<Team>("Teams")                      where t.City.Length != 7                      orderby t.City.Length                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqStringMethods,The following statement contains a magic number: baseline = from t in baseLineContext.Teams                         where t.City.Length != 7                         orderby t.City.Length                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: var query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where Math.Round(j.Double) > 10                          orderby Math.Round(j.Double)                          select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: var baseline = from j in baseLineContext.Var1                             where Math.Round(j.Double) > 10                             orderby Math.Round(j.Double)                             select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where Math.Round(j.Decimal) > 10                      orderby Math.Round(j.Decimal)                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where Math.Round(j.Decimal) > 10                         orderby Math.Round(j.Decimal)                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where Math.Floor(j.Double) > 10                      orderby Math.Floor(j.Double)                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where Math.Floor(j.Double) > 10                         orderby Math.Floor(j.Double)                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where Math.Floor(j.Decimal) > 10                      orderby Math.Floor(j.Decimal)                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where Math.Floor(j.Decimal) > 10                         orderby Math.Floor(j.Decimal)                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where Math.Ceiling(j.Double) > 10                      orderby Math.Ceiling(j.Double)                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where Math.Ceiling(j.Double) > 10                         orderby Math.Ceiling(j.Double)                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where Math.Ceiling(j.Decimal) > 10                      orderby Math.Ceiling(j.Decimal)                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqMathMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where Math.Ceiling(j.Decimal) > 10                         orderby Math.Ceiling(j.Decimal)                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.DateTimeOffset.Month != 9                      orderby j.DateTimeOffset.Month                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.DateTimeOffset.Month != 9                         orderby j.DateTimeOffset.Month                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.DateTimeOffset.Year != 1970                      orderby j.DateTimeOffset.Year                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.DateTimeOffset.Year != 1970                         orderby j.DateTimeOffset.Year                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.DateTimeOffset.Hour != 12                      orderby j.DateTimeOffset.Hour                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.DateTimeOffset.Hour != 12                         orderby j.DateTimeOffset.Hour                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.DateTimeOffset.Minute != 16                      orderby j.DateTimeOffset.Minute                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.DateTimeOffset.Minute != 16                         orderby j.DateTimeOffset.Minute                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.DateTimeOffset.Second != 18                      orderby j.DateTimeOffset.Second                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqDateTimeOffsetMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.DateTimeOffset.Second != 18                         orderby j.DateTimeOffset.Second                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTimeSpanMethods,The following statement contains a magic number: var query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                          where j.TimeSpan.Hours != 12                          orderby j.TimeSpan.Hours                          select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTimeSpanMethods,The following statement contains a magic number: var baseline = from j in baseLineContext.Var1                             where j.TimeSpan.Hours != 12                             orderby j.TimeSpan.Hours                             select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTimeSpanMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.TimeSpan.Minutes != 16                      orderby j.TimeSpan.Minutes                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTimeSpanMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.TimeSpan.Minutes != 16                         orderby j.TimeSpan.Minutes                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTimeSpanMethods,The following statement contains a magic number: query = from j in context.CreateQuery<YetAnotherAllPrimitiveTypesType>("Var1")                      where j.TimeSpan.Seconds != 18                      orderby j.TimeSpan.Seconds                      select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqTimeSpanMethods,The following statement contains a magic number: baseline = from j in baseLineContext.Var1                         where j.TimeSpan.Seconds != 18                         orderby j.TimeSpan.Seconds                         select j;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqVBSpecificMethods,The following statement contains a magic number: query = from t in context.CreateQuery<Team>("Teams")                      where Microsoft.VisualBasic.Strings.Len(t.City) != 7                      orderby Microsoft.VisualBasic.Strings.Len(t.City)                      select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqVBSpecificMethods,The following statement contains a magic number: baseline = from t in baseLineContext.Teams                         where Microsoft.VisualBasic.Strings.Len(t.City) != 7                         orderby Microsoft.VisualBasic.Strings.Len(t.City)                         select t;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFuncletization,The following statement contains a magic number: var query1 = (from t in context.CreateQuery<Team>("Teams")                            where true                            orderby "Bad"                            select t).AsEnumerable().Select(t => 5);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFuncletization,The following statement contains a magic number: var baseline1 = from t in baseLineContext.Teams                              where true                              orderby "Bad"                              select 5;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFuncletization,The following statement contains a magic number: int i = 4;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqFuncletization,The following statement contains a magic number: int x = 8;
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var writer1 = TestURIWriter.CreateURIWriter<League>(context.BaseUri.ToString()' "Leagues").                      FindByKey("ID"' 1).AddParam("foo"' 5).AddParam("bar"' 6.7f);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var writer1 = TestURIWriter.CreateURIWriter<League>(context.BaseUri.ToString()' "Leagues").                      FindByKey("ID"' 1).AddParam("foo"' 5).AddParam("bar"' 6.7f);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable1 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                              where l.ID == 1                                                              select l).AddQueryOption("foo"' 5).AddQueryOption("bar"' 6.7f);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable1 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                              where l.ID == 1                                                              select l).AddQueryOption("foo"' 5).AddQueryOption("bar"' 6.7f);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var writer4 = TestURIWriter.CreateURIWriter<League>(context.BaseUri.ToString()' "Leagues").                  FindByKey("ID"' 1).AddParam("a"' "\"bad\"").AddParam("bar$"' 6.7f).AddParam("55"' "lex");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable4 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                          where l.ID == 1                                                          select l).AddQueryOption("a"' "\"bad\"").AddQueryOption("bar$"' 6.7f)                                                          .AddQueryOption("55"' "lex");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable5 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                          where l.ID == 1                                                          select l)                                                          .AddQueryOption("dupname"' 34)                                                          .AddQueryOption("dupname"' 35)                                                          .AddQueryOption("dupvalue"' 101)                                                          .AddQueryOption("dupvalue2"' 101)                                                          .AddQueryOption("dupvalue2"' "101");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable5 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                          where l.ID == 1                                                          select l)                                                          .AddQueryOption("dupname"' 34)                                                          .AddQueryOption("dupname"' 35)                                                          .AddQueryOption("dupvalue"' 101)                                                          .AddQueryOption("dupvalue2"' 101)                                                          .AddQueryOption("dupvalue2"' "101");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable5 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                          where l.ID == 1                                                          select l)                                                          .AddQueryOption("dupname"' 34)                                                          .AddQueryOption("dupname"' 35)                                                          .AddQueryOption("dupvalue"' 101)                                                          .AddQueryOption("dupvalue2"' 101)                                                          .AddQueryOption("dupvalue2"' "101");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable5 = ((DataServiceQuery<League>)from l in context.CreateQuery<League>("Leagues")                                                          where l.ID == 1                                                          select l)                                                          .AddQueryOption("dupname"' 34)                                                          .AddQueryOption("dupname"' 35)                                                          .AddQueryOption("dupvalue"' 101)                                                          .AddQueryOption("dupvalue2"' 101)                                                          .AddQueryOption("dupvalue2"' "101");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable8 = ((DataServiceQuery<League>)(from l in context.CreateQuery<League>("Leagues")                                                           select l).Take(1)).AddQueryOption("$skip"' 2).AddQueryOption("$filter"' 2)                                                          .AddQueryOption("$top"' 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable8 = ((DataServiceQuery<League>)(from l in context.CreateQuery<League>("Leagues")                                                           select l).Take(1)).AddQueryOption("$skip"' 2).AddQueryOption("$filter"' 2)                                                          .AddQueryOption("$top"' 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqAddQueryOption,The following statement contains a magic number: var queryable8 = ((DataServiceQuery<League>)(from l in context.CreateQuery<League>("Leagues")                                                           select l).Take(1)).AddQueryOption("$skip"' 2).AddQueryOption("$filter"' 2)                                                          .AddQueryOption("$top"' 2);
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,KeysOnBaseType,The following statement contains a magic number: var equal = Expression.Equal(keyProperty' Expression.Constant(3));
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The following statement contains a magic number: IQueryable[] baseQueries = new IQueryable[] {                  context.CreateQuery<League>("Leagues")'                  context.CreateQuery<League>("Leagues").Where(l=>l.ID < 5)'                  context.CreateQuery<League>("Leagues").Where(l=>l.ID==1).SelectMany(l=>l.Teams)'                  context.CreateQuery<League>("Leagues").Where(l=>l.Name.EndsWith("AAA")).Take(2)              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The following statement contains a magic number: IQueryable[] baseQueries = new IQueryable[] {                  context.CreateQuery<League>("Leagues")'                  context.CreateQuery<League>("Leagues").Where(l=>l.ID < 5)'                  context.CreateQuery<League>("Leagues").Where(l=>l.ID==1).SelectMany(l=>l.Teams)'                  context.CreateQuery<League>("Leagues").Where(l=>l.Name.EndsWith("AAA")).Take(2)              };
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The following statement contains a magic number: Assert.IsTrue(uri.EndsWith(expectedUris[i * 2]));
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,QueryRowCount_UriBuilder,The following statement contains a magic number: Assert.IsTrue(uri.EndsWith(expectedUris[i * 2 + 1]));
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ResourceBinderAnalyzeProjectionTest,The following statement contains a magic number: var engine = System.Data.Test.Astoria.CombinatorialEngine.FromDimensions(                  new System.Data.Test.Astoria.Dimension("ArgumentCount"' new int[] { 1' 2 })'                  new System.Data.Test.Astoria.Dimension("CanProject"' new bool[] { true' false })'                  new System.Data.Test.Astoria.Dimension("Cast"' new bool[] { true' false }));
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ResourceBinderAnalyzeProjectionTest,The following statement contains a magic number: System.Data.Test.Astoria.TestUtil.RunCombinatorialEngineFail(engine' (values) =>                  {                      int argumentCount = (int)values["ArgumentCount"];                      bool canProject = (bool)values["CanProject"];                      bool cast = (bool)values["Cast"];                        IQueryable<Team> q = context.CreateQuery<Team>("Teams");                      IQueryable<int> qint = null;                      IQueryable<float> qfloat = null;                      q = q.Where(o => o.TeamID == 1);                      if (argumentCount == 1)                      {                          if (cast)                          {                              qfloat = canProject ? q.Select(o => (float)o.TeamID) : q.Select(o => (float)new Team().TeamID);                          }                          else                          {                              qint = canProject ? q.Select(o => o.TeamID) : q.Select(o => new Team().TeamID);                          }                      }                      else                      {                          // Ignoring cast' as this fails pretty early.                          Debug.Assert(argumentCount == 2' "argumentCount == 2");                          qint = canProject ? q.Select((o' position) => o.TeamID + position) : q.Select((o' position) => new Team().TeamID + position);                      }                        string url = null;                      Exception exception = System.Data.Test.Astoria.TestUtil.RunCatching(() =>                      {                          if (qint != null)                          {                              url = qint.ToString();                              foreach (var i in qint) { }                          }                          else                          {                              url = qfloat.ToString();                              foreach (var f in qfloat) { }                          }                      });                        if (argumentCount == 1 && (!canProject || !cast))                      {                          System.Data.Test.Astoria.TestUtil.AssertExceptionExpected(exception' false);                          // NOTE: should always be Teams(1) when $select=navprop&$expand=navprop pattern is supported                          System.Data.Test.Astoria.TestUtil.AssertContains(url' "Teams");                      }                      else                      {                          System.Data.Test.Astoria.TestUtil.AssertExceptionExpected(exception' true);                          System.Data.Test.Astoria.TestUtil.AssertContains(exception.ToString()' "NotSupportedException");                      }                  });
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customer.Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customer.Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count ' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customerList.First().Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customerList.First().Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customerList[0].Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customerList[0].Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(3' customerList.Count()' "customerList.Count == 3");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' customerList.Single().Orders.Count' "Orders are materialized");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,ProjectionClient_X_ServiceOp,The following statement contains a magic number: Assert.AreEqual(6' orderList.Count' "orderList.Count == 6");
Magic Number,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,GetParametersWithLargePayload,The following statement contains a magic number: parameters.Add(new BodyOperationParameter("p_int_" + j++' 5));
Magic Number,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,GetParametersWithLargePayload,The following statement contains a magic number: parameters.Add(new BodyOperationParameter("p_double_" + j++' 4.5555));
Magic Number,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,GetParametersWithLargePayload,The following statement contains a magic number: parameters.Add(new BodyOperationParameter("p_complex_" + j++' new AddressComplexType() { City = "Redmond"' ZipCode = 98052 }));
Magic Number,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,ActionWithLargeParameterPayloadTests,The following statement contains a magic number: var testCases = new []              {                     new                   {                      RequestUri = "/Customers(1)/AstoriaUnitTests.ActionTestsWithLargePayload.ActionWithLargeParameterPayload"'                      ExpectedResults = new object[] { }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = this.GetParametersWithLargePayload()'                  }'                  new                   {                      RequestUri = "/Customers(1)/AstoriaUnitTests.ActionTestsWithLargePayload.ActionWithLargeCollectionParameterPayload"'                      ExpectedResults = new object[] { }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = this.GetCollectionParameterWithLargePayload()'                  }'              };
Magic Number,AstoriaUnitTests,ActionTestsWithLargePayload,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionTestsWithLargePayload.cs,ActionWithLargeParameterPayloadTests,The following statement contains a magic number: var testCases = new []              {                     new                   {                      RequestUri = "/Customers(1)/AstoriaUnitTests.ActionTestsWithLargePayload.ActionWithLargeParameterPayload"'                      ExpectedResults = new object[] { }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = this.GetParametersWithLargePayload()'                  }'                  new                   {                      RequestUri = "/Customers(1)/AstoriaUnitTests.ActionTestsWithLargePayload.ActionWithLargeCollectionParameterPayload"'                      ExpectedResults = new object[] { }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = this.GetCollectionParameterWithLargePayload()'                  }'              };
Magic Number,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,CreateContextWithHardcodedResponse,The following statement contains a magic number: var responseMessage = new ODataTestMessage { StatusCode = 200' MemoryStream = new MemoryStream(Encoding.UTF8.GetBytes(payload)) };
Magic Number,AstoriaUnitTests,ClientAndServerTypeMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientAndServerTypeMismatchTests.cs,InvokeForAll,The following statement contains a magic number: var method = this.GetType().GetMethods(BindingFlags.Instance | BindingFlags.NonPublic).Single(m => m.Name == "ValidateAllConversions" && m.GetGenericArguments().Count() == 2);
Magic Number,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,VerifyNumbers,The following statement contains a magic number: results.Should().HaveCount(3);
Magic Number,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,VerifyNumbers,The following statement contains a magic number: results[0].Should().Be(3);
Magic Number,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,VerifyNumbers,The following statement contains a magic number: results[1].Should().Be(2);
Magic Number,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,VerifyNumbers,The following statement contains a magic number: results[2].Should().Be(1);
Magic Number,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,ValidateMultipleAddresses,The following statement contains a magic number: results.Should().HaveCount(2);
Magic Number,AstoriaUnitTests,ReadingAtomWithJsonTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReadingAtomWithUseJsonTests.cs,CreateTransportLayerContext,The following statement contains a magic number: responseMessage.StatusCode = 200;
Magic Number,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,CreateDataSource,The following statement contains a magic number: entity2.SetValue("ID"' 2);
Magic Number,AstoriaUnitTests,OperationDescriptorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\OperationDescriptorTests.cs,RunPositiveFunctionTest,The following statement contains a magic number: PlaybackService.ProcessRequestOverride.Value = (req) =>                  {                      string contentType;                      if (format == ODataFormat.Json)                      {                          contentType = UnitTestsUtil.JsonLightMimeType;                          payloadBuilder.Metadata = request.BaseUri + "/$metadata#TestService.CustomerEntities/$entity";                      }                      else                      {                          contentType = UnitTestsUtil.AtomFormat;                      }                        req.SetResponseStreamAsText(PayloadGenerator.Generate(payloadBuilder' format));                      req.ResponseHeaders.Add("Content-Type"' contentType);                      req.SetResponseStatusCode(200);                      return req;                  };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetParam,The following statement contains a magic number: switch (paramType)              {                  case BasicParamValues.IntParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam1"' 5);                    case BasicParamValues.IntParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntParam2"' 6);                    case BasicParamValues.StringParam1:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam1"' "StringValue1");                    case BasicParamValues.StringParam2:                      return (T)Activator.CreateInstance(typeof(T)' "StringParam2"' "StringValue2");                    case BasicParamValues.ComplexParam1:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam1"' new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });                    case BasicParamValues.ComplexParam2:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam2"' new ComplexType2() { City = "Redmond"' Numbers = new List<int>() { 1' 2 } });                    case BasicParamValues.ComplexParam3:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam3"' new ComplexType3() { Key = 3' Addresses = GetListOfAddressComplexType() });                    case BasicParamValues.ComplexParam4:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexParam4"' new ComplexType4() { City = "Bellevue"' State = "WA"' Numbers = new List<int>() { 1' 2' 3 } });                    case BasicParamValues.ComplexWithComplex:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexWithComplexParam"' new ComplexTypeWithComplex() { Name = "Allie"' Address = new AddressComplexType() { City = "Woodinville"' ZipCode = 98077 } });                    case BasicParamValues.UntypedNullParam:                      return (T)Activator.CreateInstance(typeof(T)' "UntypedNullParam"' null);                    case BasicParamValues.EmptyStringParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyStringParam"' "");                    case BasicParamValues.IntCollParam1:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection1"' new Int32[] { 1 });                    case BasicParamValues.IntCollParam2:                      return (T)Activator.CreateInstance(typeof(T)' "IntCollection2"' new Int32[] { 1' 2 });                    case BasicParamValues.EmptyPrimitiveCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyPrimitiveCollection"' new Int32[] { });                    case BasicParamValues.EmptyComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "EmptyComplexCollection"' new AddressComplexType[] { });                    case BasicParamValues.ListOfComplexTypesParam:                      return (T)Activator.CreateInstance(typeof(T)' "ListOfComplexTypes"' GetListOfAddressComplexType());                    case BasicParamValues.ComplexCollParam:                      return (T)Activator.CreateInstance(typeof(T)' "ComplexCollection1"' new AddressComplexType[] { new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 }' new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 } });                    case BasicParamValues.DateTimeOffsetParam:                      return (T)Activator.CreateInstance(typeof(T)' "DateTimeParam"' new DateTimeOffset(2011' 1' 1' 0' 0' 0' TimeSpan.Zero));                    case BasicParamValues.NullableParam:                      return (T)Activator.CreateInstance(typeof(T)' "NullableBool"' (int?)5);                    default:                      return null;              }
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetListOfAddressComplexType,The following statement contains a magic number: list.Add(new AddressComplexType() { City = "Redmond"' ZipCode = 98052' Enum1 = BasicParamValues.EnumPara1 });
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,GetListOfAddressComplexType,The following statement contains a magic number: list.Add(new AddressComplexType() { City = "Bellevue"' ZipCode = 98007' Enum1 = BasicParamValues.EnumPara1 });
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,OperationParameterConstructorErrorTests,The following statement contains a magic number: OperationParameter op = new BodyOperationParameter(null' 5);
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,OperationParameterConstructorErrorTests,The following statement contains a magic number: OperationParameter op = new UriOperationParameter(""' 4);
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunExecuteActionParameterTests,The following statement contains a magic number: AstoriaTest.TestUtil.RunCombinations(testCases' (testCase) =>                  {                      PlaybackService.ProcessRequestOverride.Value = (req) =>                      {                          // Parameters are sent using JSON when context format is Atom                          var expectedParameterFormat = contextFormat;                            string expectedUriString = testCase.ExpectedBaseUriString;                          OperationUriBuilder operationUriBuilder = testCase.ExpectedUriBuilder;                          if (operationUriBuilder != null)                          {                              var parameterQueryString = UriOperationParameterGenerator.Generate(operationUriBuilder' expectedParameterFormat' payloadGeneratorSettings);                              expectedUriString = testCase.ExpectedBaseUriString + "(" + parameterQueryString + ")";                          }                            Assert.AreEqual(Uri.UnescapeDataString(expectedUriString)' Uri.UnescapeDataString(req.RequestUriString));                          StreamReader reader = new StreamReader(req.GetRequestStream());                          string actualPayload = reader.ReadToEnd();                            string expectedPayload = GetExpectedPayload(testCase' expectedParameterFormat);                            Assert.AreEqual(expectedPayload' actualPayload);                          if (req.RequestContentLength > 0)                          {                              string contentType = "application/json;odata.metadata=minimal";                              Assert.AreEqual(contentType' req.RequestContentType);                          }                            req.SetResponseStatusCode(200);                          return req;                      };                          DataServiceContext ctx = CreateContext(request' contextFormat);                        ctx.ResolveName = (clientType) =>                      {                          return clientType.FullName.Replace("AstoriaUnitTests"' "AstoriaServer");                      };                        Uri uri = new Uri(request.ServiceRoot + testCase.ActualUriString);                      if (runSynchronous)                      {                          ctx.Execute(uri' testCase.HttpMethod' testCase.Parameters);                      }                      else                      {                          IAsyncResult result = ctx.BeginExecute<object>(uri' null' null' testCase.HttpMethod' false' testCase.Parameters);                          ctx.EndExecute<object>(result);                      }                  });
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunServiceOperationTestWithUriParameters,The following statement contains a magic number: TestCase[] positiveTestCases = new TestCase[]              {                     // a uri parameter containing spaces. (Client should escape the uri parameter containing spaces)                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This is a string with space") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This is a string with space");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing spaces and special characters which should be escaped.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "{\"__metadata\":{\"type\":\"Collection(Edm.Int32)\"}' \"results\":[1]}");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing '?' and '&' in escaped form.                   new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "%3F%26") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "%3F%26");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'                    // a uri parameter containing reserved characters: "?' #' $' %". Also contains %20 which represents a space.                  new TestCase()                  {                      ActualUriString = "/ServiceOpTest"'                      Parameters = new OperationParameter[] { new UriOperationParameter("p1"' 5)' new UriOperationParameter("p2"' "This#Has$Reserved#?Characters  %20") }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          ExpectedResults.Clear();                          ExpectedResults.Add("p1"' 5);                          ExpectedResults.Add("p2"' "This#Has$Reserved#?Characters  %20");                          return ctx.Execute(uri' "GET"' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunPassUriParameterWithoutResolveNameTest,The following statement contains a magic number: var testCase = new TestCase()              {                  ActualUriString = "/ComplexTypesInUri"'                  Parameters = new OperationParameter[] { new UriOperationParameter("p1"' new AddressComplexType() { City = "Seattle"' ZipCode = 98101' Enum1 = BasicParamValues.EnumPara1 }) }              };
Magic Number,AstoriaUnitTests,ActionParametersTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ActionParametersTests.cs,RunExecuteActionNullUriParameterValueTests,The following statement contains a magic number: AstoriaTest.TestUtil.RunCombinations(positiveTestCases' (testCase) =>                  {                      PlaybackService.ProcessRequestOverride.Value = (req) =>                      {                          Assert.AreEqual(testCase.ExpectedBaseUriString' req.RequestUriString);                          StreamReader reader = new StreamReader(req.GetRequestStream());                          String actualPayload = reader.ReadToEnd();                          var expectedPayload = GetExpectedPayload(testCase' null);                          Assert.AreEqual(expectedPayload' actualPayload);                          req.SetResponseStatusCode(200);                          return req;                      };                        DataServiceContext ctx = CreateContext(request' contextFormat);                      Uri uri = new Uri(request.ServiceRoot + testCase.ActualUriString);                      ctx.Execute(uri' testCase.HttpMethod' testCase.Parameters);                  });
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The following statement contains a magic number: entity2.SetValue("ID"' 2);
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The following statement contains a magic number: EntityType clientEntity2 = new EntityType()              {                  ID = 2'                  Updated = false'                  PrimitiveProperty = "entity2"'                  ComplexProperty = clientComplex2'                  PrimitiveCollectionProperty = new string[] { "value1"' "value2" }'                  ComplexCollectionProperty = new[] { clientComplex1' clientComplex2 }              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The following statement contains a magic number: entity3.SetValue("ID"' 3);
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ModelWithActions,The following statement contains a magic number: EntityType clientEntity3 = new EntityType()              {                  ID = 3'                  Updated = false'                  PrimitiveProperty = "entity3"'                  ComplexProperty = clientComplex2'                  PrimitiveCollectionProperty = new string[] { "value1"' "value2" }'                  ComplexCollectionProperty = new[] { clientComplex1' clientComplex2 }              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ExecuteActionSuccessTestsWithParameters,The following statement contains a magic number: PositiveTestCase[] positiveTestCases = new PositiveTestCase[]              {                  new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveByteArray"'                      ExpectedResults = new object[] { 3 }'                      StatusCode = 200'                      ExpectedReturnType = typeof(int)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new byte[] { 0x01' 0x02 } )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<int>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive"'                      ExpectedResults = new object[] { "first" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' "first")}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new List<string>() {"first"' "second"} )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex"'                      ExpectedResults = new object[] {new ComplexType() { PrimitiveProperty = "complex1" }}'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' new ComplexType() { PrimitiveProperty = "complex1" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexCollection"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_ComplexQueryable"'                      ExpectedResults = entityInstances.First().ComplexCollectionProperty'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value"' entityInstances.First().ComplexCollectionProperty )}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_Primitive"'                      ExpectedResults = new object[] { "first5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' "first")' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_PrimitiveCollection_Primitive"'                      ExpectedResults = new object[] { "first5"' "second5" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' new List<string>() { "first"' "second" })' new BodyOperationParameter("value2"' 5)}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable"'                      ExpectedResults = new object[] { "first"' "second" }'                      StatusCode = 200'                      ExpectedReturnType = typeof(string)'                      OperationParameters = new OperationParameter[] { new BodyOperationParameter("value1"' 5)' new BodyOperationParameter("value2"' new List<string>() { "first"' "second" })}'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<string>(ctx' uri' false /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/Set/AstoriaUnitTests.Tests.Actions.ActionOnEntityCollectionWithParam_Complex_Complex"'                      ExpectedResults = new object[] { entityInstances.First().ComplexProperty }'                      StatusCode = 200'                      ExpectedReturnType = typeof(ComplexType)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value1"' entityInstances.First().ComplexProperty)'                          new BodyOperationParameter("value2"' entityInstances.First().ComplexProperty)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          entityInstances.First().Updated = true;                          return MyExecute<ComplexType>(ctx' uri' true /*singleResult*/' isAsync' operationParameters);                      }'                  }'                    new PositiveTestCase()                  {                      RequestUri = "/TopLevelAction_WithParam_NullablePrimitive"'                      ExpectedResults = new object[] {  }'                      StatusCode = 204'                      ExpectedReturnType = typeof(void)'                      OperationParameters = new OperationParameter[]                      {                          new BodyOperationParameter("value"' null)                      }'                      ExecuteMethodWithParams = (ctx' uri' isAsync' operationParameters) =>                      {                          return MyExecute(ctx' uri' isAsync' operationParameters);                      }'                  }'              };
Magic Number,AstoriaUnitTests,ClientActionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,TestClientEventsWithAction,The following statement contains a magic number: ctx.ReceivingResponse += (sender' args) =>                  {                      args.ResponseMessage.Should().NotBeNull();                      args.ResponseMessage.StatusCode.Should().Be(200);                      args.IsBatchPart.Should().BeFalse();                      receivingResponseCalls++;                  };
Magic Number,AstoriaUnitTests,ComplexType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,GetHashCode,The following statement contains a magic number: return 7 * p * c;
Magic Number,AstoriaUnitTests,EntityType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,GetHashCode,The following statement contains a magic number: return 47 * this.ID.GetHashCode() * this.Updated.GetHashCode();
Magic Number,AstoriaUnitTests,EntityType2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,GetHashCode,The following statement contains a magic number: return 17 * this.ID.GetHashCode();
Magic Number,AstoriaUnitTests,ActionContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ActionOnEntityCollectionWithParam_Primitive_PrimitiveQueryable,The following statement contains a magic number: throw new DataServiceException(400' "value1 must not be 0");
Magic Number,AstoriaUnitTests,ActionContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ActionOnEntityCollectionWithParam_Complex_Complex,The following statement contains a magic number: throw new DataServiceException(400' "value1 cannot be null.");
Magic Number,AstoriaUnitTests,ActionContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientActionTests.cs,ActionOnEntityCollectionWithParam_Complex_Complex,The following statement contains a magic number: throw new DataServiceException(400' "value2 cannot be null.");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientSpatialTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientSpatialTests.cs,TestCollectionOfSpatialTypes,The following statement contains a magic number: Assert.AreEqual(2' tripLeg.PointsOfInterest.Count()' "didn't materialize all the elements");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,CollectionBinding,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,ErrorOnMultipleReferencesToSameCollection,The following statement contains a magic number: TestUtil.RunCombinations(entityTypes' (entityType) =>              {                  EntityBase entity1 = (EntityBase)Activator.CreateInstance(entityType);                  entity1.ID = 1;                  Assert.IsNotNull(entity1.TestCollection' "Expected TestCollection to be automatically created by the parent type");                  EntityBase entity2 = (EntityBase)Activator.CreateInstance(entityType);                  entity2.ID = 2;                  Assert.IsNotNull(entity2.TestCollection' "Expected TestCollection to be automatically created by the parent type");                    this.GetType()                      .GetMethod("ErrorOnMultipleReferencesToSameCollection"' BindingFlags.Instance | BindingFlags.NonPublic)                      .MakeGenericMethod(entityType)                      .Invoke(this' new object[] { entity1' entity2 });              });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,CollectionTestBase<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,CreateEntity,The following statement contains a magic number: newEntity.ID = 5;
Magic Number,AstoriaUnitTests.DataWebClientCSharp,MembershipTest<EntityType;CollectionType;CollectionItemType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionBinding.cs,MembershipTest,The following statement contains a magic number: collectionActions = new Func<CollectionType' bool>[]                  {                      // Add value that is not already in the collection                      collection => {                          VerifyCollectionIsNotEmpty(collection);                          CollectionItemType collectionTestValue = (CollectionItemType)collectionValues.NewValue;                          VerifyValueNotInCollection(collection' collectionTestValue);                          collection.Add(collectionTestValue);                          return true;                      }'                      // Add value that is already in the collection                      collection => {                          VerifyCollectionIsNotEmpty(collection);                          CollectionItemType collectionTestValue = (CollectionItemType)collectionValues.SingleValue;                          VerifyValueIsInCollection(collection' collectionTestValue);                          collection.Add(collectionTestValue);                          return true;                      }'                      // Remove value that is in the collection one time                      collection => {                          VerifyCollectionIsNotEmpty(collection);                          CollectionItemType collectionTestValue = (CollectionItemType)collectionValues.SingleValue;                          CollectionItemType itemInCollection = GetItemInCollection(collection' collectionTestValue);                          VerifyValueCountInCollection(collection' collectionTestValue' 1);                          // Remove the actual instance from the collection so that this has a real effect for complex types                          collection.Remove(itemInCollection);                          return true;                      }'                      // Remove value that is in the collection multiple times                      collection => {                          VerifyCollectionIsNotEmpty(collection);                          CollectionItemType collectionTestValue = (CollectionItemType)collectionValues.DuplicateValue;                          CollectionItemType itemInCollection = GetItemInCollection(collection' collectionTestValue);                          VerifyValueCountInCollection(collection' collectionTestValue' 2);                          // Remove the actual instance from the collection so that this has a real effect for complex types                          collection.Remove(itemInCollection);                          return true;                      }'                      // Remove value that is not in the collection                      collection => {                          VerifyCollectionIsNotEmpty(collection);                          CollectionItemType collectionTestValue = (CollectionItemType)collectionValues.NewValue;                          VerifyValueNotInCollection(collection' collectionTestValue);                          // Return value is false for ObservableCollection but true for our custom collection type'                          // so just rely on this value to determine whether or not the collection is expected to have changed.                          return collection.Remove(collectionTestValue);                      }'                      // Clear the collection                      collection => {                          VerifyCollectionIsNotEmpty(collection);                          collection.Clear();                          return true;                      }'                      // Replace an item in the collection (method only implemented for ObservableCollection' otherwise it's a no-op)                      collection => {                          ObservableCollection<CollectionItemType> observable = collection as ObservableCollection<CollectionItemType>;                          if (observable != null)                          {                              VerifyCollectionIsNotEmpty(collection);                              CollectionItemType collectionTestValue = (CollectionItemType)collectionValues.NewValue;                              VerifyValueNotInCollection(collection' collectionTestValue);                              observable[0] = collectionTestValue;                              return true;                          }                          return false;                      }'                      // Move an item in the collection (method only implemented for ObservableCollection' otherwise it's a no-op)                      collection => {                          ObservableCollection<CollectionItemType> observable = collection as ObservableCollection<CollectionItemType>;                          if (observable != null)                          {                              VerifyCollectionIsNotEmpty(collection);                              observable.Move(0' 1);                              return true;                          }                          return false;                      }'                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: var testCases = new[] {               // collection of primitive types                   // positive cases                  new { // serializing a collection of integer values - should pass                      CollectionItemType = typeof(int)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int[] { 100' 101' 200 }                  }'                  new { // serializing a collection of nullable integer values - should pass                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { 10' 11' 20 }                  }'                  new { // serializing a collection of DateTimeOffset values - should pass                      CollectionItemType = typeof(DateTimeOffset)'                      ExpectedCollectionWireType = "#Collection(DateTimeOffset)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DateTimeOffset[] {                          new DateTime(2010' 3' 16' 10' 15' 20' DateTimeKind.Utc)'                          new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                          new DateTime(2132' 11' 14' 23' 47' 07' DateTimeKind.Utc) }                  }'                  new { // Serializaing a collection of string values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "ab    c"' string.Empty' "123abc "' string.Empty' " "' "\txyz\t"' "\rabc"' "abc\n" }                  }'                  new { // serializing an empty collection - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[0]                  }'                  new { // serializing a collection that contains null values - should pass                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new string[] { "abc"' null' "123" }                  }'                  new { // serializing a collection that contains null values and is backed by a collection of nullables  - should fail                      CollectionItemType = typeof(int?)'                      ExpectedCollectionWireType = "#Collection(Int32)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new int?[] { -1' null' 1 }'                  }'                    // negative test cases                  new { // serializing a collection whose value is null - should fail                      CollectionItemType = typeof(string)'                      ExpectedCollectionWireType = "#Collection(String)"'                      ExpectedException = (Exception)new InvalidOperationException("The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.")'                      ValuesToInitializeCollection = (IEnumerable)null                  }'                  new { // serializing a collection whose items are collection - should fail                      CollectionItemType = typeof(List<int>)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("Collection properties of a collection type are not supported.")'                      ValuesToInitializeCollection = (IEnumerable)new List<int>[] { new List<int>(new int[] {1' 2})' new List<int>(new int[] {3' 4}) }                  }'                  //collection of complex types                 //   positive cases                  new { // serializing a collection of complex types - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Description = "TestDescription"' Number = 123 }'                          new ComplexType() { Number = 098 } }                  }'                  new { // verify that collection item type is passed to the type resolver when serializing and it is passed only once - should pass                      CollectionItemType = typeof(UnrelatedComplexType)'                      ExpectedCollectionWireType = "#Collection(epyTxelpmoCdetalernU)"'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new UnrelatedComplexType[] {                          new UnrelatedComplexType() { Description = "Unrelated ComplexType"' AnotherDescription = "Another Description" }'                          new UnrelatedComplexType() { Description = "XYZ" } }                  }'                  new { // verify serialization of collection of complex types that have collection - should pass                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new DerivedComplexType[] {                          new DerivedComplexType() { Description = "1st Item"' Number = 1' Summary = "Collection 1"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 1st nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}'                          new DerivedComplexType() { Description = "2nd Item"' Number = 2' Summary = "Collection 2"' CollectionOfComplexTypes = new DerivedComplexType[] {                              new DerivedComplexType() { Description = "1.1"' Number = 1' Summary = "1st item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }'                              new DerivedComplexType() { Description = "1.2"' Number = 2' Summary = "2nd item in the 2nd nested collection"' CollectionOfComplexTypes = new List<DerivedComplexType>() }}}}                  }'                    //negative test cases                  new { // verify that serialization of collection of complex types fails if the collection contains null items - should pass                      CollectionItemType = typeof(ComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)null'                      ValuesToInitializeCollection = (IEnumerable)new ComplexType[] {                          new ComplexType() { Number = 1' Description = "ComplexType" }'                          null'                          new ComplexType() { Number = 3' Description = "ComplexType" }}                  }'                  new { // verify that serialization of collection of complex types that has cycles fails - should fail                      CollectionItemType = typeof(DerivedComplexType)'                      ExpectedCollectionWireType = default(string)'                      ExpectedException = (Exception)new InvalidOperationException("A circular loop was detected while serializing the property 'CollectionOfComplexTypes'. You must make sure that loops are not present in properties that return a collection or complex type.")'                      ValuesToInitializeCollection = (IEnumerable)CreateCollectionWithCycle()                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,SerializationOfCollection,The following statement contains a magic number: TestUtil.RunCombinations(testCases' collectionGenericTypes' new string[] { "POST"' "PUT"' "PATCH" }' (testCase' collectionGenericType' httpMethod) =>                  {                      // negative test cases does not apply to PUT and PATCH - since there is no way of creating the entity that will be updated                      if (testCase.ExpectedException != null && (httpMethod != "POST"))                      {                          return;                      }                        Type entityType = typeof(Entity<'>).MakeGenericType(collectionGenericType.MakeGenericType(testCase.CollectionItemType)' testCase.CollectionItemType);                      object entity = Activator.CreateInstance(entityType' testCase.ValuesToInitializeCollection);                        int resolvedCount = 0;                        PlaybackService.InspectRequestPayload.Value = (payload) =>                      {                          XDocument payloadXml = XDocument.Load(payload);                            Assert.IsNull(testCase.ExpectedException' "Exception expected but not thrown. Payload: " + payloadXml.ToString());                            XElement collectionPayload = payloadXml.Descendants(UnitTestsUtil.DataNamespace + "Collection").First();                            Assert.AreEqual(testCase.ExpectedCollectionWireType' (string)collectionPayload.Attribute(UnitTestsUtil.MetadataNamespace + "type"));                            // verify we resolve the type only once rather than for each collection item                          if (testCase.CollectionItemType == typeof(UnrelatedComplexType))                          {                              Assert.AreEqual(3' resolvedCount' "The type should be resolved three times");                              resolvedCount = 0; // reset the count                          }                            VerifyCollectionAndPayloadMatch(collectionPayload' (IEnumerable)entity.GetType().GetProperty("Collection").GetValue(entity' null));                      };                        DataServiceContext ctx = new DataServiceContext(new Uri(host.BaseUri)' ODataProtocolVersion.V4);                      //ctx.EnableAtom = true;                      //ctx.Format.UseAtom();                      ctx.AddObject("Entities"' entity);                        ctx.ResolveName = (type) =>                      {                          if (type == typeof(UnrelatedComplexType))                          {                              resolvedCount++;                              return "epyTxelpmoCdetalernU";                          }                            return null;                      };                        SaveChangesOptions? saveChangesOptions = null;                      switch (httpMethod)                      {                          case "PUT":                          case "PATCH":                              ctx.SaveChanges();                              ctx.UpdateObject(entity);                              saveChangesOptions = httpMethod == "PUT" ? SaveChangesOptions.ReplaceOnUpdate : SaveChangesOptions.None;                              break;                          case "POST":                              saveChangesOptions = SaveChangesOptions.None;                              break;                          default:                              Assert.Fail("Only POST' PUT' PATCH' PATCH verbs are supported");                              break;                      }                        try                      {                          ctx.SaveChanges(saveChangesOptions.Value);                      }                      catch (AssertFailedException)                      {                          throw;                      }                      catch (Exception ex)                      {                          if (testCase.ExpectedException != null)                          {                              Exception actualException = ex is DataServiceRequestException ? ex.InnerException : ex;                                Assert.IsNotNull(actualException);                              Assert.IsTrue(actualException.Message.Contains(testCase.ExpectedException.Message)' "Message: '{0}' does not contain expected '{1}'"' testCase.ExpectedException.Message' actualException.Message);                              Assert.IsInstanceOfType(actualException' testCase.ExpectedException.GetType());                          }                          else                          {                              throw;                          }                      }                  });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The following statement contains a magic number: var testCases = new[] {                  new { // complex type in a collection of primitive types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<string>)'                      Collection  = (object)new UntypedCollection<string>(new object[] { "primitive"' new ComplexType() { Number = 1' Description = "ComplexTypes" } })'                      ExpectedException = (Exception)new InvalidOperationException("A collection property of primitive types cannot contain an item of a complex type.")                  }'                  new { // primitive type in a collection of complex types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<ComplexType>)'                      Collection  = (object)new UntypedCollection<ComplexType>(new object[] { new ComplexType() { Number = 1' Description = "ComplexTypes" }' "primitive" })'                      ExpectedException = (Exception)new InvalidOperationException("A collection property of complex types cannot contain an item of a primitive type.")                  }'                  new { // unrelated complex type in the collection                      TypeOfEntity =  typeof(EntityWithUntypedCollection<ComplexType>)'                      Collection  = (object)new UntypedCollection<ComplexType>(new object[] {                          new ComplexType() { Number = 1' Description = "ComplexTypes" }'                          new UnrelatedComplexType() { Description = "Unrelated" } })'                      ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.")                  }'                  new { // incompatible primitive type in the collection of primitive types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<int>)'                      Collection  = (object)new UntypedCollection<int>(new object[] { 1' "two"' 3 })'                      ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.")                  }'                  new { // incompatible primitive type in the collection of primitive types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<byte>)'                      Collection  = (object)new UntypedCollection<byte>(new object[] { 1' Int32.MaxValue' 3 })'                      ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.")                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,InvalidItemsInCollection,The following statement contains a magic number: var testCases = new[] {                  new { // complex type in a collection of primitive types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<string>)'                      Collection  = (object)new UntypedCollection<string>(new object[] { "primitive"' new ComplexType() { Number = 1' Description = "ComplexTypes" } })'                      ExpectedException = (Exception)new InvalidOperationException("A collection property of primitive types cannot contain an item of a complex type.")                  }'                  new { // primitive type in a collection of complex types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<ComplexType>)'                      Collection  = (object)new UntypedCollection<ComplexType>(new object[] { new ComplexType() { Number = 1' Description = "ComplexTypes" }' "primitive" })'                      ExpectedException = (Exception)new InvalidOperationException("A collection property of complex types cannot contain an item of a primitive type.")                  }'                  new { // unrelated complex type in the collection                      TypeOfEntity =  typeof(EntityWithUntypedCollection<ComplexType>)'                      Collection  = (object)new UntypedCollection<ComplexType>(new object[] {                          new ComplexType() { Number = 1' Description = "ComplexTypes" }'                          new UnrelatedComplexType() { Description = "Unrelated" } })'                      ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.")                  }'                  new { // incompatible primitive type in the collection of primitive types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<int>)'                      Collection  = (object)new UntypedCollection<int>(new object[] { 1' "two"' 3 })'                      ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.")                  }'                  new { // incompatible primitive type in the collection of primitive types                      TypeOfEntity =  typeof(EntityWithUntypedCollection<byte>)'                      Collection  = (object)new UntypedCollection<byte>(new object[] { 1' Int32.MaxValue' 3 })'                      ExpectedException = (Exception)new InvalidOperationException("An item in the collection property 'Collection' is not of the correct type. All items in the collection property must be of the collection item type.")                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_SupportedClientLINQQueries,The following statement contains a magic number: ComplexType[] baseComplexCollection = new ComplexType[] { new ComplexType { Description = "Description 1"' Number = 1 }' new ComplexType { Description = "Description 2"' Number = 2 } };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,ClientShouldWriteComplexTypesWithOnlyCollectionProperties,The following statement contains a magic number: TestEntity[] testEntities = new TestEntity[] {                  new TestEntity() {                      ID = 2010'                      ComplexType = new ComplexTypeWithCollectionOfArrays() {                                  ByteArray = new List<byte[]>(new [] {                                      new byte[] { 0x20' 0x30' 0x40 }'                                      new byte[] { 0xa0' 0xb0' 0xc0 }})'                                  CharArray = new List<char[]>(new [] {                                      new char[] { 'd'' 'd'' '1'' '@' }'                                      new char[] { 'q'' 'w'' 'e'' 'r'' 't'' 'y' }})                      }}'                  new TestEntity() {                      ID = 2011'                      ComplexType = new ComplexTypeWithCollectionOfArrays() {                          ByteArray = new List<byte[]>()'                          CharArray = new List<char[]>()                      }                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,ClientShouldWriteComplexTypesWithOnlyCollectionProperties,The following statement contains a magic number: TestEntity[] testEntities = new TestEntity[] {                  new TestEntity() {                      ID = 2010'                      ComplexType = new ComplexTypeWithCollectionOfArrays() {                                  ByteArray = new List<byte[]>(new [] {                                      new byte[] { 0x20' 0x30' 0x40 }'                                      new byte[] { 0xa0' 0xb0' 0xc0 }})'                                  CharArray = new List<char[]>(new [] {                                      new char[] { 'd'' 'd'' '1'' '@' }'                                      new char[] { 'q'' 'w'' 'e'' 'r'' 't'' 'y' }})                      }}'                  new TestEntity() {                      ID = 2011'                      ComplexType = new ComplexTypeWithCollectionOfArrays() {                          ByteArray = new List<byte[]>()'                          CharArray = new List<char[]>()                      }                  }              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: var testCases = new[] {                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<int> { ID = 1' CollectionProperty = 42 }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<byte[]> { ID = 1' CollectionProperty = new byte[] { 1' 2' 3} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<char[]> { ID = 1' CollectionProperty = new char[] { 'a'' 'b'' 'c'} }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<XElement> { ID = 1' CollectionProperty = new XElement("root") }'                      IsCollection = false                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<List<int>> { ID = 1' CollectionProperty = new List<int> { 1' 2' 3} }'                      IsCollection = true                  }'                  new {                      Entity = (object)new CollectionTypeRecognitionEntity<CollectionWithSettableProperty<int>> { ID = 1' CollectionProperty = new CollectionWithSettableProperty<int> { 1' 2' 3} }'                      IsCollection = true                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,Collection,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,Collection_CollectionTypeRecognition,The following statement contains a magic number: TestUtil.RunCombinations(                      testCases'                      (testCase) =>                      {                          service.ProcessRequestOverride = (r) =>                          {                              XElement collectionProperty = XDocument.Load(r.GetRequestStream()).Root.Element(UnitTestsUtil.AtomNamespace + "content")                                  .Element(UnitTestsUtil.MetadataNamespace + "properties").Element(CollectionPropertyElementName);                              Assert.IsNotNull(collectionProperty' "The collectionProperty is missing from the payload.");                              if (testCase.IsCollection)                              {                                  Assert.IsNotNull(collectionProperty.Elements(CollectionElementXName).FirstOrDefault()' "The type should be recognized as a collection and thus the payload should have he m:element child.");                              }                              else                              {                                  Assert.IsNull(collectionProperty.Elements(CollectionElementXName).FirstOrDefault()' "The type should not be recognized as a collection and thus the payload should not have he m:element child.");                              }                                r.SetResponseStatusCode(204);                              r.ResponseHeaders["Location"] = "http://test.org/service/entity(1)";                              r.ResponseHeaders["OData-EntityId"] = "http://test.org/service/entity(1)";                              return r;                          };                            DataServiceContext ctx = new DataServiceContext(request.ServiceRoot' ODataProtocolVersion.V4);                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                          ctx.AddObject("entity"' testCase.Entity);                          ctx.SaveChanges();                      });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,CollectionContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\CollectionTests.cs,CollectionContext,The following statement contains a magic number: entity.ComplexCollection.Add(new ComplexType() { Description = "Description 2"' Number = 2 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientProjectionPartialTrust,The following statement contains a magic number: Assert(2 == cust.Orders.Count' "Incorrect Orders Count");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientProjectionPartialTrust,The following statement contains a magic number: Assert(2 == custEnumerateOrders.Orders.Count' "Incorrect Orders Count");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientProjectionPartialTrust,The following statement contains a magic number: Assert(2 == custEnumerateOrders2.Orders.Count' "Incorrect Orders Count");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientProjectionPartialTrustAnonymousType,The following statement contains a magic number: var q = ctx.CreateQuery<Customer>("Customers").Select(c => new              {                  ID = c.ID'                  Name = c.Name'                  NameLength = c.Name.Length - 5'                  Address = c.Address              });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientProjectionPartialTrustAnonymousType,The following statement contains a magic number: Assert(5 == cust.NameLength' "Length is incorrect");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTestContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,ClientProjectionPartialTrustAnonymousType,The following statement contains a magic number: Assert(2 == c1.Orders.Count()' "incorrect orders count");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ClientPartialTrustTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientPartialTrustTests.cs,GetMediumTrustDomain,The following statement contains a magic number: permissions.AddPermission(new IsolatedStorageFilePermission(PermissionState.Unrestricted) { UsageAllowed = IsolatedStorageContainment.AssemblyIsolationByUser' UserQuota = 9223372036854775807 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The following statement contains a magic number: Assert.AreEqual(context.Entities.Count' 3' "there should be 3 entities tracked by the context");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_1,The following statement contains a magic number: Assert.AreEqual(context.Entities[2].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet3('ABCDE')"' "top level entity must be tracked");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The following statement contains a magic number: Assert.AreEqual(context.Entities.Count' 3' "there should be 3 entities tracked by the context");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The following statement contains a magic number: Assert.AreEqual(context.Entities[2].EditLink.AbsoluteUri' request.ServiceRoot.AbsoluteUri + "/MySet2(3)"' "the nested entity must be tracked");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,NamedStream_ProjectionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\NamedStream_ProjectionTests.cs,NamedStreams_NestedQuery_2,The following statement contains a magic number: Assert.AreEqual(context.Entities.Count' 4' "there should be 4 entities tracked by the context");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,InsertShouldCallReceivingResponse,The following statement contains a magic number: Product product = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,UpdateShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(200' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,InsertUpdateNoContentShouldCallReceivingResponse,The following statement contains a magic number: AddReceivingResponseValidationListener(ctx' args =>                  {                      args.Descriptor.Should().BeSameAs(expectedDescriptor);                      var entityDescriptor = args.Descriptor as EntityDescriptor;                      entityDescriptor.Should().NotBeNull();                      entityDescriptor.State.Should().Be(expectedStates);                      args.ResponseMessage.StatusCode.Should().Be(204);                  });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,InsertUpdateNoContentShouldCallReceivingResponse,The following statement contains a magic number: Product product = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,InsertUpdateNoContentShouldCallReceivingResponse,The following statement contains a magic number: Customer customer = new Customer() { ID = 2' Name = "NewSampleTestName" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,DeleteShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(204' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchQueryResponsesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsShouldCallReceivingResponse,The following statement contains a magic number: Product product1 = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsShouldCallReceivingResponse,The following statement contains a magic number: Product product2 = new Product(177' "can"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The following statement contains a magic number: Product product1 = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The following statement contains a magic number: Product product2 = new Product(177' "can"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The following statement contains a magic number: !asyncResultsB.AsyncWaitHandle.WaitOne(new TimeSpan(0' 5' 0)' false)
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncInsertsShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsLinkShouldCallErrorResponse,The following statement contains a magic number: Product product1 = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsLinkShouldCallErrorResponse,The following statement contains a magic number: Product product2 = new Product(177' "can"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsLinkShouldCallErrorResponse,The following statement contains a magic number: Order newOrder = new Order() { ID = 499' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsLinkShouldCallErrorResponse,The following statement contains a magic number: Order newOrder = new Order() { ID = 499' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsErrorResponseShouldCallReceiveResponse,The following statement contains a magic number: Order newOrder = new Order() { ID = 499' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsErrorResponseShouldCallReceiveResponse,The following statement contains a magic number: Order newOrder = new Order() { ID = 499' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsErrorResponseShouldCallReceiveResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 400' 201 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsErrorResponseShouldCallReceiveResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 400' 201 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsErrorResponseShouldCallReceiveResponse,The following statement contains a magic number: Assert.AreEqual(2' response.Count());
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsInsertsErrorResponseShouldCallReceiveResponse,The following statement contains a magic number: Assert.AreEqual(202' response.BatchStatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertsShouldCallReceivingResponse,The following statement contains a magic number: Product product1 = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertsShouldCallReceivingResponse,The following statement contains a magic number: Product product2 = new Product(177' "can"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertsShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2' Name = "NewSampleTestNameAfterUpdate2" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(200' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchUpdatesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2' Name = "NewSampleTestNameAfterUpdate2" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(200' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsUpdatesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2' Name = "NewSampleTestNameAfterUpdate2" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The following statement contains a magic number: !asyncResultsB.AsyncWaitHandle.WaitOne(new TimeSpan(0' 5' 0)' false)
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(200' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncUpdatesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchDeletesShouldCallReceivingResponse,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchDeletesShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(204' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchDeletesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsDeletesShouldCallReceivingResponse,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsDeletesShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(204' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsDeletesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The following statement contains a magic number: !asyncResultsB.AsyncWaitHandle.WaitOne(new TimeSpan(0' 5' 0)' false)
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(204' theResponse.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchWithIndependentOperationsAsyncDeletesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,LoadPropertyShouldCallReceivingResponse,The following statement contains a magic number: Assert.AreEqual(200' orders.StatusCode);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,AsyncQueryShouldCallReceivingResponse,The following statement contains a magic number: result.Wait(10000).Should().BeTrue();
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchQueryErrorResponsesShouldCallReceivingResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 202' 200' 404 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchQueryErrorResponsesShouldCallReceivingResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 202' 200' 404 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchQueryErrorResponsesShouldCallReceivingResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 202' 200' 404 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchQueryErrorResponsesShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertErrorResponseShouldCallReceivingResponse,The following statement contains a magic number: Order newOrder = new Order() { ID = 499' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertErrorResponseShouldCallReceivingResponse,The following statement contains a magic number: Order newOrder = new Order() { ID = 499' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertErrorResponseShouldCallReceivingResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 202' 400 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertErrorResponseShouldCallReceivingResponse,The following statement contains a magic number: var expectedStatusCode = new Queue<int>(new int[] { 202' 400 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchInsertErrorResponseShouldCallReceivingResponse,The following statement contains a magic number: this.receivingResponseHitCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchExceptionEmptyResponseEnumerableTest,The following statement contains a magic number: Product product = new Product(77' "bottle"' false);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,ReceivingResponseFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,BatchExceptionEmptyResponseEnumerableTest,The following statement contains a magic number: waitHandle.WaitOne(TimeSpan.FromSeconds(30));
Magic Number,AstoriaUnitTests.DataWebClientCSharp,AddCustomHeaderToResponseService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,ReturnSimpleCollectionServiceOperation,The following statement contains a magic number: return new List<int>() { 55' 66' 77' };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,AddCustomHeaderToResponseService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,ReturnSimpleCollectionServiceOperation,The following statement contains a magic number: return new List<int>() { 55' 66' 77' };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,AddCustomHeaderToResponseService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ReceivingResponseFunctionalTests.cs,ReturnSimpleCollectionServiceOperation,The following statement contains a magic number: return new List<int>() { 55' 66' 77' };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,ExecuteUriPaging,The following statement contains a magic number: buildingRequestCallCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,ExecuteUriPagingAsync,The following statement contains a magic number: buildingRequestCallCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,QueryAsync,The following statement contains a magic number: result.Wait(10000).Should().BeTrue();
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,LoadPropertyPaging,The following statement contains a magic number: buildingRequestCallCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,LoadPropertyPagingAsync,The following statement contains a magic number: buildingRequestCallCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,Insert,The following statement contains a magic number: Customer customer = new Customer() { ID = 3369' Name = "newly added customer" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,SetLink,The following statement contains a magic number: Customer customer2 = new Customer() { ID = 2 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddLink,The following statement contains a magic number: Order order1 = new Order() { ID = 2 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,DeleteLink,The following statement contains a magic number: Order order1 = new Order() { ID = 2 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,AddRelatedObject,The following statement contains a magic number: Order order1 = new Order() { ID = 1239 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchTopLevel,The following statement contains a magic number: ctx.AddObject("Customers"' new Customer() { Name = "Bob"' ID = 6834 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchTopLevel,The following statement contains a magic number: ctx.AddObject("Customers"' new Customer() { Name = "Sarah"' ID = 4508 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchTopLevel,The following statement contains a magic number: buildingRequestCallCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInserts,The following statement contains a magic number: ctx.AddObject("Customers"' new Customer() { Name = "NewlyAddedCustomerName"' ID = 6834 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInserts,The following statement contains a magic number: ctx.AddObject("Customers"' new Customer() { Name = "NewlyAddedCustomerName"' ID = 4508 });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInserts,The following statement contains a magic number: buildingRequestCallCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQuery,The following statement contains a magic number: result.StatusCode.Should().Be(418);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQuery,The following statement contains a magic number: buildingRequestCallCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQueryAsync,The following statement contains a magic number: result.StatusCode.Should().Be(418);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchQueryAsync,The following statement contains a magic number: buildingRequestCallCount.Should().Be(2);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInsertAndAddRelatedObject,The following statement contains a magic number: Customer customer1 = new Customer() { ID = 659 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInsertAndAddRelatedObject,The following statement contains a magic number: Order order1 = new Order() { ID = 1239 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInsertAndAddRelatedObject,The following statement contains a magic number: AddDescriptorShouldBeEntityVerifier(ctx' descriptor =>                  {                      descriptor.State.Should().Be(EntityStates.Added);                      if (this.buildingRequestCallCount == 2)                      {                          descriptor.Entity.Should().Be(customer1);                      }                      else if (this.buildingRequestCallCount == 3)                      {                          descriptor.Entity.Should().Be(order1);                      }                  });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInsertAndAddRelatedObject,The following statement contains a magic number: AddDescriptorShouldBeEntityVerifier(ctx' descriptor =>                  {                      descriptor.State.Should().Be(EntityStates.Added);                      if (this.buildingRequestCallCount == 2)                      {                          descriptor.Entity.Should().Be(customer1);                      }                      else if (this.buildingRequestCallCount == 3)                      {                          descriptor.Entity.Should().Be(order1);                      }                  });
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchInsertAndAddRelatedObject,The following statement contains a magic number: buildingRequestCallCount.Should().Be(3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,SimpleInsertRequestCallOrder,The following statement contains a magic number: Customer customer = new Customer() { ID = 3370' Name = "new customer" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The following statement contains a magic number: Customer newCustomer = new Customer() { ID = 3370' Name = "new customer" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The following statement contains a magic number: Customer existingCustomer = new Customer() { ID = 2' Name = "existing customer' new name" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The following statement contains a magic number: Order newOrder = new Order() { ID = 399' DollarAmount = 3.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BatchRequestCallOrder,The following statement contains a magic number: Order newOrder = new Order() { ID = 399' DollarAmount = 3.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The following statement contains a magic number: ctx.Timeout = (int)TimeSpan.FromMinutes(5).TotalMilliseconds;
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The following statement contains a magic number: Customer newCustomer = new Customer() { ID = 3369' Name = "newly added customer" };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The following statement contains a magic number: Order newOrder = new Order() { ID = 3990' DollarAmount = 3.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The following statement contains a magic number: Order newOrder = new Order() { ID = 3990' DollarAmount = 3.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The following statement contains a magic number: Order newOrder2 = new Order() { ID = 4990' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,BuildingRequestReceivingResponseCUDEndToEndTest,The following statement contains a magic number: Order newOrder2 = new Order() { ID = 4990' DollarAmount = 4.99 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RequireQueryParameter,The following statement contains a magic number: throw new DataServiceException(418' CustomQueryParameter + " was missing.");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RequireQueryParameter,The following statement contains a magic number: throw new DataServiceException(418' CustomQueryParameter + " is expected to always be " + SampleValue + "' but was " + value);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RequireAllHeadersAndParameters,The following statement contains a magic number: throw new DataServiceException(418' "Server received user altered request correctly.");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,RequireAllHeadersAndParametersPagingTestsOnly,The following statement contains a magic number: throw new DataServiceException(418' "Server received user altered request correctly.");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,BuildingRequestEventFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\BuildingRequestEventFunctionalTests.cs,EnsureValueIsCorrect,The following statement contains a magic number: throw new DataServiceException(418' "'" + headerName + "' is expected to always be '" + expected + "'' but was: '" + headerValue + "'");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_Filter,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(t.Property2) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'Property2) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(GeometryFactory.Point(5' 6)) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'geometry'SRID=0;POINT (5 6)') gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'null) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(geometry'SRID=0;POINT (5 6)'' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(t.Property1) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(null'Property1) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where ((GeometryPoint)null).Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(null' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_Filter,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(t.Property2) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'Property2) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(GeometryFactory.Point(5' 6)) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'geometry'SRID=0;POINT (5 6)') gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'null) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(geometry'SRID=0;POINT (5 6)'' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(t.Property1) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(null'Property1) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where ((GeometryPoint)null).Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(null' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_Filter,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(t.Property2) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'Property2) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(GeometryFactory.Point(5' 6)) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'geometry'SRID=0;POINT (5 6)') gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'null) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(geometry'SRID=0;POINT (5 6)'' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(t.Property1) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(null'Property1) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where ((GeometryPoint)null).Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(null' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_Filter,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(t.Property2) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'Property2) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(GeometryFactory.Point(5' 6)) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'geometry'SRID=0;POINT (5 6)') gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'null) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(geometry'SRID=0;POINT (5 6)'' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(t.Property1) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(null'Property1) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where ((GeometryPoint)null).Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(null' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_Filter,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(t.Property2) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'Property2) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(GeometryFactory.Point(5' 6)) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'geometry'SRID=0;POINT (5 6)') gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where t.Property1.Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(Property1'null) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(geometry'SRID=0;POINT (5 6)'' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(t.Property1) > 0                                      select t'                                ExpectedUri = "?$filter=geo.distance(null'Property1) gt 0.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          // the client will try to evaluate distance between constants locally and fail because no operations are registered                          //new LinqTestCase()                          //{                          //    Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                          //            where ((GeometryPoint)null).Distance(null) > 0                          //            select t'                                    //    ExpectedUri = "?$filter=geo.distance(null' null) gt 0.0"'                          //    ExpectedResults = allEntities'                          //    ServerPayload = GetSampleFeedPayload(allEntities' null)'                          //    ExpectKeyInUri = false'                          //}'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_FilterWithDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=true"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where GeometryFactory.Point(5' 6).Build().Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build()) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      where ((GeometryPoint)null).Distance(null) > 0                                      select t'                                ExpectedUri = "?$filter=false"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,SupportedLinqQueries_GeometryPoint_OrderByDistanceFromLiteralToLiteral,The following statement contains a magic number: Func<DataServiceContext' LinqTestCase[]> getTests =                  context =>                  {                      var allEntities = new GeometricEntity<GeometryPoint>[]                      {                          new GeometricEntity<GeometryPoint>()                          {                              ID = 1'                              Property1 = GeometryFactory.Point(1' 2)'                              Property2 = GeometryFactory.Point(3' 4)'                          }'                      };                        return new LinqTestCase[]                      {                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(GeometryFactory.Point(0' 0).Build())                                      select t'                                ExpectedUri = "?$orderby=1.0"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby GeometryFactory.Point(5' 6).Build().Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(GeometryFactory.Point(5' 6).Build())                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                          new LinqTestCase()                          {                              Query = from t in context.CreateQuery<GeometricEntity<GeometryPoint>>("TripLegs")                                      orderby ((GeometryPoint)null).Distance(null)                                      select t'                                ExpectedUri = "?$orderby=null"'                              ExpectedResults = allEntities'                              ServerPayload = GetSampleFeedPayload(allEntities' null)'                              ExpectKeyInUri = false'                          }'                      };                  };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,OpenSpatialProperties,The following statement contains a magic number: results[0].GeographyProperty1 = GeographyFactory.Point(22' 45);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,OpenSpatialProperties,The following statement contains a magic number: results[0].GeographyProperty1 = GeographyFactory.Point(22' 45);
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,OpenSpatialProperties,The following statement contains a magic number: Assert.AreEqual(45' point.Longitude' "Make sure longitude value is updated");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,OpenSpatialProperties,The following statement contains a magic number: Assert.AreEqual(22' point.Latitude' "Make sure latitude value is updated");
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyPoint,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Latitude'                                  Long = t.GeographyProperty2.Longitude'                                  Z = t.GeographyProperty2.Z'                                  M = t.GeographyProperty2.M                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new ProjectedComplexType() { GeoProp = tl.GeographyProperty1' Lat = tl.GeographyProperty2.Latitude' Long = tl.GeographyProperty2.Longitude' Z = tl.GeographyProperty2.Z' M = tl.GeographyProperty2.M })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(45.8' -127.0)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(45.8' -127.0) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoPoint = GeographyFactory.Point(t.GeographyProperty1.CoordinateSystem' t.GeographyProperty1.Latitude' t.GeographyProperty2.Longitude' null' null)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoPoint = GeographyFactory.Point(tl.GeographyProperty1.CoordinateSystem' tl.GeographyProperty1.Latitude' tl.GeographyProperty2.Longitude' null' null) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1)) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)') gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1) > 1.5                              select t'                        ExpectedUri = "?$filter=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1) gt 1.5"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              where t.GeographyProperty1.Distance(t.GeographyProperty2) <= 1.8                              select t'                        ExpectedUri = "?$filter=geo.distance(GeographyProperty1'GeographyProperty2) le 1.8"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(GeographyFactory.Point(45.99' -127.1))                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'geography'SRID=4326;POINT (-127.1 45.99)')"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby GeographyFactory.Point(45.99' -127.1).Build().Distance(t.GeographyProperty1)                              select t'                        ExpectedUri = "?$orderby=geo.distance(geography'SRID=4326;POINT (-127.1 45.99)''GeographyProperty1)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'                  new LinqTestCase()                  {                      Query = from t in allTripLegsQuery                              orderby t.GeographyProperty1.Distance(t.GeographyProperty2)                              select t'                        ExpectedUri = "?$orderby=geo.distance(GeographyProperty1'GeographyProperty2)"'                      ExpectedResults = allTripLegsExpected'                      ServerPayload = GetSampleFeedPayload(allTripLegsExpected' null)'                      ExpectKeyInUri = false'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.DataWebClientCSharp,SpatialLinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\SpatialLinqTests.cs,GetSupportedLinqQueries_GeographyLineString,The following statement contains a magic number: return new LinqTestCase[]              {                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Points = t.GeographyProperty1.Points'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Points = tl.GeographyProperty1.Points })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  Count = t.GeographyProperty1.Points.Count'                              }'                        ExpectedUri = "?$select=GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { Count = tl.GeographyProperty1.Points.Count })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new ProjectedComplexType()                              {                                  GeoProp = t.GeographyProperty1'                                  Lat = t.GeographyProperty2.Points[0].Latitude'                                  Long = t.GeographyProperty2.Points[0].Longitude'                                  M = t.GeographyProperty1.Points[1].M'                                  Z = t.GeographyProperty1.Points[1].Z'                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty2'GeographyProperty2'GeographyProperty1'GeographyProperty1"'                      ExpectedResults = tripLeg1Expected.Select(tl =>                          new ProjectedComplexType()                              {                                  GeoProp = tl.GeographyProperty1'                                  Lat = tl.GeographyProperty2.Points[0].Latitude'                                  Long = tl.GeographyProperty2.Points[0].Longitude'                                  M = tl.GeographyProperty1.Points[1].M'                                  Z = tl.GeographyProperty1.Points[1].Z'                              })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6)                              }'                        ExpectedUri = "?"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(49.98' -140.4).LineTo(77.0' -177.6) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' null)'                  }'                  new LinqTestCase()                  {                      Query = from t in tripLeg1Query                              select new                              {                                  GeoLineString = GeographyFactory.LineString(t.GeographyProperty1.Points[0].Latitude' t.GeographyProperty1.Points[0].Longitude).LineTo(t.GeographyProperty2.Points[1].Latitude' t.GeographyProperty2.Points[1].Longitude)                              }'                        ExpectedUri = "?$select=GeographyProperty1'GeographyProperty1'GeographyProperty2'GeographyProperty2"'                      ExpectedResults = tripLeg1Expected.Select(tl => new { GeoLineString = GeographyFactory.LineString(tl.GeographyProperty1.Points[0].Latitude' tl.GeographyProperty1.Points[0].Longitude).LineTo(tl.GeographyProperty2.Points[1].Latitude' tl.GeographyProperty2.Points[1].Longitude) })'                      ServerPayload = GetSampleEntityPayload(tripLeg1Expected.Single()' new[] { "GeographyProperty1"' "GeographyProperty2" })'                  }'              };
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>().OfType<Employee>() select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).SelectMany(e => (e as Employee).Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => (e as Employee).Manager).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).SelectMany(e => (e as Employee).Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => (e as Employee).Manager).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).SelectMany(e => (e as Employee).Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => (e as Employee).Manager).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => e).OfType<Employee>().SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).Select(e => e.Manager).SelectMany(m => m.DirectReports)                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => e).OfType<Employee>().SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).Select(e => e.Manager).SelectMany(m => m.DirectReports)                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => e).OfType<Employee>().SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).Select(e => e.Manager).SelectMany(m => m.DirectReports)                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(e => e.ID == 2).Select(e => e).OfType<Employee>().SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports)'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).Select(e => e.Manager).SelectMany(m => m.DirectReports)                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 2).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(2)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).OfType<PeopleManager>().Where(e => e.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).OfType<PeopleManager>().Where(e => e.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2).SelectMany(e => e.Manager.DirectReports).OfType<PeopleManager>().Where(e => e.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).Where(e => e.ID == 2).SelectMany(e => (e as PeopleManager).DirectReports)'                  }'                  c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports(2)/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (p as Employee).Manager.DirectReports).OfType<PeopleManager>().Where(m => m.ID == 2).SelectMany(m => m.DirectReports)'                  }'                  c => c.BaseUri + "People(5)/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (((p.BestFriend as Employee).Manager as PeopleManager).BestFriend as Employee).Manager.DirectReports)'                  }'                  c => c.BaseUri + "People(5)/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (((p.BestFriend as Employee).Manager as PeopleManager).BestFriend as Employee).Manager.DirectReports)'                  }'                  c => c.BaseUri + "People(5)/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 5).SelectMany(p => (((p.BestFriend as Employee).Manager as PeopleManager).BestFriend as Employee).Manager.DirectReports).OfType<PeopleManager>()'                  }'                  c => c.BaseUri + "People(5)/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/BestFriend/AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/DirectReports/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People")                           where p.ID == 1                           from pp in p.Aquaintances.OfType<PeopleManager>()                           select pp'                  }'                  c => c.BaseUri + "People(1)/Aquaintances/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People")                           where p.ID == 1                           from pp in p.Aquaintances.OfType<Employee>()                           select pp'                  }'                  c => c.BaseUri + "People(1)/Aquaintances/AstoriaUnitTests.Tests.DerivedProperty.Employee"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People")                           where p.ID == 1                           from pp in p.Aquaintances.OfType<PeopleManager>().Cast<Employee>()                           select pp'                  }'                  c => c.BaseUri + "People(1)/Aquaintances/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetTypeFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People")                           where p.ID == 1                           from pp in p.Aquaintances.OfType<PeopleManager>().Select(ppp => ppp)                              .Cast<Employee>().Select(ppp => ppp)                              .OfType<Employee>().Select(ppp => ppp)                              .Cast<Person>().Select(ppp => ppp)                              .OfType<Person>().Select(ppp => ppp)                           select pp'                  }'                  c => c.BaseUri + "People(1)/Aquaintances/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (p as Employee).Manager.ID select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (p as Employee).Manager.ID' (p as Employee).Manager.Name select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=Manager/ID'Manager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") orderby (p as Employee).Manager.ID select p'                  }'                  c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") orderby (p as Employee).Manager.ID' (p as Employee).Manager.Name select p'                  }'                  c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (p as PeopleManager).Manager.ID select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                              {                                  c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby (p as PeopleManager).Manager.ID' (p as PeopleManager).Manager.Name select p'                              }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") orderby ((p as Employee).Manager as PeopleManager).Manager.ID select p'                  }'                  c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") orderby ((p as Employee).Manager as PeopleManager).Manager.ID' ((p as Employee).Manager as PeopleManager).Manager.Name select p'                  }'                  c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/Manager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") orderby ((p as PeopleManager).Manager as Employee).Manager.ID select p'                  }'                  c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") orderby ((p as PeopleManager).Manager as Employee).Manager.ID' ((p as PeopleManager).Manager as Employee).Manager.Name select p'                  }'                  c => c.BaseUri + "People?$orderby=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Manager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Manager/Manager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby ((p as Employee).Manager as PeopleManager).Manager.ID select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=Manager/Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetOrderByTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() orderby ((p as Employee).Manager as PeopleManager).Manager.ID' ((p as Employee).Manager as PeopleManager).Manager.Name select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$orderby=Manager/Manager/ID'Manager/Manager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Employee).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Person).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as PeopleManager as Employee as Person).ID == 2 select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Employee).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Person).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as PeopleManager as Employee as Person).ID == 2 select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Employee).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Person).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as PeopleManager as Employee as Person).ID == 2 select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager(2)"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() where (p as PeopleManager).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() where (p as Employee as Person as PeopleManager).ID == 2 select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$filter=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID eq 2"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() where (p as PeopleManager).ID == 2 select p'                      c => from p in c.CreateQuery<Person>("People").OfType<Employee>() where (p as Employee as Person as PeopleManager).ID == 2 select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$filter=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID eq 2"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") where (p as Employee).Manager.ID > 0 select p'                      c => from p in c.CreateQuery<Person>("People") where (p as Employee as Person as Employee).Manager.ID > 0 select p                  }'                  c => c.BaseUri + "People?$filter=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/ID gt 0"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People") where (p as PeopleManager).ID > 0 && (p as Employee).Name != "Nil the Nameless" orderby (p as Employee).Manager.ID select p                  }'                  c => c.BaseUri + "People?$filter=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID gt 0 and AstoriaUnitTests.Tests.DerivedProperty.Employee/Name ne 'Nil the Nameless'&$orderby=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetFilterTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as PeopleManager).ID > 0 && (p as PeopleManager).Name != "Nil the Nameless" orderby (p as PeopleManager).Manager.ID select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Employee).ID > 0 && (p as Employee).Name != "Nil the Nameless" orderby (p as Employee).Manager.ID select p'                      c => from p in c.CreateQuery<Person>("People").OfType<PeopleManager>() where (p as Person).ID > 0 && (p as Person).Name != "Nil the Nameless" orderby (p as Employee).Manager.ID select p'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.PeopleManager?$filter=ID gt 0 and Name ne 'Nil the Nameless'&$orderby=Manager/ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager)'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(5' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager)'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(5' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).OfType<Employee>()'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(9' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).OfType<Employee>()'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(9' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand(p => (p as Employee).Manager)'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(9' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand(p => (p as Employee).Manager)'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(9' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend").Expand(p => (p as Employee).Manager)'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))'BestFriend'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(13' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend").Expand(p => (p as Employee).Manager)'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))'BestFriend'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(13' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => ((DataServiceQuery<PeopleManager>)((DataServiceQuery<Employee>)c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2)).Expand(p => p.Manager).Expand("BestFriend").Select(e => e.Manager)).Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend")'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager?$expand=Manager'BestFriend'Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => ((DataServiceQuery<PeopleManager>)((DataServiceQuery<Employee>)c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2)).Expand(p => p.Manager).Expand("BestFriend").Select(e => e.Manager)).Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend")'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager?$expand=Manager'BestFriend'Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetExpandTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => ((DataServiceQuery<PeopleManager>)((DataServiceQuery<Employee>)c.CreateQuery<Person>("People").OfType<Employee>().Where(e => e.ID == 2)).Expand(p => p.Manager).Expand("BestFriend").Select(e => e.Manager)).Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend")'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee(2)/Manager?$expand=Manager'BestFriend'Manager($expand=BestFriend($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports))"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                      VerifyNonProjectedLinkInfoCount(c);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new Employee { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(4' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new Employee { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(4' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new Employee { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(4' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new Employee { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(4' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new PeopleManager { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new PeopleManager { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new PeopleManager { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new PeopleManager { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(2' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeEntity { ID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeEntity { ID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=Manager($select=ID)'Manager($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(5' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeEntity { ID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeEntity { ID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeEntity { ID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=Manager($select=ID)'Manager($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(5' c.Entities.Count);                      Assert.AreEqual(5' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Manager = (e as Employee).Manager == null ? null : new MyEmployeeEntity { ID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new MyEmployeeEntity { ID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(5' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Manager = (e as Employee).Manager == null ? null : new MyEmployeeEntity { ID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new MyEmployeeEntity { ID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(5' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = cw.Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(4' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = cw.Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(4' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(4' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(4' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeEntity { ID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeEntity { ID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(8' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeEntity { ID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeEntity { ID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeEntity { ID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(8' c.Links.Count);                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                  }'                  c => c.BaseUri + "People?$select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(((MyEmployeeEntity)p.Entity).Name);                              Assert.IsTrue(((MyEmployeeEntity)p.Entity).ID > 0);                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(((MyEmployeeEntity)p.Entity).Name);                              Assert.AreEqual(0' ((MyEmployeeEntity)p.Entity).ID);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(p => new Employee { ID = p.ID' Office = (p as PeopleManager).Office})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(((Employee)p.Entity).Office.Building);                              Assert.IsFalse(((Employee)p.Entity).Office.OfficeNumber == 0);                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(((Employee)p.Entity).Office);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Office = (e as PeopleManager).Office})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(((MyEmployeeEntity)p.Entity).Office.Building);                              Assert.IsFalse(((MyEmployeeEntity)p.Entity).Office.OfficeNumber == 0);                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(((MyEmployeeEntity)p.Entity).Office);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Skills = (e as PeopleManager).Skills})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Skills"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(((MyEmployeeEntity)p.Entity).Skills);                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(((MyEmployeeEntity)p.Entity).Skills);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new Employee { ID = e.ID' Vacations = (e as PeopleManager).Vacations})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(((Employee)p.Entity).Vacations);                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(((Employee)p.Entity).Vacations);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new Employee { ID = e.ID' Photo = (e as PeopleManager).Photo})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Photo = (e as PeopleManager).Photo})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Photo"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          DataServiceStreamLink photo;                          if (p.Entity.GetType() == typeof(Employee))                          {                              photo = ((Employee)p.Entity).Photo;                          }                          else                          {                              photo = ((MyEmployeeEntity)p.Entity).Photo;                          }                            if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(photo);                              t.TestUtil.AssertContains(photo.EditLink.OriginalString' p.ServerTypeName);                              if (photo.SelfLink != null)                              {                                  t.TestUtil.AssertContains(photo.SelfLink.OriginalString' p.ServerTypeName);                              }                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(photo);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeEntity { ID = e.ID' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(6' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in c.Entities)                      {                          if (p.ServerTypeName == typeof(PeopleManager).FullName)                          {                              Assert.IsNotNull(((MyEmployeeEntity)p.Entity).Vacations);                          }                          else if (p.ServerTypeName != typeof(PeopleManager).FullName)                          {                              Assert.IsNull(((MyEmployeeEntity)p.Entity).Vacations);                          }                          else                          {                              Assert.Fail("Unexpected type: " + p.ServerTypeName);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      PeopleManager shyam = (PeopleManager)c.Entities.Single().Entity;                      Assert.AreEqual("Shyam"' shyam.Name);                      Assert.AreEqual(3' o.Count);                      Assert.AreEqual(2' o.Where(p => p.GetType().GetProperty("Manager").GetValue(p' null) == null ? false : p.GetType().GetProperty("Manager").GetValue(p' null) == shyam).Count());                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      PeopleManager shyam = (PeopleManager)c.Entities.Single().Entity;                      Assert.AreEqual("Shyam"' shyam.Name);                      Assert.AreEqual(3' o.Count);                      Assert.AreEqual(2' o.Where(p => p.GetType().GetProperty("Manager").GetValue(p' null) == null ? false : p.GetType().GetProperty("Manager").GetValue(p' null) == shyam).Count());                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      PeopleManager shyam = (PeopleManager)c.Entities.Single().Entity;                      Assert.AreEqual("Shyam"' shyam.Name);                      Assert.AreEqual(3' o.Count);                      Assert.AreEqual(2' o.Where(p => p.GetType().GetProperty("Manager").GetValue(p' null) == null ? false : p.GetType().GetProperty("Manager").GetValue(p' null) == shyam).Count());                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' Manager = (p as Employee).Manager})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(1' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      PeopleManager shyam = (PeopleManager)c.Entities.Single().Entity;                      Assert.AreEqual("Shyam"' shyam.Name);                      Assert.AreEqual(3' o.Count);                      Assert.AreEqual(2' o.Where(p => p.GetType().GetProperty("Manager").GetValue(p' null) == null ? false : p.GetType().GetProperty("Manager").GetValue(p' null) == shyam).Count());                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Where(p => p.ID == 1 || p.ID == 2 || p.ID == 6).Select(p => new { ID = p.ID' DirectReports = (p as PeopleManager).DirectReports})'                  }'                  c => c.BaseUri + "People?$filter=ID eq 1 or ID eq 2 or ID eq 6&$expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(2' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Employee pratik = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Pratik").Entity;                      Employee jimmy = (Employee)c.Entities.Single(e => ((Employee)e.Entity).Name == "Jimmy").Entity;                      Assert.AreEqual(3' o.Count);                      var o1 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 1);                      var o2 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 2);                      var o6 = o.Single(p => (int)p.GetType().GetProperty("ID").GetValue(p' null) == 6);                      Assert.IsNull(o1.GetType().GetProperty("DirectReports").GetValue(o1' null));                      Assert.AreEqual(2' ((ICollection<Employee>)o2.GetType().GetProperty("DirectReports").GetValue(o2' null)).Count);                      Assert.IsNull(o6.GetType().GetProperty("DirectReports").GetValue(o6' null));                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { ID = e.ID' Manager = e.Manager == null ? null : new { ID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { ID = e.ID' Manager = e.Manager == null ? null : new { ID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { MyID = e.ID' Manager = new { MyID = (e.Manager as Person).ID' Name = (e.Manager as Employee).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new { MyID = e.ID' Manager = new { MyID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeNonEntity { MyID = e.Manager.ID' Name = (e.Manager as Employee).Name }})'                      c => c.CreateQuery<Person>("People").OfType<Employee>().Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = e.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e.Manager as Person as PeopleManager as Employee).ID' Name = (e.Manager as Employee as Person).Name }})'                  }'                  c => c.BaseUri + "People/AstoriaUnitTests.Tests.DerivedProperty.Employee?$expand=Manager($select=ID)'Manager($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(5' o.Count);                      foreach (var p in o)                      {                          Assert.IsNotNull(p.GetType().GetProperty("Manager").GetValue(p' null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Manager = (e as Employee).Manager == null ? null : new { MyID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})'                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new { MyID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = (e as Employee).Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.ID' Name = (e as Employee).Manager.Name }})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Manager = (e as Employee as Person as Employee).Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee as Person as Employee).Manager.ID' Name = (e as Employee as Person as Employee).Manager.Name }})'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($select=Name)&$select=ID"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (var p in o)                      {                          int myId = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          if (myId > 1)                          {                              var manager = p.GetType().GetProperty("Manager").GetValue(p' null);                              var managerName = manager.GetType().GetProperty("Name").GetValue(manager' null);                              Assert.IsTrue(manager != null && myId > 1 && managerName != null);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = cw.Name }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = cw.Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=Name)&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                  Assert.IsTrue(cId > 1);                                  string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  Assert.IsNotNull(cName);                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                  string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                  string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                  string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeNonEntity { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeNonEntity { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                    string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                                    IEnumerable<object> drs = (IEnumerable<object>)c.GetType().GetProperty("DirectReports").GetValue(c' null);                                  if (cId == 2 || cId == 5)                                  {                                      foreach (object dr in drs)                                      {                                          int drId = (int)dr.GetType().GetProperty("MyID").GetValue(dr' null);                                          Assert.IsTrue(drId > 1);                                          string drName = (string)dr.GetType().GetProperty("Name").GetValue(dr' null);                                          Assert.IsNotNull(drName);                                          object drManager = dr.GetType().GetProperty("Manager").GetValue(dr' null);                                          Assert.IsNotNull(drManager);                                          int drManagerId = (int)drManager.GetType().GetProperty("MyID").GetValue(drManager' null);                                          Assert.AreEqual(cId' drManagerId);                                          string drManagerName = (string)drManager.GetType().GetProperty("Name").GetValue(drManager' null);                                          Assert.AreEqual(cName' drManagerName);                                      }                                  }                                  else                                  {                                      Assert.IsNull(drs);                                  }                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeNonEntity { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeNonEntity { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                    string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                                    IEnumerable<object> drs = (IEnumerable<object>)c.GetType().GetProperty("DirectReports").GetValue(c' null);                                  if (cId == 2 || cId == 5)                                  {                                      foreach (object dr in drs)                                      {                                          int drId = (int)dr.GetType().GetProperty("MyID").GetValue(dr' null);                                          Assert.IsTrue(drId > 1);                                          string drName = (string)dr.GetType().GetProperty("Name").GetValue(dr' null);                                          Assert.IsNotNull(drName);                                          object drManager = dr.GetType().GetProperty("Manager").GetValue(dr' null);                                          Assert.IsNotNull(drManager);                                          int drManagerId = (int)drManager.GetType().GetProperty("MyID").GetValue(drManager' null);                                          Assert.AreEqual(cId' drManagerId);                                          string drManagerName = (string)drManager.GetType().GetProperty("Name").GetValue(drManager' null);                                          Assert.AreEqual(cName' drManagerName);                                      }                                  }                                  else                                  {                                      Assert.IsNull(drs);                                  }                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeNonEntity { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeNonEntity { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                    string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                                    IEnumerable<object> drs = (IEnumerable<object>)c.GetType().GetProperty("DirectReports").GetValue(c' null);                                  if (cId == 2 || cId == 5)                                  {                                      foreach (object dr in drs)                                      {                                          int drId = (int)dr.GetType().GetProperty("MyID").GetValue(dr' null);                                          Assert.IsTrue(drId > 1);                                          string drName = (string)dr.GetType().GetProperty("Name").GetValue(dr' null);                                          Assert.IsNotNull(drName);                                          object drManager = dr.GetType().GetProperty("Manager").GetValue(dr' null);                                          Assert.IsNotNull(drManager);                                          int drManagerId = (int)drManager.GetType().GetProperty("MyID").GetValue(drManager' null);                                          Assert.AreEqual(cId' drManagerId);                                          string drManagerName = (string)drManager.GetType().GetProperty("Name").GetValue(drManager' null);                                          Assert.AreEqual(cName' drManagerName);                                      }                                  }                                  else                                  {                                      Assert.IsNull(drs);                                  }                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeNonEntity { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeNonEntity { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                    string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                                    IEnumerable<object> drs = (IEnumerable<object>)c.GetType().GetProperty("DirectReports").GetValue(c' null);                                  if (cId == 2 || cId == 5)                                  {                                      foreach (object dr in drs)                                      {                                          int drId = (int)dr.GetType().GetProperty("MyID").GetValue(dr' null);                                          Assert.IsTrue(drId > 1);                                          string drName = (string)dr.GetType().GetProperty("Name").GetValue(dr' null);                                          Assert.IsNotNull(drName);                                          object drManager = dr.GetType().GetProperty("Manager").GetValue(dr' null);                                          Assert.IsNotNull(drManager);                                          int drManagerId = (int)drManager.GetType().GetProperty("MyID").GetValue(drManager' null);                                          Assert.AreEqual(cId' drManagerId);                                          string drManagerName = (string)drManager.GetType().GetProperty("Name").GetValue(drManager' null);                                          Assert.AreEqual(cName' drManagerName);                                      }                                  }                                  else                                  {                                      Assert.IsNull(drs);                                  }                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Colleagues = (e as Employee).Colleagues == null ? null : (e as Employee).Colleagues.Select(cw => new MyEmployeeNonEntity { MyID = cw.ID' Name = (cw as PeopleManager).Name' DirectReports = (cw as PeopleManager).DirectReports == null ? null : (cw as PeopleManager).DirectReports.Select(dr => new MyEmployeeNonEntity { MyID = dr.ID' Name = (dr as Employee).Name' Manager = new MyEmployeeNonEntity { MyID = (dr as Employee).Manager.ID' Name = (dr as Employee).Manager.Name} }).ToList() }).ToList() })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=ID)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name)'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=ID)))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Colleagues($expand=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/DirectReports($expand=Manager($select=Name)))&$select=ID"'                  (ctx' q' o) =>                  {                      Assert.AreEqual(0' ctx.Entities.Count);                      Assert.AreEqual(0' ctx.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          if (id > 1)                          {                              foreach (object c in colleagues)                              {                                  int cId = (int)c.GetType().GetProperty("MyID").GetValue(c' null);                                    string cName = (string)c.GetType().GetProperty("Name").GetValue(c' null);                                  if (cId == 2) Assert.AreEqual("Andy"' cName);                                  else if (cId == 5) Assert.AreEqual("Shyam"' cName);                                  else Assert.IsNull(cName);                                    IEnumerable<object> drs = (IEnumerable<object>)c.GetType().GetProperty("DirectReports").GetValue(c' null);                                  if (cId == 2 || cId == 5)                                  {                                      foreach (object dr in drs)                                      {                                          int drId = (int)dr.GetType().GetProperty("MyID").GetValue(dr' null);                                          Assert.IsTrue(drId > 1);                                          string drName = (string)dr.GetType().GetProperty("Name").GetValue(dr' null);                                          Assert.IsNotNull(drName);                                          object drManager = dr.GetType().GetProperty("Manager").GetValue(dr' null);                                          Assert.IsNotNull(drManager);                                          int drManagerId = (int)drManager.GetType().GetProperty("MyID").GetValue(drManager' null);                                          Assert.AreEqual(cId' drManagerId);                                          string drManagerName = (string)drManager.GetType().GetProperty("Name").GetValue(drManager' null);                                          Assert.AreEqual(cName' drManagerName);                                      }                                  }                                  else                                  {                                      Assert.IsNull(drs);                                  }                              }                          }                          else                          {                              Assert.IsNull(colleagues);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                  }'                  c => c.BaseUri + "People?$select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string name = (string)p.GetType().GetProperty("Name").GetValue(p' null);                          Assert.IsTrue((id == 0 && name == null) || (id == 2 && name == "Andy") || (id == 5 && name == "Shyam"));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                  }'                  c => c.BaseUri + "People?$select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string name = (string)p.GetType().GetProperty("Name").GetValue(p' null);                          Assert.IsTrue((id == 0 && name == null) || (id == 2 && name == "Andy") || (id == 5 && name == "Shyam"));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = (e as PeopleManager).ID' Name = (e as PeopleManager).Name})'                  }'                  c => c.BaseUri + "People?$select=AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Name"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string name = (string)p.GetType().GetProperty("Name").GetValue(p' null);                          Assert.IsTrue((id == 0 && name == null) || (id == 2 && name == "Andy") || (id == 5 && name == "Shyam"));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(p => new { MyID = p.ID' Office = (p as PeopleManager).Office})'                      c => c.CreateQuery<Person>("People").Select(p => new MyEmployeeNonEntity { MyID = p.ID' Office = (p as PeopleManager).Office})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          Office office = (Office)p.GetType().GetProperty("Office").GetValue(p' null);                          Assert.IsTrue((id == 2 && office != null) || (id == 5 && office != null) || (id > 0 && office == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(p => new { MyID = p.ID' Office = (p as PeopleManager).Office})'                      c => c.CreateQuery<Person>("People").Select(p => new MyEmployeeNonEntity { MyID = p.ID' Office = (p as PeopleManager).Office})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          Office office = (Office)p.GetType().GetProperty("Office").GetValue(p' null);                          Assert.IsTrue((id == 2 && office != null) || (id == 5 && office != null) || (id > 0 && office == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(p => new { MyID = p.ID' Office = (p as PeopleManager).Office})'                      c => c.CreateQuery<Person>("People").Select(p => new MyEmployeeNonEntity { MyID = p.ID' Office = (p as PeopleManager).Office})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          Office office = (Office)p.GetType().GetProperty("Office").GetValue(p' null);                          Assert.IsTrue((id == 2 && office != null) || (id == 5 && office != null) || (id > 0 && office == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Office = (e as PeopleManager).Office == null ? null : new { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyOffice = (e as PeopleManager).Office == null ? null : new MyOfficeComplexType { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          object office = (object)p.GetType().GetProperty(p is MyEmployeeNonEntity ? "MyOffice" : "Office").GetValue(p' null);                          Assert.IsTrue((id == 2 && office != null) || (id == 5 && office != null) || (id > 0 && office == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Office = (e as PeopleManager).Office == null ? null : new { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyOffice = (e as PeopleManager).Office == null ? null : new MyOfficeComplexType { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          object office = (object)p.GetType().GetProperty(p is MyEmployeeNonEntity ? "MyOffice" : "Office").GetValue(p' null);                          Assert.IsTrue((id == 2 && office != null) || (id == 5 && office != null) || (id > 0 && office == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Office = (e as PeopleManager).Office == null ? null : new { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyOffice = (e as PeopleManager).Office == null ? null : new MyOfficeComplexType { BuildingName = (e as PeopleManager).Office.Building' OfficeNumber = (e as PeopleManager).Office.OfficeNumber}})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          object office = (object)p.GetType().GetProperty(p is MyEmployeeNonEntity ? "MyOffice" : "Office").GetValue(p' null);                          Assert.IsTrue((id == 2 && office != null) || (id == 5 && office != null) || (id > 0 && office == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new MyEmployeeNonEntity { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=Name))&$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string officeBuilding = (string)p.GetType().GetProperty("OfficeBuilding").GetValue(p' null);                          int officeNumber = (int)p.GetType().GetProperty("OfficeNumber").GetValue(p' null);                          Assert.IsTrue((id == 2 && officeBuilding != null && officeNumber > 0) || (id == 5 && officeBuilding != null && officeNumber > 0) || (id > 0 && officeBuilding == null && officeNumber == 0));                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          var skipLevelManager = p.GetType().GetProperty("SkipLevelManager").GetValue(p' null);                          if (id > 1)                          {                              Assert.AreEqual(2' colleagues.Count());                              Assert.IsNotNull(skipLevelManager);                              int skipLevelManagerID = (int)skipLevelManager.GetType().GetProperty("MyID").GetValue(skipLevelManager' null);                              Assert.AreEqual(5' skipLevelManagerID);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new MyEmployeeNonEntity { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=Name))&$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string officeBuilding = (string)p.GetType().GetProperty("OfficeBuilding").GetValue(p' null);                          int officeNumber = (int)p.GetType().GetProperty("OfficeNumber").GetValue(p' null);                          Assert.IsTrue((id == 2 && officeBuilding != null && officeNumber > 0) || (id == 5 && officeBuilding != null && officeNumber > 0) || (id > 0 && officeBuilding == null && officeNumber == 0));                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          var skipLevelManager = p.GetType().GetProperty("SkipLevelManager").GetValue(p' null);                          if (id > 1)                          {                              Assert.AreEqual(2' colleagues.Count());                              Assert.IsNotNull(skipLevelManager);                              int skipLevelManagerID = (int)skipLevelManager.GetType().GetProperty("MyID").GetValue(skipLevelManager' null);                              Assert.AreEqual(5' skipLevelManagerID);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new MyEmployeeNonEntity { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=Name))&$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string officeBuilding = (string)p.GetType().GetProperty("OfficeBuilding").GetValue(p' null);                          int officeNumber = (int)p.GetType().GetProperty("OfficeNumber").GetValue(p' null);                          Assert.IsTrue((id == 2 && officeBuilding != null && officeNumber > 0) || (id == 5 && officeBuilding != null && officeNumber > 0) || (id > 0 && officeBuilding == null && officeNumber == 0));                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          var skipLevelManager = p.GetType().GetProperty("SkipLevelManager").GetValue(p' null);                          if (id > 1)                          {                              Assert.AreEqual(2' colleagues.Count());                              Assert.IsNotNull(skipLevelManager);                              int skipLevelManagerID = (int)skipLevelManager.GetType().GetProperty("MyID").GetValue(skipLevelManager' null);                              Assert.AreEqual(5' skipLevelManagerID);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new MyEmployeeNonEntity { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=Name))&$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string officeBuilding = (string)p.GetType().GetProperty("OfficeBuilding").GetValue(p' null);                          int officeNumber = (int)p.GetType().GetProperty("OfficeNumber").GetValue(p' null);                          Assert.IsTrue((id == 2 && officeBuilding != null && officeNumber > 0) || (id == 5 && officeBuilding != null && officeNumber > 0) || (id > 0 && officeBuilding == null && officeNumber == 0));                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          var skipLevelManager = p.GetType().GetProperty("SkipLevelManager").GetValue(p' null);                          if (id > 1)                          {                              Assert.AreEqual(2' colleagues.Count());                              Assert.IsNotNull(skipLevelManager);                              int skipLevelManagerID = (int)skipLevelManager.GetType().GetProperty("MyID").GetValue(skipLevelManager' null);                              Assert.AreEqual(5' skipLevelManagerID);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity                      {                          MyID = e.ID'                          OfficeBuilding = (e as PeopleManager).Office == null ? null : (e as PeopleManager).Office.Building'                          OfficeNumber = (e as PeopleManager).Office == null ? 0 : (e as PeopleManager).Office.OfficeNumber'                          Colleagues = (e as Employee).Manager == null ? null : ((e as Employee).Manager.DirectReports == null ? null : (e as Employee).Manager.DirectReports.Select(co => new MyEmployeeNonEntity { MyID = co.ID' Name = co.Name }).ToList())'                          SkipLevelManager = (e as Employee).Manager == null ? null : ((e as Employee).Manager.Manager == null ? null : new MyEmployeeNonEntity { MyID = (e as Employee).Manager.Manager.ID' Name = (e as Employee).Manager.Manager.Name })'                      })'                  }'                  c => c.BaseUri + "People?$expand=AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=DirectReports($select=Name))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=ID))'AstoriaUnitTests.Tests.DerivedProperty.Employee/Manager($expand=Manager($select=Name))&$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Office"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          string officeBuilding = (string)p.GetType().GetProperty("OfficeBuilding").GetValue(p' null);                          int officeNumber = (int)p.GetType().GetProperty("OfficeNumber").GetValue(p' null);                          Assert.IsTrue((id == 2 && officeBuilding != null && officeNumber > 0) || (id == 5 && officeBuilding != null && officeNumber > 0) || (id > 0 && officeBuilding == null && officeNumber == 0));                          IEnumerable<object> colleagues = (IEnumerable<object>)p.GetType().GetProperty("Colleagues").GetValue(p' null);                          var skipLevelManager = p.GetType().GetProperty("SkipLevelManager").GetValue(p' null);                          if (id > 1)                          {                              Assert.AreEqual(2' colleagues.Count());                              Assert.IsNotNull(skipLevelManager);                              int skipLevelManagerID = (int)skipLevelManager.GetType().GetProperty("MyID").GetValue(skipLevelManager' null);                              Assert.AreEqual(5' skipLevelManagerID);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Skills = (e as PeopleManager).Skills})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Skills = (e as PeopleManager).Skills})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Skills"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          ICollection<string> skills = (ICollection<string>)p.GetType().GetProperty("Skills").GetValue(p' null);                          Assert.IsTrue((id == 2 && skills != null) || (id == 5 && skills != null) || (id > 0 && skills == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Skills = (e as PeopleManager).Skills})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Skills = (e as PeopleManager).Skills})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Skills"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          ICollection<string> skills = (ICollection<string>)p.GetType().GetProperty("Skills").GetValue(p' null);                          Assert.IsTrue((id == 2 && skills != null) || (id == 5 && skills != null) || (id > 0 && skills == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Skills = (e as PeopleManager).Skills})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Skills = (e as PeopleManager).Skills})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Skills"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          ICollection<string> skills = (ICollection<string>)p.GetType().GetProperty("Skills").GetValue(p' null);                          Assert.IsTrue((id == 2 && skills != null) || (id == 5 && skills != null) || (id > 0 && skills == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          ICollection<Vacation> vacations = (ICollection<Vacation>)p.GetType().GetProperty("Vacations").GetValue(p' null);                          Assert.IsTrue((id == 2 && vacations != null) || (id == 5 && vacations != null) || (id > 0 && vacations == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          ICollection<Vacation> vacations = (ICollection<Vacation>)p.GetType().GetProperty("Vacations").GetValue(p' null);                          Assert.IsTrue((id == 2 && vacations != null) || (id == 5 && vacations != null) || (id > 0 && vacations == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      Assert.AreEqual(6' o.Count);                      foreach (object p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          ICollection<Vacation> vacations = (ICollection<Vacation>)p.GetType().GetProperty("Vacations").GetValue(p' null);                          Assert.IsTrue((id == 2 && vacations != null) || (id == 5 && vacations != null) || (id > 0 && vacations == null));                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' MyVacations = default(Vacation)' Vacations = (e as PeopleManager).Vacations })'                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' MyVacations = default(Vacation)' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new Vacation { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyVacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new MyVacationComplexType { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          var vacationsProp = p.GetType().GetProperty("Vacations");                          var myVacationsProp = p.GetType().GetProperty("MyVacations");                          object vacations = vacationsProp.GetValue(p' null) ?? myVacationsProp.GetValue(p' null);                          if (id == 2 || id == 5)                          {                              Assert.IsNotNull(vacations' "ID = " + id.ToString());                          }                          else                          {                              Assert.IsNull(vacations);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' MyVacations = default(Vacation)' Vacations = (e as PeopleManager).Vacations })'                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' MyVacations = default(Vacation)' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations })'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Vacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new Vacation { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' MyVacations = (e as PeopleManager).Vacations == null ? null : (e as PeopleManager).Vacations.Select(v => new MyVacationComplexType { Description = v.Description' StartDate = v.StartDate' EndDate = v.EndDate }).ToList()})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Vacations"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          var vacationsProp = p.GetType().GetProperty("Vacations");                          var myVacationsProp = p.GetType().GetProperty("MyVacations");                          object vacations = vacationsProp.GetValue(p' null) ?? myVacationsProp.GetValue(p' null);                          if (id == 2 || id == 5)                          {                              Assert.IsNotNull(vacations' "ID = " + id.ToString());                          }                          else                          {                              Assert.IsNull(vacations);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Photo = (e as PeopleManager).Photo})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Photo = (e as PeopleManager).Photo})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Photo"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          DataServiceStreamLink photo = (DataServiceStreamLink)p.GetType().GetProperty("Photo").GetValue(p' null);                          Assert.IsTrue(id > 0);                          if (id == 2 || id == 5)                          {                              Assert.IsNotNull(photo);                              t.TestUtil.AssertContains(photo.EditLink.OriginalString' typeof(PeopleManager).FullName);                              if (photo.SelfLink != null)                              {                                  t.TestUtil.AssertContains(photo.SelfLink.OriginalString' typeof(PeopleManager).FullName);                              }                          }                          else                          {                              Assert.IsNull(photo);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNonEntityProjectionTests,The following statement contains a magic number: yield return new Tuple<Func<DataServiceContext' IQueryable>[]' Func<DataServiceContext' string>' Action<DataServiceContext' IQueryable' List<object>>>(                  new Func<DataServiceContext' IQueryable>[]                  {                      c => c.CreateQuery<Person>("People").Select(e => new { MyID = e.ID' Photo = (e as PeopleManager).Photo})'                      c => c.CreateQuery<Person>("People").Select(e => new MyEmployeeNonEntity { MyID = e.ID' Photo = (e as PeopleManager).Photo})'                  }'                  c => c.BaseUri + "People?$select=ID'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager/Photo"'                  (c' q' o) =>                  {                      Assert.AreEqual(0' c.Entities.Count);                      Assert.AreEqual(0' c.Links.Count);                      foreach (var p in o)                      {                          int id = (int)p.GetType().GetProperty("MyID").GetValue(p' null);                          DataServiceStreamLink photo = (DataServiceStreamLink)p.GetType().GetProperty("Photo").GetValue(p' null);                          Assert.IsTrue(id > 0);                          if (id == 2 || id == 5)                          {                              Assert.IsNotNull(photo);                              t.TestUtil.AssertContains(photo.EditLink.OriginalString' typeof(PeopleManager).FullName);                              if (photo.SelfLink != null)                              {                                  t.TestUtil.AssertContains(photo.SelfLink.OriginalString' typeof(PeopleManager).FullName);                              }                          }                          else                          {                              Assert.IsNull(photo);                          }                      }                  }              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNegativeQueryTests,The following statement contains a magic number: yield return new Tuple<IQueryable[]' string' Type>(                  new IQueryable[]                  {                      ((DataServiceQuery<PeopleManager>)((DataServiceQuery<Employee>)people.Expand(p => (p as Employee).Manager).OfType<Employee>().Where(e => e.ID == 2)).Expand("BestFriend").Select(e => e.Manager)).Expand(p => ((p as Employee).Manager.BestFriend as PeopleManager).DirectReports).Expand("BestFriend")'                  }'                  "<?xml version=\"1.0\" encoding=\"utf-8\"?><m:error xmlns:m=\"http://docs.oasis-open.org/odata/ns/metadata\"><m:code /><m:message>The type name 'AstoriaUnitTests.Tests.DerivedProperty.Employee' specified in the URI is not a valid type. Please make sure that the type name is valid and that it derives from the type 'AstoriaUnitTests.Tests.DerivedProperty.PeopleManager'.</m:message></m:error>"'                  typeof(DataServiceQueryException)              );
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,VerifyNonProjectedLinkInfoCount,The following statement contains a magic number: switch (p.ServerTypeName)                  {                      case "AstoriaUnitTests.Tests.DerivedProperty.Person":                          Assert.AreEqual(3' p.LinkInfos.Count());                          Assert.AreEqual(0' p.StreamDescriptors.Count());                          break;                        case "AstoriaUnitTests.Tests.DerivedProperty.Employee":                          Assert.AreEqual(5' p.LinkInfos.Count());                          Assert.AreEqual(1' p.StreamDescriptors.Count());                          break;                        case "AstoriaUnitTests.Tests.DerivedProperty.PeopleManager":                          Assert.AreEqual(6' p.LinkInfos.Count());                          Assert.AreEqual(1' p.StreamDescriptors.Count());                          break;                        default:                          Assert.Fail("Unexpected type: " + p.ServerTypeName);                          break;                  }
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,VerifyNonProjectedLinkInfoCount,The following statement contains a magic number: switch (p.ServerTypeName)                  {                      case "AstoriaUnitTests.Tests.DerivedProperty.Person":                          Assert.AreEqual(3' p.LinkInfos.Count());                          Assert.AreEqual(0' p.StreamDescriptors.Count());                          break;                        case "AstoriaUnitTests.Tests.DerivedProperty.Employee":                          Assert.AreEqual(5' p.LinkInfos.Count());                          Assert.AreEqual(1' p.StreamDescriptors.Count());                          break;                        case "AstoriaUnitTests.Tests.DerivedProperty.PeopleManager":                          Assert.AreEqual(6' p.LinkInfos.Count());                          Assert.AreEqual(1' p.StreamDescriptors.Count());                          break;                        default:                          Assert.Fail("Unexpected type: " + p.ServerTypeName);                          break;                  }
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,VerifyNonProjectedLinkInfoCount,The following statement contains a magic number: switch (p.ServerTypeName)                  {                      case "AstoriaUnitTests.Tests.DerivedProperty.Person":                          Assert.AreEqual(3' p.LinkInfos.Count());                          Assert.AreEqual(0' p.StreamDescriptors.Count());                          break;                        case "AstoriaUnitTests.Tests.DerivedProperty.Employee":                          Assert.AreEqual(5' p.LinkInfos.Count());                          Assert.AreEqual(1' p.StreamDescriptors.Count());                          break;                        case "AstoriaUnitTests.Tests.DerivedProperty.PeopleManager":                          Assert.AreEqual(6' p.LinkInfos.Count());                          Assert.AreEqual(1' p.StreamDescriptors.Count());                          break;                        default:                          Assert.Fail("Unexpected type: " + p.ServerTypeName);                          break;                  }
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,SendRequestAndVerifyUriAndContext,The following statement contains a magic number: t.TestUtil.RunCombinations(queryUrisAndValidations()' versions' (testCase' version) =>                  {                      var getQueries = testCase.Item1;                      var getExpectedUri = testCase.Item2;                      var validate = testCase.Item3;                      foreach (var getQuery in getQueries)                      {                          var host = new t.TestServiceHost2();                          var requestMessage = new DataServiceHostRequestMessage(host);                          var ctx = new DataServiceContextWithCustomTransportLayer(request.ServiceRoot' version' () => requestMessage' () =>                          {                              request.SendRequest(host);                              return new DataServiceHostResponseMessage(host);                          });                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                            if (version < ODataProtocolVersion.V4)                          {                              var query = getQuery(ctx);                              try                              {                                  foreach (var p in query) { }                                  Assert.Fail("Exception expected but received none.");                              }                              catch (NotSupportedException e)                              {                                  Assert.IsTrue(                                      "The expression 'TypeAs' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message ||                                      "The method 'OfType' is not supported when MaxProtocolVersion is less than '4.0'." == e.Message);                              }                          }                          else                          {                              #region Setup resolvers and events                                ctx.ResolveType = (typeName) =>                              {                                  if (typeName == typeof(Employee).FullName)                                  {                                      return typeof(Employee);                                  }                                    if (typeName == typeof(PeopleManager).FullName)                                  {                                      return typeof(PeopleManager);                                  }                                    return null;                              };                                ctx.SendingRequest2 += (sender' e) =>                              {                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-Version")' "OData-Version mismatch.");                                  Assert.AreEqual("4.0"' e.RequestMessage.GetHeader("OData-MaxVersion")' "OData-MaxVersion mismatch.");                              };                                #endregion Setup resolvers and events                                // Validate Uri                              var query = getQuery(ctx);                              string clientGeneratedUri = query.ToString();                              Assert.AreEqual(getExpectedUri(ctx)' clientGeneratedUri);                                #region Validate entities                                List<object> materializedObjects = new List<object>();                                // Materialize and validate LinkInfos                              foreach (var e in query)                              {                                  EntityDescriptor descriptor = ctx.GetEntityDescriptor(e);                                  if (descriptor != null)                                  {                                      foreach (var link in descriptor.LinkInfos)                                      {                                          switch (link.Name)                                          {                                              case "Aquaintances":                                              case "DirectReports":                                              case "Manager":                                              case "Colleagues":                                              case "BestFriend":                                              case "Friends":                                                  // If the entity is not of the base type (Person)' then expect navigation links to have a type segment.                                                  if (descriptor.ServerTypeName != "AstoriaUnitTests.Tests.DerivedProperty.Person")                                                  {                                                      t.TestUtil.AssertContains(link.NavigationLink.OriginalString' descriptor.ServerTypeName);                                                      if (link.AssociationLink != null)                                                      {                                                          t.TestUtil.AssertContains(link.AssociationLink.OriginalString' descriptor.ServerTypeName);                                                      }                                                  }                                                  break;                                              default:                                                  Assert.Fail("Unexpected link: " + link.Name);                                                  return;                                          }                                      }                                  }                                    materializedObjects.Add(e);                              }                                #endregion Validate entities                                #region Validate Links                                // Validate LinkDescriptors                              foreach (LinkDescriptor link in ctx.Links)                              {                                  string identity = ctx.GetEntityDescriptor(link.Source).Identity.AbsoluteUri;                                  int startIdx = identity.IndexOf('(') + 1;                                  int endIdx = identity.IndexOf(')');                                  int sourceId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    identity = ctx.GetEntityDescriptor(link.Target).Identity.AbsoluteUri;                                  startIdx = identity.IndexOf('(') + 1;                                  endIdx = identity.IndexOf(')');                                  int targetId = int.Parse(identity.Substring(startIdx' endIdx - startIdx));                                    switch (link.SourceProperty)                                  {                                      case "DirectReports":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("DirectReports link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.IsTrue(targetName == "Pratik" || targetName == "Jimmy");                                                  Assert.IsTrue(targetId == 3 || targetId == 4);                                                  break;                                              case 3: //"Pratik":                                                  Assert.Fail("DirectReports link not expected for Pratik");                                                  break;                                              case 4: //"Jimmy":                                                  Assert.Fail("DirectReports link not expected for Jimmy");                                                  break;                                              case 5: //"Shyam":                                                  //Assert.IsTrue(targetName == "Andy" || targetName == "Marcelo");                                                  Assert.IsTrue(targetId == 2 || targetId == 6);                                                  break;                                              case 6: //"Marcelo":                                                  Assert.Fail("DirectReports link not expected for Marcelo");                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Manager":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Manager link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Colleagues":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  Assert.Fail("Colleagues link not expected for Foo");                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 5: //"Shyam":                                                  Assert.Fail("Colleagues link not expected for Shyam");                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "BestFriend":                                          switch (sourceId)                                          {                                              case 1: //"Foo":                                                  //Assert.AreEqual("Pratik"' targetName);                                                  Assert.AreEqual(3' targetId);                                                  break;                                              case 2: //"Andy":                                                  //Assert.AreEqual("Shyam"' targetName);                                                  Assert.AreEqual(5' targetId);                                                  break;                                              case 3: //"Pratik":                                                  //Assert.AreEqual("Andy"' targetName);                                                  Assert.AreEqual(2' targetId);                                                  break;                                              case 4: //"Jimmy":                                                  //Assert.AreEqual("Foo"' targetName);                                                  Assert.AreEqual(1' targetId);                                                  break;                                              case 5: //"Shyam":                                                  //Assert.AreEqual("Marcelo"' targetName);                                                  Assert.AreEqual(6' targetId);                                                  break;                                              case 6: //"Marcelo":                                                  //Assert.AreEqual("Jimmy"' targetName);                                                  Assert.AreEqual(4' targetId);                                                  break;                                              default:                                                  Assert.Fail("Unrecognized id: " + sourceId);                                                  break;                                          }                                          break;                                      case "Friends":                                          break;                                      default:                                          Assert.Fail("Unexpected link descriptor: " + link.SourceProperty);                                          return;                                  }                              }                                #endregion Validate Links                                // Validation specific to the test case.                              validate(ctx' query' materializedObjects);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(pratik' "Friends"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == marcelo));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager shyam = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 5);                  foreach (Person p in query)                  {                      shyam = (PeopleManager)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name");                  }                    Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(shyam' "Colleagues"' marcelo);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' shyam.Colleagues.Single(e => e.ID == 6));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager shyam = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 5);                  foreach (Person p in query)                  {                      shyam = (PeopleManager)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name");                  }                    Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(shyam' "Colleagues"' marcelo);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' shyam.Colleagues.Single(e => e.ID == 6));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager shyam = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 5);                  foreach (Person p in query)                  {                      shyam = (PeopleManager)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name");                  }                    Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(shyam' "Colleagues"' marcelo);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' shyam.Colleagues.Single(e => e.ID == 6));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager shyam = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 5);                  foreach (Person p in query)                  {                      shyam = (PeopleManager)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name");                  }                    Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(shyam' "Colleagues"' marcelo);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' shyam.Colleagues.Single(e => e.ID == 6));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager shyam = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 5);                  foreach (Person p in query)                  {                      shyam = (PeopleManager)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name");                  }                    Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(shyam' "Colleagues"' marcelo);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' shyam.Colleagues.Single(e => e.ID == 6));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager shyam = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 5);                  foreach (Person p in query)                  {                      shyam = (PeopleManager)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(PeopleManager).FullName)' "href for edit link did not end with type name");                  }                    Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.AddLink(shyam' "Colleagues"' marcelo);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' shyam.Colleagues.Single(e => e.ID == 6));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == shyam && l.Target == marcelo));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee pratik = new Employee { ID = 3 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' pratik);                    ctx.AddLink(shyam' "DirectReports"' pratik);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(shyam.ID' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(3' pratik.ID);                  Assert.AreEqual(pratik' shyam.DirectReports.FirstOrDefault(l => l.ID == 3));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "DirectReports" && l.Source == shyam && l.Target == pratik));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee pratik = new Employee { ID = 3 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' pratik);                    ctx.AddLink(shyam' "DirectReports"' pratik);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(shyam.ID' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(3' pratik.ID);                  Assert.AreEqual(pratik' shyam.DirectReports.FirstOrDefault(l => l.ID == 3));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "DirectReports" && l.Source == shyam && l.Target == pratik));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee pratik = new Employee { ID = 3 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' pratik);                    ctx.AddLink(shyam' "DirectReports"' pratik);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(shyam.ID' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(3' pratik.ID);                  Assert.AreEqual(pratik' shyam.DirectReports.FirstOrDefault(l => l.ID == 3));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "DirectReports" && l.Source == shyam && l.Target == pratik));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee pratik = new Employee { ID = 3 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' pratik);                    ctx.AddLink(shyam' "DirectReports"' pratik);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(shyam.ID' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(3' pratik.ID);                  Assert.AreEqual(pratik' shyam.DirectReports.FirstOrDefault(l => l.ID == 3));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "DirectReports" && l.Source == shyam && l.Target == pratik));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee pratik = new Employee { ID = 3 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' pratik);                    ctx.AddLink(shyam' "DirectReports"' pratik);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(shyam.ID' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(3' pratik.ID);                  Assert.AreEqual(pratik' shyam.DirectReports.FirstOrDefault(l => l.ID == 3));                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "DirectReports" && l.Source == shyam && l.Target == pratik));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  PeopleManager p100 = new PeopleManager { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.AddLink(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.IsNotNull(ctx.Links.SingleOrDefault(l => l.SourceProperty == "Colleagues" && l.Source == p100 && l.Target == p101));              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(person' pratik);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(person' pratik);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(person' pratik);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(person' pratik);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(person' pratik);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee marcelo = new Employee { ID = 6 };                  ctx.AttachTo("People"' marcelo);                  ctx.SetLink(pratik' "BestFriend"' marcelo);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(marcelo' pratik.BestFriend);                    Assert.AreEqual(pratik' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(marcelo' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "BestFriend"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.BestFriend);                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "BestFriend"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.BestFriend);                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "BestFriend"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.BestFriend);                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "BestFriend"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.BestFriend);                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Person p100 = new Person { ID = 100 };                  Person p101 = new Person { ID = 101 };                  ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "BestFriend"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.BestFriend).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.BestFriend);                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(5' shyam.ID);                  Assert.AreEqual(shyam' pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.AreEqual(shyam' ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(5' shyam.ID);                  Assert.AreEqual(shyam' pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.AreEqual(shyam' ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(5' shyam.ID);                  Assert.AreEqual(shyam' pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.AreEqual(shyam' ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(5' shyam.ID);                  Assert.AreEqual(shyam' pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.AreEqual(shyam' ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(5' shyam.ID);                  Assert.AreEqual(shyam' pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.AreEqual(shyam' ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    try                  {                      ctx.SaveChanges(saveChangesOption);                      Assert.Fail("Exception expected but received none.");                  }                  catch (DataServiceRequestException e)                  {                      t.TestUtil.AssertContains(e.InnerException.Message' "Resource not found for the segment 'Manager'.");                  }              }'              new List<Version>() { V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  PeopleManager shyam = new PeopleManager { ID = 5 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' shyam);                  ctx.SetLink(pratik' "Manager"' shyam);                    try                  {                      ctx.SaveChanges(saveChangesOption);                      Assert.Fail("Exception expected but received none.");                  }                  catch (DataServiceRequestException e)                  {                      t.TestUtil.AssertContains(e.InnerException.Message' "Resource not found for the segment 'Manager'.");                  }              }'              new List<Version>() { V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    ctx.SetLink(pratik' "Manager"' null);                  ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsNull(pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.IsNull(ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    ctx.SetLink(pratik' "Manager"' null);                  ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsNull(pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.IsNull(ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee pratik = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  foreach (Person p in query)                  {                      pratik = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    ctx.SetLink(pratik' "Manager"' null);                  ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsNull(pratik.Manager);                    Assert.AreEqual(pratik' ctx.Links.Single().Source);                  Assert.IsNull(ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddObject("People"' p101);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetSetLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    PeopleManager p101 = new PeopleManager { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p101);                  ctx.AddObject("People"' p100);                  ctx.SetLink(p100' "Manager"' p101);                    ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Manager).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Manager);                    Assert.AreEqual(p100' ctx.Links.Single().Source);                  Assert.AreEqual(p101' ctx.Links.Single().Target);              }'              new List<Version>() { V4 /*b/c of collection properties*/' V4 /*b/c of collection properties*/' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Person p1 = new Person { ID = 1 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' p1);                  ctx.DeleteLink(pratik' "Friends"' p1);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsFalse(pratik.Friends.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Person p1 = new Person { ID = 1 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' p1);                  ctx.DeleteLink(pratik' "Friends"' p1);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsFalse(pratik.Friends.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  Person p1 = new Person { ID = 1 };                  ctx.AttachTo("People"' pratik);                  ctx.AttachTo("People"' p1);                  ctx.DeleteLink(pratik' "Friends"' p1);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsFalse(pratik.Friends.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Person p1 = new Person { ID = 1 };                  ctx.AttachTo("People"' p1);                  ctx.DeleteLink(pratik' "Friends"' p1);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsFalse(pratik.Friends.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Person p1 = new Person { ID = 1 };                  ctx.AttachTo("People"' p1);                  ctx.DeleteLink(pratik' "Friends"' p1);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsFalse(pratik.Friends.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Person p1 = new Person { ID = 1 };                  ctx.AttachTo("People"' p1);                  ctx.DeleteLink(pratik' "Friends"' p1);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.IsFalse(pratik.Friends.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee marcelo = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 6);                  foreach (Person p in query)                  {                      marcelo = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager andy = new PeopleManager { ID = 2 };                  ctx.AttachTo("People"' andy);                  ctx.DeleteLink(marcelo' "Colleagues"' andy);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 6);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(6' person.ID);                  Assert.AreEqual(marcelo' person);                  Assert.IsFalse(marcelo.Colleagues.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee marcelo = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 6);                  foreach (Person p in query)                  {                      marcelo = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager andy = new PeopleManager { ID = 2 };                  ctx.AttachTo("People"' andy);                  ctx.DeleteLink(marcelo' "Colleagues"' andy);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 6);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(6' person.ID);                  Assert.AreEqual(marcelo' person);                  Assert.IsFalse(marcelo.Colleagues.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee marcelo = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 6);                  foreach (Person p in query)                  {                      marcelo = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager andy = new PeopleManager { ID = 2 };                  ctx.AttachTo("People"' andy);                  ctx.DeleteLink(marcelo' "Colleagues"' andy);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 6);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(6' person.ID);                  Assert.AreEqual(marcelo' person);                  Assert.IsFalse(marcelo.Colleagues.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  Employee marcelo = null;                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 6);                  foreach (Person p in query)                  {                      marcelo = (Employee)p;                      Assert.IsTrue(ctx.GetEntityDescriptor(p).EditLink.OriginalString.EndsWith(typeof(Employee).FullName)' "href for edit link did not end with type name");                  }                    PeopleManager andy = new PeopleManager { ID = 2 };                  ctx.AttachTo("People"' andy);                  ctx.DeleteLink(marcelo' "Colleagues"' andy);                    ctx.SaveChanges(saveChangesOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 6);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(6' person.ID);                  Assert.AreEqual(marcelo' person);                  Assert.IsFalse(marcelo.Colleagues.Any());                  Assert.AreEqual(0' ctx.Links.Count());              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee marcelo = new Employee { ID = 6 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' marcelo);                    ctx.DeleteLink(shyam' "DirectReports"' marcelo);                  ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(1' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee marcelo = new Employee { ID = 6 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' marcelo);                    ctx.DeleteLink(shyam' "DirectReports"' marcelo);                  ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(1' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee marcelo = new Employee { ID = 6 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' marcelo);                    ctx.DeleteLink(shyam' "DirectReports"' marcelo);                  ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(1' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee marcelo = new Employee { ID = 6 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' marcelo);                    ctx.DeleteLink(shyam' "DirectReports"' marcelo);                  ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(1' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetDeleteLinkTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangesOption) =>              {                  ctx.Format.UseJson(this.LoadModelFromString());                  PeopleManager shyam = new PeopleManager { ID = 5 };                  Employee marcelo = new Employee { ID = 6 };                    ctx.AttachTo("People"' shyam);                  ctx.AttachTo("People"' marcelo);                    ctx.DeleteLink(shyam' "DirectReports"' marcelo);                  ctx.SaveChanges(saveChangesOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as PeopleManager).DirectReports).Where(p => p.ID == 5);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(5' person.ID);                  Assert.AreEqual(shyam' person);                  Assert.AreEqual(6' marcelo.ID);                  Assert.AreEqual(1' ctx.Links.Count());              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Friends"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Friends"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Friends"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Friends"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Friends"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Friends"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Friends.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Friends"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => p.Friends).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Friends.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Colleagues"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Colleagues.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Colleagues"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Colleagues.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Colleagues"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Colleagues.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Colleagues"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Colleagues.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Colleagues"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Colleagues.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    ctx.AddRelatedObject(pratik' "Colleagues"' p100);                    ctx.SaveChanges(saveChangeOption);                    query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 3);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(3' person.ID);                  Assert.AreEqual(pratik' person);                  Assert.AreEqual(100' p100.ID);                  Assert.IsNotNull(pratik.Colleagues.Single(f => f == p100));                    Assert.AreEqual(2' ctx.Links.Where(l => l.Source == pratik).Count());                  Assert.IsNotNull(ctx.Links.Single(l => l.Target == p100));              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetAddRelatedObjectTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee p100 = new Employee { ID = 100 };                  p100.Skills = new List<string>();                  p100.Vacations = new List<Vacation>();                    Employee p101 = new Employee { ID = 101 };                  p101.Skills = new List<string>();                  p101.Vacations = new List<Vacation>();                    ctx.AddObject("People"' p100);                  ctx.AddRelatedObject(p100' "Colleagues"' p101);                    ctx.SaveChanges(saveChangeOption);                    var query = ctx.CreateQuery<Person>("People").Expand(p => (p as Employee).Colleagues).Where(p => p.ID == 100);                  ctx.MergeOption = MergeOption.OverwriteChanges;                    Person person = query.Single();                  Assert.AreEqual(100' person.ID);                  Assert.AreEqual(p100' person);                  Assert.AreEqual(101' p101.ID);                  Assert.AreEqual(p101' p100.Colleagues.Single());                    Assert.AreEqual(p100' (Person)ctx.Links.Single().Source);                  Assert.AreEqual(p101' (Person)ctx.Links.Single().Target);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  ctx.AttachTo("People"' pratik);                  var response = ctx.LoadProperty(pratik' "BestFriend");                  t.TestUtil.AssertContainsFalse(response.Query.RequestUri.OriginalString' typeof(Employee).FullName);                  Assert.IsTrue(response.Query.RequestUri.OriginalString.EndsWith("/BestFriend"));                  Person bestFriend = pratik.BestFriend;                  Assert.IsTrue(ctx.Entities.Contains(ctx.GetEntityDescriptor(bestFriend)));                  Assert.IsNotNull(ctx.Links.Single(l => l.Source == pratik && l.Target == bestFriend && l.SourceProperty == "BestFriend"));              }'              new List<Version>() { V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  var response = ctx.LoadProperty(pratik' "BestFriend");                  Assert.IsTrue(response.Query.RequestUri.OriginalString.EndsWith(typeof(Employee).FullName + "/BestFriend"));                  Person bestFriend = pratik.BestFriend;                  Assert.IsTrue(ctx.Entities.Contains(ctx.GetEntityDescriptor(bestFriend)));                  Assert.IsNotNull(ctx.Links.Single(l => l.Source == pratik && l.Target == bestFriend && l.SourceProperty == "BestFriend"));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  Employee pratik = new Employee { ID = 3 };                  ctx.AttachTo("People"' pratik);                  var response = ctx.LoadProperty(pratik' "Manager");                  Assert.Fail("Expected exception but received none.");              }'              new List<Version>() { V4 }'              "<?xml version=\"1.0\" encoding=\"utf-8\"?><m:error xmlns:m=\"http://docs.oasis-open.org/odata/ns/metadata\"><m:code /><m:message>Resource not found for the segment 'Manager'.</m:message></m:error>");
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetLoadPropertyTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  var response = ctx.LoadProperty(pratik' "Manager");                  Assert.IsTrue(response.Query.RequestUri.OriginalString.EndsWith(typeof(Employee).FullName + "/Manager"));                  Person manager = pratik.Manager;                  Assert.IsTrue(ctx.Entities.Contains(ctx.GetEntityDescriptor(manager)));                  Assert.IsNotNull(ctx.Links.Single(l => l.Source == pratik && l.Target == manager && l.SourceProperty == "Manager"));              }'              new List<Version>() { V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  PeopleManager andy = new PeopleManager { ID = 2 };                  ctx.AttachTo("People"' andy);                  ctx.SetSaveStream(andy' "Photo"' new MemoryStream()' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);              }'              new List<Version>() { V4 }'              "The stream named 'Photo' cannot be modified because it does not have an edit-media link. Make sure that the stream name is correct and that an edit-media link for this stream is included in the entry element in the response.");
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  PeopleManager andy = new PeopleManager { ID = 2 };                  ctx.AttachTo("People"' andy);                  ctx.GetReadStream(andy' "Photo"' new DataServiceRequestArgs());                  ctx.SaveChanges(saveChangeOption);              }'              new List<Version>() { V4 }'              "The entity does not have a stream named 'Photo'. Make sure that the name of the stream is correct.\r\nParameter name: name");
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,GetNamedStreamTests,The following statement contains a magic number: yield return new Tuple<Action<DataServiceContext' SaveChangesOptions>' List<Version>' string>(              (ctx' saveChangeOption) =>              {                  var query = ctx.CreateQuery<Person>("People").Where(p => p.ID == 3);                  Employee pratik = (Employee)query.Single();                  ctx.SetSaveStream(pratik' "Photo"' new MemoryStream(new byte[] { 1' 2' 3 })' true' "abc/pqr");                  ctx.SaveChanges(saveChangeOption);                    DataServiceRequestArgs arg = new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" };                  var response = ctx.GetReadStream(pratik' "Photo"' new DataServiceRequestArgs() { AcceptContentType = "abc/pqr" });                  byte[] buffer = new byte[4];                  Assert.AreEqual(3' response.Stream.Read(buffer' 0' 4));                  Assert.IsTrue(buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3);              }'              new List<Version>() { V4' V4' V4 }'              null);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: thanksgivingVacation.SetValue("StartDate"' new DateTime(2011' 11' 19));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: thanksgivingVacation.SetValue("StartDate"' new DateTime(2011' 11' 19));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: thanksgivingVacation.SetValue("StartDate"' new DateTime(2011' 11' 19));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: thanksgivingVacation.SetValue("EndDate"' new DateTime(2011' 11' 27));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: thanksgivingVacation.SetValue("EndDate"' new DateTime(2011' 11' 27));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: thanksgivingVacation.SetValue("EndDate"' new DateTime(2011' 11' 27));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: christmasVacation.SetValue("StartDate"' new DateTime(2011' 12' 24));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: christmasVacation.SetValue("StartDate"' new DateTime(2011' 12' 24));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: christmasVacation.SetValue("StartDate"' new DateTime(2011' 12' 24));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: christmasVacation.SetValue("EndDate"' new DateTime(2012' 1' 2));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: christmasVacation.SetValue("EndDate"' new DateTime(2012' 1' 2));
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: andy.SetValue("ID"' 2);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: office.SetValue("OfficeNumber"' 100);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: pratik.SetValue("ID"' 3);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: office.SetValue("OfficeNumber"' 101);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: jimmy.SetValue("ID"' 4);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: office.SetValue("OfficeNumber"' 102);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: shyam.SetValue("ID"' 5);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: office.SetValue("OfficeNumber"' 103);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: marcelo.SetValue("ID"' 6);
Magic Number,AstoriaUnitTests.Tests.DerivedProperty,DerivedPropertyClientTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DerivedPropertyTests.cs,ModelWithDerivedNavigationProperties,The following statement contains a magic number: office.SetValue("OfficeNumber"' 104);
Magic Number,AstoriaUnitTests.EFFK.Client,CustomerWithBirthday,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\Dev10EF4FKTests.cs,CustomerWithBirthday,The following statement contains a magic number: this.Birthday = new DateTime(624235248000000000' DateTimeKind.Unspecified);
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data2 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data2 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data2 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: entity2.SetValue("ID"' 3);
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.DataWebClientCSharp.Services,NamedStreamService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\Services\NamedStreamService.cs,SetUpNamedStreamService,The following statement contains a magic number: byte[] data1 = new byte[] { 0' 1' 2' 3' 4 };
Duplicate Code,AstoriaUnitTests.Tests,DataServiceContextTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\DataServiceContextTests.cs,LoadPropertyRemoveElementUnChangedSource,The method contains a code clone-set at the following line numbers (starting from the method definition): ((26' 46)' (58' 78))
Duplicate Code,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The method contains a code clone-set at the following line numbers (starting from the method definition): ((15' 41)' (51' 77))
Duplicate Code,AstoriaUnitTests.Tests,LinqTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\LinqTests.cs,LinqV2ProjectionsOperatorsInProjection,The method contains a code clone-set at the following line numbers (starting from the method definition): ((402' 437)' (439' 474))
Missing Default,AstoriaUnitTests.Tests,ClientCSharpRegressionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,ClientLinqUriWriterReservedCharacterTest,The following switch statement is missing a default case: switch (op)                  {                      case "eq": q = ctx.CreateQuery<Customer>("Customers").Where(c => c.Name == testValue); break;                      case "contains": q = ctx.CreateQuery<Customer>("Customers").Where(c => c.Name.Contains(testValue)); break;                      case "key": q = ctx.CreateQuery<northwindClient.Customers>("Customers").Where(c => c.CustomerID == testValue); break;                      case "tolower": q = ctx.CreateQuery<Customer>("Customers").Where(c => c.Name.ToLower() == testValue.ToLower()); break;                      case "orderby": q = ctx.CreateQuery<Customer>("Customers").OrderBy(c => testValue); break;                  }
Missing Default,AstoriaUnitTests.Tests,TestContext2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ClientCSharpUnitTests\DataWebClientCSharp\ClientCSharpRegressionTests.cs,SetValue,The following switch statement is missing a default case: switch (propertyName)                  {                      case "ID": break;                      case "Value": entity.Value = propertyValue.ToString(); break;                  }
