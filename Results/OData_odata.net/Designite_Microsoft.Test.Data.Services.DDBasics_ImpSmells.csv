Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The method has 228 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The method has 133 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The method has 125 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The method has 141 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The method has 175 lines of code.
Long Method,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The method has 101 lines of code.
Long Method,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The method has 120 lines of code.
Long Method,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The method has 120 lines of code.
Long Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The method has 258 lines of code.
Long Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The method has 157 lines of code.
Long Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The method has 128 lines of code.
Long Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The method has 144 lines of code.
Long Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The method has 197 lines of code.
Long Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The method has 177 lines of code.
Long Method,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The method has 210 lines of code.
Long Method,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,CreateMethod,The method has 123 lines of code.
Complex Method,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ApplyParametersFromCommandLine,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,Cyclomatic complexity of the method is 34
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,CheckMethodsInBaseClass,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,Cyclomatic complexity of the method is 34
Complex Method,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,StringToPrimitive,Cyclomatic complexity of the method is 15
Complex Method,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,Cyclomatic complexity of the method is 12
Complex Method,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,Cyclomatic complexity of the method is 14
Complex Method,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,Cyclomatic complexity of the method is 17
Complex Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests,ExpressionVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 16
Complex Method,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,AddResourceTypeProperties,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests,TypeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeQueryProvider.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,VisitMethodCall,Cyclomatic complexity of the method is 23
Complex Method,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertToBoolean,Cyclomatic complexity of the method is 10
Complex Method,AstoriaUnitTests,RuntimeEvaluator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\RuntimeEvaluator.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests,RuntimeEvaluator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\RuntimeEvaluator.cs,Subtract,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests,RuntimeEvaluator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\RuntimeEvaluator.cs,Multiply,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests,RuntimeEvaluator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\RuntimeEvaluator.cs,Divide,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests,RuntimeEvaluator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\RuntimeEvaluator.cs,Modulo,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetWriteStream,Cyclomatic complexity of the method is 9
Complex Method,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SaveChanges,Cyclomatic complexity of the method is 8
Complex Method,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,Cyclomatic complexity of the method is 24
Complex Method,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,MatchMethod,Cyclomatic complexity of the method is 9
Complex Method,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,CreateMethod,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The method has 5 parameters. Parameters: entitySetName' entitySetFixedName' originalEntitySetName' entitySetElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The method has 5 parameters. Parameters: singletonName' singletonFixedName' originalSingletonName' singletonElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The method has 7 parameters. Parameters: propertyType' originalPropertyName' propertyName' fixedPropertyName' privatePropertyName' propertyInitializationValue' writeOnPropertyChanged
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The method has 7 parameters. Parameters: functionName' originalFunctionName' returnTypeName' parameters' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The method has 9 parameters. Parameters: functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The method has 9 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The method has 11 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The method has 5 parameters. Parameters: actionName' originalActionName' returnTypeName' parameters' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The method has 7 parameters. Parameters: hideBaseMethod' actionName' originalActionName' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteByKeyMethods,The method has 5 parameters. Parameters: entityTypeName' returnTypeName' keys' keyParameters' keyDictionaryItems
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The method has 11 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The method has 9 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The method has 7 parameters. Parameters: actionName' originalActionName' boundSourceType' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,The method has 8 parameters. Parameters: isBound' isAction' parameters' parameterString' parameterTypes' parameterExpressionString' parameterValues' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The method has 8 parameters. Parameters: edmTypeReference' useDataServiceCollection' clientTemplate' context' addNullableTemplate' needGlobalPrefix' isOperationParameter' isEntitySingleType
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The method has 5 parameters. Parameters: entitySetName' entitySetFixedName' originalEntitySetName' entitySetElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The method has 5 parameters. Parameters: singletonName' singletonFixedName' originalSingletonName' singletonElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The method has 7 parameters. Parameters: propertyType' originalPropertyName' propertyName' fixedPropertyName' privatePropertyName' propertyInitializationValue' writeOnPropertyChanged
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The method has 7 parameters. Parameters: functionName' originalFunctionName' returnTypeName' parameters' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The method has 9 parameters. Parameters: functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The method has 9 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The method has 11 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The method has 5 parameters. Parameters: actionName' originalActionName' returnTypeName' parameters' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The method has 7 parameters. Parameters: hideBaseMethod' actionName' originalActionName' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteByKeyMethods,The method has 5 parameters. Parameters: entityTypeName' returnTypeName' keys' keyParameters' keyDictionaryItems
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The method has 11 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The method has 9 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The method has 7 parameters. Parameters: actionName' originalActionName' boundSourceType' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The method has 5 parameters. Parameters: entitySetName' entitySetFixedName' originalEntitySetName' entitySetElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The method has 5 parameters. Parameters: singletonName' singletonFixedName' originalSingletonName' singletonElementTypeName' inContext
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The method has 7 parameters. Parameters: propertyType' originalPropertyName' propertyName' fixedPropertyName' privatePropertyName' propertyInitializationValue' writeOnPropertyChanged
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The method has 7 parameters. Parameters: functionName' originalFunctionName' returnTypeName' parameters' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The method has 9 parameters. Parameters: functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The method has 9 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The method has 11 parameters. Parameters: hideBaseMethod' functionName' originalFunctionName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The method has 5 parameters. Parameters: actionName' originalActionName' returnTypeName' parameters' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The method has 7 parameters. Parameters: hideBaseMethod' actionName' originalActionName' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteByKeyMethods,The method has 5 parameters. Parameters: entityTypeName' returnTypeName' keys' keyParameters' keyDictionaryItems
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The method has 11 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameters' fullNamespace' parameterValues' isComposable' isReturnEntity' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The method has 9 parameters. Parameters: functionName' originalFunctionName' boundTypeName' returnTypeName' parameters' fullNamespace' parameterValues' isComposable' useEntityReference
Long Parameter List,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The method has 7 parameters. Parameters: actionName' originalActionName' boundSourceType' returnTypeName' parameters' fullNamespace' parameterValues
Long Parameter List,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetReadStreamInternal,The method has 5 parameters. Parameters: entity' streamProperty' etag' checkETagForEquality' operationContext
Long Parameter List,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetReadStream,The method has 5 parameters. Parameters: entity' streamProperty' etag' checkETagForEquality' operationContext
Long Parameter List,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetWriteStreamInternal,The method has 5 parameters. Parameters: entity' streamProperty' etag' checkETagForEquality' operationContext
Long Parameter List,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetWriteStream,The method has 5 parameters. Parameters: entity' streamProperty' etag' checkETagForEquality' operationContext
Long Parameter List,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateWorkspaceForType,The method has 6 parameters. Parameters: serviceType' contextType' name' workspace' host' isEFBased
Long Parameter List,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The method has 5 parameters. Parameters: workspace' constructor' resolveType' resolveName' createUpdateDelete
Long Parameter List,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ValidateLinkState,The method has 5 parameters. Parameters: context' source' propertyName' target' state
Long Parameter List,ArubaClient,NonDefaultMappings,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateNonDefaultMappings,The method has 15 parameters. Parameters: c1_int' c_int_AS_decimal' c_int_AS_float' c_int_AS_bigint' c_smallint_AS_decimal' c_smallint_AS_real' c_smallint_AS_money' c_smallint_AS_bigint' c_tinyint_AS_smallint' c_tinyint_AS_numeric' c_tinyint_AS_float' c_tinyint_AS_smallmoney' c_smalldatetime_AS_datetime' c_char_AS_nchar' c_bigint_AS_decimal
Long Parameter List,ArubaClient,AllTypes,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateAllTypes,The method has 24 parameters. Parameters: c1_int' c2_int' c3_smallint' c4_tinyint' c5_bit' c6_datetime' c7_smalldatetime' c8_decimal_28_4_' c9_numeric_28_4_' c10_real' c11_float' c12_money' c13_smallmoney' c14_varchar_512_' c15_char_512_' c16_text' c17_binary_512_' c18_varbinary_512_' c19_image' c20_nvarchar_512_' c21_nchar_512_' c22_ntext' c23_uniqueidentifier' c24_bigint
Long Parameter List,ArubaClient,AllTypesComplexType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateAllTypesComplexType,The method has 23 parameters. Parameters: c1_int' c2_smallint' c3_tinyint' c4_bit' c5_datetime' c6_smalldatetime' c7_decimal_28_4_' c8_numeric_28_4_' c9_real' c10_float' c11_money' c12_smallmoney' c13_varchar_512_' c14_char_512_' c15_text' c16_binary_512_' c17_varbinary_512_' c18_image' c19_nvarchar_512_' c20_nchar_512_' c21_ntext' c22_uniqueidentifier' c23_bigint
Long Parameter List,ArubaClient,Student,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateStudent,The method has 5 parameters. Parameters: ID' firstName' lastName' middleName' major
Long Parameter List,ArubaClient,Office,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateOffice,The method has 7 parameters. Parameters: ID' officeNumber' floorNumber' buildingName' city' state' isWindowOffice
Long Parameter List,ArubaClient,GradStudent,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateGradStudent,The method has 5 parameters. Parameters: ID' firstName' lastName' middleName' major
Long Parameter List,ArubaClient,DeepTree_E,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_E,The method has 5 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int
Long Parameter List,ArubaClient,DeepTree_F,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_F,The method has 6 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int
Long Parameter List,ArubaClient,DeepTree_G,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_G,The method has 7 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int
Long Parameter List,ArubaClient,DeepTree_H,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_H,The method has 8 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int
Long Parameter List,ArubaClient,DeepTree_I,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_I,The method has 9 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int
Long Parameter List,ArubaClient,DeepTree_J,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_J,The method has 10 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int
Long Parameter List,ArubaClient,DeepTree_K,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_K,The method has 11 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int
Long Parameter List,ArubaClient,DeepTree_L,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_L,The method has 12 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int
Long Parameter List,ArubaClient,DeepTree_M,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_M,The method has 13 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int' m_Int
Long Parameter List,ArubaClient,DeepTree_N,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,CreateDeepTree_N,The method has 14 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int' m_Int' n_Int
Long Parameter List,northwindClient,Order_Details,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,CreateOrder_Details,The method has 5 parameters. Parameters: orderID' productID' unitPrice' quantity' discount
Long Parameter List,northwindClient,Invoices,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,CreateInvoices,The method has 9 parameters. Parameters: customerName' salesperson' orderID' shipperName' productID' productName' unitPrice' quantity' discount
Long Parameter List,northwindClient,Order_Details_Extended,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,CreateOrder_Details_Extended,The method has 6 parameters. Parameters: orderID' productID' productName' unitPrice' quantity' discount
Long Parameter List,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The method has 23 parameters. Parameters: c25_intP' c26_smallintP' c27_tinyintP' c28_bitP' c29_datetimeP' c30_smalldatetimeP' c31_decimal_28_4_P' c32_numeric_28_4_P' c33_realP' c34_floatP' c35_moneyP' c36_smallmoneyP' c37_varchar_512_P' c38_char_512_P' c39_textP' c40_binary_512_P' c41_varbinary_512_P' c42_imageP' c43_nvarchar_512_P' c44_nchar_512_P' c45_ntextP' c46_uniqueidentifierP' c47_bigintP
Long Parameter List,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectBugs,The method has 9 parameters. Parameters: idP' param2_int' param3_int' numberP' param5_int' param6_int' commentP' param8_varchar_512_' param9_varchar_512_
Long Parameter List,Aruba,AllTypesComplexType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateAllTypesComplexType,The method has 23 parameters. Parameters: c1_int' c2_smallint' c3_tinyint' c4_bit' c5_datetime' c6_smalldatetime' c7_decimal_28_4_' c8_numeric_28_4_' c9_real' c10_float' c11_money' c12_smallmoney' c13_varchar_512_' c14_char_512_' c15_text' c16_binary_512_' c17_varbinary_512_' c18_image' c19_nvarchar_512_' c20_nchar_512_' c21_ntext' c22_uniqueidentifier' c23_bigint
Long Parameter List,Aruba,AllTypes,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateAllTypes,The method has 24 parameters. Parameters: c1_int' c2_int' c3_smallint' c4_tinyint' c5_bit' c6_datetime' c7_smalldatetime' c8_decimal_28_4_' c9_numeric_28_4_' c10_real' c11_float' c12_money' c13_smallmoney' c14_varchar_512_' c15_char_512_' c16_text' c17_binary_512_' c18_varbinary_512_' c19_image' c20_nvarchar_512_' c21_nchar_512_' c22_ntext' c23_uniqueidentifier' c24_bigint
Long Parameter List,Aruba,NonDefaultMappings,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateNonDefaultMappings,The method has 15 parameters. Parameters: c1_int' c_int_AS_decimal' c_int_AS_float' c_int_AS_bigint' c_smallint_AS_decimal' c_smallint_AS_real' c_smallint_AS_money' c_smallint_AS_bigint' c_tinyint_AS_smallint' c_tinyint_AS_numeric' c_tinyint_AS_float' c_tinyint_AS_smallmoney' c_smalldatetime_AS_datetime' c_char_AS_nchar' c_bigint_AS_decimal
Long Parameter List,Aruba,Student,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateStudent,The method has 5 parameters. Parameters: id' firstName' lastName' middleName' major
Long Parameter List,Aruba,GradStudent,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateGradStudent,The method has 5 parameters. Parameters: id' firstName' lastName' middleName' major
Long Parameter List,Aruba,Office,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateOffice,The method has 7 parameters. Parameters: id' officeNumber' floorNumber' buildingName' city' state' isWindowOffice
Long Parameter List,Aruba,DeepTree_E,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_E,The method has 5 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int
Long Parameter List,Aruba,DeepTree_F,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_F,The method has 6 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int
Long Parameter List,Aruba,DeepTree_G,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_G,The method has 7 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int
Long Parameter List,Aruba,DeepTree_H,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_H,The method has 8 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int
Long Parameter List,Aruba,DeepTree_I,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_I,The method has 9 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int
Long Parameter List,Aruba,DeepTree_J,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_J,The method has 10 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int
Long Parameter List,Aruba,DeepTree_K,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_K,The method has 11 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int
Long Parameter List,Aruba,DeepTree_L,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_L,The method has 12 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int
Long Parameter List,Aruba,DeepTree_M,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_M,The method has 13 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int' m_Int
Long Parameter List,Aruba,DeepTree_N,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateDeepTree_N,The method has 14 parameters. Parameters: id' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int' m_Int' n_Int
Long Parameter List,northwind,Order_Details,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,CreateOrder_Details,The method has 5 parameters. Parameters: orderID' productID' unitPrice' quantity' discount
Long Parameter List,northwind,Invoices,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,CreateInvoices,The method has 9 parameters. Parameters: customerName' salesperson' orderID' shipperName' productID' productName' unitPrice' quantity' discount
Long Parameter List,northwind,Order_Details_Extended,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,CreateOrder_Details_Extended,The method has 6 parameters. Parameters: orderID' productID' productName' unitPrice' quantity' discount
Long Parameter List,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeMethod,The method has 5 parameters. Parameters: memberName' parameterTypes' genericArguments' target' parameterValues
Long Parameter List,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeMethod,The method has 6 parameters. Parameters: methodTarget' memberName' parameterTypes' genericArguments' target' parameterValues
Long Parameter List,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeMethod,The method has 7 parameters. Parameters: methodTarget' memberName' parameterTypes' genericArguments' bindingFlags' target' parameterValues
Long Parameter List,ArubaBinding,NonDefaultMappings,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateNonDefaultMappings,The method has 15 parameters. Parameters: c1_int' c_int_AS_decimal' c_int_AS_float' c_int_AS_bigint' c_smallint_AS_decimal' c_smallint_AS_real' c_smallint_AS_money' c_smallint_AS_bigint' c_tinyint_AS_smallint' c_tinyint_AS_numeric' c_tinyint_AS_float' c_tinyint_AS_smallmoney' c_smalldatetime_AS_datetime' c_char_AS_nchar' c_bigint_AS_decimal
Long Parameter List,ArubaBinding,AllTypes,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateAllTypes,The method has 24 parameters. Parameters: c1_int' c2_int' c3_smallint' c4_tinyint' c5_bit' c6_datetime' c7_smalldatetime' c8_decimal_28_4_' c9_numeric_28_4_' c10_real' c11_float' c12_money' c13_smallmoney' c14_varchar_512_' c15_char_512_' c16_text' c17_binary_512_' c18_varbinary_512_' c19_image' c20_nvarchar_512_' c21_nchar_512_' c22_ntext' c23_uniqueidentifier' c24_bigint
Long Parameter List,ArubaBinding,AllTypesComplexType,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateAllTypesComplexType,The method has 23 parameters. Parameters: c1_int' c2_smallint' c3_tinyint' c4_bit' c5_datetime' c6_smalldatetime' c7_decimal_28_4_' c8_numeric_28_4_' c9_real' c10_float' c11_money' c12_smallmoney' c13_varchar_512_' c14_char_512_' c15_text' c16_binary_512_' c17_varbinary_512_' c18_image' c19_nvarchar_512_' c20_nchar_512_' c21_ntext' c22_uniqueidentifier' c23_bigint
Long Parameter List,ArubaBinding,Student,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateStudent,The method has 5 parameters. Parameters: ID' firstName' lastName' middleName' major
Long Parameter List,ArubaBinding,Office,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateOffice,The method has 7 parameters. Parameters: ID' officeNumber' floorNumber' buildingName' city' state' isWindowOffice
Long Parameter List,ArubaBinding,GradStudent,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateGradStudent,The method has 5 parameters. Parameters: ID' firstName' lastName' middleName' major
Long Parameter List,ArubaBinding,DeepTree_E,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_E,The method has 5 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int
Long Parameter List,ArubaBinding,DeepTree_F,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_F,The method has 6 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int
Long Parameter List,ArubaBinding,DeepTree_G,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_G,The method has 7 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int
Long Parameter List,ArubaBinding,DeepTree_H,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_H,The method has 8 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int
Long Parameter List,ArubaBinding,DeepTree_I,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_I,The method has 9 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int
Long Parameter List,ArubaBinding,DeepTree_J,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_J,The method has 10 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int
Long Parameter List,ArubaBinding,DeepTree_K,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_K,The method has 11 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int
Long Parameter List,ArubaBinding,DeepTree_L,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_L,The method has 12 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int
Long Parameter List,ArubaBinding,DeepTree_M,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_M,The method has 13 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int' m_Int
Long Parameter List,ArubaBinding,DeepTree_N,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,CreateDeepTree_N,The method has 14 parameters. Parameters: ID' b_Int' c_Int' d_Int' e_Int' f_Int' g_Int' h_Int' i_Int' j_Int' k_Int' l_Int' m_Int' n_Int
Long Parameter List,northwindBinding,Order_Details,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,CreateOrder_Details,The method has 5 parameters. Parameters: orderID' productID' unitPrice' quantity' discount
Long Parameter List,northwindBinding,Invoices,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,CreateInvoices,The method has 9 parameters. Parameters: customerName' salesperson' orderID' shipperName' productID' productName' unitPrice' quantity' discount
Long Parameter List,northwindBinding,Order_Details_Extended,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,CreateOrder_Details_Extended,The method has 6 parameters. Parameters: orderID' productID' productName' unitPrice' quantity' discount
Long Identifier,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ApplyParametersFromCommandLine,The length of the parameter ignoreUnexpectedElementsAndAttributes is 37.
Long Identifier,Microsoft.OData.Client.Design.T4,Configuration,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,,The length of the parameter IgnoreUnexpectedElementsAndAttributes is 37.
Long Identifier,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,,The length of the parameter elementTypeToNavigationSourceMap is 32.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveTypeFromName,The length of the parameter namespaceToPrefixedNamespacePairs is 33.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveNameFromType,The length of the parameter namespaceToPrefixedNamespacePairs is 33.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the parameter allowPropertyNameSameWithTypeName is 33.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the parameter hasPropertyNameSameWithCustomizedPropertyName is 45.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the parameter returnTypeNameWithSingleSuffix is 30.
Long Identifier,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsErrorResponse,The length of the parameter checkForDataServiceExceptionType is 32.
Long Identifier,AstoriaUnitTests,ResourceUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,,The length of the parameter SystemDataServicesClientBaseName is 32.
Long Identifier,AstoriaUnitTests,ResourceUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,,The length of the parameter SystemDataServicesDesignBaseName is 32.
Long Identifier,AstoriaUnitTests,ResourceUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,,The length of the parameter MicrosoftDataSpatialResourceManager is 35.
Long Identifier,AstoriaUnitTests,ResourceUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,,The length of the parameter SystemDataServicesResourceManager is 33.
Long Identifier,AstoriaUnitTests,ResourceUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,,The length of the parameter SystemDataServicesClientResourceManager is 39.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The length of the parameter expectBadRequestBecauseMisinterpretedUri is 40.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The length of the parameter resourceContainerNamesWithoutProperty is 37.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,VerifyInsertResponse,The length of the parameter addAndUpdateResponsePreference is 30.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,VerifyUpdateResponse,The length of the parameter addAndUpdateResponsePreference is 30.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the parameter customerChangeInterceptorInvokeCount is 36.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the parameter customerQueryInterceptorInvokeCount is 35.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the parameter orderChangeInterceptorInvokeCount is 33.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the parameter orderQueryInterceptorInvokeCount is 32.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the parameter customerChangeInterceptorInvokeCount is 36.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the parameter customerQueryInterceptorInvokeCount is 35.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the parameter orderChangeInterceptorInvokeCount is 33.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the parameter orderQueryInterceptorInvokeCount is 32.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The length of the parameter customerChangeInterceptorInvokeCount is 36.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The length of the parameter customerQueryInterceptorInvokeCount is 35.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The length of the parameter orderChangeInterceptorInvokeCount is 33.
Long Identifier,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The length of the parameter orderQueryInterceptorInvokeCount is 32.
Long Identifier,AstoriaUnitTests,TestCaseInfo,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,,The length of the parameter ExpectedCustomerQueryInterceptorCalls is 37.
Long Identifier,AstoriaUnitTests,TestCaseInfo,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,,The length of the parameter ExpectedOrderQueryInterceptorCalls is 34.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter CustomerChangeInterceptorOverride is 33.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter CustomerQueryInterceptorOverride is 32.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter OrderChangeInterceptorOverride is 30.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter WorkerChangeInterceptorOverride is 31.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter WorkerQueryInterceptorOverride is 30.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter OfficeChangeInterceptorOverride is 31.
Long Identifier,AstoriaUnitTests,CustomObjectService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,,The length of the parameter OfficeQueryInterceptorOverride is 30.
Long Identifier,ArubaClient,AllTypesComplexEntity,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,,The length of the parameter _MemberAllTypesComplexInitialized is 33.
Long Identifier,ArubaClient,NonDefaultFacets,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,,The length of the parameter _c_varbinary60_AS_varbinary512 is 30.
Long Identifier,ArubaClient,NonDefaultFacets,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientModel.cs,,The length of the parameter _c_varbinary31_AS_varbinary365 is 30.
Long Identifier,northwindClient,northwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,AddToCustomer_and_Suppliers_by_City,The length of the parameter customer_and_Suppliers_by_City is 30.
Long Identifier,northwindClient,northwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,,The length of the parameter _Alphabetical_list_of_products is 30.
Long Identifier,northwindClient,northwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,,The length of the parameter _Customer_and_Suppliers_by_City is 31.
Long Identifier,northwindClient,Customer_and_Suppliers_by_City,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindClientModel.cs,CreateCustomer_and_Suppliers_by_City,The length of the parameter customer_and_Suppliers_by_City is 30.
Long Identifier,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the parameter c46_uniqueidentifierPParameter is 30.
Long Identifier,Aruba,AllTypesComplexEntity,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,,The length of the parameter _MemberAllTypesComplexInitialized is 33.
Long Identifier,Aruba,NonDefaultFacets,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,,The length of the parameter _c_varbinary60_AS_varbinary512 is 30.
Long Identifier,Aruba,NonDefaultFacets,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,,The length of the parameter _c_varbinary31_AS_varbinary365 is 30.
Long Identifier,northwind,northwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,AddToCustomer_and_Suppliers_by_City,The length of the parameter customer_and_Suppliers_by_City is 30.
Long Identifier,northwind,northwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,,The length of the parameter _Alphabetical_list_of_products is 30.
Long Identifier,northwind,northwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,,The length of the parameter _Customer_and_Suppliers_by_City is 31.
Long Identifier,northwind,Customer_and_Suppliers_by_City,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Northwind.Edm.ObjectLayer.cs,CreateCustomer_and_Suppliers_by_City,The length of the parameter customer_and_Suppliers_by_City is 30.
Long Identifier,ArubaBinding,AllTypesComplexEntity,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,,The length of the parameter _MemberAllTypesComplexInitialized is 33.
Long Identifier,ArubaBinding,NonDefaultFacets,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,,The length of the parameter _c_varbinary60_AS_varbinary512 is 30.
Long Identifier,ArubaBinding,NonDefaultFacets,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\ArubaClientBinding.cs,,The length of the parameter _c_varbinary31_AS_varbinary365 is 30.
Long Identifier,northwindBinding,NorthwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,AddToCustomer_and_Suppliers_by_City,The length of the parameter customer_and_Suppliers_by_City is 30.
Long Identifier,northwindBinding,NorthwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,,The length of the parameter _Alphabetical_list_of_products is 30.
Long Identifier,northwindBinding,NorthwindContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,,The length of the parameter _Customer_and_Suppliers_by_City is 31.
Long Identifier,northwindBinding,Customer_and_Suppliers_by_City,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\NorthwindBindingModel.cs,CreateCustomer_and_Suppliers_by_City,The length of the parameter customer_and_Suppliers_by_City is 30.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "Permission is hereby granted' free of charge' to any person obtaining a copy of this software and associated documentation files (the "Software")' to deal in the Software without restriction' including without limitation the rights to use' copy' modify' merge' publish' distribute' sublicense' and/or sell copies of the Software' and to permit persons to whom the Software is furnished to do so' subject to the following conditions: " is 432.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. " is 126.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "THE SOFTWARE IS PROVIDED *AS IS*' WITHOUT WARRANTY OF ANY KIND' EXPRESS OR IMPLIED' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM' DAMAGES OR OTHER LIABILITY' WHETHER IN AN ACTION OF CONTRACT' TORT OR OTHERWISE' ARISING FROM' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. " is 460.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,TransformText,The length of the statement  "            throw new NotSupportedException(string.Format("Code gen for the target language '{0}' is not supported."' this.TargetLanguage.ToString())); " is 139.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetUseDataServiceCollectionFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the UseDataServiceCollection parameter because it is not a valid boolean value."' stringValue)); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetTargetLanguageFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the TargetLanguage parameter because it is not a valid LanguageOption. The supported LanguageOptions are \"CSharp\" and \"VB\"."' stringValue)); " is 227.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetEnableNamingAliasFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the EnableNamingAlias parameter because it is not a valid boolean value."' stringValue)); " is 172.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ValidateAndSetIgnoreUnexpectedElementsAndAttributesFromString,The length of the statement  "        throw new ArgumentException(string.Format("The value \"{0}\" cannot be assigned to the IgnoreUnexpectedElementsAndAttributes parameter because it is not a valid boolean value."' stringValue)); " is 192.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGenerator,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,ApplyParametersFromCommandLine,The length of the statement  "    string ignoreUnexpectedElementsAndAttributes = this.Host.ResolveParameterValue("notempty"' "notempty"' "IgnoreUnexpectedElementsAndAttributes"); " is 144.
Long Statement,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPrefixedFullName,The length of the statement  "        return this.GetPrefixedNamespace(schemaElement.Namespace' template' true' needGlobalPrefix) + "." + schemaElementFixedName; " is 123.
Long Statement,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetEdmxStreamFromUri,The length of the statement  "                    throw new WebException("Failed to access the metadata document. The OData service requires authentication for accessing it. Please download the metadata' store it into a local file' and set the value of “MetadataDocumentUri” in the .odata.config file to the file path. After that' run custom tool again to generate the OData Client code."); " is 340.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "        Dictionary<IEdmStructuredType' List<IEdmOperation>> boundOperationsMap = new Dictionary<IEdmStructuredType' List<IEdmOperation>>(); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "        Dictionary<IEdmStructuredType' List<IEdmStructuredType>> structuredBaseTypeMap = new Dictionary<IEdmStructuredType' List<IEdmStructuredType>>(); " is 144.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                        keyDictionaryItems.Add(string.Format(this.DictionaryItemConstructor' "\"" + key.Name + "\""' this.GetFixedName(keyName))); " is 122.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    this.GetParameterStrings(function.IsBound' false' function.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 198.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' sourceTypeName); " is 168.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            this.WriteBoundFunctionReturnCollectionResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' parameterString' function.Namespace' parameterValues' function.IsComposable' useEntityReference); " is 220.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            this.WriteBoundFunctionReturnSingleResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' function.Namespace' parameterValues' function.IsComposable' function.ReturnType.IsEntity()' useEntityReference); " is 280.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' GetSourceOrReturnTypeName(derivedTypeReference)); " is 201.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                                    this.WriteBoundFunctionReturnCollectionResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' parameterString' function.Namespace' parameterValues' function.IsComposable' useEntityReference); " is 220.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                                    this.WriteBoundFunctionReturnSingleResultAsExtension(fixedFunctionName' function.Name' sourceTypeName' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' function.Namespace' parameterValues' function.IsComposable' function.ReturnType.IsEntity()' useEntityReference); " is 280.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    this.GetParameterStrings(action.IsBound' true' action.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 193.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                    sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' sourceTypeName); " is 168.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                        this.WriteBoundActionAsExtension(fixedActionName' action.Name' sourceTypeName' returnTypeName' parameterString' action.Namespace' parameterValues); " is 147.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                            sourceTypeName = string.Format(edmTypeReference.IsCollection() ? this.DataServiceQueryStructureTemplate : this.DataServiceQuerySingleStructureTemplate' GetSourceOrReturnTypeName(derivedTypeReference)); " is 201.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteNamespace,The length of the statement  "                                this.WriteBoundActionAsExtension(fixedActionName' action.Name' sourceTypeName' returnTypeName' parameterString' action.Namespace' parameterValues); " is 147.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WritePropertyRootNamespace(GetFixedName(camelCaseContainerName)' this.context.GetPrefixedNamespace(fullNamespace' this' false' false)); " is 140.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteContextEntitySetProperty(camelCaseEntitySetName' GetFixedName(camelCaseEntitySetName)' entitySet.Name' GetFixedName(entitySetElementTypeName)); " is 153.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteContextAddToEntitySetMethod(camelCaseEntitySetName' entitySet.Name' GetFixedName(entitySetElementTypeName)' parameterName); " is 133.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteContextSingletonProperty(camelCaseSingletonName' GetFixedName(camelCaseSingletonName)' singleton.Name' singletonElementTypeName + "Single"); " is 150.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.GetParameterStrings(false' false' functionImport.Function.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 202.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "                this.WriteFunctionImportReturnCollectionResult(this.GetFixedName(functionImportName)' functionImport.Name' returnTypeName' parameterString' parameterValues' functionImport.Function.IsComposable' useEntityReference); " is 215.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "                this.WriteFunctionImportReturnSingleResult(this.GetFixedName(functionImportName)' functionImport.Name' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' parameterValues' functionImport.Function.IsComposable' functionImport.Function.ReturnType.IsEntity()' useEntityReference); " is 290.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.GetParameterStrings(false' true' actionImport.Action.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 197.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityContainer,The length of the statement  "            this.WriteActionImport(this.GetFixedName(actionImportName)' actionImport.Name' returnTypeName' parameterString' parameterValues); " is 129.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveTypeFromName,The length of the statement  "        IEnumerable<KeyValuePair<string' string>> namespaceToPrefixedNamespacePairs = this.context.NamespaceMap.OrderByDescending(p => p.Key.Length).ThenBy(p => p.Key); " is 160.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteResolveNameFromType,The length of the statement  "        IEnumerable<KeyValuePair<string' string>> namespaceToPrefixedNamespacePairs = this.context.NamespaceMap.OrderByDescending(p => p.Value.Length).ThenBy(p => p.Key); " is 162.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,The length of the statement  "            Customization.CustomizeNaming(((IEdmSchemaElement)entityType).Name) : ((IEdmSchemaElement)entityType).Name) + this.SingleSuffix; " is 128.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,The length of the statement  "        this.WriteConstructorForSingleType(GetFixedName(singleTypeName)' string.Format(this.DataServiceQuerySingleStructureTemplate' GetFixedName(entityTypeName))); " is 156.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEntityType,The length of the statement  "        this.WriteSummaryCommentForStructuredType(this.context.EnableNamingAlias ? Customization.CustomizeNaming(entityType.Name) : entityType.Name); " is 141.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteComplexType,The length of the statement  "        this.WriteSummaryCommentForStructuredType(this.context.EnableNamingAlias ? Customization.CustomizeNaming(complexType.Name) : complexType.Name); " is 143.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                this.GetParameterStrings(function.IsBound' false' function.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 198.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                    this.WriteBoundFunctionInEntityTypeReturnCollectionResult(hideBaseMethod' GetFixedName(functionName)' function.Name' returnTypeName' parameterString' function.Namespace' parameterValues' function.IsComposable' useEntityReference); " is 230.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                    this.WriteBoundFunctionInEntityTypeReturnSingleResult(hideBaseMethod' GetFixedName(functionName)' function.Name' returnTypeName' returnTypeNameWithSingleSuffix' parameterString' function.Namespace' parameterValues' function.IsComposable' function.ReturnType.IsEntity()' useEntityReference); " is 290.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                this.GetParameterStrings(action.IsBound' true' action.Parameters.ToArray()' out parameterString' out parameterTypes' out parameterExpressionString' out parameterValues' out useEntityReference); " is 193.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundOperations,The length of the statement  "                this.WriteBoundActionInEntityType(hideBaseMethod' GetFixedName(actionName)' action.Name' returnTypeName' parameterString' action.Namespace' parameterValues); " is 157.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEnumType,The length of the statement  "        this.WriteSummaryCommentForEnumType(this.context.EnableNamingAlias ? Customization.CustomizeNaming(enumType.Name) : enumType.Name); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteEnumType,The length of the statement  "        this.WriteEnumDeclaration(this.context.EnableNamingAlias ? GetFixedName(Customization.CustomizeNaming(enumType.Name)) : GetFixedName(enumType.Name)' enumType.Name' underlyingType); " is 180.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStructurdTypeDeclaration,The length of the statement  "                string baseTypeFixedName = this.context.EnableNamingAlias ? GetFixedName(Customization.CustomizeNaming(baseType.Name)) : GetFixedName(baseType.Name); " is 149.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStructurdTypeDeclaration,The length of the statement  "                baseTypeName = ((IEdmSchemaElement)structuredType).Namespace == baseType.Namespace ? baseTypeFixedName : this.context.GetPrefixedFullName(baseType' baseTypeFixedName' this); " is 173.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStructurdTypeDeclaration,The length of the statement  "        this.WriteClassStartForStructuredType(abstractModifier' GetFixedName(structuredTypeName + typeNameSuffix)' ((IEdmSchemaElement)structuredType).Name + typeNameSuffix' baseTypeName); " is 180.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetSourceOrReturnTypeName,The length of the statement  "        return Utils.GetClrTypeName(typeReference' this.context.UseDataServiceCollection' this' this.context' addNullableTemplate' isEntitySingleType:isEntitySingleType); " is 162.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,The length of the statement  "            string typeName = Utils.GetClrTypeName(param.Type' this.context.UseDataServiceCollection' this' this.context' true' true' true); " is 128.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetParameterStrings,The length of the statement  "                parameterValues += string.Format(this.UriEntityOperationParameterConstructor' param.Name' GetFixedName(param.Name)'"useEntityReference"); " is 137.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "        Func<string' string> customizePropertyName = (name) => { return this.context.EnableNamingAlias ? Customization.CustomizeNaming(name) : name; }; " is 143.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "            .GroupBy(p => isLanguageCaseSensitive ? customizePropertyName(p.Name) : customizePropertyName(p.Name).ToUpperInvariant()); " is 122.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "        // If the group contains more than one property' or the property in the group has the same name with the type (only for C#)' we need to rename the property " is 155.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The length of the statement  "        var propertyToBeRenamedGroups = propertyGroups.Where(g => g.Count() > 1 || !allowPropertyNameSameWithTypeName && g.Key == typeName); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "        Func<IEdmProperty' bool> hasDefault = p => p.PropertyKind == EdmPropertyKind.Structural && ((IEdmStructuralProperty)p).DefaultValueString != null; " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "                IdentifierMappings[propertyName] : (this.context.EnableNamingAlias ? Customization.CustomizeNaming(propertyName) : propertyName); " is 129.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "            // The static create method only sets non-nullable properties. We should add the null check if the type of the property is not a clr ValueType. " is 143.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "            // For now we add the null check if the property type is non-primitive. We should add the null check for non-ValueType primitives in the future. " is 144.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteTypeStaticCreateMethod,The length of the statement  "                IdentifierMappings[property.Name] : (this.context.EnableNamingAlias ? Customization.CustomizeNaming(property.Name) : property.Name); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStaticCreateMethodParameters,The length of the statement  "            string parameterType = Utils.GetClrTypeName(propertyToParameterPair.Key.Type' this.context.UseDataServiceCollection' this' this.context); " is 137.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertiesForStructuredType,The length of the statement  "                IdentifierMappings[property.Name] : (this.context.EnableNamingAlias ? Customization.CustomizeNaming(property.Name) : property.Name); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertiesForStructuredType,The length of the statement  "                    PropertyInitializationValue = Utils.GetPropertyInitializationValue(property' useDataServiceCollection' this' this.context) " is 122.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertiesForStructuredType,The length of the statement  "        UniqueIdentifierService uniqueIdentifierService = new UniqueIdentifierService(propertyInfos.Select(_ => _.FixedPropertyName)' " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,TemplateBase,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,Write,The length of the statement  "        textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "            if (edmTypeReference.IsNullable && !clientTemplate.ClrReferenceTypes.Contains(edmPrimitiveType.PrimitiveKind) && addNullableTemplate) " is 133.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                    context.EnableNamingAlias ? clientTemplate.GetFixedName(Customization.CustomizeNaming(edmComplexType.Name)) : clientTemplate.GetFixedName(edmComplexType.Name)' clientTemplate); " is 176.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                        context.EnableNamingAlias ? clientTemplate.GetFixedName(Customization.CustomizeNaming(edmEnumType.Name)) : clientTemplate.GetFixedName(edmEnumType.Name)' clientTemplate' needGlobalPrefix); " is 188.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                                ? clientTemplate.GetFixedName(Customization.CustomizeNaming(edmEntityType.Name) + (isEntitySingleType ? clientTemplate.SingleSuffix : string.Empty)) " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetClrTypeName,The length of the statement  "                                context.EnableNamingAlias ? clientTemplate.GetFixedName(Customization.CustomizeNaming(schemaElement.Name)) : clientTemplate.GetFixedName(schemaElement.Name)' clientTemplate); " is 174.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                        string enumTypeName = GetClrTypeName(edmTypeReference' useDataServiceCollection' clientTemplate' context' false' false); " is 120.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                            var customizedEnumValue = context.EnableNamingAlias ? Customization.CustomizeNaming(currentEnumValue) : currentEnumValue; " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                                currentEnumValue = "(" + fullenumTypeName + ")" + clientTemplate.EnumTypeName + ".Parse(" + clientTemplate.SystemTypeTypeName + ".GetType(\"" + enumTypeName + "\")' \"" + customizedEnumValue  + "\")"; " is 200.
Long Statement,Microsoft.OData.Client.Design.T4,Utils,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetPropertyInitializationValue,The length of the statement  "                                currentEnumValue = clientTemplate.EnumTypeName + ".Parse(" + clientTemplate.SystemTypeTypeName + ".GetType(\"" + enumTypeName + "\")' \"" + currentEnumValue  + "\")"; " is 166.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFileHeader,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString(global::System.Globalization.CultureInfo.CurrentCulture))); " is 132.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteMethodStartForResolveNameFromType,The length of the statement  "this.Write(@"            global::Microsoft.OData.Client.OriginalNameAttribute originalNameAttribute = (global::Microsoft.OData.Client.OriginalNameAttribute)global::System.Linq.Enumerable.SingleOrDefault(global::Microsoft.OData.Client.Utility.GetCustomAttributes(clientType' typeof(global::Microsoft.OData.Client.OriginalNameAttribute)' true)); " is 343.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalEntitySetName + "\"" : "GetPath(\"" + originalEntitySetName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalSingletonName + "\"" : "GetPath(\"" + originalSingletonName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(this.context.IgnoreUnexpectedElementsAndAttributes ? "true" : "false")); " is 123.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WritePropertyForStructuredType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(propertyInitializationValue != null ? " = " + propertyInitializationValue : string.Empty)); " is 142.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "new " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "new " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = false" : string.Empty)); " is 125.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "new " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' bool useEntityReference = true" : string.Empty)); " is 124.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFileHeader,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString(System.Globalization.CultureInfo.CurrentCulture))); " is 124.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteMethodStartForResolveNameFromType,The length of the statement  "                CType(Global.System.Linq.Enumerable.SingleOrDefault(Global.Microsoft.OData.Client.Utility.GetCustomAttributes(clientType' GetType(Global.Microsoft.OData.Client.OriginalNameAttribute)' true))' Global.Microsoft.OData.Client.OriginalNameAttribute) " is 244.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteMethodEndForResolveNameFromType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(modelHasInheritance ? "clientType.FullName.Substring(ROOTNAMESPACE.Length)" : "Nothing")); " is 141.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteConstructorForSingleType,The length of the statement  "        Public Sub New(ByVal context As Global.Microsoft.OData.Client.DataServiceContext' ByVal path As String' ByVal isComposable As Boolean) " is 134.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextEntitySetProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalEntitySetName + "\"" : "GetPath(\"" + originalEntitySetName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteContextSingletonProperty,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(inContext ? "\"" + originalSingletonName + "\"" : "GetPath(\"" + originalSingletonName + "\")")); " is 148.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(Utils.SerializeToString(reference.Value).Replace("\""' "\"\"").Replace("\r\n"' "\" & _\r\n \""))); " is 149.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteINotifyPropertyChangedImplementation,The length of the statement  "        Public Event PropertyChanged As Global.System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged " is 167.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "New " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteFunctionImportReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnCollectionResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "New " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionInEntityTypeReturnSingleResult,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteActionImport,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionInEntityType,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? returnTypeNameWithSingleSuffix : string.Format(this.DataServiceQuerySingleStructureTemplate' returnTypeName))); " is 179.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(isReturnEntity ? "New " + returnTypeNameWithSingleSuffix + "(" : string.Empty)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnSingleResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(useEntityReference ? "' Optional ByVal useEntityReference As Boolean = False" : string.Empty)); " is 146.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundFunctionReturnCollectionResultAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameters) ? string.Empty : "' " + parameters)); " is 121.
Long Statement,Microsoft.OData.Client.Design.T4,ODataClientVBTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteBoundActionAsExtension,The length of the statement  "this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(parameterValues) ? string.Empty : "' " + parameterValues)); " is 131.
Long Statement,Microsoft.OData.Client.Design.T4,ODataT4CodeGeneratorBase,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetReadStream,The length of the statement  "            return this.GetReadStreamInternal(entity' null /*null for default stream*/' etag' checkETagForEquality' operationContext); " is 122.
Long Statement,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetWriteStream,The length of the statement  "            return this.GetWriteStreamInternal(entity' null /*null for default stream*/' etag' checkETagForEquality' operationContext); " is 123.
Long Statement,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The length of the statement  "                    throw new DataServiceException(400' "Since the target media resource has an etag defined' If-Match/If-Not-Match HTTP header must be specified."); " is 145.
Long Statement,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The length of the statement  "                    throw new DataServiceException(412' "If-Match precondition failed for target media resource. Thrown by DSPStreamProvider."); " is 124.
Long Statement,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The length of the statement  "                        throw new DataServiceException(400' "If-None-Match HTTP header cannot be specified for PUT operations. Thrown by DSPStreamProvider."); " is 134.
Long Statement,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The length of the statement  "                        throw new DataServiceException(400' "If-None-Match HTTP header cannot be specified for DELETE operations. Thrown by DSPStreamProvider."); " is 137.
Long Statement,AstoriaUnitTests,TypedCustomStreamProvider2<EntityType>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\TypedCustomStreamProvider2.cs,ApplySlugHeader,The length of the statement  "            PropertyInfo keyProperty = entity.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance).FirstOrDefault(p => IsPropertyKeyProperty(p)); " is 149.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "            IList<EntityDescriptor> entites = (from e in context.Entities where e.State != EntityStates.Unchanged select e).ToArray(); " is 122.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "            IList<StreamDescriptor> streams = context.Entities.SelectMany(e => e.StreamDescriptors).Where(s => s.State != EntityStates.Unchanged).ToArray(); " is 144.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "                            Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginSaveChanges {0} timeout"' options); " is 143.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "                        Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginSaveChanges {0} Asyncallback timeout"' options); " is 152.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "                Assert.AreEqual<int>(response.BatchStatusCode' (int)HttpStatusCode.Accepted' "Expecting 202 as the status code for batch requests"); " is 132.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "                Assert.IsTrue(response.BatchHeaders["Content-Type"].StartsWith("multipart/mixed; boundary=batchresponse_")' "expecting content type to be multipart mixed with a boundary value"); " is 178.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,SaveChanges,The length of the statement  "                        Assert.IsTrue(Object.ReferenceEquals(tor.Entity' entites[entityIndex - 1].Entity)' "For MLE' it must match with the previous request"); " is 135.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            result = UnitTestCodeGen.InvokeMethod(typeof(DataServiceContext)' "Execute"' TypesUri' new Type[] { query.ElementType }' context' query.RequestUri); " is 148.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            IAsyncResult async = (IAsyncResult)UnitTestCodeGen.InvokeMethod(query.GetType()' "BeginExecute"' TypesAsyncCallbackObject' null' query' new object[] { null' null }); " is 165.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                                Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginExecute timeout"); " is 126.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            result = UnitTestCodeGen.InvokeMethod(query.GetType()' "EndExecute"' TypesIAsyncResult' null' query' new object[] { async }); " is 125.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            IAsyncResult async = UnitTestCodeGen.InvokeMethod<DataServiceContext' IAsyncResult>("BeginExecute"' TypesUriAsyncCallbackObject' new Type[] { query.ElementType }' context' query.RequestUri' null' null); " is 202.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                                Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginExecute timeout"); " is 126.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            result = UnitTestCodeGen.InvokeMethod(typeof(DataServiceContext)' "EndExecute"' TypesIAsyncResult' new Type[] { query.ElementType }' context' async); " is 149.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            async = (IAsyncResult)UnitTestCodeGen.InvokeMethod(query.GetType()' "BeginExecute"' TypesAsyncCallbackObject' null' query' new object[] { (AsyncCallback)callback.CallbackMethod' new object[] { query' context } }); " is 213.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            async = UnitTestCodeGen.InvokeMethod<DataServiceContext' IAsyncResult>("BeginExecute"' TypesUriAsyncCallbackObject' new Type[] { query.ElementType }' context' new object[] { query.RequestUri' (AsyncCallback)callback.CallbackMethod' new object[] { query' context } }); " is 267.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                        Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout"); " is 122.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                            Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginExecuteBatch timeout"); " is 131.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ExecuteQuery,The length of the statement  "                        Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout {0}"' LastUriRequest); " is 142.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,CheckArgumentEmpty,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(AstoriaUnitTests.DataServicesClientResourceUtil.GetString("Util_EmptyString"))' "error message should match"); " is 144.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,CheckArgumentException,The length of the statement  "                Assert.AreEqual(ex.Message' new ArgumentException(AstoriaUnitTests.DataServicesClientResourceUtil.GetString(errorMsgId)' paramName).Message); " is 141.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetClientModel,The length of the statement  "            Type clientEdmModelType = typeof(DataServiceContext).Assembly.GetType("Microsoft.OData.Client.DataServiceContext+ClientEdmModelCache"); " is 135.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetClientModel,The length of the statement  "            MethodInfo clientEdmModelDotGetModel = clientEdmModelType.GetMethod("GetModel"' BindingFlags.Static | BindingFlags.NonPublic' null' new Type[] { typeof(ODataProtocolVersion) }' null); " is 183.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetOrCreateEdmType,The length of the statement  "            MethodInfo clientEdmModelDotCreate = clientEdmModelType.GetMethod("GetOrCreateEdmType"' BindingFlags.Instance | BindingFlags.NonPublic' null' new Type[] { typeof(Type) }' null); " is 177.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetOrCreateEdmType,The length of the statement  "            MethodInfo clientEdmModelDotCreate = clientEdmModelType.GetMethod("GetOrCreateEdmType"' BindingFlags.Instance | BindingFlags.NonPublic' null' new Type[] { typeof(Type) }' null); " is 177.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetClientTypeAnnotation,The length of the statement  "            Type clientTypeUtilType = typeof(DataServiceContext).Assembly.GetType("Microsoft.OData.Client.Metadata.ClientTypeUtil"); " is 120.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetClientTypeAnnotation,The length of the statement  "            MethodInfo getAnnotationMethod = clientTypeUtilType.GetMethod("GetClientTypeAnnotation"' BindingFlags.NonPublic | BindingFlags.Static' null' new Type[] { typeof(IEdmModel)' typeof(IEdmType) }' null); " is 199.
Long Statement,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,ForceClientEpmPopulation,The length of the statement  "                PropertyInfo pi = annotation.GetType().GetProperty("HasEntityPropertyMappings"' BindingFlags.Instance | BindingFlags.NonPublic); " is 128.
Long Statement,AstoriaUnitTests,ExecuteCallback,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetResults,The length of the statement  "                    return UnitTestCodeGen.InvokeMethod(query.GetType()' "EndExecute"' TypesIAsyncResult' null' query' new object[] { async }); " is 123.
Long Statement,AstoriaUnitTests,ExecuteCallback,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,GetResults,The length of the statement  "                    return UnitTestCodeGen.InvokeMethod(typeof(DataServiceContext)' "EndExecute"' TypesIAsyncResult' new Type[] { query.ElementType }' context' new object[] { async }); " is 164.
Long Statement,AstoriaUnitTests,TypedCustomDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateResource,The length of the statement  "            // IUpdatable.CreateResource(containerName' fullTypeName) - the API doesn't give enough details to translate fullTypeName back to a type. " is 137.
Long Statement,AstoriaUnitTests,TypedCustomDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,GetValue,The length of the statement  "            PropertyInfo property = targetResource.GetType().GetProperty(propertyName' BindingFlags.Public | BindingFlags.Instance); " is 120.
Long Statement,AstoriaUnitTests,TypedCustomDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,ClearChanges,The length of the statement  "            // Can't fail here as some tests verify negative behavior during batch processing' in which case this method will get called and its failure " is 140.
Long Statement,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsSuccessResponse,The length of the statement  "            Assert.IsTrue(200 <= response.StatusCode && response.StatusCode < 300' String.Format("Expected: {0}' Actual: {1}"' (int)statusCode' response.StatusCode)); " is 154.
Long Statement,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsErrorResponse,The length of the statement  "                Assert.IsTrue(response.Error.GetType() == typeof(Microsoft.OData.Client.DataServiceClientException)' "exception type must be dataservice exception"); " is 149.
Long Statement,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsErrorResponse,The length of the statement  "            Assert.IsTrue(response.StatusCode == (int)statusCode' String.Format("Expected: {0}' Actual: {1}"' (int)statusCode' response.StatusCode)); " is 137.
Long Statement,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateWorkspaceForType,The length of the statement  "                    System.ServiceModel.Description.ServiceEndpoint endpoint = host.AddServiceEndpoint(implementedContract' new System.ServiceModel.WebHttpBinding()' ""); " is 150.
Long Statement,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateWorkspaceForType,The length of the statement  "                               (!isEFBased && property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(IQueryable<>)))) " is 129.
Long Statement,AstoriaUnitTests,ReflectionUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateModuleBuilder,The length of the statement  "            var attributeConstructor = typeof(DebuggableAttribute).GetConstructor(new Type[] { typeof(DebuggableAttribute.DebuggingModes) }); " is 129.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryAruba,The length of the statement  "                            return typeof(ArubaClient.DefectBug).Assembly.GetType("ArubaClient." + typeName.Substring("Aruba.".Length)' true' false); " is 121.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The length of the statement  "                            return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false); " is 129.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The length of the statement  "                            northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f); " is 121.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The length of the statement  "                    Assert.IsTrue(args.RequestMessage.Method == "GET" || args.RequestMessage.Method == "PATCH" || args.RequestMessage.Method == "POST"' "expecting GET or PATCH operation"); " is 168.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The length of the statement  "                        Assert.AreEqual(entityCount' entities.Count' "number of entities enumerated (" + entityCount + ") different than entities stored"); // using AppendOnly " is 151.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The length of the statement  "                Assert.AreEqual(0' resourceContainerNamesWithoutProperty.Count' "not all resourceContainerNames have associated property"); " is 123.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The length of the statement  "                                //Assert.IsFalse(expectFailure' "expected failure for Container: {0}' Type: {1}' Property: {2}"' resourceContainerName' entity.Entity.GetType()' property.Name); " is 160.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The length of the statement  "                                Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginLoadProperty timeout"); " is 131.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The length of the statement  "                            IAsyncResult async = context.BeginLoadProperty(entity' property' callback.CallbackMethod' new object[] { property' context }); " is 126.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The length of the statement  "                            Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout"); " is 122.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The length of the statement  "                            DataServiceRequest request = (DataServiceRequest)UnitTestCodeGen.InvokeConstructor(typeof(DataServiceRequest<>).MakeGenericType(entity.GetType())' DataServiceContextTestUtil.TypesUri' uri); " is 189.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The length of the statement  "                compilerOptions.ReferencedAssemblies.Add(Path.Combine(TestEnvironment.GreenBitsReferenceAssembliesDirectory' "System.dll")); " is 124.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The length of the statement  "                compilerOptions.ReferencedAssemblies.Add(Path.Combine(TestEnvironment.GreenBitsReferenceAssembliesDirectory' "System.Xml.dll")); " is 128.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The length of the statement  "                compilerOptions.ReferencedAssemblies.Add(Path.Combine(TestEnvironment.GreenBitsReferenceAssembliesDirectory' "System.Core.dll")); " is 129.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The length of the statement  "                compilerOptions.ReferencedAssemblies.Add(Environment.ExpandEnvironmentVariables(Path.Combine(Environment.CurrentDirectory' DataFxAssemblyRef.File.DataServicesClient))); " is 168.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The length of the statement  "                compilerOptions.ReferencedAssemblies.Add(Environment.ExpandEnvironmentVariables(Path.Combine(Environment.CurrentDirectory' DataFxAssemblyRef.File.ODataLib))); " is 158.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The length of the statement  "                compilerOptions.ReferencedAssemblies.Add(Environment.ExpandEnvironmentVariables(Path.Combine(Environment.CurrentDirectory' DataFxAssemblyRef.File.EntityDataModel))); " is 165.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,GenerateClientCode,The length of the statement  "                ODataT4CodeGenerator codeGenerator = new ODataT4CodeGenerator { MetadataDocumentUri = metadataUri' TargetLanguage = languageOption' UseDataServiceCollection = useDataServiceCollection}; " is 185.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The length of the statement  "                            if (null != changeset.Error) { throw new Exception(String.Format("failed to save {0} entity: {1}"' asyncResult.AsyncState' changeset.Error.ToString())); } " is 154.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The length of the statement  "                            if (null != changeset.Error) { throw new Exception(String.Format("failed to save {0} link: {1}"' asyncResult.AsyncState' changeset.Error.ToString())); } " is 152.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CUDFailureUsingSaveChangesContinueOnError,The length of the statement  "                        Assert.IsTrue(responses[0].Descriptor.GetType() == typeof(EntityDescriptor)' "expecting entity descriptor in case of insert"); " is 126.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The length of the statement  "                    var result = (QueryOperationResponse<Folder>)ctx.Execute<Folder>(baseUri.OriginalString + "/Folders(101)?$expand=Items"); " is 121.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BlobCtx_SendingRequest,The length of the statement  "                        Assert.AreEqual(requestMessage.HttpWebRequest.Headers["CustomRequestHeader_ItemType"]' typeof(Photo).FullName' "HttpWebRequest should have CustomRequestHeader_ItemType"); " is 170.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BlobCtx_SendingRequest,The length of the statement  "                        Assert.AreEqual(requestMessage.HttpWebRequest.Headers["Slug"]' photoMLE.ID.ToString()' "HttpWebRequest should have Slug header"); " is 129.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BlobCtx_SendingRequest,The length of the statement  "                        Assert.AreEqual(requestMessage.HttpWebRequest.Headers["CustomRequestHeader_ItemType"]' typeof(Item).FullName' "HttpWebRequest should have CustomRequestHeader_ItemType"); " is 169.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,VerifySinglePhoto,The length of the statement  "                Assert.IsNotNull(entityDescriptor.ReadStreamUri' "Photo is MLE so it must have a read stream URI in entity descriptor."); " is 121.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,NamedStreamBasicScenarios,The length of the statement  "                using (Utils.RestoreStaticValueOnDispose(typeof(SimpleDataServiceHelper<TypedCustomDataContext<PhotoEx>>)' "CreateDataSourceCustomizer")) " is 137.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,NamedStreamBasicScenarios,The length of the statement  "                using (Utils.RestoreStaticValueOnDispose(typeof(SimpleDataService<TypedCustomDataContext<PhotoEx>>)' "MaxProtocolVersion")) " is 123.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,NamedStreamBasicScenarios,The length of the statement  "                    Utils.CreateWorkspaceForType(typeof(SimpleDataService<TypedCustomDataContext<PhotoEx>>)' typeof(TypedCustomDataContext<PhotoEx>)' "NamedStreamService"' out workspace' out host' false); " is 184.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,NamedStreamBasicScenarios,The length of the statement  "                        ctx.SetSaveStream(p' "Original"' new MemoryStream(UTF8Encoding.UTF8.GetBytes(requestStreamContent))' true' contentType); " is 120.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BindingTest,The length of the statement  "                    DataServiceCollection<ArubaBinding.Config> configCollection = new DataServiceCollection<ArubaBinding.Config>(ctx.Execute<ArubaBinding.Config>(new Uri("ConfigSet"' UriKind.Relative))); " is 183.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ValidateEntityState,The length of the statement  "                Assert.IsTrue(context.Entities.Count(e => e.Entity == entity && e.State == state) == 1' "Couldn't find entity or its not in the right state"); " is 142.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ValidateLinkState,The length of the statement  "                Assert.IsTrue(context.Links.Count(l => l.Source == source && l.SourceProperty == propertyName && l.Target == target && l.State == state) == 1' "Couldn't find the link or link is not in the right state"); " is 203.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ValidateLinkNotPresent,The length of the statement  "                Assert.IsTrue(context.Links.Count(l => l.Source == source && l.SourceProperty == propertyName && l.Target == target) == 0' "The link should be detached"); " is 154.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 132.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 132.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }' " is 131.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 131.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }' " is 131.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }' " is 125.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 138.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 150.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 145.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }' " is 133.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }' " is 135.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 186.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 167.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 180.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 187.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 201.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }' " is 174.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The length of the statement  "                        new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }' " is 182.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The length of the statement  "                        VerifyInsertResponse(addAndUpdateResponsePreference' ctx.Entities.Single(e => (e.Entity as OpenCustomer).ID == 2).Entity as OpenCustomer); " is 138.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The length of the statement  "                        VerifyUpdateResponse(addAndUpdateResponsePreference' ctx.Entities.Single(e => (e.Entity as OpenCustomer).ID == 1).Entity as OpenCustomer); " is 138.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The length of the statement  "                        VerifyUpdateResponse(addAndUpdateResponsePreference' ctx.Entities.Single(e => (e.Entity as OpenCustomer).ID == 2).Entity as OpenCustomer); " is 138.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"' " is 149.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"' " is 149.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/ads:Concurrency) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/ads:Concurrency)"' " is 194.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/ads:EditTimeStamp) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/ads:EditTimeStamp)"' " is 198.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(1)')]/atom:content/@src)"' " is 201.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 7 or count((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties/*) = 7"' " is 152.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(1)')]/atom:content/@src)"' " is 201.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 7 or count((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties/*) = 7"' " is 152.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"' " is 149.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content[not(count(adsm:properties/*)=3)])"' " is 125.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"' " is 149.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "count(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/*)=7 or count(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/*)=7"' " is 166.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content[not(count(adsm:properties/*)=3)])"' " is 129.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content)"' " is 142.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/adsm:properties)"' " is 145.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/@src)"' " is 147.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/adsm:properties[not(ads:Name)])"' " is 173.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/adsm:properties[count(*) != 1])"' " is 173.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"' " is 207.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"' " is 205.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"' " is 231.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"' " is 233.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Customers')] and contains(@adsm:etag' 'W/\"')]) = count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Customers')]])"' " is 191.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            "count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Orders')] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Orders')]])" " is 171.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            CustomObjectService.CustomerQueryInterceptorOverride = () => { customerQueryInterceptorInvokeCount++; return c => true; }; " is 122.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The length of the statement  "                            XmlDocument atomResponse = Utils.ProcessWebRequestAsAtom(new Uri(baseUri.OriginalString + queryString' UriKind.Absolute)' out responseHeaders); " is 143.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})' " is 245.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})' " is 245.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})' " is 200.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})' " is 200.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }' " is 208.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }' " is 194.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"' " is 168.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser. " is 181.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                            Assert.IsTrue(e.RequestMessage != null && e.RequestMessage is HttpWebRequestMessage' "RequestMessage must be ODataRequestMessage"); " is 131.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                            Assert.IsNotNull(((HttpWebRequestMessage)e.RequestMessage).HttpWebRequest != null' "HttpWebRequest should not be null"); " is 120.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The length of the statement  "                        CustomObjectService.CustomerQueryInterceptorOverride = () => { customerQueryInterceptorInvokeCount++; return c => true; }; " is 122.
Long Statement,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The length of the statement  "                    CustomObjectService.CustomerQueryInterceptorOverride = () => { customerQueryInterceptorInvokeCount++; return c => true; }; " is 122.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryFailureUsingExecuteBatch,The length of the statement  "                DataServiceRequest<northwindClient.Customers> request = new DataServiceRequest<northwindClient.Customers>(new Uri(ctx.BaseUri.OriginalString + "/Customers('QUICK')")); " is 167.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryFailureUsingExecuteBatch,The length of the statement  "                DataServiceRequest<northwindClient.Customers> request1 = new DataServiceRequest<northwindClient.Customers>(new Uri(ctx.BaseUri.OriginalString + "/Customers('NONEXIST')")); " is 171.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryExpandStronglyTypedProperties,The length of the statement  "                    ctx.Execute<northwindClient.Products>(new Uri(baseUri.OriginalString + "/Products?$top=1")).Single<northwindClient.Products>(); " is 127.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryExpandStronglyTypedProperties,The length of the statement  "                                Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginLoadProperty timeout"); " is 131.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryExpandStronglyTypedProperties,The length of the statement  "                    northwindClient.Categories category = ((QueryOperationResponse<northwindClient.Categories>)getResponse(product' "Categories")).Single(); " is 136.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryExpandStronglyTypedProperties,The length of the statement  "                    QueryOperationResponse<northwindClient.Order_Details> orderDetails = (QueryOperationResponse<northwindClient.Order_Details>)getResponse(product' "Order_Details"); " is 162.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryServiceOpTests,The length of the statement  "                    new { uri = "/GetCustomerById?customerId='QUICK'"' xpath = "/atom:entry/atom:category"' method="GET"' mime="application/atom+xml" }' " is 132.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryServiceOpTests,The length of the statement  "                    new { uri = "/GetCustomersEnumerable"' xpath="/atom:feed[count(atom:entry)=5]"' method="GET"' mime="application/atom+xml" }' " is 124.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryServiceOpTests,The length of the statement  "                    new { uri = "/GetAllCustomers('ANATR')"' xpath="/atom:entry/atom:category"' method="GET"' mime="application/atom+xml" }' " is 120.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryServiceOpTests,The length of the statement  "                    new { uri = "/GetCustomerNamesEnumerable"' xpath="/adsm:value[count(adsm:element)=5]"' method="GET"' mime="application/xml" }' " is 126.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryServiceOpTests,The length of the statement  "                    new { uri = "/GetCustomersByIdPOST?customerId='QUICK'"' xpath="/atom:feed[count(atom:entry)=1]"' method="POST"' mime="application/atom+xml" }' " is 142.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountBatchRequest,The length of the statement  "                        (DataServiceRequest)(from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount() select c).Take(1)' " is 125.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountBatchRequest,The length of the statement  "                        (DataServiceRequest)(from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().Where(c=>c.ContactTitle=="Owner") select c).Take(1)' " is 159.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountBatchRequest,The length of the statement  "                        (DataServiceRequest)(from c in ctx.CreateQuery<northwindClient.Orders>("Orders").IncludeTotalCount().Expand("Order_Details") select c).Take(1)' " is 143.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountBatchRequest,The length of the statement  "                        (DataServiceRequest)(ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().Where(c=>c.CustomerID=="QUICK").SelectMany(c => c.Orders)).Take(1) " is 163.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountInlineAndValue,The length of the statement  "                DataServiceQuery<northwindClient.Customers> q = (DataServiceQuery<northwindClient.Customers>)(from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount() " is 179.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountAsync,The length of the statement  "                            QueryOperationResponse<northwindClient.Customers> qor = (QueryOperationResponse<northwindClient.Customers>)q.EndExecute(ar); " is 124.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountNotFoundException,The length of the statement  "                string resourceNotFoundCustomerMsg = DataServicesResourceUtil.GetString("RequestUriProcessor_ResourceNotFound"' "Customer"); " is 124.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountNotFoundException,The length of the statement  "                        QueryOperationResponse<northwindClient.Customers> qor = (QueryOperationResponse<northwindClient.Customers>)inlineQuery.Execute(); " is 129.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountNotFoundException,The length of the statement  "                        QueryOperationResponse<northwindClient.Customers> qor = (QueryOperationResponse<northwindClient.Customers>)ctx.Execute<northwindClient.Customers>("/VAR1?$count=true"); " is 167.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountNotFoundException,The length of the statement  "                            QueryOperationResponse<northwindClient.Customers> qor = (QueryOperationResponse<northwindClient.Customers>)inlineQuery.EndExecute(ar); " is 134.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountCustomRequest,The length of the statement  "                    QueryOperationResponse<northwindClient.Customers> qor = (QueryOperationResponse<northwindClient.Customers>)responses[i]; " is 120.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The length of the statement  "                        (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").Expand("Orders").IncludeTotalCount() select c).Take(1)' " is 122.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The length of the statement  "                        (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().OrderBy( cc=>cc.ContactTitle).Skip(2).Take(1) select c)' " is 143.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The length of the statement  "                        (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().Where(cc=>cc.ContactTitle.Equals("owner")).Take(1) select c)' " is 148.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The length of the statement  "                        (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().Expand("Orders").Where(cc=>cc.ContactTitle.Equals("owner")).Take(1) select c)' " is 165.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,ServerDrivenPagingBasic,The length of the statement  "                    var querycountpairs = new[] { new { query = "/Customers?$top=20&$skip=1"' count = 1' result = "/Customers?$top=10&$skiptoken='BSBEV'"' idcount = 10 }' " is 150.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,ServerDrivenPagingBasic,The length of the statement  "                            Assert.AreEqual(querycount.count' list.Count' "Expected number of next elements did not match the actual number of next elements"); " is 131.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,ServerDrivenPagingExpand,The length of the statement  "                    var querycountpairs = new[] { new { query = "/Employees?$expand=Orders($expand=Customers)'Territories&$orderby=EmployeeID add 1"' count = 1 }' " is 142.
Long Statement,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,ServerDrivenPagingExpand,The length of the statement  "                            Assert.AreEqual(querycount.count' list.Count' "Expected number of next elements did not match the actual number of next elements"); " is 131.
Long Statement,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,GetPropertyValue,The length of the statement  "            Assert.IsTrue(resourceProperty.CanReflectOnInstanceTypeProperty == false' "We should never call GetPropertyValue on reflectable properties"); " is 141.
Long Statement,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,GetResourceType,The length of the statement  "            return this.rts.Single(rt => rt.FullName == (string)(typeof(T).GetProperty(InstancePropertyName).GetValue(target' new object[0]))); " is 131.
Long Statement,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,AddResourceTypeProperties,The length of the statement  "                if (typeof(IDictionary<string' object>).IsAssignableFrom(pi.PropertyType) && rt.ResourceTypeKind == ResourceTypeKind.EntityType) " is 128.
Long Statement,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,AddResourceTypeProperties,The length of the statement  "                if (elementType != null && pi.PropertyType.IsGenericType && pi.PropertyType.GetGenericTypeDefinition() == typeof(List<>)) " is 121.
Long Statement,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,GetPropertyValue,The length of the statement  "            PropertyInfo property = targetResource.GetType().GetProperty(propertyName' BindingFlags.Public | BindingFlags.Instance); " is 120.
Long Statement,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,SetPropertyValue,The length of the statement  "            PropertyInfo property = targetResource.GetType().GetProperty(propertyName' BindingFlags.Public | BindingFlags.Instance); " is 120.
Long Statement,AstoriaUnitTests,OpenTypeQueryProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeQueryProvider.cs,ExecuteInternal,The length of the statement  "            Expression newExpression = OpenTypeToClrConverter.ToClrExpression(expression' this.DataServiceProvider' this.typeNamePropertyName); " is 131.
Long Statement,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertOfType,The length of the statement  "            Expression body = Expression.Equal(Expression.Property(parameter' this.TypeNamePropertyName)' Expression.Constant(targetResourceType.FullName)); " is 144.
Long Statement,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertArithmeticOperator,The length of the statement  "            return Expression.Call(Expression.Constant(this.Evaluator' typeof(IRuntimeEvaluator))' mi' this.Visit(b.Left)' this.Visit(b.Right)); " is 132.
Long Statement,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertCast,The length of the statement  "            PropertyInfo pi = this.TypeNamePropertyName != null ? m.Arguments[0].Type.GetProperty(this.TypeNamePropertyName) : null; " is 120.
Long Statement,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertTypeIs,The length of the statement  "            PropertyInfo pi = this.TypeNamePropertyName != null ? m.Arguments[0].Type.GetProperty(this.TypeNamePropertyName) : null; " is 120.
Long Statement,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertUnaryOperator,The length of the statement  "            return Expression.Call(Expression.Constant(this.Evaluator' typeof(IRuntimeEvaluator))' mi' Expression.Convert(this.Visit(u.Operand)' typeof(object))); " is 150.
Long Statement,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertDateTimeMethod,The length of the statement  "            return Expression.Convert(Expression.Property(Expression.Convert(this.Visit(m.Arguments[0])' typeof(DateTime))' pi)' typeof(object)); " is 133.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetWriteStream,The length of the statement  "                if (operationContext.RequestMethod.Equals("POST"' StringComparison.OrdinalIgnoreCase) && !string.IsNullOrEmpty(operationContext.RequestHeaders["Slug"])) " is 152.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetWriteStream,The length of the statement  "            else if (entity.GetType() == typeof(ClrNamespace.CustomerBlob) || entity.GetType() == typeof(ClrNamespace.CustomerBlobWithBirthday)) " is 132.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetWriteStream,The length of the statement  "                if (operationContext.RequestMethod.Equals("POST"' StringComparison.OrdinalIgnoreCase) && !string.IsNullOrEmpty(operationContext.RequestHeaders["Slug"])) " is 152.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetStreamETag,The length of the statement  "            else if (entity.GetType() == typeof(ClrNamespace.CustomerBlob) || entity.GetType() == typeof(ClrNamespace.CustomerBlobWithBirthday)) " is 132.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetStoragePath,The length of the statement  "            else if (entity.GetType() == typeof(ClrNamespace.CustomerBlob) || entity.GetType() == typeof(ClrNamespace.CustomerBlobWithBirthday)) " is 132.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetContentType,The length of the statement  "            else if (entity.GetType() == typeof(ClrNamespace.CustomerBlob) || entity.GetType() == typeof(ClrNamespace.CustomerBlobWithBirthday)) " is 132.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,ValidateArguments,The length of the statement  "            if (entityType != typeof(Photo) && entityType != typeof(ClrNamespace.CustomerBlob) && entityType != typeof(ClrNamespace.CustomerBlobWithBirthday)) " is 146.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,ValidateArguments,The length of the statement  "            if (!operationContext.RequestMethod.Equals("DELETE"' StringComparison.OrdinalIgnoreCase) && !operationContext.RequestMethod.Equals("GET"' StringComparison.OrdinalIgnoreCase) && operationContext.RequestHeaders[HttpRequestHeader.ContentType] != GetContentType(entity)) " is 266.
Long Statement,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,ValidateArguments,The length of the statement  "                throw new DataServiceException(String.Format("Incorrect Content-Type header value '{0}'' expected '{1}'."' operationContext.RequestHeaders[HttpRequestHeader.ContentType]' GetContentType(entity))); " is 196.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,CreateResource,The length of the statement  "                throw new InvalidOperationException(String.Format("Invalid container name '{0}' or type name specified '{1}'"' containerName' fullTypeName)); " is 141.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetResource,The length of the statement  "                    throw new ArgumentException(String.Format("Invalid Uri specified. The query '{0}' must refer to a single resource"' query.ToString())); " is 135.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetResource,The length of the statement  "                    throw new ArgumentException(String.Format("Invalid uri specified. ExpectedType: '{0}'' ActualType: '{1}'"' fullTypeName' resource.GetType().FullName)); " is 151.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SetReference,The length of the statement  "            PropertyInfo pi = targetResource.GetType().GetProperty(propertyName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty); " is 141.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SetReference,The length of the statement  "                    String.Format("Bad Request. The resource type '{0}' is not a valid type for the property '{1}' in resource '{2}'. Please make sure that the uri refers to the correct type"' " is 172.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SetValue,The length of the statement  "            PropertyInfo pi = targetResource.GetType().GetProperty(propertyName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty); " is 141.
Long Statement,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SetValue,The length of the statement  "                    String.Format("Bad Request. The resource type '{0}' is not a valid type for the property '{1}' in resource '{2}'. Please make sure that the uri refers to the correct type"' " is 172.
Long Statement,AstoriaUnitTests,CachedConnections,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,GetConnectionForType,The length of the statement  "                EntityConnection entityConnection = new EntityConnection(DataUtil.BuildEntityConnection(dbName' builder.ConnectionString' System.Reflection.Assembly.GetCallingAssembly())); " is 172.
Long Statement,AstoriaUnitTests,CachedConnections,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,CreateDatabase,The length of the statement  "            string createSchemaCmd = IOUtil.ReadResourceText(assembly' createSchemaResource).Replace("###INSERT#GUID#HERE###"' Guid.NewGuid().ToString()); " is 142.
Long Statement,AstoriaUnitTests.Stubs.DataServiceProvider,DSPMediaResourceStorage,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\DSPMediaResourceStorage.cs,CreateMediaResource,The length of the statement  "                this.inMemoryStreamStorage = this.keyComparer == null ? new Dictionary<object' Dictionary<string' DSPMediaResource>>() : new Dictionary<object' Dictionary<string' DSPMediaResource>>(this.keyComparer); " is 200.
Long Statement,System.Data.Test.Astoria,DataUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataUtil.cs,BuildEntityConnection,The length of the statement  "                metaBuilder.Append(prefix).Append("res://*/").Append(IOUtil.FindResourceNameForPath(assembly' baseModelName + extension)); " is 122.
Long Statement,System.Data.Test.Astoria,DataUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataUtil.cs,BuildEntityConnection,The length of the statement  "            System.Data.EntityClient.EntityConnectionStringBuilder builder = new System.Data.EntityClient.EntityConnectionStringBuilder(); " is 126.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c29_datetimePParameter = new global::System.Data.Objects.ObjectParameter("c29_datetimeP"' typeof(global::System.DateTime)); " is 123.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c30_smalldatetimePParameter = new global::System.Data.Objects.ObjectParameter("c30_smalldatetimeP"' c30_smalldatetimeP); " is 120.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c30_smalldatetimePParameter = new global::System.Data.Objects.ObjectParameter("c30_smalldatetimeP"' typeof(global::System.DateTime)); " is 133.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c31_decimal_28_4_PParameter = new global::System.Data.Objects.ObjectParameter("c31_decimal_28_4_P"' c31_decimal_28_4_P); " is 120.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c32_numeric_28_4_PParameter = new global::System.Data.Objects.ObjectParameter("c32_numeric_28_4_P"' c32_numeric_28_4_P); " is 120.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c41_varbinary_512_PParameter = new global::System.Data.Objects.ObjectParameter("c41_varbinary_512_P"' c41_varbinary_512_P); " is 123.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c43_nvarchar_512_PParameter = new global::System.Data.Objects.ObjectParameter("c43_nvarchar_512_P"' c43_nvarchar_512_P); " is 120.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c46_uniqueidentifierPParameter = new global::System.Data.Objects.ObjectParameter("c46_uniqueidentifierP"' c46_uniqueidentifierP); " is 129.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "                c46_uniqueidentifierPParameter = new global::System.Data.Objects.ObjectParameter("c46_uniqueidentifierP"' typeof(global::System.Guid)); " is 135.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectFromAllTypesSet,The length of the statement  "            return base.ExecuteFunction<AllTypes>("SelectFromAllTypesSet"' c25_intPParameter' c26_smallintPParameter' c27_tinyintPParameter' c28_bitPParameter' c29_datetimePParameter' c30_smalldatetimePParameter' c31_decimal_28_4_PParameter' c32_numeric_28_4_PParameter' c33_realPParameter' c34_floatPParameter' c35_moneyPParameter' c36_smallmoneyPParameter' c37_varchar_512_PParameter' c38_char_512_PParameter' c39_textPParameter' c40_binary_512_PParameter' c41_varbinary_512_PParameter' c42_imagePParameter' c43_nvarchar_512_PParameter' c44_nchar_512_PParameter' c45_ntextPParameter' c46_uniqueidentifierPParameter' c47_bigintPParameter); " is 628.
Long Statement,Aruba,ArubaContainer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,SelectBugs,The length of the statement  "            return base.ExecuteFunction<DefectBug>("SelectBugs"' idPParameter' param2_int' param3_int' numberPParameter' param5_int' param6_int' commentPParameter' param8_varchar_512_' param9_varchar_512_); " is 194.
Long Statement,Aruba,AddressInfo,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateAddressInfo,The length of the statement  "            addressInfo.ZipCode = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(zipCode' "ZipCode"); " is 128.
Long Statement,Aruba,ContactInfo,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateContactInfo,The length of the statement  "            contactInfo.AddressInfo = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(addressInfo' "AddressInfo"); " is 140.
Long Statement,Aruba,AllTypesComplexEntity,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateAllTypesComplexEntity,The length of the statement  "            allTypesComplexEntity.MemberAllTypesComplex = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(memberAllTypesComplex' "MemberAllTypesComplex"); " is 180.
Long Statement,Aruba,OwnerContactInfo,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateOwnerContactInfo,The length of the statement  "            ownerContactInfo.ContactInfo = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(contactInfo' "ContactInfo"); " is 145.
Long Statement,Aruba,Run,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateRun,The length of the statement  "            run.StatusInfo = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(statusInfo' "StatusInfo"); " is 129.
Long Statement,Aruba,Run,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateRun,The length of the statement  "            run.RequestStatusInfo = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(requestStatusInfo' "RequestStatusInfo"); " is 150.
Long Statement,Aruba,Task,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Data\Aruba.Edm.ObjectLayer.cs,CreateTask,The length of the statement  "            task.StatusInfo = global::System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull(statusInfo' "StatusInfo"); " is 130.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeConstructor,The length of the statement  "            object result = InvokeMethod(typeof(TTarget)' ".ctor"' parameterTypes' Type.EmptyTypes' BindingFlags.Default' null' parameterValues); " is 133.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeConstructor,The length of the statement  "            object result = InvokeMethod(targetType' ".ctor"' parameterTypes' Type.EmptyTypes' BindingFlags.Default' null' parameterValues); " is 128.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeMethod,The length of the statement  "            object result = InvokeMethod(typeof(TTarget)' memberName' Type.EmptyTypes' Type.EmptyTypes' BindingFlags.Default' target' (Object[])null); " is 138.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeMethod,The length of the statement  "            object result = InvokeMethod(typeof(TTarget)' memberName' parameterTypes' genericArguments' BindingFlags.Default' target' parameterValues); " is 139.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,InvokeMethod,The length of the statement  "            return InvokeMethod(methodTarget' memberName' parameterTypes' genericArguments' BindingFlags.Default' target' parameterValues); " is 127.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,ThrowMissingMethodException,The length of the statement  "            string memberString = methodTarget.FullName + "." + memberName + (genericArgNames.Length > 0 ? "<" + string.Join("'"' genericArgNames) + ">" : "") + "(" + string.Join("'"' typeNames) + ")"; " is 189.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,MatchMethod,The length of the statement  "            MemberInfo[] members = targetType.GetMembers(BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 137.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,WrapMethod,The length of the statement  "            if (!DelegateMethodHandleCache.TryGetValue(new MethodDef(methodInfo.MethodHandle' methodInfo.DeclaringType.TypeHandle)' out methodWrapper)) " is 139.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,WrapMethod,The length of the statement  "            if (!DelegateMethodHandleCache.TryGetValue(new MethodDef(methodInfo.MethodHandle' methodInfo.DeclaringType.TypeHandle)' out methodWrapper)) " is 139.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,CreateMethod,The length of the statement  "                gen.Emit(OpCodes.Ldsfld' typeof(UnitTestCodeGen).GetField("StaticInstanceNotNull"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.GetField)); " is 154.
Long Statement,Suites.Data.Test,UnitTestCodeGen,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\Data\Common\UnitTestCodeGen.cs,CreateMethod,The length of the statement  "                gen.Emit(OpCodes.Ldsfld' typeof(UnitTestCodeGen).GetField("InstanceIsNull"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.GetField)); " is 147.
Complex Conditional,Microsoft.OData.Client.Design.T4,CodeGenerationContext,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,GetElementsFromModelTree,The conditional expression  "tmp is EdmCoreModel ||                  tmp.FindDeclaredTerm(CoreVocabularyConstants.OptimisticConcurrency) != null ||                  tmp.FindDeclaredTerm(CapabilitiesVocabularyConstants.ChangeTracking) != null ||                  tmp.FindDeclaredTerm(AlternateKeysVocabularyConstants.AlternateKeys) != null ||                  tmp.FindDeclaredTerm("Org.OData.Authorization.V1.Authorizations") != null ||                  tmp.FindDeclaredTerm("Org.OData.Validation.V1.DerivedTypeConstraint") != null ||                  tmp.FindDeclaredTerm("Org.OData.Community.V1.UrlEscapeFunction") != null"  is complex.
Complex Conditional,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The conditional expression  "customizedPropertyName != typeName                          && (customizedPropertyName == property.Name                              || (!hasPropertyNameSameWithCustomizedPropertyName && i == itemCount-1))"  is complex.
Complex Conditional,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,SetPropertyIdentifierMappingsIfNameConflicts,The conditional expression  "(this.context.EnableNamingAlias && customizedPropertyName == property.Name)                          || (!hasPropertyNameSameWithCustomizedPropertyName && i == itemCount-1)"  is complex.
Complex Conditional,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The conditional expression  "!resourceTypeProperties.Contains(property.Name) ||                                  (("BugDefectTrackingSet" == resourceContainerName) &&                                    (("AssignedToOwnerBugsProject" == property.Name) ||                                     ("ResolvedOwnerBugsProject" == property.Name))) ||                                  (("BugProjectTrackingSet" == resourceContainerName) &&                                    (("AssignedToOwnerBugsDefect" == property.Name) ||                                     ("ResolvedOwnerBugsDefect" == property.Name)))"  is complex.
Virtual Method Call from Constructor,AstoriaUnitTests,Item,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,Item,The constructor "Item" calls a virtual method "ReInit".
Virtual Method Call from Constructor,AstoriaUnitTests.Stubs.DataServiceProvider,DSPMediaResource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\DSPMediaResource.cs,DSPMediaResource,The constructor "DSPMediaResource" calls a virtual method "InitializeMediaResource".
Empty Catch Block,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BlobCtx_SendingRequest,The method has an empty catch block.
Empty Catch Block,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,SDPC_QORFullLoad,The method has an empty catch block.
Magic Number,Microsoft.OData.Client.Design.T4,ODataClientTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteStaticCreateMethodParameters,The following statement contains a magic number: string parameterSeparator = propertyToParameterPairs.Length > 5 ? this.ParameterSeparator : "' ";
Magic Number,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,GetReadStreamInternal,The following statement contains a magic number: operationContext.ResponseStatusCode = 204;
Magic Number,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The following statement contains a magic number: throw new DataServiceException(400' "Since the target media resource has an etag defined' If-Match/If-Not-Match HTTP header must be specified.");
Magic Number,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The following statement contains a magic number: throw new DataServiceException(412' "If-Match precondition failed for target media resource. Thrown by DSPStreamProvider.");
Magic Number,AstoriaUnitTests,BaseStreamProvider2,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests\stubs\DataServiceProvider\BaseStreamProvider2.cs,ValidateETag,The following statement contains a magic number: throw new DataServiceException(304' "No Change' Thrown by DSPStreamProvider.");
Magic Number,AstoriaUnitTests,DataServiceContextTestUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\DataServiceContextTestUtil.cs,HandleQueryResponse,The following statement contains a magic number: Assert.AreEqual(200' queryResponse.StatusCode);
Magic Number,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsBatchResponse,The following statement contains a magic number: Assert.AreEqual<int>(response.BatchStatusCode' 202' "batch status code must be 202");
Magic Number,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsSuccessResponse,The following statement contains a magic number: Assert.IsTrue(200 <= response.StatusCode && response.StatusCode < 300' String.Format("Expected: {0}' Actual: {1}"' (int)statusCode' response.StatusCode));
Magic Number,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,IsSuccessResponse,The following statement contains a magic number: Assert.IsTrue(200 <= response.StatusCode && response.StatusCode < 300' String.Format("Expected: {0}' Actual: {1}"' (int)statusCode' response.StatusCode));
Magic Number,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateWorkspaceForType,The following statement contains a magic number: int LocalPort = random.Next(20000' 40000);
Magic Number,AstoriaUnitTests,Utils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\Utils.cs,CreateWorkspaceForType,The following statement contains a magic number: int LocalPort = random.Next(20000' 40000);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryNorthwind,The following statement contains a magic number: QueryWorkspace(workspace'                          delegate(Uri baseUri)                          {                              return new northwindClient.northwindContext(baseUri);                          }'                          delegate(string typeName)                          {                              return typeof(ArubaClient.DefectBug).Assembly.GetType("northwindClient." + typeName.Substring("northwind.".Length)' true' false);                          }'                          delegate(Type type)                          {                              return "northwind." + type.Name;                          }'                          delegate(DataServiceContext context)                          {                              // Consider: For a typed DataServiceContext' do we want to enforce for context.AddObject("entityset"' object)                              // where if context.GetProperty("entityset") is of IQueryable<T> that typeof(T).IsInstanceOfType(object)?                              //context.Format.UseAtom();                              //context.EnableAtom = true;                                northwindClient.Customers customer = northwindClient.Customers.CreateCustomers("ASTOR"' "Microsoft");                              northwindClient.Orders order1 = northwindClient.Orders.CreateOrders(999);                              northwindClient.Products product1 = northwindClient.Products.CreateProducts(9876' "WebService"' false);                              northwindClient.Products product2 = northwindClient.Products.CreateProducts(9879' "Database"' false);                              northwindClient.Region region = northwindClient.Region.CreateRegion(39' "Astoria");                              northwindClient.Order_Details detail1 = northwindClient.Order_Details.CreateOrder_Details(999' 9876' 0.39M' 42' 0.5f);                              northwindClient.Order_Details detail2 = northwindClient.Order_Details.CreateOrder_Details(999' 9879' 3.1415M' 13' 0.01f);                                context.AddObject("Customers"' customer);                              context.AddObject("Orders"' order1);                                // TODO: remove this SaveChanges for a single that contains objects & links                              SaveChanges(context);                                context.AddObject("Products"' product1);                              context.AddObject("Products"' product2);                              context.AddObject("Region"' region);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddObject("Order_Details"' detail1);                              //context.AddObject("Order_Details"' detail2);                                  customer.Orders.Add(order1);                              order1.Order_Details.Add(detail1);                              order1.Order_Details.Add(detail2);                                context.AddLink(customer' "Orders"' order1);                                // TODO: enable this for non-batch                              // TODO: enable this for batch                              //context.AddLink(order1' "Order_Details"' detail1);                              //context.AddLink(order1' "Order_Details"' detail2);                                SaveChanges(context);                          });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The following statement contains a magic number: ctx.SendingRequest2 += delegate(object sender' SendingRequest2EventArgs args)                  {                      Assert.AreSame(ctx' sender);                      Assert.IsNotNull(args.RequestMessage);                      Assert.IsTrue(args.RequestMessage.Url.IsAbsoluteUri);                      if (!args.IsBatchPart)                          totalSendingRequestCount++;                        Assert.IsTrue(args.RequestMessage.Method == "GET" || args.RequestMessage.Method == "PATCH" || args.RequestMessage.Method == "POST"' "expecting GET or PATCH operation");                      if (!args.RequestMessage.Url.OriginalString.EndsWith("/$batch"' StringComparison.Ordinal))                      {                          LastUriRequest = args.RequestMessage.Url;                      }                        Assert.IsNotNull(LastUriRequest);                        expectBadRequestBecauseMisinterpretedUri = false;                        if (LastUriRequest.IsAbsoluteUri)                      {                          string pathAndQuery = LastUriRequest.PathAndQuery;                          if (0 <= pathAndQuery.IndexOf(':') || (0 < pathAndQuery.IndexOf("%3A")))                          {                              //TraceReason("PathAndQuery contain ':'");                              //expectBadRequestBecauseMisinterpretedUri = true;                          }                          else if (260 < LastUriRequest.OriginalString.Length)    // TODO: reenable when it works                          {                              TraceReason("260 < Uri.Length");                              expectBadRequestBecauseMisinterpretedUri = true;                          }                          else                          {                              foreach (String segment in LastUriRequest.Segments)                              {                                  if (0 <= segment.IndexOf('('))                                  {                                      if (0 > segment.IndexOf(')'))                                      {                                          TraceReason("Uri decoded '/'");                                          expectBadRequestBecauseMisinterpretedUri = true;                                          break;                                      }                                      else if (0 <= segment.IndexOf('.'))                                      {                                          //TraceReason("PathAndQuery contain '.'");                                          //expectBadRequestBecauseMisinterpretedUri = true;                                          break;                                      }                                  }                                  else if (0 <= segment.IndexOf(')'))                                  {                                      TraceReason("PathAndQuery contain ')' without '('");                                      expectBadRequestBecauseMisinterpretedUri = true;                                      break;                                  }                              }                          }                      }                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The following statement contains a magic number: DataServiceContextTestUtil.ExecuteQuery(ctx' query' (QueryMode)(WhichExecuteMethod++ % 7))
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The following statement contains a magic number: Assert.IsTrue(7 <= WhichExecuteMethod' "didn't use all execute methods");
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The following statement contains a magic number: int EntityIndexIncrement = 2;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,QueryWorkspace,The following statement contains a magic number: resourceContainerName = entityUri.Segments[2];
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The following statement contains a magic number: switch (WhichExpandMethod++ % 4)                  {                      case 0:                          {                              response = context.LoadProperty(entity' property);                              break;                          }                        case 1:                          {                              IAsyncResult async = context.BeginLoadProperty(entity' property' null' null);                              if (!async.CompletedSynchronously)                              {                                  Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginLoadProperty timeout");                              }                                Assert.IsTrue(async.IsCompleted);                              response = context.EndLoadProperty(async);                              break;                          }                        case 2:                          {                              LoadPropertyCallback callback = new LoadPropertyCallback();                              IAsyncResult async = context.BeginLoadProperty(entity' property' callback.CallbackMethod' new object[] { property' context });                                Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout");                              Assert.IsTrue(async.IsCompleted);                                if (null != callback.CallbackFailure)                              {                                  Assert.IsNull(callback.CallbackResult' callback.CallbackFailure.ToString());                                  throw new Exception("failure in callback"' callback.CallbackFailure);                              }                                break;                          }                        case 3:                          {                              Assert.AreNotEqual<MergeOption>(MergeOption.NoTracking' context.MergeOption);                                  Uri uri;                              context.TryGetUri(entity' out uri);                                var edmType = DataServiceContextTestUtil.GetOrCreateEdmType(entity.GetType()' context.MaxProtocolVersion);                              if (((IEdmStructuredType)edmType).FindProperty(property) is IEdmNavigationProperty)                              {                                  // $expand no longer works for non-navigation properties after integrating the ODL URI parser.                                  // however' because they are not affected by $expand' the behavior is unchanged by leaving this out of the request.                                  uri = new Uri(uri.OriginalString + "?$expand=" + property);                              }                                DataServiceRequest request = (DataServiceRequest)UnitTestCodeGen.InvokeConstructor(typeof(DataServiceRequest<>).MakeGenericType(entity.GetType())' DataServiceContextTestUtil.TypesUri' uri);                                int count = 0;                              foreach (object a in DataServiceContextTestUtil.ExecuteQuery(context' request' (QueryMode)(WhichExecuteMethod++ % 7)))                              {                                  count++;                                  Assert.AreSame(entity' a);                              }                                Assert.AreEqual(1' count' "didn't select existing entity: {0}"' request);                              break;                          }                        default:                          Assert.Fail("shouldn't be here");                          break;                  }
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The following statement contains a magic number: switch (WhichExpandMethod++ % 4)                  {                      case 0:                          {                              response = context.LoadProperty(entity' property);                              break;                          }                        case 1:                          {                              IAsyncResult async = context.BeginLoadProperty(entity' property' null' null);                              if (!async.CompletedSynchronously)                              {                                  Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginLoadProperty timeout");                              }                                Assert.IsTrue(async.IsCompleted);                              response = context.EndLoadProperty(async);                              break;                          }                        case 2:                          {                              LoadPropertyCallback callback = new LoadPropertyCallback();                              IAsyncResult async = context.BeginLoadProperty(entity' property' callback.CallbackMethod' new object[] { property' context });                                Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout");                              Assert.IsTrue(async.IsCompleted);                                if (null != callback.CallbackFailure)                              {                                  Assert.IsNull(callback.CallbackResult' callback.CallbackFailure.ToString());                                  throw new Exception("failure in callback"' callback.CallbackFailure);                              }                                break;                          }                        case 3:                          {                              Assert.AreNotEqual<MergeOption>(MergeOption.NoTracking' context.MergeOption);                                  Uri uri;                              context.TryGetUri(entity' out uri);                                var edmType = DataServiceContextTestUtil.GetOrCreateEdmType(entity.GetType()' context.MaxProtocolVersion);                              if (((IEdmStructuredType)edmType).FindProperty(property) is IEdmNavigationProperty)                              {                                  // $expand no longer works for non-navigation properties after integrating the ODL URI parser.                                  // however' because they are not affected by $expand' the behavior is unchanged by leaving this out of the request.                                  uri = new Uri(uri.OriginalString + "?$expand=" + property);                              }                                DataServiceRequest request = (DataServiceRequest)UnitTestCodeGen.InvokeConstructor(typeof(DataServiceRequest<>).MakeGenericType(entity.GetType())' DataServiceContextTestUtil.TypesUri' uri);                                int count = 0;                              foreach (object a in DataServiceContextTestUtil.ExecuteQuery(context' request' (QueryMode)(WhichExecuteMethod++ % 7)))                              {                                  count++;                                  Assert.AreSame(entity' a);                              }                                Assert.AreEqual(1' count' "didn't select existing entity: {0}"' request);                              break;                          }                        default:                          Assert.Fail("shouldn't be here");                          break;                  }
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The following statement contains a magic number: switch (WhichExpandMethod++ % 4)                  {                      case 0:                          {                              response = context.LoadProperty(entity' property);                              break;                          }                        case 1:                          {                              IAsyncResult async = context.BeginLoadProperty(entity' property' null' null);                              if (!async.CompletedSynchronously)                              {                                  Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginLoadProperty timeout");                              }                                Assert.IsTrue(async.IsCompleted);                              response = context.EndLoadProperty(async);                              break;                          }                        case 2:                          {                              LoadPropertyCallback callback = new LoadPropertyCallback();                              IAsyncResult async = context.BeginLoadProperty(entity' property' callback.CallbackMethod' new object[] { property' context });                                Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout");                              Assert.IsTrue(async.IsCompleted);                                if (null != callback.CallbackFailure)                              {                                  Assert.IsNull(callback.CallbackResult' callback.CallbackFailure.ToString());                                  throw new Exception("failure in callback"' callback.CallbackFailure);                              }                                break;                          }                        case 3:                          {                              Assert.AreNotEqual<MergeOption>(MergeOption.NoTracking' context.MergeOption);                                  Uri uri;                              context.TryGetUri(entity' out uri);                                var edmType = DataServiceContextTestUtil.GetOrCreateEdmType(entity.GetType()' context.MaxProtocolVersion);                              if (((IEdmStructuredType)edmType).FindProperty(property) is IEdmNavigationProperty)                              {                                  // $expand no longer works for non-navigation properties after integrating the ODL URI parser.                                  // however' because they are not affected by $expand' the behavior is unchanged by leaving this out of the request.                                  uri = new Uri(uri.OriginalString + "?$expand=" + property);                              }                                DataServiceRequest request = (DataServiceRequest)UnitTestCodeGen.InvokeConstructor(typeof(DataServiceRequest<>).MakeGenericType(entity.GetType())' DataServiceContextTestUtil.TypesUri' uri);                                int count = 0;                              foreach (object a in DataServiceContextTestUtil.ExecuteQuery(context' request' (QueryMode)(WhichExecuteMethod++ % 7)))                              {                                  count++;                                  Assert.AreSame(entity' a);                              }                                Assert.AreEqual(1' count' "didn't select existing entity: {0}"' request);                              break;                          }                        default:                          Assert.Fail("shouldn't be here");                          break;                  }
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ExpandProperty,The following statement contains a magic number: switch (WhichExpandMethod++ % 4)                  {                      case 0:                          {                              response = context.LoadProperty(entity' property);                              break;                          }                        case 1:                          {                              IAsyncResult async = context.BeginLoadProperty(entity' property' null' null);                              if (!async.CompletedSynchronously)                              {                                  Assert.IsTrue(async.AsyncWaitHandle.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "BeginLoadProperty timeout");                              }                                Assert.IsTrue(async.IsCompleted);                              response = context.EndLoadProperty(async);                              break;                          }                        case 2:                          {                              LoadPropertyCallback callback = new LoadPropertyCallback();                              IAsyncResult async = context.BeginLoadProperty(entity' property' callback.CallbackMethod' new object[] { property' context });                                Assert.IsTrue(callback.Finished.WaitOne(new TimeSpan(0' 0' TestConstants.MaxTestTimeout)' false)' "Asyncallback timeout");                              Assert.IsTrue(async.IsCompleted);                                if (null != callback.CallbackFailure)                              {                                  Assert.IsNull(callback.CallbackResult' callback.CallbackFailure.ToString());                                  throw new Exception("failure in callback"' callback.CallbackFailure);                              }                                break;                          }                        case 3:                          {                              Assert.AreNotEqual<MergeOption>(MergeOption.NoTracking' context.MergeOption);                                  Uri uri;                              context.TryGetUri(entity' out uri);                                var edmType = DataServiceContextTestUtil.GetOrCreateEdmType(entity.GetType()' context.MaxProtocolVersion);                              if (((IEdmStructuredType)edmType).FindProperty(property) is IEdmNavigationProperty)                              {                                  // $expand no longer works for non-navigation properties after integrating the ODL URI parser.                                  // however' because they are not affected by $expand' the behavior is unchanged by leaving this out of the request.                                  uri = new Uri(uri.OriginalString + "?$expand=" + property);                              }                                DataServiceRequest request = (DataServiceRequest)UnitTestCodeGen.InvokeConstructor(typeof(DataServiceRequest<>).MakeGenericType(entity.GetType())' DataServiceContextTestUtil.TypesUri' uri);                                int count = 0;                              foreach (object a in DataServiceContextTestUtil.ExecuteQuery(context' request' (QueryMode)(WhichExecuteMethod++ % 7)))                              {                                  count++;                                  Assert.AreSame(entity' a);                              }                                Assert.AreEqual(1' count' "didn't select existing entity: {0}"' request);                              break;                          }                        default:                          Assert.Fail("shouldn't be here");                          break;                  }
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveChanges,The following statement contains a magic number: SaveChangesOptions option = (SaveChangesOptions)random.Next(0' 3);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveChanges,The following statement contains a magic number: SaveChangesMode mode = (SaveChangesMode)(WhichSaveChanges++ % 3);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,CompileCode,The following statement contains a magic number: compilerOptions.WarningLevel = 4;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,SaveCustomer,The following statement contains a magic number: doAsync.DoAsync(                      begin'                      end'                      0'                      delegate(string ignore1)                      {                          // verify insert                          Uri custUri1 = null;                          ctx.TryGetUri(cust' out custUri1);                          if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                          {                              throw new Exception("resource Uri is empty");                          }                            // update entity                          cust.Address = "One Microsoft Way";                          cust.ContactTitle = "owner";                          ctx.UpdateObject(cust);                            doAsync.DoAsync(                              begin'                              end'                              1'                              delegate(string ignore2)                              {                                  ctx.TryGetUri(cust' out custUri1);                                  if (null == custUri1 || String.IsNullOrEmpty(custUri1.ToString()))                                  {                                      throw new Exception("resource Uri is empty");                                  }                                    // add relations to entity                                      var singlecust =                                      ((DataServiceQuery<northwindClient.Customers>)                                      (from customer in ctx.Customers where customer.CustomerID == "AROUT" select customer))                                      .Expand("Orders");                                    doAsync.DoAsync(                                      singlecust.BeginExecute'                                      delegate(IAsyncResult result)                                      {                                          foreach (northwindClient.Orders order in singlecust.EndExecute(result).Single().Orders)                                          {                                              cust.Orders.Add(order);                                              ctx.AddLink(cust' "Orders"' order);                                          }                                            if (6 != cust.Orders.Count)                                          {                                              throw new Exception("didn't add orders " + cust.Orders.Count.ToString());                                          }                                      }'                                      2'                                      delegate(string ignore5)                                      {                                          doAsync.DoAsync(                                              begin'                                              end'                                              3'                                              delegate(string ignore3)                                              {                                                  // verify relations were added                                                  Uri custUri2 = null;                                                  ctx.TryGetUri(cust' out custUri2);                                                  if (null == custUri2 || custUri1 != custUri2)                                                  {                                                      throw new Exception("resource Uri changed");                                                  }                                                    ctx.MergeOption = Microsoft.OData.Client.MergeOption.NoTracking;                                                    DataServiceQuery<northwindClient.Customers> verifycust = ((DataServiceQuery<northwindClient.Customers>)                                                      (from customer in ctx.Customers where CustomerID == customer.CustomerID select customer)).Expand("Orders");                                                    doAsync.DoAsync(                                                      verifycust.BeginExecute'                                                      delegate(IAsyncResult result)                                                      {                                                          int countOfOrders = verifycust.EndExecute(result).Single().Orders.Count();                                                          if (6 != countOfOrders)                                                          {                                                              throw new Exception("didn't change database " + countOfOrders.ToString());                                                          }                                                      }'                                                      4'                                                      delegate(string ignore7)                                                      {                                                          ctx.MergeOption = Microsoft.OData.Client.MergeOption.OverwriteChanges;                                                            // delete relations from entity                                                          foreach (northwindClient.Orders order in cust.Orders)                                                          {                                                              ctx.DeleteLink(cust' "Orders"' order);                                                          }                                                          cust.Orders.Clear();                                                            doAsync.DoAsync(                                                              begin'                                                              end'                                                              5'                                                              delegate(string ignore4)                                                              {                                                                  // verify links deleted                                                                  doAsync.DoAsync(                                                                      delegate(AsyncCallback callback' object state)                                                                      {                                                                          return ctx.BeginLoadProperty(cust' "Orders"' callback' state);                                                                      }'                                                                      delegate(IAsyncResult result)                                                                      {                                                                          ctx.EndLoadProperty(result);                                                                          if (0 < cust.Orders.Count)                                                                          {                                                                              throw new Exception("didn't commit removal of orders");                                                                          }                                                                      }'                                                                      6'                                                                      delegate(string ignore6)                                                                      {                                                                          ctx.DeleteObject(cust);                                                                          doAsync.DoAsync(                                                                              begin'                                                                              end'                                                                              7'                                                                              delegate(string ignore8)                                                                              {                                                                                  doAsync.HandleStatus(null);                                                                              });                                                                      });                                                              });                                                      });                                              });                                      });                              });                      });
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: Item i = new Item()                      {                          ID = 99'                          Name = itemName'                          Description = itemDescription'                          LastUpdated = DateTime.Now                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: byte[] photoThumbNail = new byte[] { 0' 1' 2 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: byte[] photoContent = new byte[] { 0' 1' 2' 3 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: byte[] photoContent = new byte[] { 0' 1' 2' 3 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: PhotoMLE p = new PhotoMLE()                      {                          ID = 100'                          Name = photoName'                          Description = photoDescription'                          LastUpdated = DateTime.Now'                          ThumbNail = photoThumbNail'                          Rating = 1'                          Content = photoContent                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: Assert.AreEqual(SendingRequest2Count' 3' "SendingRequest2 must be called 3 times - once for Item and twice for MLE");
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: Folder f = new Folder() { ID = 101' Name = folderName };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: Assert.AreEqual(2' f101.Items.Count);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBSupportTest,The following statement contains a magic number: item.ID == 99
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content1 = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content1 = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content1 = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content1 = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: byte[] content2 = new byte[] { 21' 22' 23' 24' 25' 26' 27 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: photo.ID = 200 + i;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: ctx.SetSaveStream(photo' new MemoryStream(i % 2 == 0 ? content1 : content2)' true' args);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_AddMR,The following statement contains a magic number: VerifyStreamContent(new MemoryStream(i % 2 == 0 ? content1 : content2)' response.Stream);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BLOBV2_UpdateMR,The following statement contains a magic number: byte[] content = new byte[] { 41' 42' 43' 44' 45' 46' 47 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,NamedStreamBasicScenarios,The following statement contains a magic number: TypedCustomDataContext<PhotoEx>.ValuesRequested += (sender' args) =>                      {                          TypedCustomDataContext<PhotoEx> typedContext = (TypedCustomDataContext<PhotoEx>)sender;                          typedContext.SetValues(                              new PhotoEx[]                              {                                                                  new PhotoEx() { ID = 1' Name = "Photo1"' Description = "Default Photo 1" }'                                  new PhotoEx() { ID = 2' Name = "Photo2"' Description = "Default Photo 2" }                              });                        };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BindingTest,The following statement contains a magic number: config.Id = 9999;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BindingTest,The following statement contains a magic number: failure.Id = 9990;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,BindingTest,The following statement contains a magic number: failure.TestId = 1111;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                      {                          OpenEntity address = new OpenEntity();                          address.InstanceType = "OpenTypesNamespace.Address";                          address.Names = new List<string>() { "Var1"' "bar" };                            OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                          OpenEntity oe = new OpenEntity();                          oe.ID = 1;                          oe.InstanceType = "OpenTypesNamespace.Customer";                          oe.Properties.Add("Name"' "Waseem");                          oe.Properties.Add("Age"' 31);                          oe.Properties.Add("Height"' 5.6f);                          oe.Properties.Add("Address"' address);                          oe.Numbers = new List<int>() { 1' 2' 42 };                          oe.Names = new List<string>() { "First"' "Second" };                          oe.Addresses = new List<OpenEntity>() { address };                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                            OpenEntity oe2 = new OpenEntity();                          oe2.ID = 2;                          oe2.InstanceType = "OpenTypesNamespace.CustomerWithBirthday";                          oe2.Properties.Add("Name"' "Andy");                          oe2.Properties.Add("Age"' 35);                          oe2.Properties.Add("Birthday"' new DateTime(1974' 12' 12));                          oe2.Properties.Add("Height"' 5.7f);                            OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesQuery,The following statement contains a magic number: var testCases = new[] {                           new { Query = "/Values?$filter=Age"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Name"' XPathToCount = "//adsm:value"' Count = 1' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values?$filter=Name eq 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name ne 'Waseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Name gt 'Amber'"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age add 1 eq 32"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age div 2 gt 10"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=-Age lt 0"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=Age lt 15 or Age gt 33"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=concat(Name' 'Var1') eq 'AndyVar1'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=substring(Name' 1) eq 'aseem'"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=length(Name) ge 4"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=round(Height) eq 6f"' XPathToCount = "//atom:entry"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=year(cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday) lt 1972"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday ne null"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=cast('OpenTypesNamespace.CustomerWithBirthday')/Birthday lt 1975-12-12Z&$orderby=Name"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=2"' XPathToCount = "//atom:entry"' Count = 1' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$filter=not isof('OpenTypesNamespace.CustomerWithBirthday')&$top=1&$skip=1"' XPathToCount = "//atom:entry"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:Name"' Count = 2' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values?$select=Name"' XPathToCount = "//ads:ID"' Count = 0' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)"' XPathToCount = "//adsm:element"' Count = 10' Accept = Utils.MimeApplicationAtomXml }'                          new { Query = "/Values(1)/Names"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                          new { Query = "/Values(1)/Address"' XPathToCount = "//adsm:element"' Count = 2' Accept = Utils.MimeApplicationXml }'                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                                OpenEntity a1 = new OpenEntity();                              a1.InstanceType = "OpenTypesNamespace.Address";                              a1.Properties.Add("Name"' "Main St.");                                OpenEntity a2 = new OpenEntity();                              a2.InstanceType = "OpenTypesNamespace.Address";                              a2.Properties.Add("Name"' null);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                              oe.Numbers = new List<int>() { 1' 2' 42 };                              oe.Names = new List<string>() { ""' "first"' "Second" };                              oe.Addresses = new List<OpenEntity>() { a1' a2 };                              OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                                OpenEntity a1 = new OpenEntity();                              a1.InstanceType = "OpenTypesNamespace.Address";                              a1.Properties.Add("Name"' "Main St.");                                OpenEntity a2 = new OpenEntity();                              a2.InstanceType = "OpenTypesNamespace.Address";                              a2.Properties.Add("Name"' null);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                              oe.Numbers = new List<int>() { 1' 2' 42 };                              oe.Names = new List<string>() { ""' "first"' "Second" };                              oe.Addresses = new List<OpenEntity>() { a1' a2 };                              OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                                OpenEntity a1 = new OpenEntity();                              a1.InstanceType = "OpenTypesNamespace.Address";                              a1.Properties.Add("Name"' "Main St.");                                OpenEntity a2 = new OpenEntity();                              a2.InstanceType = "OpenTypesNamespace.Address";                              a2.Properties.Add("Name"' null);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                              oe.Numbers = new List<int>() { 1' 2' 42 };                              oe.Names = new List<string>() { ""' "first"' "Second" };                              oe.Addresses = new List<OpenEntity>() { a1' a2 };                              OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                                OpenEntity a1 = new OpenEntity();                              a1.InstanceType = "OpenTypesNamespace.Address";                              a1.Properties.Add("Name"' "Main St.");                                OpenEntity a2 = new OpenEntity();                              a2.InstanceType = "OpenTypesNamespace.Address";                              a2.Properties.Add("Name"' null);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                              oe.Numbers = new List<int>() { 1' 2' 42 };                              oe.Names = new List<string>() { ""' "first"' "Second" };                              oe.Addresses = new List<OpenEntity>() { a1' a2 };                              OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenCustomer newCustomer = new OpenCustomerWithBirthday()                          {                              Birthday = new DateTime(1974' 12' 12)                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenCustomer newCustomer = new OpenCustomerWithBirthday()                          {                              Birthday = new DateTime(1974' 12' 12)                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: OpenCustomer newCustomer = new OpenCustomerWithBirthday()                          {                              Birthday = new DateTime(1974' 12' 12)                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: newCustomer.ID = 2;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: newCustomer.Age = 35;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: newCustomer.Height = 5.7f;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: newCustomer.Numbers = new List<int>() { -1' -2 };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: VerifyInsertResponse(addAndUpdateResponsePreference' ctx.Entities.Single(e => (e.Entity as OpenCustomer).ID == 2).Entity as OpenCustomer);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.IsTrue(oc.ID == 1 && oc.Name == "Waseem" ||                                            oc.ID == 2 && oc.Name == "Andy");
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.AreEqual(2' oc.Names.Count);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.AreEqual(2' oc.Numbers.Count);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.AreEqual(-2' oc.Numbers[1]);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: oc.ID == 2
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: oc.Age = 50;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: oc.Numbers.Add(oc.ID + 1000);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: VerifyUpdateResponse(addAndUpdateResponsePreference' ctx.Entities.Single(e => (e.Entity as OpenCustomer).ID == 2).Entity as OpenCustomer);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.AreEqual(50' oc.Age);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.IsTrue(oc.Numbers.Contains(oc.ID + 1000));
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,OpenTypesCreateUpdateDelete,The following statement contains a magic number: Assert.IsTrue(oc.ID == 2 && oc.Name == "Andy");
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenTypeQueryProvider.PageSize = 2;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: OpenReflectionDataContext<OpenEntity>.ValuesRequested += (object sender' EventArgs args) =>                          {                              OpenReflectionDataContext<OpenEntity>.Values = new List<OpenEntity>();                              OpenEntity oe3 = new OpenEntity();                              oe3.ID = 3;                              oe3.InstanceType = "OpenTypesNamespace.Customer";                              oe3.Properties.Add("Name"' "Pratik");                              oe3.Properties.Add("Age"' 7);                              oe3.Properties.Add("Height"' 5.9f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe3);                                OpenEntity oe4 = new OpenEntity();                              oe4.ID = 4;                              oe4.InstanceType = "OpenTypesNamespace.Customer";                              oe4.Properties.Add("Name"' "Phani");                              oe4.Properties.Add("Age"' 20);                              oe4.Properties.Add("Height"' 5.0f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe4);                                OpenEntity oe2 = new OpenEntity();                              oe2.ID = 2;                              oe2.InstanceType = "OpenTypesNamespace.Customer";                              oe2.Properties.Add("Name"' "Andy");                              oe2.Properties.Add("Age"' 35);                              oe2.Properties.Add("Height"' 5.7f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe2);                                OpenEntity oe = new OpenEntity();                              oe.ID = 1;                              oe.InstanceType = "OpenTypesNamespace.Customer";                              oe.Properties.Add("Name"' "Waseem");                              oe.Properties.Add("Age"' 31);                              oe.Properties.Add("Height"' 5.6f);                                OpenReflectionDataContext<OpenEntity>.Values.Add(oe);                          };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerDrivenPagingCustomBasic,The following statement contains a magic number: Assert.AreEqual(4' totalCount);
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new[] {                      // Make sure when there's no projected properties' we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=Orders"'                              "/Customers(1)?$select=Orders"'                          }'                          XPathExprs = new string[] {                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "not(/atom:entry/adsm:properties)"'                              "not(/atom:entry/atom:content/adsm:properties)"'                              "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = true'                      }'                      // Project a subset of properties                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=Concurrency'EditTimeStamp"'                              "/Customers(1)?$select=Concurrency'EditTimeStamp"                          }'                          XPathExprs = new string[] {                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/ads:Concurrency) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/ads:Concurrency)"'                              "boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/ads:EditTimeStamp) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/ads:EditTimeStamp)"'                              "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = true'                      }'                      // Explicitly project all properties                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=*'Orders"'                               "/Customers(0)?$select=Address'*"'                               "/Customers(0)?$select=*'*"'                              "/Customers(1)?$select=*'Orders"'                               "/Customers(1)?$select=Address'*"'                               "/Customers(1)?$select=*'*"'                          }'                          XPathExprs = new string[] {                              "not((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 7 or count((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties/*) = 7"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = true'                      }'                      new {                          QueryStrings = new string[] {                              "/Customers?$filter=ID eq 0&$select=*"'                              "/Customers?$filter=ID eq 1&$select=*"'                          }'                          XPathExprs = new string[] {                              "not((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 7 or count((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties/*) = 7"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = false'                      }'                      // Implicitly/Explicitly project all properties of the expanded entity                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=Orders&$expand=Orders"'        /*Implicit projection */                              "/Customers(0)?$select=Orders&$expand=Orders($select=*)"'      /*Explicit projection */                              "/Customers(1)?$select=Orders&$expand=Orders"'        /*Implicit projection */                              "/Customers(1)?$select=Orders&$expand=Orders($select=*)"'      /*Explicit projection */                          }'                          XPathExprs = new string[] {                              "not(/atom:entry/adsm:properties)"'                              "not(/atom:entry/atom:content/adsm:properties)"'                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "boolean(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                              "not(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                              "not(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content[not(count(adsm:properties/*)=3)])"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag!='\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(atom:id' 'Customers') and contains(@adsm:etag' 'W/\"')])"'                              "not(//atom:entry[contains(atom:id' 'Orders') and contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                          ExpectETag = false'                      }'                      // V1 expand                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$expand=Orders"'                              "/Customers(1)?$expand=Orders"                          }'                          XPathExprs = new string[] {                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "count(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/*)=7 or count(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/*)=7"'                                                            "boolean(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                              "not    (/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                              "not    (/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content[not(count(adsm:properties/*)=3)])"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(atom:id' 'Customers') and contains(@adsm:etag' 'W/\"')])"'                              "not(//atom:entry[contains(atom:id' 'Orders') and @adsm:etag])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                          ExpectETag = false'                      }'                      // multilevel expand and project' only project 1 property per level                      new {                          QueryStrings = new string[] {                              "/Orders(1)?$select=ID&$expand=Customer($select=Name;$expand=BestFriend($select=Name;$expand=Orders($select=ID)))"'                          }'                          XPathExprs = new string[] {                              "not(/atom:entry/adsm:properties)"'                              "not(/atom:entry/adsm:content/@src)"'                              "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                              "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                              "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[not(ads:Name)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/adsm:properties)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/@src)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/adsm:properties[not(ads:Name)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag = '\"MediaResourceETag1\"')])"'                              "count(//atom:entry[atom:link[@rel='edit' and @title='Orders'] and contains(@adsm:etag' 'W/\"')]) = 0"'                              "count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Customers')] and contains(@adsm:etag' 'W/\"')]) = count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Customers')]])"'                              "count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Orders')] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Orders')]])"                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 2'                          ExpectETag = false'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ServerProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new[] {                      // Make sure when there's no projected properties' we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=Orders"'                              "/Customers(1)?$select=Orders"'                          }'                          XPathExprs = new string[] {                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "not(/atom:entry/adsm:properties)"'                              "not(/atom:entry/atom:content/adsm:properties)"'                              "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = true'                      }'                      // Project a subset of properties                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=Concurrency'EditTimeStamp"'                              "/Customers(1)?$select=Concurrency'EditTimeStamp"                          }'                          XPathExprs = new string[] {                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/ads:Concurrency) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/ads:Concurrency)"'                              "boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/ads:EditTimeStamp) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/ads:EditTimeStamp)"'                              "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = true'                      }'                      // Explicitly project all properties                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=*'Orders"'                               "/Customers(0)?$select=Address'*"'                               "/Customers(0)?$select=*'*"'                              "/Customers(1)?$select=*'Orders"'                               "/Customers(1)?$select=Address'*"'                               "/Customers(1)?$select=*'*"'                          }'                          XPathExprs = new string[] {                              "not((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 7 or count((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties/*) = 7"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = true'                      }'                      new {                          QueryStrings = new string[] {                              "/Customers?$filter=ID eq 0&$select=*"'                              "/Customers?$filter=ID eq 1&$select=*"'                          }'                          XPathExprs = new string[] {                              "not((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean((/atom:entry | /atom:feed/atom:entry)[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 7 or count((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties/*) = 7"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                          ExpectETag = false'                      }'                      // Implicitly/Explicitly project all properties of the expanded entity                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$select=Orders&$expand=Orders"'        /*Implicit projection */                              "/Customers(0)?$select=Orders&$expand=Orders($select=*)"'      /*Explicit projection */                              "/Customers(1)?$select=Orders&$expand=Orders"'        /*Implicit projection */                              "/Customers(1)?$select=Orders&$expand=Orders($select=*)"'      /*Explicit projection */                          }'                          XPathExprs = new string[] {                              "not(/atom:entry/adsm:properties)"'                              "not(/atom:entry/atom:content/adsm:properties)"'                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "boolean(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                              "not(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                              "not(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content[not(count(adsm:properties/*)=3)])"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag!='\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(atom:id' 'Customers') and contains(@adsm:etag' 'W/\"')])"'                              "not(//atom:entry[contains(atom:id' 'Orders') and contains(@adsm:etag' 'W/\"')])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                          ExpectETag = false'                      }'                      // V1 expand                      new {                          QueryStrings = new string[] {                              "/Customers(0)?$expand=Orders"'                              "/Customers(1)?$expand=Orders"                          }'                          XPathExprs = new string[] {                              "not(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(1)')]/atom:content/@src)"'                              "count(/atom:entry[contains(atom:id' 'Customers(1)')]/adsm:properties/*)=7 or count(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/adsm:properties/*)=7"'                                                            "boolean(/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                              "not    (/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                              "not    (/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content[not(count(adsm:properties/*)=3)])"'                                "not(//atom:entry/atom:link[@rel='edit-media' and @adsm:etag != '\"MediaResourceETag1\"'])"'                              "boolean(//atom:entry[contains(atom:id' 'Customers') and contains(@adsm:etag' 'W/\"')])"'                              "not(//atom:entry[contains(atom:id' 'Orders') and @adsm:etag])"'                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                          ExpectETag = false'                      }'                      // multilevel expand and project' only project 1 property per level                      new {                          QueryStrings = new string[] {                              "/Orders(1)?$select=ID&$expand=Customer($select=Name;$expand=BestFriend($select=Name;$expand=Orders($select=ID)))"'                          }'                          XPathExprs = new string[] {                              "not(/atom:entry/adsm:properties)"'                              "not(/atom:entry/adsm:content/@src)"'                              "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                              "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                              "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[not(ads:Name)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/adsm:properties)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/@src)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/adsm:properties[not(ads:Name)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"'                              "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='BestFriend']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag = '\"MediaResourceETag1\"')])"'                              "count(//atom:entry[atom:link[@rel='edit' and @title='Orders'] and contains(@adsm:etag' 'W/\"')]) = 0"'                              "count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Customers')] and contains(@adsm:etag' 'W/\"')]) = count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Customers')]])"'                              "count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Orders')] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and contains(@href' 'Orders')]])"                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 2'                          ExpectETag = false'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientProjectionConcurrencyInterceptorTests,The following statement contains a magic number: var testCases = new TestCaseInfo[] {                        // Make sure the client works when there's no projected properties' i.e. we omit the <m:properties /> node                      // This should hold true for both MLE and non-MLE entities.                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(0)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() {Name = c.Name' Orders = c.Orders.Select(o => new NarrowOrder() { DollarAmount = o.DollarAmount }).ToList()})'                          QueryString = "Customers(1)?$expand=Orders($select=DollarAmount)&$select=Name"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.IsNull(((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.AreEqual(2' ((NarrowCustomerWithStream)c).Orders.Count());                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 1'                      }'                        //// Project a subset of properties                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 0).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(0)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Where(c => c.ID == 1).Select(c => new NarrowCustomerWithStream() { Concurrency = c.Concurrency' EditTimeStamp = c.EditTimeStamp})'                          QueryString = "Customers(1)?$select=Concurrency'EditTimeStamp"'                          Validate = c => {                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("1"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.IsNull(((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).Orders);                          }'                          ExpectedCustomerQueryInterceptorCalls = 1'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// Explicitly project all properties                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return from c in ctx.CreateQuery<NarrowCustomerWithStream>("Customers") where c.ID == 1 select new { c' c.BestFriend }; }'                          QueryString = "Customers(1)?$expand=BestFriend"'                          Validate = c => { }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// V1 expand                      new TestCaseInfo() {                          Query = ctx => { ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support; return ctx.CreateQuery<NarrowCustomerWithStream>("Customers").Expand("BestFriend").Where(c => c.ID == 0); }'                          QueryString = "Customers(0)?$expand=BestFriend"'                          Validate = c => {                              Assert.AreEqual(0' ((NarrowCustomerWithStream)c).ID);                              Assert.AreEqual("0"' ((NarrowCustomerWithStream)c).Concurrency);                              Assert.AreEqual("Customer 0"' ((NarrowCustomerWithStream)c).Name);                              Assert.IsNotNull(((NarrowCustomerWithStream)c).EditTimeStamp);                              Assert.IsNull(((NarrowCustomerWithStream)c).BestFriend);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2'                          ExpectedOrderQueryInterceptorCalls = 0'                      }'                        //// multilevel expand and project' only project 1 property per level                      new TestCaseInfo() {                          Query = ctx => ctx.CreateQuery<NarrowOrder>("Orders").Where(o => o.ID == 1).Select(o => new NarrowOrder()                          {                              ID = o.ID'                              Customer = new NarrowCustomerWithStream()                              {                                  Name = o.Customer.Name'                                   BestFriend = new NarrowCustomerWithStream()                                  {                                      Name = o.Customer.BestFriend.Name'                                       Orders = o.Customer.BestFriend.Orders.Select(o2 => new NarrowOrder() { ID = o2.ID }).ToList()                                  }                              }                          })'                          QueryString = "Orders(1)?$expand=Customer($select=Name)'Customer($expand=BestFriend($select=Name))'Customer($expand=BestFriend($expand=Orders($select=ID)))&$select=ID"'                          Validate = o => {                              // Order                              Assert.AreEqual(1' ((NarrowOrder)o).ID);                              Assert.AreEqual(0' ((NarrowOrder)o).DollarAmount);                                // Order/Customer                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.EditTimeStamp);                              Assert.AreEqual("Customer 1"' ((NarrowOrder)o).Customer.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.Orders);                                // Order/Customer/BestFriend                              Assert.AreEqual(NarrowCustomerWithStream.UnInitID' ((NarrowOrder)o).Customer.BestFriend.ID);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Concurrency);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.EditTimeStamp);                              Assert.AreEqual("Customer 0"' ((NarrowOrder)o).Customer.BestFriend.Name);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.BestFriend);                              Assert.AreEqual(2' ((NarrowOrder)o).Customer.BestFriend.Orders.Count());                                // Order/Customer/BestFriend/Orders                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].ID);                              Assert.AreEqual(100' ((NarrowOrder)o).Customer.BestFriend.Orders[1].ID);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[0].DollarAmount);                              Assert.AreEqual(0' ((NarrowOrder)o).Customer.BestFriend.Orders[1].DollarAmount);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[0].Customer);                              Assert.IsNull(((NarrowOrder)o).Customer.BestFriend.Orders[1].Customer);                          }'                          ExpectedCustomerQueryInterceptorCalls = 2' // because the expansion above is heavily redundant' only 2 calls to the interceptor are made following integration of the ODL uri parser.                          ExpectedOrderQueryInterceptorCalls = 2'                      }'                  };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The following statement contains a magic number: CustomObjectService.OrderChangeInterceptorOverride = (o' option) =>                      {                          orderChangeInterceptorInvokeCount++;                          Assert.AreEqual(123.45' o.DollarAmount);                      };
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ChangeInterceptorTests,The following statement contains a magic number: o.DollarAmount = 123.45;
Magic Number,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,ClientEntityDescriptorAPITest,The following statement contains a magic number: northwindClient.Orders newOrder = northwindClient.Orders.CreateOrders(99999);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryFailureUsingExecuteBatch,The following statement contains a magic number: Assert.IsTrue(responses.Count == 2' "expecting 2 responses in batch query");
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryExpandStronglyTypedProperties,The following statement contains a magic number: i < 2
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountAsync,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountAsync,The following statement contains a magic number: Assert.AreEqual(15' countValue);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountNotFoundException,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountNotFoundException,The following statement contains a magic number: i < 2
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountCustomRequest,The following statement contains a magic number: Assert.AreEqual(4' count);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountCustomRequest,The following statement contains a magic number: i == 2
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The following statement contains a magic number: IQueryable[] queries = new IQueryable[] {                            // case 0: no count - should throw at get_CountValue                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers") select c).Take(1)'                            // case 1: has count - should equal to 15                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount() select c).Take(1)'                            // case 2: has count with expand - should equal to 15                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").Expand("Orders").IncludeTotalCount() select c).Take(1)'                                                    // case 3: has count with ordering' skipping - should equal to 15                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().OrderBy( cc=>cc.ContactTitle).Skip(2).Take(1) select c)'                                                    // case 4: has count with filtering - should equal to 4                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().Where(cc=>cc.ContactTitle.Equals("owner")).Take(1) select c)'                                                   // case 5: has count with filtering & expanding - should equal to 4                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").IncludeTotalCount().Expand("Orders").Where(cc=>cc.ContactTitle.Equals("owner")).Take(1) select c)'                                                    // case 6: has count from Custom Query Option - should equal to 15                          (from c in ctx.CreateQuery<northwindClient.Customers>("Customers").AddQueryOption("$count"' "true").Take(1) select c)                      };
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The following statement contains a magic number: Assert.AreEqual(4' count);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The following statement contains a magic number: i == 4 || i == 5
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,QueryRowCountWithOptions,The following statement contains a magic number: i == 4 || i == 5
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,PageSizeCustomizer,The following statement contains a magic number: config.SetEntitySetPageSize("*"' 2);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,PageSizeCustomizer,The following statement contains a magic number: config.SetEntitySetPageSize("Customers"' 10);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,ServerDrivenPagingBasic,The following statement contains a magic number: var querycountpairs = new[] { new { query = "/Customers?$top=20&$skip=1"' count = 1' result = "/Customers?$top=10&$skiptoken='BSBEV'"' idcount = 10 }'                                                    new { query = "/Customers"' count = 1' result = "/Customers?$skiptoken='BOTTM'"' idcount = 10 }'                                                  };
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,ServerDrivenPagingBasic,The following statement contains a magic number: var querycountpairs = new[] { new { query = "/Customers?$top=20&$skip=1"' count = 1' result = "/Customers?$top=10&$skiptoken='BSBEV'"' idcount = 10 }'                                                    new { query = "/Customers"' count = 1' result = "/Customers?$skiptoken='BOTTM'"' idcount = 10 }'                                                  };
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,PageSizeCustomizerFast,The following statement contains a magic number: config.SetEntitySetPageSize("*"' 5);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,PageSizeCustomizerFast,The following statement contains a magic number: config.SetEntitySetPageSize("Customers"' 30);
Magic Number,AstoriaUnitTests,ClientBasicsNWReadOnly,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\NWReadOnlyTests.cs,SDPC_QORFullLoad,The following statement contains a magic number: do                      {                          ICollection previousOrderCollection = null;                            foreach (var c in qor)                          {                              try                              {                                  if (previousOrderCollection != null)                                  {                                      qor.GetContinuation(previousOrderCollection);                                      Assert.Fail("Out of scope collection did not throw");                                  }                              }                              catch (ArgumentException)                              {                              }                                var nextOrderLink = qor.GetContinuation(c.Orders);                              while (nextOrderLink != null)                              {                                  if (custCount % 2 == 0)                                  {                                      var innerQOR = ctx.Execute<northwindBinding.Orders>(nextOrderLink) as QueryOperationResponse<northwindBinding.Orders>;                                      foreach (var innerOrder in innerQOR)                                      {                                          ctx.AttachLink(c' "Orders"' innerOrder);                                          c.Orders.Add(innerOrder);                                      }                                      nextOrderLink = innerQOR.GetContinuation();                                  }                                  else                                  {                                      nextOrderLink = ctx.LoadProperty(c' "Orders"' nextOrderLink).GetContinuation();                                  }                              }                                previousOrderCollection = c.Orders;                                orderCount += c.Orders.Count;                              custCount++;                          }                            nextCustLink = qor.GetContinuation();                          if (nextCustLink != null)                          {                              qor = ctx.Execute<northwindBinding.Customers>(nextCustLink) as QueryOperationResponse<northwindBinding.Customers>;                          }                        } while (nextCustLink != null);
Magic Number,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertReplace,The following statement contains a magic number: return Expression.Convert(                          Expression.Call(                              Expression.Convert(this.Visit(m.Arguments[0])' typeof(String))'                              mi'                              Expression.Convert(this.Visit(m.Arguments[1])' typeof(String))'                              Expression.Convert(this.Visit(m.Arguments[2])' typeof(String)))'                           typeof(object));
Magic Number,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,ConvertSubstring,The following statement contains a magic number: m.Arguments.Count == 2
Magic Number,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetReadStreamUri,The following statement contains a magic number: switch (p.ID % 2)                  {                      case 1:                          return new Uri("http://localhost/someuri/");                      default:                          return null;                  }
Magic Number,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetContentType,The following statement contains a magic number: switch (p.ID % 3)                  {                      case 1:                          return "image/jpeg";                      case 2:                          return "image/tiff";                      default:                          return "image/png";                  }
Magic Number,AstoriaUnitTests,DataServiceStreamProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,GetContentType,The following statement contains a magic number: switch (p.ID % 3)                  {                      case 1:                          return "image/jpeg";                      case 2:                          return "image/tiff";                      default:                          return "image/png";                  }
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,PopulateData,The following statement contains a magic number: Photo p = new Photo()              {                  ID = NextItemID++'                  Description = "Default Photo 1"'                  Name = "Photo 1"'                  Rating = 3'                  LastUpdated = DateTime.Now              };
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,PopulateData,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,PopulateData,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,PopulateData,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,PopulateData,The following statement contains a magic number: s.Write(buffer' 0' 4);
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,AddResource,The following statement contains a magic number: throw new DataServiceException(400' String.Format("Entity with the same key already present. EntityType: '{0}'"'                          resource.GetType().Name));
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SetReference,The following statement contains a magic number: throw new DataServiceException(                      400'                      String.Format("Bad Request. The resource type '{0}' is not a valid type for the property '{1}' in resource '{2}'. Please make sure that the uri refers to the correct type"'                                    propertyValue.GetType().FullName' propertyName' targetResource.GetType().FullName));
Magic Number,AstoriaUnitTests,PhotoContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\BlobServer.cs,SetValue,The following statement contains a magic number: throw new DataServiceException(                      400'                      String.Format("Bad Request. The resource type '{0}' is not a valid type for the property '{1}' in resource '{2}'. Please make sure that the uri refers to the correct type"'                                    propertyValue.GetType().FullName' propertyName' targetResource.GetType().FullName));
Magic Number,AstoriaUnitTests,NWServiceOpService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,GetCustomersEnumerable,The following statement contains a magic number: return this.CurrentDataSource.Customers.Take(5).AsEnumerable();
Magic Number,AstoriaUnitTests,NWServiceOpService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,GetCustomerNameById,The following statement contains a magic number: return (from c in this.CurrentDataSource.Customers where c.CustomerID == customerId select c.CompanyName).Take(5);
Magic Number,AstoriaUnitTests,NWServiceOpService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,GetCustomerNamesEnumerable,The following statement contains a magic number: return (from c in this.CurrentDataSource.Customers select c.CompanyName).Take(5).AsEnumerable();
Magic Number,AstoriaUnitTests,NWServiceOpService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\WebServer\LocalWebServer.cs,GetAllCustomers,The following statement contains a magic number: return this.CurrentDataSource.Customers.Take(5);
Magic Number,System.Data.Test.Astoria,IOUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\IOUtil.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,System.Data.Test.Astoria,IOUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\IOUtil.cs,EnsureFileDeleted,The following statement contains a magic number: Threading.Thread.Sleep(1000);
Magic Number,System.Data.Test.Astoria,IOUtil,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\Util\IOUtil.cs,WriteAllTextWithRetry,The following statement contains a magic number: i < 3
Duplicate Code,Microsoft.OData.Client.Design.T4,ODataClientCSharpTemplate,C:\research\architectureSmells\repos\OData_odata.net\src\CodeGen\ODataT4CodeGenerator.cs,WriteGeneratedEdmModel,The method contains a code clone-set at the following line numbers (starting from the method definition): ((126' 149)' (166' 189))
Missing Default,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,VerifyInsertResponse,The following switch statement is missing a default case: switch (addAndUpdateResponsePreference)                  {                      case DataServiceResponsePreference.None:                      case DataServiceResponsePreference.IncludeContent:                          Assert.IsTrue(entity.InterceptorInserted.Value);                          break;                      case DataServiceResponsePreference.NoContent:                          Assert.IsNull(entity.InterceptorInserted);                          break;                  }
Missing Default,AstoriaUnitTests,ClientBasics,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\ClientBasics.cs,VerifyUpdateResponse,The following switch statement is missing a default case: switch (addAndUpdateResponsePreference)                  {                      case DataServiceResponsePreference.None:                      case DataServiceResponsePreference.NoContent:                          Assert.IsNull(entity.InterceptorUpdated);                          break;                      case DataServiceResponsePreference.IncludeContent:                          Assert.IsTrue(entity.InterceptorUpdated.Value);                          break;                  }
Missing Default,AstoriaUnitTests,OpenReflectionDataContext<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenReflectionDataContext.cs,SaveChanges,The following switch statement is missing a default case: switch (kvp.Value)                  {                      case EntityState.Added:                          Values.Add((T)kvp.Key);                          break;                        case EntityState.Deleted:                          Values.Remove((T)kvp.Key);                          break;                  }
Missing Default,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,VisitMethodCall,The following switch statement is missing a default case: switch (method.Name)                  {                      case "GetValue":                          return this.ConvertGetValue(m);                        case "GetSequenceValue":                          return this.ConvertGetSequenceValue(m);                        case "Convert":                          return this.ConvertCast(m);                      case "TypeIs":                          return this.ConvertTypeIs(m);                        case "OfType":                          return this.ConvertOfType(m);                  }
Missing Default,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,VisitMethodCall,The following switch statement is missing a default case: switch (method.Name)                      {                          case "GetValue":                              return this.ConvertGetValue(m);                            case "AndAlso":                          case "OrElse":                              return this.ConvertLogicalOperator(m);                            case "Concat":                              return this.ConvertConcat(m);                          case "EndsWith":                              return this.ConvertEndsWith(m);                          case "IndexOf":                              return this.ConvertIndexOf(m);                          case "Length":                              return this.ConvertLength(m);                          case "Replace":                              return this.ConvertReplace(m);                          case "StartsWith":                              return this.ConvertStartsWith(m);                          case "Substring":                              return this.ConvertSubstring(m);                          case "Contains":                              return this.ConvertContains(m);                          case "ToLower":                              return this.ConvertToLower(m);                          case "ToUpper":                              return this.ConvertToUpper(m);                          case "Trim":                              return this.ConvertTrim(m);                            case "Convert":                              return this.ConvertCast(m);                          case "TypeIs":                              return this.ConvertTypeIs(m);                            case "Round":                          case "Floor":                          case "Ceiling":                              return this.ConvertNumericMethod(m);                            case "Year":                          case "Month":                          case "Day":                          case "Hour":                          case "Minute":                          case "Second":                              return this.ConvertDateTimeMethod(m);                      }
Missing Default,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,VisitBinary,The following switch statement is missing a default case: switch (method.Name)                  {                      case "Add":                      case "Subtract":                      case "Multiply":                      case "Divide":                      case "Modulo":                          return this.ConvertArithmeticOperator(method.Name' b);                        case "LessThan":                      case "LessThanOrEqual":                      case "GreaterThan":                      case "GreaterThanOrEqual":                      case "Equal":                      case "NotEqual":                          return this.ConvertComparisonOperator(ExpressionTypeFromOperatorName(method.Name)' b);                  }
Missing Default,AstoriaUnitTests,OpenTypeToClrConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\OpenTypeToClrConverter.cs,VisitUnary,The following switch statement is missing a default case: switch (method.Name)                  {                      case "Not":                      case "Negate":                          return this.ConvertUnaryOperator(method.Name' u);                  }
Missing Default,AstoriaUnitTests,RuntimeEvaluator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\ddbasics\RuntimeEvaluator.cs,Negate,The following switch statement is missing a default case: switch (Type.GetTypeCode(arg.GetType()))              {                  case TypeCode.Int16:                      return -(short)arg;                  case TypeCode.SByte:                      return -(byte)arg;                  case TypeCode.Int32:                      return -(int)arg;                  case TypeCode.Int64:                      return -(long)arg;              }
