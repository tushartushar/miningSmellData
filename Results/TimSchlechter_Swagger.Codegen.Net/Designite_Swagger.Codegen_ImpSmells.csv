Implementation smell,Namespace,Class,File,Method,Description
Long Method,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The method has 124 lines of code.
Long Method,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The method has 201 lines of code.
Long Method,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The method has 122 lines of code.
Long Method,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The method has 122 lines of code.
Long Method,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The method has 122 lines of code.
Complex Method,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,Cyclomatic complexity of the method is 8
Complex Method,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Long Identifier,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 8 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 122.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 9 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 122.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            this.Write(this.ToStringHelper.ToStringWithCulture((Settings.Namespace == null ? "" : Settings.Namespace + ".") + endpoint.Name.ToPascalCase())); " is 145.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 10 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 12 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 15 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 18 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 18 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 21 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 22 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 22 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 22 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 23 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 30 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 33 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 35 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 35 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The length of the statement  "            #line 36 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,ClientTemplateBase,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 7 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 124.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 10 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 12 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 15 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 18 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 18 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 27 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 29 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 31 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 33 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 34 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 36 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 38 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 39 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 39 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 42 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 44 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 48 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 49 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 51 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 52 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 54 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 56 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 57 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 57 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 59 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 62 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The length of the statement  "            #line 64 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt" " is 125.
Long Statement,Swagger.Codegen.Processors.CSharp,EndpointTemplateBase,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,TransformText,The length of the statement  "            #line 6 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,TransformText,The length of the statement  "            #line 7 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,TransformText,The length of the statement  "            #line 9 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.tt" " is 123.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,TransformText,The length of the statement  "            #line 10 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.tt" " is 124.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,TransformText,The length of the statement  "            #line 11 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.tt" " is 124.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,TransformText,The length of the statement  "            #line 13 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.tt" " is 124.
Long Statement,Swagger.Codegen.Processors.CSharp,WrapperTemplateBase,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\WrapperTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,Swagger.Codegen,Codegenerator,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Codegenerator.cs,CreateEndpoint,The length of the statement  "                                    ? types.FirstOrDefault(t => t.Name == property.items._ref) ?? GetPrimitiveType(property.items.type' property.items.format) " is 122.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Swagger.Codegen,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Reflection,ReflectionUtils,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Complex Conditional,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Swagger.Codegen,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Magic Number,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The following statement contains a magic number: this.Write(this.ToStringHelper.ToStringWithCulture(Api.Description.ToCSharpComment(indent: 4)));
Magic Number,Swagger.Codegen.Processors.CSharp,ClientTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.cs,TransformText,The following statement contains a magic number: foreach (var endpoint in Api.Endpoints) {                             #line default              #line hidden              this.Write("    \r\n    /// <summary>\r\n    ");                            #line 33 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(endpoint.Description.ToCSharpComment(indent: 4)));                            #line default              #line hidden              this.Write("\r\n    /// </summary>\r\n    public ");                            #line 35 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(endpoint.Name.ToPascalCase()));                            #line default              #line hidden              this.Write("Client ");                            #line 35 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(endpoint.Name.ToPascalCase()));                            #line default              #line hidden              this.Write(" { get; private set; }        \r\n");                            #line 36 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\ClientTemplate.tt"   }
Magic Number,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The following statement contains a magic number: this.Write(this.ToStringHelper.ToStringWithCulture(Endpoint.Description.ToCSharpComment(indent: 4)));
Magic Number,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The following statement contains a magic number: foreach (var route in Endpoint.Routes) {                             #line default              #line hidden              this.Write("\r\n");                            #line 29 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   if (!string.IsNullOrEmpty(route.Description)) {                             #line default              #line hidden              this.Write("        /// <summary>\r\n        ");                            #line 31 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(route.Description.ToCSharpComment(indent: 4)));                            #line default              #line hidden              this.Write("\r\n        /// </summary>\r\n");                            #line 33 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden                            #line 34 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   if (!string.IsNullOrEmpty(route.Remarks)) {                             #line default              #line hidden              this.Write("        /// <remarks>\r\n        ");                            #line 36 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(route.Remarks.ToCSharpComment(indent: 4)));                            #line default              #line hidden              this.Write("\r\n        /// </remarks>\r\n");                            #line 38 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden              this.Write("        public ");                            #line 39 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(GetResponseTypeString(route)));                            #line default              #line hidden              this.Write(" ");                            #line 39 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(route.Name.ToPascalCase()));                            #line default              #line hidden              this.Write("()\r\n        {\r\n        }    \r\n");                            #line 42 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }
Magic Number,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The following statement contains a magic number: foreach (var route in Endpoint.Routes) {                             #line default              #line hidden              this.Write("\r\n");                            #line 29 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   if (!string.IsNullOrEmpty(route.Description)) {                             #line default              #line hidden              this.Write("        /// <summary>\r\n        ");                            #line 31 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(route.Description.ToCSharpComment(indent: 4)));                            #line default              #line hidden              this.Write("\r\n        /// </summary>\r\n");                            #line 33 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden                            #line 34 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   if (!string.IsNullOrEmpty(route.Remarks)) {                             #line default              #line hidden              this.Write("        /// <remarks>\r\n        ");                            #line 36 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(route.Remarks.ToCSharpComment(indent: 4)));                            #line default              #line hidden              this.Write("\r\n        /// </remarks>\r\n");                            #line 38 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden              this.Write("        public ");                            #line 39 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(GetResponseTypeString(route)));                            #line default              #line hidden              this.Write(" ");                            #line 39 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(route.Name.ToPascalCase()));                            #line default              #line hidden              this.Write("()\r\n        {\r\n        }    \r\n");                            #line 42 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }
Magic Number,Swagger.Codegen.Processors.CSharp,EndpointTemplate,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.cs,TransformText,The following statement contains a magic number: if (Endpoint.Types != null) {                             #line default              #line hidden              this.Write("    \r\n    namespace Models\r\n    {\r\n");                            #line 48 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   foreach (var type in Endpoint.Types) {                             #line default              #line hidden              this.Write("        public class ");                            #line 49 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToPascalCase()));                            #line default              #line hidden              this.Write("\r\n        {\r\n");                            #line 51 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   foreach (var property in type.Properties) {                             #line default              #line hidden                            #line 52 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   if (!string.IsNullOrEmpty(property.Description)) {                             #line default              #line hidden              this.Write("            /// <summary>\r\n            ");                            #line 54 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(property.Description.ToCSharpComment(indent: 8)));                            #line default              #line hidden              this.Write("\r\n            /// </summary>\r\n");                            #line 56 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden              this.Write("            public ");                            #line 57 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeString(property)));                            #line default              #line hidden              this.Write(" ");                            #line 57 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"              this.Write(this.ToStringHelper.ToStringWithCulture(property.Name.ToPascalCase()));                            #line default              #line hidden              this.Write(" { get; set ; }\r\n\r\n");                            #line 59 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden              this.Write("        }\r\n\r\n");                            #line 62 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }                             #line default              #line hidden              this.Write("    }\r\n");                            #line 64 "C:\Users\Tim Schlechter\Dropbox\Code\Swagger.Codegen.Net\src\Swagger.Codegen\Processors\CSharp\EndpointTemplate.tt"   }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Missing Default,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                    case '}':                      return TOKEN_CURLY_CLOSE;                    case '[':                      return TOKEN_SQUARED_OPEN;                    case ']':                      return TOKEN_SQUARED_CLOSE;                    case ''':                      return TOKEN_COMMA;                    case '"':                      return TOKEN_STRING;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                    case ':':                      return TOKEN_COLON;              }
Missing Default,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                    case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                    case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                    case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                    case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                    case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                    case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                    case TOKEN_NONE:                      break;              }
Missing Default,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                    case '}':                      return TOKEN_CURLY_CLOSE;                    case '[':                      return TOKEN_SQUARED_OPEN;                    case ']':                      return TOKEN_SQUARED_CLOSE;                    case ''':                      return TOKEN_COMMA;                    case '"':                      return TOKEN_STRING;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                    case ':':                      return TOKEN_COLON;              }
Missing Default,Swagger.Codegen,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                    case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                    case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                    case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                    case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                    case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                    case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                    case TOKEN_NONE:                      break;              }
Missing Default,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                    case '}':                      return TOKEN_CURLY_CLOSE;                    case '[':                      return TOKEN_SQUARED_OPEN;                    case ']':                      return TOKEN_SQUARED_CLOSE;                    case ''':                      return TOKEN_COMMA;                    case '"':                      return TOKEN_STRING;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                    case ':':                      return TOKEN_COLON;              }
Missing Default,Reflection,SimpleJson,C:\repos\TimSchlechter_Swagger.Codegen.Net\src\Swagger.Codegen\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                    case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                    case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                    case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                    case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                    case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                    case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                    case TOKEN_NONE:                      break;              }
