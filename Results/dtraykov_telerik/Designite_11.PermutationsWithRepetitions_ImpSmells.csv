Implementation smell,Namespace,Class,File,Method,Description
Magic Number,PermutationsWithRepetitions,PermutationsWithRepetitions,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\Recursion\PermutationsWithRepetitions\PermutationsWithRepetitions.cs,Permute,The following statement contains a magic number: if (start < n) {  	for (int i = n / 2; i >= start; i--) {  		for (int j = i + 1; j < n; j++) {  			if (subSet [i] != subSet [j]) {  				// swap subSet[i] <--> subSet[j]  				tmp = subSet [i];  				subSet [i] = subSet [j];  				subSet [j] = tmp;  				Permute (subSet' i + 1' n);  			}  		}  		// Undo all modifications done by  		// recursive calls and swapping  		tmp = subSet [i];  		for (int k = i; k < n - 1;) {  			subSet [k] = subSet [++k];  		}  		subSet [n - 1] = tmp;  	}  }  
Magic Number,PermutationsWithRepetitions,PermutationsWithRepetitions,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\Recursion\PermutationsWithRepetitions\PermutationsWithRepetitions.cs,Permute,The following statement contains a magic number: for (int i = n / 2; i >= start; i--) {  	for (int j = i + 1; j < n; j++) {  		if (subSet [i] != subSet [j]) {  			// swap subSet[i] <--> subSet[j]  			tmp = subSet [i];  			subSet [i] = subSet [j];  			subSet [j] = tmp;  			Permute (subSet' i + 1' n);  		}  	}  	// Undo all modifications done by  	// recursive calls and swapping  	tmp = subSet [i];  	for (int k = i; k < n - 1;) {  		subSet [k] = subSet [++k];  	}  	subSet [n - 1] = tmp;  }  
Magic Number,PermutationsWithRepetitions,PermutationsWithRepetitions,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\Recursion\PermutationsWithRepetitions\PermutationsWithRepetitions.cs,Main,The following statement contains a magic number: Permute (multiSet' 0' 4);  
