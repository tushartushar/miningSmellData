Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,Cyclomatic complexity of the method is 9
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: while (this.currentSize > 0) {  	if (column == 0) {  		for (int k = 0; k < emptyLeaf; k++) {  			Console.Write (' ');  		}  	}  	Console.Write (this.queueArray [j].Getvalue ());  	if (++j == this.currentSize) {  		break;  	}  	if (++column == itemsPerRow) {  		emptyLeaf /= 2;  		itemsPerRow *= 2;  		column = 0;  		Console.WriteLine ();  	}  	else {  		for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  			Console.Write (' ');  		}  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: while (this.currentSize > 0) {  	if (column == 0) {  		for (int k = 0; k < emptyLeaf; k++) {  			Console.Write (' ');  		}  	}  	Console.Write (this.queueArray [j].Getvalue ());  	if (++j == this.currentSize) {  		break;  	}  	if (++column == itemsPerRow) {  		emptyLeaf /= 2;  		itemsPerRow *= 2;  		column = 0;  		Console.WriteLine ();  	}  	else {  		for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  			Console.Write (' ');  		}  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: while (this.currentSize > 0) {  	if (column == 0) {  		for (int k = 0; k < emptyLeaf; k++) {  			Console.Write (' ');  		}  	}  	Console.Write (this.queueArray [j].Getvalue ());  	if (++j == this.currentSize) {  		break;  	}  	if (++column == itemsPerRow) {  		emptyLeaf /= 2;  		itemsPerRow *= 2;  		column = 0;  		Console.WriteLine ();  	}  	else {  		for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  			Console.Write (' ');  		}  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: while (this.currentSize > 0) {  	if (column == 0) {  		for (int k = 0; k < emptyLeaf; k++) {  			Console.Write (' ');  		}  	}  	Console.Write (this.queueArray [j].Getvalue ());  	if (++j == this.currentSize) {  		break;  	}  	if (++column == itemsPerRow) {  		emptyLeaf /= 2;  		itemsPerRow *= 2;  		column = 0;  		Console.WriteLine ();  	}  	else {  		for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  			Console.Write (' ');  		}  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: if (++column == itemsPerRow) {  	emptyLeaf /= 2;  	itemsPerRow *= 2;  	column = 0;  	Console.WriteLine ();  }  else {  	for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  		Console.Write (' ');  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: if (++column == itemsPerRow) {  	emptyLeaf /= 2;  	itemsPerRow *= 2;  	column = 0;  	Console.WriteLine ();  }  else {  	for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  		Console.Write (' ');  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: if (++column == itemsPerRow) {  	emptyLeaf /= 2;  	itemsPerRow *= 2;  	column = 0;  	Console.WriteLine ();  }  else {  	for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  		Console.Write (' ');  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: if (++column == itemsPerRow) {  	emptyLeaf /= 2;  	itemsPerRow *= 2;  	column = 0;  	Console.WriteLine ();  }  else {  	for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  		Console.Write (' ');  	}  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: emptyLeaf /= 2;  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: itemsPerRow *= 2;  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  	Console.Write (' ');  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,DisplayQueue,The following statement contains a magic number: for (int k = 0; k < (emptyLeaf * 2) - 2; k++) {  	Console.Write (' ');  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,CascadeDown,The following statement contains a magic number: while (index < this.currentSize / 2) {  	int leftChild = (2 * index) + 1;  	int rightChild = leftChild + 1;  	bool compare = this.queueArray [leftChild].Getvalue ().CompareTo (this.queueArray [rightChild].Getvalue ()) == -1;  	if (rightChild < this.currentSize && compare) {  		largerChild = rightChild;  	}  	else {  		largerChild = leftChild;  	}  	int comp = top.Getvalue ().CompareTo (this.queueArray [largerChild].Getvalue ());  	if (comp == 0 || comp > 0) {  		break;  	}  	this.queueArray [index] = this.queueArray [largerChild];  	index = largerChild;  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,CascadeDown,The following statement contains a magic number: while (index < this.currentSize / 2) {  	int leftChild = (2 * index) + 1;  	int rightChild = leftChild + 1;  	bool compare = this.queueArray [leftChild].Getvalue ().CompareTo (this.queueArray [rightChild].Getvalue ()) == -1;  	if (rightChild < this.currentSize && compare) {  		largerChild = rightChild;  	}  	else {  		largerChild = leftChild;  	}  	int comp = top.Getvalue ().CompareTo (this.queueArray [largerChild].Getvalue ());  	if (comp == 0 || comp > 0) {  		break;  	}  	this.queueArray [index] = this.queueArray [largerChild];  	index = largerChild;  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,CascadeUp,The following statement contains a magic number: while (index > 0 && this.queueArray [parent].Getvalue ().CompareTo (bottom.Getvalue ()) == -1) {  	this.queueArray [index] = this.queueArray [parent];  	index = parent;  	parent = (parent - 1) / 2;  }  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,CascadeUp,The following statement contains a magic number: parent = (parent - 1) / 2;  
Magic Number,PriorityQueue,PriorityQueue,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\PriorityQueue.cs,Resize,The following statement contains a magic number: this.maxSize = this.maxSize * 2;  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (40);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (70);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (20);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (60);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (50);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (100);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (82);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (35);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (90);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (10);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (120);  
Magic Number,PriorityQueue,Program,C:\repos\dtraykov_telerik\C# Data Structures and Algorithms\AdvancedDataStructures\PriorityQueue\Program.cs,Main,The following statement contains a magic number: intQueue.Enqueue (5);  
