Implementation smell,Namespace,Class,File,Method,Description
Long Method,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The method has 116 lines of code.
Complex Method,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,Cyclomatic complexity of the method is 31
Complex Method,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,GetSurroundingBombCount,Cyclomatic complexity of the method is 17
Long Parameter List,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The method has 5 parameters.
Long Statement,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The length of the statement  "			if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) { " is 209.
Long Statement,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The length of the statement  "			scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerScore.CompareTo (firstPlayer.PlayerScore)); " is 121.
Complex Conditional,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The conditional expression  "int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)"  is complex.
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: do {  	if (isNewGame) {  		Console.WriteLine ("Let's play Minesweeper!");  		Console.WriteLine ("Try your luck and find the cells without bombs or ...");  		Console.WriteLine ("...you will die.");  		Console.WriteLine ("\n====================================");  		Console.WriteLine ("Menu:");  		Console.WriteLine ("'top' - show the rating");  		Console.WriteLine ("'restart' - start a new game");  		Console.WriteLine ("'exit' - exit the game");  		Console.WriteLine ("'4x5' - example for entering row and col");  		Console.WriteLine ("====================================");  		DrawGameField (gameField);  		isNewGame = false;  	}  	Console.Write ("Enter row and col [row x col]: ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		PlayerScore (scoreList);  		break;  	case "restart":  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		DrawGameField (gameField);  		isBomb = false;  		isNewGame = false;  		break;  	case "exit":  		Console.WriteLine ("Bye' Bye!");  		break;  	case "turn":  		if (bombs [gameFieldRow' gameFieldCol] != '*') {  			if (bombs [gameFieldRow' gameFieldCol] == '-') {  				PlayerTurn (gameField' bombs' gameFieldRow' gameFieldCol);  				playerScore++;  			}  			if (MaxScore == playerScore) {  				isWon = true;  			}  			else {  				DrawGameField (gameField);  			}  		}  		else {  			isBomb = true;  		}  		break;  	default:  		Console.WriteLine ("\nError: Invalid call\n");  		break;  	}  	if (isBomb) {  		DrawGameField (bombs);  		Console.WriteLine ("You hit a bomb and ... you are dead. You should try Again");  		Console.Write ("\nPersonal Score: {0} Enter your Nickname: "' playerScore);  		string playerName = Console.ReadLine ();  		Score newPlayerScore = new Score (playerName' playerScore);  		if (scoreList.Count < 5) {  			scoreList.Add (newPlayerScore);  		}  		else {  			for (int i = 0; i < scoreList.Count; i++) {  				if (scoreList [i].PlayerScore < newPlayerScore.PlayerScore) {  					scoreList.Insert (i' newPlayerScore);  					scoreList.RemoveAt (scoreList.Count - 1);  					break;  				}  			}  		}  		scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerName.CompareTo (firstPlayer.PlayerName));  		scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerScore.CompareTo (firstPlayer.PlayerScore));  		PlayerScore (scoreList);  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		playerScore = 0;  		isBomb = false;  		isNewGame = true;  	}  	if (isWon) {  		Console.WriteLine ("\nGODLIKE! You win!");  		DrawGameField (bombs);  		Console.WriteLine ("Enter your name: ");  		string playerName = Console.ReadLine ();  		Score newPlayerScore = new Score (playerName' playerScore);  		scoreList.Add (newPlayerScore);  		PlayerScore (scoreList);  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		playerScore = 0;  		isWon = false;  		isNewGame = true;  	}  }  while (command != "exit");  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: do {  	if (isNewGame) {  		Console.WriteLine ("Let's play Minesweeper!");  		Console.WriteLine ("Try your luck and find the cells without bombs or ...");  		Console.WriteLine ("...you will die.");  		Console.WriteLine ("\n====================================");  		Console.WriteLine ("Menu:");  		Console.WriteLine ("'top' - show the rating");  		Console.WriteLine ("'restart' - start a new game");  		Console.WriteLine ("'exit' - exit the game");  		Console.WriteLine ("'4x5' - example for entering row and col");  		Console.WriteLine ("====================================");  		DrawGameField (gameField);  		isNewGame = false;  	}  	Console.Write ("Enter row and col [row x col]: ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		PlayerScore (scoreList);  		break;  	case "restart":  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		DrawGameField (gameField);  		isBomb = false;  		isNewGame = false;  		break;  	case "exit":  		Console.WriteLine ("Bye' Bye!");  		break;  	case "turn":  		if (bombs [gameFieldRow' gameFieldCol] != '*') {  			if (bombs [gameFieldRow' gameFieldCol] == '-') {  				PlayerTurn (gameField' bombs' gameFieldRow' gameFieldCol);  				playerScore++;  			}  			if (MaxScore == playerScore) {  				isWon = true;  			}  			else {  				DrawGameField (gameField);  			}  		}  		else {  			isBomb = true;  		}  		break;  	default:  		Console.WriteLine ("\nError: Invalid call\n");  		break;  	}  	if (isBomb) {  		DrawGameField (bombs);  		Console.WriteLine ("You hit a bomb and ... you are dead. You should try Again");  		Console.Write ("\nPersonal Score: {0} Enter your Nickname: "' playerScore);  		string playerName = Console.ReadLine ();  		Score newPlayerScore = new Score (playerName' playerScore);  		if (scoreList.Count < 5) {  			scoreList.Add (newPlayerScore);  		}  		else {  			for (int i = 0; i < scoreList.Count; i++) {  				if (scoreList [i].PlayerScore < newPlayerScore.PlayerScore) {  					scoreList.Insert (i' newPlayerScore);  					scoreList.RemoveAt (scoreList.Count - 1);  					break;  				}  			}  		}  		scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerName.CompareTo (firstPlayer.PlayerName));  		scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerScore.CompareTo (firstPlayer.PlayerScore));  		PlayerScore (scoreList);  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		playerScore = 0;  		isBomb = false;  		isNewGame = true;  	}  	if (isWon) {  		Console.WriteLine ("\nGODLIKE! You win!");  		DrawGameField (bombs);  		Console.WriteLine ("Enter your name: ");  		string playerName = Console.ReadLine ();  		Score newPlayerScore = new Score (playerName' playerScore);  		scoreList.Add (newPlayerScore);  		PlayerScore (scoreList);  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		playerScore = 0;  		isWon = false;  		isNewGame = true;  	}  }  while (command != "exit");  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: do {  	if (isNewGame) {  		Console.WriteLine ("Let's play Minesweeper!");  		Console.WriteLine ("Try your luck and find the cells without bombs or ...");  		Console.WriteLine ("...you will die.");  		Console.WriteLine ("\n====================================");  		Console.WriteLine ("Menu:");  		Console.WriteLine ("'top' - show the rating");  		Console.WriteLine ("'restart' - start a new game");  		Console.WriteLine ("'exit' - exit the game");  		Console.WriteLine ("'4x5' - example for entering row and col");  		Console.WriteLine ("====================================");  		DrawGameField (gameField);  		isNewGame = false;  	}  	Console.Write ("Enter row and col [row x col]: ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		PlayerScore (scoreList);  		break;  	case "restart":  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		DrawGameField (gameField);  		isBomb = false;  		isNewGame = false;  		break;  	case "exit":  		Console.WriteLine ("Bye' Bye!");  		break;  	case "turn":  		if (bombs [gameFieldRow' gameFieldCol] != '*') {  			if (bombs [gameFieldRow' gameFieldCol] == '-') {  				PlayerTurn (gameField' bombs' gameFieldRow' gameFieldCol);  				playerScore++;  			}  			if (MaxScore == playerScore) {  				isWon = true;  			}  			else {  				DrawGameField (gameField);  			}  		}  		else {  			isBomb = true;  		}  		break;  	default:  		Console.WriteLine ("\nError: Invalid call\n");  		break;  	}  	if (isBomb) {  		DrawGameField (bombs);  		Console.WriteLine ("You hit a bomb and ... you are dead. You should try Again");  		Console.Write ("\nPersonal Score: {0} Enter your Nickname: "' playerScore);  		string playerName = Console.ReadLine ();  		Score newPlayerScore = new Score (playerName' playerScore);  		if (scoreList.Count < 5) {  			scoreList.Add (newPlayerScore);  		}  		else {  			for (int i = 0; i < scoreList.Count; i++) {  				if (scoreList [i].PlayerScore < newPlayerScore.PlayerScore) {  					scoreList.Insert (i' newPlayerScore);  					scoreList.RemoveAt (scoreList.Count - 1);  					break;  				}  			}  		}  		scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerName.CompareTo (firstPlayer.PlayerName));  		scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerScore.CompareTo (firstPlayer.PlayerScore));  		PlayerScore (scoreList);  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		playerScore = 0;  		isBomb = false;  		isNewGame = true;  	}  	if (isWon) {  		Console.WriteLine ("\nGODLIKE! You win!");  		DrawGameField (bombs);  		Console.WriteLine ("Enter your name: ");  		string playerName = Console.ReadLine ();  		Score newPlayerScore = new Score (playerName' playerScore);  		scoreList.Add (newPlayerScore);  		PlayerScore (scoreList);  		gameField = CreateGameField ();  		bombs = InitializeBombs ();  		playerScore = 0;  		isWon = false;  		isNewGame = true;  	}  }  while (command != "exit");  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: if (int.TryParse (command [0].ToString ()' out gameFieldRow) && int.TryParse (command [2].ToString ()' out gameFieldCol) && gameFieldRow <= gameField.GetLength (0) && gameFieldCol <= gameField.GetLength (1)) {  	command = "turn";  }  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: if (isBomb) {  	DrawGameField (bombs);  	Console.WriteLine ("You hit a bomb and ... you are dead. You should try Again");  	Console.Write ("\nPersonal Score: {0} Enter your Nickname: "' playerScore);  	string playerName = Console.ReadLine ();  	Score newPlayerScore = new Score (playerName' playerScore);  	if (scoreList.Count < 5) {  		scoreList.Add (newPlayerScore);  	}  	else {  		for (int i = 0; i < scoreList.Count; i++) {  			if (scoreList [i].PlayerScore < newPlayerScore.PlayerScore) {  				scoreList.Insert (i' newPlayerScore);  				scoreList.RemoveAt (scoreList.Count - 1);  				break;  			}  		}  	}  	scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerName.CompareTo (firstPlayer.PlayerName));  	scoreList.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.PlayerScore.CompareTo (firstPlayer.PlayerScore));  	PlayerScore (scoreList);  	gameField = CreateGameField ();  	bombs = InitializeBombs ();  	playerScore = 0;  	isBomb = false;  	isNewGame = true;  }  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,Main,The following statement contains a magic number: if (scoreList.Count < 5) {  	scoreList.Add (newPlayerScore);  }  else {  	for (int i = 0; i < scoreList.Count; i++) {  		if (scoreList [i].PlayerScore < newPlayerScore.PlayerScore) {  			scoreList.Insert (i' newPlayerScore);  			scoreList.RemoveAt (scoreList.Count - 1);  			break;  		}  	}  }  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,InitializeBombs,The following statement contains a magic number: while (bombs.Count < 15) {  	Random randomGenerator = new Random ();  	int randomLocation = randomGenerator.Next (50);  	if (!bombs.Contains (randomLocation)) {  		bombs.Add (randomLocation);  	}  }  
Magic Number,MinesweeperGame,Minesweeper,C:\repos\dtraykov_telerik\C# High Quality Code\NamingIdentifiers\MinesweeperGame\Minesweeper.cs,InitializeBombs,The following statement contains a magic number: while (bombs.Count < 15) {  	Random randomGenerator = new Random ();  	int randomLocation = randomGenerator.Next (50);  	if (!bombs.Contains (randomLocation)) {  		bombs.Add (randomLocation);  	}  }  
