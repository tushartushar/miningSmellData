Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The method has 140 lines of code.
Complex Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_BasicDeflateAndInflate,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_BasicDictionaryDeflateInflate,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,Cyclomatic complexity of the method is 21
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,MyTestInitialize,The length of the statement  "            TopLevelDir = System.IO.Path.Combine(parentDir' String.Format("Ionic.ZlibTest-{0}.tmp"' System.DateTime.Now.ToString("yyyyMMMdd-HHmmss"))); " is 139.
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_BasicDeflateAndInflate,The length of the statement  "            Assert.AreEqual<int>(ZlibConstants.Z_OK' rc' String.Format("at InitializeInflate() [{0}]"' decompressingStream.Message)); " is 121.
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_BasicDictionaryDeflateInflate,The length of the statement  "                Assert.AreEqual<int>(ZlibConstants.Z_OK' rc' String.Format("at Inflate/SetInflateDictionary() [{0}]"' decompressor.Message)); " is 125.
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The length of the statement  "                Assert.IsTrue(fi1.Length > fi2.Length' String.Format("Compressed File is not smaller' trial {0} ({1}!>{2})"' k' fi1.Length' fi2.Length)); " is 137.
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The length of the statement  "                Assert.IsTrue(fi1.Length > fi2.Length' String.Format("Compressed File is not smaller' trial {0} ({1}!>{2})"' k' fi1.Length' fi2.Length)); " is 137.
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The length of the statement  "                    string FileToCompress = System.IO.Path.Combine(TopLevelDir' String.Format("Zlib_Streams.{0}.{1}"' sz' (m == 0) ? "txt" : "bin")); " is 129.
Long Statement,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,_CreateAndFillBinary,The length of the statement  "            using (System.IO.Stream fileStream = new System.IO.FileStream(Filename' System.IO.FileMode.Create' System.IO.FileAccess.Write)) " is 127.
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,GetTestDependentDir,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,zlib_Compat_decompress_wi13446,The following statement contains a magic number: unpack(1024);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,zlib_Compat_decompress_wi13446,The following statement contains a magic number: unpack(16384);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_BasicDeflateAndInflate,The following statement contains a magic number: int bufferSize = 40000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,GZ_Utility,The following statement contains a magic number: int count = this.rnd.Next(81) + 40;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,GZ_Utility,The following statement contains a magic number: int count = this.rnd.Next(81) + 40;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,GZ_Utility,The following statement contains a magic number: System.Threading.Thread.Sleep(1200);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_BasicDictionaryDeflateInflate,The following statement contains a magic number: int comprLen = 40000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: int bufferSize = 40000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: compressor.AvailableBytesIn = 3;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: CompressedBytes[3]++;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: compressor.AvailableBytesIn = TextToCompress.Length - 3;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: decompressor.AvailableBytesIn = 2;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: decompressor.AvailableBytesIn = bufferSize - 2;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_TestFlushSync,The following statement contains a magic number: Assert.AreEqual<int>(TextToCompress.Length' result.Length + 3' "Strings are unequal lengths");
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: int bufferSize = 80000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: byte[] workBuffer = new byte[bufferSize / 4];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: switch (k)                  {                      case 0:                          // At this point' workBuffer is all zeroes' so it should compress very well.                          break;                        case 1:                          // switch to no compression' keep same workBuffer (all zeroes):                          compressingStream.SetDeflateParams(CompressionLevel.None' CompressionStrategy.Default);                          break;                        case 2:                          // Insert data into workBuffer' and switch back to compressing mode.                          // we'll use lengths of the same random byte:                          for (int i = 0; i < workBuffer.Length / 1000; i++)                          {                              byte b = (byte)rnd.Next();                              int n = 500 + rnd.Next(500);                              for (j = 0; j < n; j++)                                  workBuffer[j + i] = b;                              i += j - 1;                          }                          compressingStream.SetDeflateParams(CompressionLevel.BestCompression' CompressionStrategy.Filtered);                          break;                        case 3:                          // insert totally random data into the workBuffer                          rnd.NextBytes(workBuffer);                          break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: switch (k)                  {                      case 0:                          // At this point' workBuffer is all zeroes' so it should compress very well.                          break;                        case 1:                          // switch to no compression' keep same workBuffer (all zeroes):                          compressingStream.SetDeflateParams(CompressionLevel.None' CompressionStrategy.Default);                          break;                        case 2:                          // Insert data into workBuffer' and switch back to compressing mode.                          // we'll use lengths of the same random byte:                          for (int i = 0; i < workBuffer.Length / 1000; i++)                          {                              byte b = (byte)rnd.Next();                              int n = 500 + rnd.Next(500);                              for (j = 0; j < n; j++)                                  workBuffer[j + i] = b;                              i += j - 1;                          }                          compressingStream.SetDeflateParams(CompressionLevel.BestCompression' CompressionStrategy.Filtered);                          break;                        case 3:                          // insert totally random data into the workBuffer                          rnd.NextBytes(workBuffer);                          break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: switch (k)                  {                      case 0:                          // At this point' workBuffer is all zeroes' so it should compress very well.                          break;                        case 1:                          // switch to no compression' keep same workBuffer (all zeroes):                          compressingStream.SetDeflateParams(CompressionLevel.None' CompressionStrategy.Default);                          break;                        case 2:                          // Insert data into workBuffer' and switch back to compressing mode.                          // we'll use lengths of the same random byte:                          for (int i = 0; i < workBuffer.Length / 1000; i++)                          {                              byte b = (byte)rnd.Next();                              int n = 500 + rnd.Next(500);                              for (j = 0; j < n; j++)                                  workBuffer[j + i] = b;                              i += j - 1;                          }                          compressingStream.SetDeflateParams(CompressionLevel.BestCompression' CompressionStrategy.Filtered);                          break;                        case 3:                          // insert totally random data into the workBuffer                          rnd.NextBytes(workBuffer);                          break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: switch (k)                  {                      case 0:                          // At this point' workBuffer is all zeroes' so it should compress very well.                          break;                        case 1:                          // switch to no compression' keep same workBuffer (all zeroes):                          compressingStream.SetDeflateParams(CompressionLevel.None' CompressionStrategy.Default);                          break;                        case 2:                          // Insert data into workBuffer' and switch back to compressing mode.                          // we'll use lengths of the same random byte:                          for (int i = 0; i < workBuffer.Length / 1000; i++)                          {                              byte b = (byte)rnd.Next();                              int n = 500 + rnd.Next(500);                              for (j = 0; j < n; j++)                                  workBuffer[j + i] = b;                              i += j - 1;                          }                          compressingStream.SetDeflateParams(CompressionLevel.BestCompression' CompressionStrategy.Filtered);                          break;                        case 3:                          // insert totally random data into the workBuffer                          rnd.NextBytes(workBuffer);                          break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: switch (k)                  {                      case 0:                          // At this point' workBuffer is all zeroes' so it should compress very well.                          break;                        case 1:                          // switch to no compression' keep same workBuffer (all zeroes):                          compressingStream.SetDeflateParams(CompressionLevel.None' CompressionStrategy.Default);                          break;                        case 2:                          // Insert data into workBuffer' and switch back to compressing mode.                          // we'll use lengths of the same random byte:                          for (int i = 0; i < workBuffer.Length / 1000; i++)                          {                              byte b = (byte)rnd.Next();                              int n = 500 + rnd.Next(500);                              for (j = 0; j < n; j++)                                  workBuffer[j + i] = b;                              i += j - 1;                          }                          compressingStream.SetDeflateParams(CompressionLevel.BestCompression' CompressionStrategy.Filtered);                          break;                        case 3:                          // insert totally random data into the workBuffer                          rnd.NextBytes(workBuffer);                          break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: k < 4
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: Assert.AreEqual<int>(4 * workBuffer.Length' (int)decompressingStream.TotalBytesOut);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following statement contains a magic number: TestContext.WriteLine("decompressed length (expected): {0}"' 4 * workBuffer.Length);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CodecTest,The following statement contains a magic number: int sz = this.rnd.Next(50000) + 50000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CodecTest,The following statement contains a magic number: int sz = this.rnd.Next(50000) + 50000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CodecTest,The following statement contains a magic number: System.Threading.Thread.Sleep(2000);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,InflateBuffer,The following statement contains a magic number: int bufferSize = 1024;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,InflateBuffer,The following statement contains a magic number: pass < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,DeflateBuffer,The following statement contains a magic number: int bufferSize = 1024;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,DeflateBuffer,The following statement contains a magic number: pass < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: int sz = this.rnd.Next(21000) + 15000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: int sz = this.rnd.Next(21000) + 15000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: k % 2 == 1
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: k > 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following statement contains a magic number: k < 4
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: int sz = this.rnd.Next(21000) + 15000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: int sz = this.rnd.Next(21000) + 15000;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: k % 2 == 1
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: k > 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following statement contains a magic number: k < 4
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,_DecompressEmptyStream,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_DeflateStream_InMemory,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CloseTwice,The following statement contains a magic number: switch (i)                  {                  case 0:                      compressor= new DeflateStream(ms1' CompressionMode.Compress' CompressionLevel.BestCompression' false);                      break;                  case 1:                      compressor = new GZipStream(ms1' CompressionMode.Compress' false);                      break;                  case 2:                      compressor = new ZlibStream(ms1' CompressionMode.Compress' false);                      break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CloseTwice,The following statement contains a magic number: switch (i)                  {                  case 0:                      decompressor = new DeflateStream(ms2' CompressionMode.Decompress' false);                      break;                  case 1:                      decompressor = new GZipStream(ms2' CompressionMode.Decompress' false);                      break;                  case 2:                      decompressor = new ZlibStream(ms2' CompressionMode.Decompress' false);                      break;                  }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CloseTwice,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: Int32[] Sizes = { 8000' 88000' 188000' 388000' 580000' 1580000 };
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: Int32[] Sizes = { 8000' 88000' 188000' 388000' 580000' 1580000 };
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: Int32[] Sizes = { 8000' 88000' 188000' 388000' 580000' 1580000 };
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: Int32[] Sizes = { 8000' 88000' 188000' 388000' 580000' 1580000 };
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: Int32[] Sizes = { 8000' 88000' 188000' 388000' 580000' 1580000 };
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: Int32[] Sizes = { 8000' 88000' 188000' 388000' 580000' 1580000 };
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: int x = k + i * 2;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: int z = (x == 0) ? 4 : 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: switch (x)                                              {                                                  case 0: // k == 0' i == 0                                                      compressor = new Ionic.Zlib.GZipStream(raw' CompressionMode.Compress' true);                                                      break;                                                  case 1: // k == 1' i == 0                                                      compressor = new Ionic.Zlib.DeflateStream(raw' CompressionMode.Compress' true);                                                      break;                                                  case 2: // k == 0' i == 1                                                      compressor = new System.IO.Compression.GZipStream(raw' System.IO.Compression.CompressionMode.Compress' true);                                                      break;                                                  case 3: // k == 1' i == 1                                                      compressor = new System.IO.Compression.DeflateStream(raw' System.IO.Compression.CompressionMode.Compress' true);                                                      break;                                              }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: switch (x)                                              {                                                  case 0: // k == 0' i == 0                                                      compressor = new Ionic.Zlib.GZipStream(raw' CompressionMode.Compress' true);                                                      break;                                                  case 1: // k == 1' i == 0                                                      compressor = new Ionic.Zlib.DeflateStream(raw' CompressionMode.Compress' true);                                                      break;                                                  case 2: // k == 0' i == 1                                                      compressor = new System.IO.Compression.GZipStream(raw' System.IO.Compression.CompressionMode.Compress' true);                                                      break;                                                  case 3: // k == 1' i == 1                                                      compressor = new System.IO.Compression.DeflateStream(raw' System.IO.Compression.CompressionMode.Compress' true);                                                      break;                                              }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: h % 2 == 1
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: h > 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: int w = k + j * 2;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: switch (w)                                              {                                                  case 0: // k == 0' j == 0                                                      decompressor = new Ionic.Zlib.GZipStream(input' CompressionMode.Decompress' true);                                                      break;                                                  case 1: // k == 1' j == 0                                                      decompressor = new Ionic.Zlib.DeflateStream(input' CompressionMode.Decompress' true);                                                      break;                                                  case 2: // k == 0' j == 1                                                      decompressor = new System.IO.Compression.GZipStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                                      break;                                                  case 3: // k == 1' j == 1                                                      decompressor = new System.IO.Compression.DeflateStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                                      break;                                              }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: switch (w)                                              {                                                  case 0: // k == 0' j == 0                                                      decompressor = new Ionic.Zlib.GZipStream(input' CompressionMode.Decompress' true);                                                      break;                                                  case 1: // k == 1' j == 0                                                      decompressor = new Ionic.Zlib.DeflateStream(input' CompressionMode.Decompress' true);                                                      break;                                                  case 2: // k == 0' j == 1                                                      decompressor = new System.IO.Compression.GZipStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                                      break;                                                  case 3: // k == 1' j == 1                                                      decompressor = new System.IO.Compression.DeflateStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                                      break;                                              }
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: int mod1 = 86 + this.rnd.Next(46)/2 + 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: int mod1 = 86 + this.rnd.Next(46)/2 + 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: int mod1 = 86 + this.rnd.Next(46)/2 + 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: int mod2 = 50 + this.rnd.Next(72)/2 + 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: int mod2 = 50 + this.rnd.Next(72)/2 + 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: int mod2 = 50 + this.rnd.Next(72)/2 + 1;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,RandomizeBuffer,The following statement contains a magic number: i > 200
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_DeflateStream_wi8870,The following statement contains a magic number: byte[] buffer = RandomizeBuffer(117+(this.rnd.Next(3)*100));
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_DeflateStream_wi8870,The following statement contains a magic number: byte[] buffer = RandomizeBuffer(117+(this.rnd.Next(3)*100));
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_DeflateStream_wi8870,The following statement contains a magic number: byte[] buffer = RandomizeBuffer(117+(this.rnd.Next(3)*100));
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_DeflateStream_wi8870,The following statement contains a magic number: j < 1000
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream,The following statement contains a magic number: int sz = 256*1024 + this.rnd.Next(120000);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream,The following statement contains a magic number: int sz = 256*1024 + this.rnd.Next(120000);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream,The following statement contains a magic number: int sz = 256*1024 + this.rnd.Next(120000);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream2,The following statement contains a magic number: int sz = (128 * 1024) /*default buffer size*/ * rnd.Next(14' 28);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream2,The following statement contains a magic number: int sz = (128 * 1024) /*default buffer size*/ * rnd.Next(14' 28);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream2,The following statement contains a magic number: int sz = (128 * 1024) /*default buffer size*/ * rnd.Next(14' 28);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_ParallelDeflateStream2,The following statement contains a magic number: int sz = (128 * 1024) /*default buffer size*/ * rnd.Next(14' 28);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,_CreateAndFillBinary,The following statement contains a magic number: byte[] Buffer = new byte[20000];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: var buffer = new byte[2048 * 4];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: var buffer = new byte[2048 * 4];
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: buffer[i] = 255;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: uint goal = 4104380882;
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: testAdler(3979);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: testAdler(3980);
Magic Number,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,TestAdler32,The following statement contains a magic number: testAdler(3999);
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Codec_TestLargeDeflateInflate,The following switch statement is missing a default case: switch (k)                  {                      case 0:                          // At this point' workBuffer is all zeroes' so it should compress very well.                          break;                        case 1:                          // switch to no compression' keep same workBuffer (all zeroes):                          compressingStream.SetDeflateParams(CompressionLevel.None' CompressionStrategy.Default);                          break;                        case 2:                          // Insert data into workBuffer' and switch back to compressing mode.                          // we'll use lengths of the same random byte:                          for (int i = 0; i < workBuffer.Length / 1000; i++)                          {                              byte b = (byte)rnd.Next();                              int n = 500 + rnd.Next(500);                              for (j = 0; j < n; j++)                                  workBuffer[j + i] = b;                              i += j - 1;                          }                          compressingStream.SetDeflateParams(CompressionLevel.BestCompression' CompressionStrategy.Filtered);                          break;                        case 3:                          // insert totally random data into the workBuffer                          rnd.NextBytes(workBuffer);                          break;                  }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_FileName_And_Comments,The following switch statement is missing a default case: switch (j)                              {                                  case 0:                                      decompressor = new Ionic.Zlib.GZipStream(input' CompressionMode.Decompress' true);                                      break;                                  case 1:                                      decompressor = new System.IO.Compression.GZipStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                      break;                              }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_GZipStream_ByteByByte_CheckCrc,The following switch statement is missing a default case: switch (j)                              {                              case 0:                                  decompressor = new Ionic.Zlib.GZipStream(input' CompressionMode.Decompress' true);                                  break;                              case 1:                                  decompressor = new System.IO.Compression.GZipStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                  break;                              }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_DeflateStream_InMemory,The following switch statement is missing a default case: switch (j)                      {                      case 0:                          decompressor = new Ionic.Zlib.DeflateStream(slow' CompressionMode.Decompress' false);                          break;                      case 1:                          decompressor = new System.IO.Compression.DeflateStream(slow' System.IO.Compression.CompressionMode.Decompress' false);                          break;                      }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CloseTwice,The following switch statement is missing a default case: switch (i)                  {                  case 0:                      compressor= new DeflateStream(ms1' CompressionMode.Compress' CompressionLevel.BestCompression' false);                      break;                  case 1:                      compressor = new GZipStream(ms1' CompressionMode.Compress' false);                      break;                  case 2:                      compressor = new ZlibStream(ms1' CompressionMode.Compress' false);                      break;                  }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_CloseTwice,The following switch statement is missing a default case: switch (i)                  {                  case 0:                      decompressor = new DeflateStream(ms2' CompressionMode.Decompress' false);                      break;                  case 1:                      decompressor = new GZipStream(ms2' CompressionMode.Decompress' false);                      break;                  case 2:                      decompressor = new ZlibStream(ms2' CompressionMode.Decompress' false);                      break;                  }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following switch statement is missing a default case: switch (x)                                              {                                                  case 0: // k == 0' i == 0                                                      compressor = new Ionic.Zlib.GZipStream(raw' CompressionMode.Compress' true);                                                      break;                                                  case 1: // k == 1' i == 0                                                      compressor = new Ionic.Zlib.DeflateStream(raw' CompressionMode.Compress' true);                                                      break;                                                  case 2: // k == 0' i == 1                                                      compressor = new System.IO.Compression.GZipStream(raw' System.IO.Compression.CompressionMode.Compress' true);                                                      break;                                                  case 3: // k == 1' i == 1                                                      compressor = new System.IO.Compression.DeflateStream(raw' System.IO.Compression.CompressionMode.Compress' true);                                                      break;                                              }
Missing Default,Ionic.Zlib.Tests,UnitTest1,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zlib Tests\ZlibUnitTest1.cs,Zlib_Streams_VariousSizes,The following switch statement is missing a default case: switch (w)                                              {                                                  case 0: // k == 0' j == 0                                                      decompressor = new Ionic.Zlib.GZipStream(input' CompressionMode.Decompress' true);                                                      break;                                                  case 1: // k == 1' j == 0                                                      decompressor = new Ionic.Zlib.DeflateStream(input' CompressionMode.Decompress' true);                                                      break;                                                  case 2: // k == 0' j == 1                                                      decompressor = new System.IO.Compression.GZipStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                                      break;                                                  case 3: // k == 1' j == 1                                                      decompressor = new System.IO.Compression.DeflateStream(input' System.IO.Compression.CompressionMode.Decompress' true);                                                      break;                                              }
