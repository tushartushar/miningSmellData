Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Ionic.Zip.Examples,BZip2,C:\repos\haf_DotNetZip.Semverd\src\Tools\BZip2\BZip2.cs,Pump,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,Ionic.Zip.Examples,BZip2,C:\repos\haf_DotNetZip.Semverd\src\Tools\BZip2\BZip2.cs,Main,The following statement contains a magic number: try              {                  for (int i = 1; i < args.Length; i++)                  {                      switch (args[i])                      {                          case "-keep":                              keepOriginal = true;                              break;                            case "-f":                              force = true;                              break;                            case "-v":                              verbose = true;                              break;                            default:                              throw new ArgumentException(args[i]);                      }                  }                    string fname = args[0];                  bool decompress = (fname.ToLower().EndsWith(".bz") || fname.ToLower().EndsWith(".bz2"));                  string result = decompress                      ? Decompress(fname' force)                      : Compress(fname' force);                    if (result==null)                  {                      Console.WriteLine("No action taken. The file already exists.");                  }                  else                  {                      if (verbose)                      {                          var fi1 = new FileInfo(fname);                          var fi2 = new FileInfo(result);                          if (decompress)                          {                              Console.WriteLine("  Original    : {0} bytes"' fi1.Length);                              Console.WriteLine("  Decompressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio  : {0:N1}%"' 100.0 - (fi1.Length/(0.01 * fi2.Length)));                          }                          else                          {                              Console.WriteLine("  Original  : {0} bytes"' fi1.Length);                              Console.WriteLine("  Compressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio: {0:N1}%"' 100.0 - (fi2.Length/(0.01 * fi1.Length)));                          }                      }                        if (!keepOriginal)                      {                          File.Delete(fname);                      }                  }                }              catch (System.Exception ex1)              {                  System.Console.WriteLine("Exception: " + ex1);              }
Magic Number,Ionic.Zip.Examples,BZip2,C:\repos\haf_DotNetZip.Semverd\src\Tools\BZip2\BZip2.cs,Main,The following statement contains a magic number: try              {                  for (int i = 1; i < args.Length; i++)                  {                      switch (args[i])                      {                          case "-keep":                              keepOriginal = true;                              break;                            case "-f":                              force = true;                              break;                            case "-v":                              verbose = true;                              break;                            default:                              throw new ArgumentException(args[i]);                      }                  }                    string fname = args[0];                  bool decompress = (fname.ToLower().EndsWith(".bz") || fname.ToLower().EndsWith(".bz2"));                  string result = decompress                      ? Decompress(fname' force)                      : Compress(fname' force);                    if (result==null)                  {                      Console.WriteLine("No action taken. The file already exists.");                  }                  else                  {                      if (verbose)                      {                          var fi1 = new FileInfo(fname);                          var fi2 = new FileInfo(result);                          if (decompress)                          {                              Console.WriteLine("  Original    : {0} bytes"' fi1.Length);                              Console.WriteLine("  Decompressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio  : {0:N1}%"' 100.0 - (fi1.Length/(0.01 * fi2.Length)));                          }                          else                          {                              Console.WriteLine("  Original  : {0} bytes"' fi1.Length);                              Console.WriteLine("  Compressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio: {0:N1}%"' 100.0 - (fi2.Length/(0.01 * fi1.Length)));                          }                      }                        if (!keepOriginal)                      {                          File.Delete(fname);                      }                  }                }              catch (System.Exception ex1)              {                  System.Console.WriteLine("Exception: " + ex1);              }
Magic Number,Ionic.Zip.Examples,BZip2,C:\repos\haf_DotNetZip.Semverd\src\Tools\BZip2\BZip2.cs,Main,The following statement contains a magic number: try              {                  for (int i = 1; i < args.Length; i++)                  {                      switch (args[i])                      {                          case "-keep":                              keepOriginal = true;                              break;                            case "-f":                              force = true;                              break;                            case "-v":                              verbose = true;                              break;                            default:                              throw new ArgumentException(args[i]);                      }                  }                    string fname = args[0];                  bool decompress = (fname.ToLower().EndsWith(".bz") || fname.ToLower().EndsWith(".bz2"));                  string result = decompress                      ? Decompress(fname' force)                      : Compress(fname' force);                    if (result==null)                  {                      Console.WriteLine("No action taken. The file already exists.");                  }                  else                  {                      if (verbose)                      {                          var fi1 = new FileInfo(fname);                          var fi2 = new FileInfo(result);                          if (decompress)                          {                              Console.WriteLine("  Original    : {0} bytes"' fi1.Length);                              Console.WriteLine("  Decompressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio  : {0:N1}%"' 100.0 - (fi1.Length/(0.01 * fi2.Length)));                          }                          else                          {                              Console.WriteLine("  Original  : {0} bytes"' fi1.Length);                              Console.WriteLine("  Compressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio: {0:N1}%"' 100.0 - (fi2.Length/(0.01 * fi1.Length)));                          }                      }                        if (!keepOriginal)                      {                          File.Delete(fname);                      }                  }                }              catch (System.Exception ex1)              {                  System.Console.WriteLine("Exception: " + ex1);              }
Magic Number,Ionic.Zip.Examples,BZip2,C:\repos\haf_DotNetZip.Semverd\src\Tools\BZip2\BZip2.cs,Main,The following statement contains a magic number: try              {                  for (int i = 1; i < args.Length; i++)                  {                      switch (args[i])                      {                          case "-keep":                              keepOriginal = true;                              break;                            case "-f":                              force = true;                              break;                            case "-v":                              verbose = true;                              break;                            default:                              throw new ArgumentException(args[i]);                      }                  }                    string fname = args[0];                  bool decompress = (fname.ToLower().EndsWith(".bz") || fname.ToLower().EndsWith(".bz2"));                  string result = decompress                      ? Decompress(fname' force)                      : Compress(fname' force);                    if (result==null)                  {                      Console.WriteLine("No action taken. The file already exists.");                  }                  else                  {                      if (verbose)                      {                          var fi1 = new FileInfo(fname);                          var fi2 = new FileInfo(result);                          if (decompress)                          {                              Console.WriteLine("  Original    : {0} bytes"' fi1.Length);                              Console.WriteLine("  Decompressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio  : {0:N1}%"' 100.0 - (fi1.Length/(0.01 * fi2.Length)));                          }                          else                          {                              Console.WriteLine("  Original  : {0} bytes"' fi1.Length);                              Console.WriteLine("  Compressed: {0} bytes"' fi2.Length);                              Console.WriteLine("  Comp Ratio: {0:N1}%"' 100.0 - (fi2.Length/(0.01 * fi1.Length)));                          }                      }                        if (!keepOriginal)                      {                          File.Delete(fname);                      }                  }                }              catch (System.Exception ex1)              {                  System.Console.WriteLine("Exception: " + ex1);              }
