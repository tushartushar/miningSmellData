Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The method has 123 lines of code.
Long Method,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The method has 119 lines of code.
Long Method,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The method has 115 lines of code.
Long Method,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The method has 115 lines of code.
Long Method,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The method has 126 lines of code.
Long Method,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The method has 209 lines of code.
Long Method,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The method has 119 lines of code.
Long Method,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddEntry_String,The method has 102 lines of code.
Long Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The method has 101 lines of code.
Long Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The method has 143 lines of code.
Long Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The method has 117 lines of code.
Long Method,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The method has 137 lines of code.
Long Method,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyFileLastModified,The method has 128 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The method has 104 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The method has 102 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The method has 106 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The method has 102 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The method has 113 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The method has 103 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The method has 104 lines of code.
Long Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The method has 106 lines of code.
Long Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The method has 241 lines of code.
Long Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The method has 104 lines of code.
Long Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The method has 121 lines of code.
Long Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Z64UpdateHugeZipWithComment,The method has 125 lines of code.
Complex Method,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Zip_2,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,CleanDirectory,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,Cyclomatic complexity of the method is 19
Complex Method,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,VerifyChecksums,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_EmitTimestampOptions,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddEntry_String,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,Cyclomatic complexity of the method is 15
Complex Method,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ReadZip_OpenReader,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,Cyclomatic complexity of the method is 12
Complex Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,Cyclomatic complexity of the method is 12
Complex Method,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CompareArrays,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,Cyclomatic complexity of the method is 13
Complex Method,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Impl,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,Cyclomatic complexity of the method is 21
Complex Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Z64UpdateHugeZipWithComment,Cyclomatic complexity of the method is 9
Long Parameter List,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyFileTimes,The method has 5 parameters. Parameters: extractDir' filesToCheck' applyShellAllowance' checkNtfsTimes' thresholdNanoseconds
Long Parameter List,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The method has 6 parameters. Parameters: cmdFormat' flavor' runSfx' quiet' forceNoninteractive' wantArgs
Long Parameter List,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The method has 5 parameters. Parameters: tc' testName' dirToZip' update' subdirCount
Long Parameter List,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The method has 6 parameters. Parameters: tc' testName' dirToZip' settings' update' subdirCount
Long Parameter List,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,The method has 5 parameters. Parameters: subdir' numFilesToCreate' lowSize' highSize' update
Long Parameter List,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateFilesAndChecksums,The method has 5 parameters. Parameters: subdir' numFiles' baseSize' filesToZip' checksums
Long Parameter List,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The method has 5 parameters. Parameters: subdir' numFiles' update' filesToZip' checksums
Long Parameter List,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_TestDriver,The method has 5 parameters. Parameters: test' label' seekable' zero' fileOutputOption
Long Parameter List,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_AddEntry_WriteDelegate,The method has 6 parameters. Parameters: files' crypto' seekable' cycle' format' ignored
Long Parameter List,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_ZOS_Create,The method has 5 parameters. Parameters: files' crypto' seekable' cycle' format
Long Parameter List,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_ZOS_Create,The method has 6 parameters. Parameters: files' crypto' seekable' cycle' format' fileOutputOption
Long Parameter List,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,VerifyEntries,The method has 7 parameters. Parameters: zipFile' variance' values' a' stage' compFlavor' encryptionFlavor
Long Parameter List,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,QuickCreateZipAndChecksums,The method has 7 parameters. Parameters: zipFile' variance' compressionMethodOrLevel' encryption' password' files' checksums
Long Parameter List,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,_Internal_Resave,The method has 6 parameters. Parameters: zipFile' variance' values' cryptos' compFlavor' encryptionFlavor
Long Parameter List,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,_DotNetZip_CreateZip,The method has 6 parameters. Parameters: filesToZip' encryption' password' comment' zipFileToCreate' nonSeekable
Long Statement,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyFileTimes,The length of the statement  "                    Assert.AreEqual<DateTime>(t1' t2' "LastWriteTime delta actual({0}) expected({1})"' delta.ToString()' threshold.ToString()); " is 123.
Long Statement,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyFileTimes,The length of the statement  "                    Assert.IsTrue(delta <= threshold' "CreationTime delta actual({0}) expected({1})"' delta.ToString()' threshold.ToString()); " is 122.
Long Statement,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Unzip_NonSeekableOutput,The length of the statement  "                string zipFileToCreate = Path.Combine(TopLevelDir' String.Format("ShellApplication_Unzip_NonSeekableOutput.{0}.zip"' i)); " is 121.
Long Statement,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VStudio_Zip,The length of the statement  "            Microsoft.VisualStudio.Zip.ZipFileCompressor zfc = new Microsoft.VisualStudio.Zip.ZipFileCompressor(zipFileToCreate' "files"' a' true); " is 135.
Long Statement,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_CanRead,The length of the statement  "                                Assert.AreEqual<string>(checksums[e.FileName]' actualCheckString' "In trial {0}' Checksums for ({1}) do not match."' k' e.FileName); " is 132.
Long Statement,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Console,The length of the statement  "                    Assert.AreEqual<String>(expectedCheckString' actualCheckString' "Unexpected checksum on extracted filesystem file ({0})."' fname); " is 130.
Long Statement,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_WinForms,The length of the statement  "                    if (Passwords[k] != null) zip.Comment += String.Format("\r\n\r\nThe password for all entries is:  {0}\n"' Passwords[k]); " is 120.
Long Statement,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_WinForms,The length of the statement  "                    Assert.AreEqual<String>(expectedCheckString' actualCheckString' "Trial {0}: Unexpected checksum on extracted filesystem file ({1})."' k' fname); " is 144.
Long Statement,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,_Internal_ExtractExisting,The length of the statement  "            string zipFileToCreate = Path.Combine(TopLevelDir' String.Format("Error-Extract-ExistingFileWithoutOverwrite-{0}.zip"' flavor)); " is 128.
Long Statement,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateUniqueFile,The length of the statement  "            string nameOfFileToCreate = Path.Combine(ContainingDirectory' String.Format("{0}.{1}"' Path.GetRandomFileName()' extension)); " is 125.
Long Statement,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateUniqueFile,The length of the statement  "            string nameOfFileToCreate = Path.Combine(ContainingDirectory' String.Format("{0}.{1}"' Path.GetRandomFileName()' extension)); " is 125.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_RenameRemoveAndRenameAgain_wi8047,The length of the statement  "                string zipFileToCreate = Path.Combine(TopLevelDir' String.Format("Create_RenameRemoveAndRenameAgain_wi8047-{0}.zip"' m)); " is 121.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_RenameRemoveAndRenameAgain_wi8047,The length of the statement  "                Assert.AreEqual<int>(1' TestUtilities.CountEntries(zipFileToCreate)' "Trial {0}: The Zip file has the wrong number of entries."' m); " is 132.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_EmitTimestampOptions,The length of the statement  "                    Assert.AreEqual<int>(files.Length' TestUtilities.CountEntries(zipFileToCreate)' "The Zip file has the wrong number of entries."); " is 129.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The length of the statement  "                    Assert.AreEqual<String>(output' inputStrings[1]' "Trial {0}: Read entry 2 after create: Unexpected value on extract."' k); " is 122.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The length of the statement  "                    Assert.AreEqual<String>(output' inputStrings[0]' "Trial {0}: Read entry 1 after create: Unexpected value on extract."' k); " is 122.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddEntry_String,The length of the statement  "                Assert.AreNotEqual<Int32>(0' successfulEncodings[d]' "Content item #{0} ({1}) was never encoded successfully."' d' contentStrings[d]); " is 134.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The length of the statement  "                    TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal); " is 125.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The length of the statement  "            int entriesAdded = TestUtilities.GenerateFilesOneLevelDeep(TestContext' "Create_WithEvents"' dirToZip' randomizerSettings' null' out subdirCount); " is 146.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The length of the statement  "            Assert.AreEqual<int>(TestUtilities.CountEntries(zipFileToCreate)' entries' "The Zip file has the wrong number of entries."); " is 124.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The length of the statement  "            Assert.AreEqual<int>(TestUtilities.CountEntries(zipFileToCreate)' entries' "The Zip file has the wrong number of entries."); " is 124.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_SaveCancellation,The length of the statement  "            int entriesAdded = TestUtilities.GenerateFilesOneLevelDeep(TestContext' "Create_SaveCancellation"' dirToZip' null' out subdirCount); " is 132.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddCancellation_wi13371,The length of the statement  "            int entriesAdded = TestUtilities.GenerateFilesOneLevelDeep(TestContext' "Create_AddCancellation"' dirToZip' null' out subdirCount); " is 131.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ExtractAll_Cancellation,The length of the statement  "            int entriesAdded = TestUtilities.GenerateFilesOneLevelDeep(TestContext' "ExtractAll_Cancellation"' dirToZip' null' out subdirCount); " is 132.
Long Statement,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ExtractAll_WithPassword,The length of the statement  "            int entriesAdded = TestUtilities.GenerateFilesOneLevelDeep(TestContext' "ExtractAll_WithPassword"' dirToZip' null' out subdirCount); " is 132.
Long Statement,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_MultipleEntriesDifferentPasswords,The length of the statement  "                    zip[Path.GetFileName(filenames[j])].ExtractWithPassword("unpack"' ExtractExistingFileAction.OverwriteSilently' passwords[j]); " is 125.
Long Statement,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_Extract_WrongPassword,The length of the statement  "                    zip[Path.GetFileName(filenames[j])].ExtractWithPassword("unpack"' ExtractExistingFileAction.OverwriteSilently' "WrongPassword"); " is 128.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFiles_PreserveDirHierarchy,The length of the statement  "            int entries = TestUtilities.GenerateFilesOneLevelDeep(TestContext' "PreserveDirHierarchy"' dirToZip' null' out subdirCount); " is 124.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyThatStreamRemainsOpenAfterSave,The length of the statement  "                            TestContext.WriteLine("  Found entry: {0} isDir({1}) sz_c({2}) sz_unc({3})"' e.FileName' e.IsDirectory' e.CompressedSize' e.UncompressedSize); " is 142.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "                        e.Comment = @"Lorem ipsum dolor sit amet' consectetur adipiscing elit. Nam mollis nibh tortor' vitae porttitor sem porttitor vel. Mauris interdum nibh quis nunc posuere mollis. Proin viverra est id lorem tincidunt ultrices. Curabitur convallis hendrerit facilisis. Fusce fringilla massa sed porta posuere. Mauris felis dui' dictum quis est non' volutpat vulputate lacus. Praesent volutpat nec purus vel interdum. Ut tristique lobortis ex. Maecenas lorem ante' ullamcorper sit amet pretium condimentum' cursus vel augue. Pellentesque nibh velit' accumsan sodales sapien vel' egestas ultrices tortor. Proin maximus diam vel sem maximus' et lacinia justo auctor. Quisque porta elementum elit eu hendrerit. Quisque luctus magna quis velit imperdiet fermentum. Suspendisse potenti. " is 776.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Suspendisse potenti. Integer rhoncus tincidunt tempor. Sed in condimentum purus. Sed accumsan turpis non commodo consequat. Maecenas tempus sapien a elit varius pretium. Phasellus risus tortor' varius non felis vel' dignissim fermentum arcu. Nunc et fringilla sapien. Quisque elementum tincidunt efficitur. Etiam vel est molestie magna consectetur blandit. Pellentesque sollicitudin iaculis metus' a consequat risus condimentum id. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean rhoncus molestie turpis et posuere. " is 568.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Cras eleifend' dui in molestie ullamcorper' sem libero tristique arcu' id tincidunt ante enim vitae tellus. Praesent luctus' arcu nec euismod sollicitudin' urna enim tincidunt diam' et sagittis mi nunc non leo. In est arcu' scelerisque nec blandit eget' tincidunt sit amet ante. Nulla pellentesque' justo non mattis eleifend' nisi lorem varius magna' at cursus leo leo sit amet tellus. Aliquam at eros purus. Cras sagittis' nisi quis euismod aliquam' dui nunc congue ipsum' vel lobortis elit nisl non libero. Nam sit amet est nibh. Quisque sit amet bibendum nunc. Aliquam nec mattis nulla. Proin quis dui a ex hendrerit vulputate. Proin varius blandit erat' eget vulputate quam dapibus sed. " is 690.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Sed libero libero' blandit a diam ut' viverra suscipit elit. Morbi et metus tempus' pellentesque nisi sed' ullamcorper nunc. In venenatis tellus in purus malesuada gravida. Etiam nec viverra erat. Etiam in vehicula lacus' non varius libero. Proin commodo mi eget cursus efficitur. Praesent ullamcorper hendrerit rutrum. Vestibulum sollicitudin augue ante' ut cursus nisi tristique ac. Praesent aliquam tincidunt lorem' ut commodo velit varius sit amet. Maecenas ultricies lacinia dui' quis laoreet risus sagittis eu. " is 516.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Phasellus eu viverra sem. In quis massa non nisi accumsan pharetra. Donec eu sollicitudin urna' aliquam euismod orci. Cras porta quis lectus id laoreet. Donec ut velit facilisis' sollicitudin mauris sed' consectetur quam. Sed et tortor ultricies' vulputate nunc non' luctus turpis. Nam congue' enim sed placerat pretium' odio tortor sagittis odio' ut volutpat metus nibh vel tortor. Donec faucibus a urna eget elementum. " is 420.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Etiam turpis libero' consequat at convallis sit amet' dapibus vitae dolor. Sed id fringilla nisl' non ultrices justo. Aenean euismod' risus sed euismod sagittis' sapien magna suscipit metus' eget tempus quam turpis et nisl. Vestibulum faucibus porttitor erat' ac pellentesque sem rhoncus ac. Aenean eleifend orci mauris. Mauris venenatis dignissim feugiat. Sed est dolor' convallis sit amet justo vel' mattis scelerisque dui. " is 425.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Aliquam erat volutpat. Cras eu venenatis felis. Duis a felis et nisl semper sagittis ac vel risus. Integer a mi convallis' efficitur tortor et' aliquet magna. Mauris hendrerit laoreet ante eget imperdiet. Nullam sed faucibus lorem. Maecenas sagittis egestas justo at feugiat. Ut a ultricies magna. Sed non erat in est feugiat placerat sed nec leo. Phasellus sed commodo felis' non elementum nulla. Aenean vel arcu ut turpis viverra semper vel at erat. " is 451.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Duis a magna purus. Donec mi lectus' sodales eu viverra ac' feugiat quis nunc. Nullam interdum vel justo ut mollis. Integer et sapien a erat hendrerit maximus. Nulla elementum libero nibh' volutpat commodo magna aliquam ut. Nam augue diam' commodo non accumsan non' commodo et metus. Vivamus ornare orci at luctus molestie. Pellentesque dictum malesuada ipsum' ac pharetra est. Fusce at rhoncus ipsum. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Proin tincidunt' urna a tincidunt porttitor' risus lorem lacinia metus' vitae ultricies turpis tortor pulvinar leo. Aliquam erat volutpat. Sed tincidunt suscipit quam' quis faucibus orci. Pellentesque volutpat' eros sed egestas euismod' diam libero dignissim velit' nec hendrerit elit diam sed mauris. " is 791.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Phasellus tristique tellus lacus' auctor vehicula mauris dignissim nec. Sed fringilla' massa cursus dignissim mollis' sapien ex condimentum lacus' ac tincidunt leo lacus vel sem. Integer commodo' neque non rhoncus placerat' massa lorem aliquet risus' ac feugiat purus lacus eget mi. Vivamus dui mauris' ultrices quis magna quis' sollicitudin porttitor erat. Mauris dictum mi tempus' posuere augue eu' dapibus magna. Mauris ante neque' viverra ut quam vel' commodo interdum velit. Maecenas eu purus vulputate' aliquet est sit amet' viverra leo. Phasellus consequat hendrerit lacinia. Morbi at felis sit amet sapien tempus lacinia ac quis neque. Aliquam erat volutpat. Curabitur aliquam velit nec lacus vulputate interdum. Morbi et luctus quam. Aliquam in auctor odio. Donec dictum nulla ut luctus consectetur. Pellentesque pulvinar congue nulla' ut accumsan sem tristique in. " is 962.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Cras velit nibh' lacinia eu sodales ut' aliquet et ex. Vestibulum vitae libero elit. Fusce suscipit tellus vitae neque luctus tincidunt. Aliquam condimentum facilisis mi' at vulputate risus pretium nec. Morbi elit est' placerat vitae mattis vel' pretium non ante. Sed et feugiat tellus. In interdum libero eget erat cursus' vitae venenatis nunc fermentum. " is 355.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Phasellus eu massa pharetra' commodo tortor sed' pharetra nisi. Praesent efficitur magna quis ipsum cursus' porta accumsan mauris imperdiet. Vivamus eget erat rhoncus' vestibulum metus vitae' luctus purus. Aliquam dapibus hendrerit faucibus. Nulla quam neque' mattis sed eleifend in' viverra sollicitudin lacus. Maecenas non tristique nibh' sit amet mollis erat. Pellentesque ut metus a arcu tincidunt imperdiet. Suspendisse potenti. Vivamus auctor tempus aliquam. Vivamus ullamcorper ex nibh' eget ultricies metus facilisis in. Sed cursus tincidunt bibendum. Vestibulum id aliquet ante. Donec sed diam a ligula condimentum convallis non sit amet lectus. Suspendisse leo risus' viverra id augue mattis' convallis auctor justo. Nam porta' mi at pellentesque eleifend' urna massa iaculis lacus' et tempor tortor turpis et urna. " is 825.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Phasellus varius imperdiet dapibus. Nullam commodo mi vel lectus vestibulum' quis rhoncus magna rutrum. Cras libero felis' malesuada in eros eget' volutpat eleifend odio. Morbi feugiat pellentesque aliquam. Sed non turpis purus. Praesent egestas' elit in varius consectetur' dui risus ultrices odio' ut finibus tortor ligula eu tortor. Aliquam congue mi vitae ante vestibulum semper. Proin eget pellentesque nisl. Curabitur in ante eget eros condimentum sagittis non sit amet turpis. Pellentesque sed aliquet risus. Nullam sodales at erat eget dapibus. Morbi ut arcu tincidunt' accumsan velit vitae' egestas nibh. Mauris sit amet urna quam. Maecenas a odio tempor' sagittis erat a' rutrum massa. Pellentesque elementum augue sit amet risus pretium pellentesque. " is 761.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Mauris et porttitor elit. Donec in ex sit amet velit dictum accumsan. Suspendisse tempus sapien vel sem elementum convallis. In vulputate gravida justo' sit amet hendrerit magna vulputate ut. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus lobortis lobortis arcu' in lobortis leo feugiat in. Mauris commodo' justo non malesuada elementum' nulla sapien laoreet massa' at porta mauris ipsum non ex. Nunc ut ligula eu arcu congue pharetra. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Class aptent taciti sociosqu ad litora torquent per conubia nostra' per inceptos himenaeos. Nulla ac semper magna. Praesent efficitur risus quis felis porttitor' non pharetra arcu aliquam. " is 741.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The length of the statement  "Sed quis nibh pharetra' tristique quam a' consectetur mauris. Integer placerat at est id finibus. Quisque congue' justo sit amet tincidunt porta' ipsum metus iaculis justo' vel bibendum quam mi eget enim. Aenean maximus facilisis tortor' quis dignissim nibh sagittis quis. Etiam eu augue non nunc pharetra euismod. Proin leo velit' luctus ac mauris at' ullamcorper pulvinar nisi. Sed nec lobortis lacus. Fusce eget metus est. In felis libero' consequat id consequat ac' bibendum vel tortor. Duis eu egestas purus' non luctus metus. Curabitur vel facilisis purus. Proin eget sapien pretium' gravida purus tristique' congue sem. " is 626.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The length of the statement  "                        string zipFileToCreate = Path.Combine(TopLevelDir' String.Format("CreateZip-SetFileLastModified-{0}.{1}.{2}.zip"' m' n' k)); " is 124.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OneCharOverrideName,The length of the statement  "            String commentOnArchive = "BasicTests::CreateZip_AddDirectory_OneCharOverrideName(): This archive override the name of a directory with a one-char name."; " is 154.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_CompressionLevelZero_AllEntries,The length of the statement  "            String commentOnArchive = "BasicTests::CompressionLevelZero(): This archive override the name of a directory with a one-char name."; " is 132.
Long Statement,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,_Internal_Resave,The length of the statement  "            TestContext.WriteLine("Resave {0} {1} {2} file({3})"' variance' compFlavor' encryptionFlavor' Path.GetFileName(zipFileToCreate)); " is 129.
Long Statement,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The length of the statement  "                    zip2.Comment = String.Format("This archive has been modified.  Comments on {0} entries have been inserted."' updateCount); " is 122.
Long Statement,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem_UpdateMultipleTimes_SaveAsStream,The length of the statement  "                var memoryStream = new MemoryStream(); //Attention: the source stream can't be disposed' as its needed to read not edited entries on the next save " is 146.
Long Statement,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem_UpdateMultipleTimesFromStream_SaveAsStream,The length of the statement  "                var memoryStream = new MemoryStream(); //Attention: the source stream can't be disposed' as its needed to read not edited entries on the next save " is 146.
Long Statement,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoPassword,The length of the statement  "                        Assert.AreEqual<String>(expectedCheckString' actualCheckString' "Unexpected checksum on extracted filesystem file ({0})."' PathToExtractedFile); " is 144.
Long Statement,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The length of the statement  "                zip1.Comment = String.Format("This archive uses Encryption({0}) password({1}) no compression."' zip1.Encryption' password); " is 123.
Long Statement,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The length of the statement  "                        Assert.AreEqual<String>(expectedCheckString' actualCheckString' "Unexpected checksum on extracted filesystem file ({0})."' PathToExtractedFile); " is 144.
Long Statement,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The length of the statement  "                zip1.Comment = String.Format("This archive uses Encryption({0}) password({1}) no compression."' zip1.Encryption' password); " is 123.
Long Statement,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The length of the statement  "                        Assert.AreEqual<String>(expectedCheckString' actualCheckString' "Unexpected checksum on extracted filesystem file ({0})."' PathToExtractedFile); " is 144.
Long Statement,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The length of the statement  "                zip1.Comment = String.Format("This archive uses Encryption({0}) password({1}) no compression."' zip1.Encryption' password); " is 123.
Long Statement,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The length of the statement  "                                TestContext.WriteLine(" {0}  crc({1:X8})  c({2:X8}) unc({3:X8})"' e.FileName' e.Crc' e.CompressedSize' e.UncompressedSize); " is 123.
Long Statement,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The length of the statement  "                                TestContext.WriteLine(" {0}  crc({1:X8})  c({2:X8}) unc({3:X8})"' e.FileName' e.Crc' e.CompressedSize' e.UncompressedSize); " is 123.
Long Statement,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Z64_ManyEntries_WinZipEncryption_DefaultCompression_AsNecessary,The length of the statement  "            _Zip64_Over65534Entries(Zip64Option.AsNecessary' EncryptionAlgorithm.WinZipAes256' Ionic.Zlib.CompressionLevel.Default); " is 120.
Complex Conditional,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The conditional expression  "Path.GetFileName(f)[0] == '~'                          || theChosenOnes.Contains(f)                          || fi.Length > 10000000  // too large                          || fi.Length < 100"  is complex.
Complex Conditional,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The conditional expression  "onOtherSideOfDst || (theChosenOnes.Count - otherSide < 2) ||                              ((otherSide < minOtherSide) && (numFilesWanted - theChosenOnes.Count > minOtherSide - otherSide))"  is complex.
Complex Conditional,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The conditional expression  "runSfx &&                      (k != 0 || !forceNoninteractive ||                       flavor != SelfExtractorFlavor.WinFormsApplication)"  is complex.
Complex Conditional,Ionic.Zip.Tests.Utilities,Extensions,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,TrimPunctuation,The conditional expression  "subject.EndsWith(".") ||                     subject.EndsWith("'") ||                     subject.EndsWith(";") ||                     subject.EndsWith("?") ||                     subject.EndsWith("!")"  is complex.
Complex Conditional,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The conditional expression  "(segmentSize32Bit.HasValue && segmentSize64Bit.HasValue)                  || (!segmentSize32Bit.HasValue && !segmentSize64Bit.HasValue)"  is complex.
Complex Conditional,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyFileLastModified,The conditional expression  "Path.GetFileName(filename)[0] == '~'                          || actualFilenames.Contains(filename)                          || fi.Length > 10000000                          || Path.GetFileName(filename) == "dd_BITS.log""  is complex.
Empty Catch Block,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The method has an empty catch block.
Empty Catch Block,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,MyTestCleanup,The method has an empty catch block.
Empty Catch Block,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The method has an empty catch block.
Empty Catch Block,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The method has an empty catch block.
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,MyClassInitialize,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyTimesUnix,The following statement contains a magic number: VerifyFileTimes(extractDir' filesToCheck' true' false'                              10000 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyTimesUnix,The following statement contains a magic number: VerifyFileTimes(extractDir' filesToCheck' true' false'                              10000 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyTimesNtfs,The following statement contains a magic number: VerifyFileTimes(extractDir' filesToCheck' true' false'                              100 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyTimesNtfs,The following statement contains a magic number: VerifyFileTimes(extractDir' filesToCheck' true' false'                              100 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyTimesDos,The following statement contains a magic number: VerifyFileTimes(extractDir' filesToCheck' false' false'                              20000 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyTimesDos,The following statement contains a magic number: VerifyFileTimes(extractDir' filesToCheck' false' false'                              20000 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Unzip_NonSeekableOutput,The following statement contains a magic number: VerifyFileTimes(Path.Combine(extractDir' "files")' filesToZip'                                  false' false' 20000 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Unzip_NonSeekableOutput,The following statement contains a magic number: VerifyFileTimes(Path.Combine(extractDir' "files")' filesToZip'                                  false' false' 20000 * 1000);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Unzip_2,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(13) + 8' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Unzip_2,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(13) + 8' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_SelectedFiles_Unzip,The following statement contains a magic number: int numFilesToAdd = _rnd.Next(5) + 6;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_SelectedFiles_Unzip,The following statement contains a magic number: int numFilesToAdd = _rnd.Next(5) + 6;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_SelectedFiles_Unzip,The following statement contains a magic number: int baseSize = _rnd.Next(0x100ff) + 8000;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_SelectedFiles_Unzip,The following statement contains a magic number: int x = _rnd.Next(4);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_SelectedFiles_Unzip,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(fileName' baseSize + _rnd.Next(28000));
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_SelectedFiles_Unzip,The following statement contains a magic number: i < numFilesToAdd && nFilesInSubfolders < 2
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Zip_2,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(33) + 11' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,ShellApplication_Zip_2,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(33) + 11' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,COM_CheckPassword,The following statement contains a magic number: string password = GeneratePassword(11);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,COM_CheckPassword,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip,The following statement contains a magic number: string password = GeneratePassword(9);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip,The following statement contains a magic number: System.Threading.Thread.Sleep(1200);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Password,The following statement contains a magic number: string password = GeneratePassword(9);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Password,The following statement contains a magic number: System.Threading.Thread.Sleep(1200);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int numFiles = _rnd.Next(17) + 12;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int numFiles = _rnd.Next(17) + 12;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int[] segmentSizes = { 256' 512' 1024' 4096' 8192 };
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int[] segmentSizes = { 256' 512' 1024' 4096' 8192 };
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int[] segmentSizes = { 256' 512' 1024' 4096' 8192 };
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int[] segmentSizes = { 256' 512' 1024' 4096' 8192 };
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: int[] segmentSizes = { 256' 512' 1024' 4096' 8192 };
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following statement contains a magic number: var update = new Action<int'int'Int64>( (x'y'z) => {                      switch (x)                      {                          case 0:                          break;                          case 1:                          break;                          case 2:                          _txrx.Send("pb 1 step");                          msg = String.Format("status created {0}/{1} files"'                                              y+1'                                              ((int)z));                          _txrx.Send(msg);                          break;                      }                  });
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip_z64_wi11936,The following statement contains a magic number: int numFiles = _rnd.Next(17) + 12;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip_z64_wi11936,The following statement contains a magic number: int numFiles = _rnd.Next(17) + 12;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip_z64_wi11936,The following statement contains a magic number: var update = new Action<int'int'Int64>( (x'y'z) => {                      switch (x)                      {                          case 0:                          break;                          case 1:                          break;                          case 2:                          _txrx.Send("pb 1 step");                          msg = String.Format("status created {0}/{1} files"'                                              y+1'                                              ((int)z));                          _txrx.Send(msg);                          break;                      }                  });
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip_ZeroLengthFile,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Zip_Variable,The following statement contains a magic number: System.Threading.Thread.Sleep(1200);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_2,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(13) + 8' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_2,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(13) + 8' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_ZeroLengthFile,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_SFX,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(13) + 8' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_SFX,The following statement contains a magic number: var filesToZip = GetSelectionOfTempFiles(_rnd.Next(13) + 8' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_Bzip2,The following statement contains a magic number: Assert.IsTrue( numBzipped > 2*numStored'                             "The number of bzipped files is too low.");
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_Bzip2_Large,The following statement contains a magic number: int n = _rnd.Next(5) + 5;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_Bzip2_Large,The following statement contains a magic number: int n = _rnd.Next(5) + 5;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,Winzip_Unzip_Basic,The following statement contains a magic number: string attrs = wzzipOut.Substring(x + textToLookFor.Length' 4);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,VerifyFileTimes1,The following statement contains a magic number: DateTime fortyFiveDaysAgo = atMidnight - new TimeSpan(45' 0' 0' 0);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The following statement contains a magic number: return GetSelectionOfTempFiles(_rnd.Next(23) + 9' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The following statement contains a magic number: return GetSelectionOfTempFiles(_rnd.Next(23) + 9' checksums);
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The following statement contains a magic number: int minOtherSide = numFilesWanted / 3 + 1;
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The following statement contains a magic number: Path.GetFileName(f)[0] == '~'                          || theChosenOnes.Contains(f)                          || fi.Length > 10000000  // too large                          || fi.Length < 100
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,GetSelectionOfTempFiles,The following statement contains a magic number: Path.GetFileName(f)[0] == '~'                          || theChosenOnes.Contains(f)                          || fi.Length > 10000000  // too large                          || fi.Length < 100
Magic Number,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,_Extract_ZipFile,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ClassInit,The following statement contains a magic number: twentyDaysAgo = DateTime.Now - new TimeSpan(20'0'0'0);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ClassInit,The following statement contains a magic number: threeDaysAgo = todayAtMidnight - new TimeSpan(3' 0' 0' 0);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ClassInit,The following statement contains a magic number: twoDaysAgo = todayAtMidnight - new TimeSpan(2' 0' 0' 0);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ClassInit,The following statement contains a magic number: threeYearsAgo = new DateTime(DateTime.Now.Year - 3' DateTime.Now.Month' DateTime.Now.Day);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,TryOneFodderDir,The following statement contains a magic number: numFodderFiles <= 2
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,TryOneFodderDir,The following statement contains a magic number: numFodderDirs <= 2
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,SetupFiles,The following statement contains a magic number: fodderDirectory != null && numFodderFiles > 5
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: int fileCount = rnd.Next(95) + 95;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: int fileCount = rnd.Next(95) + 95;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: sz = rnd.Next(15000) + 150000;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: sz = rnd.Next(15000) + 150000;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: j % 5 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: int n = rnd.Next(4);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(12)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(12)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(12)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(12)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(1)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(1)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(1)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(24)'_rnd.Next(59)'_rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(24)'_rnd.Next(59)'_rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(24)'_rnd.Next(59)'_rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: DateTime x = new DateTime(1998' 4' 29);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: DateTime x = new DateTime(1998' 4' 29);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: DateTime x = new DateTime(1998' 4' 29);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(22)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(22)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(22)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: var span = new TimeSpan(_rnd.Next(22)'                                              _rnd.Next(24)'                                              _rnd.Next(59)'                                              _rnd.Next(59));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: j % 14 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: n = rnd.Next(6);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: n < 4
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: j % 9 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: j % 14 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: j % 13 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: j % 11 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,ActuallyCreateFodderFiles,The following statement contains a magic number: entriesAdded % 8 == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".txt"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length < 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = s.EndsWith(".bin") && fi.Length > 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".txt"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length < 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = s.EndsWith(".bin") && fi.Length > 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".txt"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length < 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = s.EndsWith(".bin") && fi.Length > 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".txt"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length < 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = s.EndsWith(".bin") && fi.Length > 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".bin"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length >= 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = !s.EndsWith(".bin") || fi.Length <= 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".bin"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length >= 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = !s.EndsWith(".bin") || fi.Length <= 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".bin"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length >= 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = !s.EndsWith(".bin") || fi.Length <= 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following statement contains a magic number: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".bin"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length >= 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = !s.EndsWith(".bin") || fi.Length <= 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles,The following statement contains a magic number: _txrx.Send(String.Format("pb 0 max {0}"' 2 * (trials.Length + 1)));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_file,The following statement contains a magic number: Assert.IsFalse(nEntries < 2' "not enough entries");
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_directory,The following statement contains a magic number: Assert.IsFalse(txtFiles.Length < 3' "not enough entries (n={0})"'                             txtFiles.Length);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_directory,The following statement contains a magic number: Assert.IsFalse(nEntries < 3' "not enough entries (n={0})"' nEntries);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_directory_2,The following statement contains a magic number: int n = _rnd.Next(3)+2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_directory_2,The following statement contains a magic number: int n = _rnd.Next(3)+2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_directory_2,The following statement contains a magic number: int k = 2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_AddSelectedFiles_Checkcase_directory_2,The following statement contains a magic number: Assert.IsFalse(nEntries < 3' "not enough entries");
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_FwdSlash_wi13350,The following statement contains a magic number: Assert.IsTrue(selection1.Count > 2' "{0} is simply not enough entries!"'                                selection1.Count);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_CheckRemove_wi10499,The following statement contains a magic number: Assert.IsFalse(entries.Count < 3' "not enough entries");
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByTime,The following statement contains a magic number: var twentyYearsAgo = new DateTime(DateTime.Now.Year - 20'                                                    DateTime.Now.Month'                                                    DateTime.Now.Day);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_ExtractSelectedEntries,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName,The following statement contains a magic number: int fileCount = _rnd.Next(33) + 33;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName,The following statement contains a magic number: int fileCount = _rnd.Next(33) + 33;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName,The following statement contains a magic number: _rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName_NamesWithSpaces,The following statement contains a magic number: int fileCount = _rnd.Next(44) + 44;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName_NamesWithSpaces,The following statement contains a magic number: int fileCount = _rnd.Next(44) + 44;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName_NamesWithSpaces,The following statement contains a magic number: string space = (_rnd.Next(2) == 0) ? " " : "";
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName_NamesWithSpaces,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName_NamesWithSpaces,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_ByName_NamesWithSpaces,The following statement contains a magic number: _rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries_Spaces,The following statement contains a magic number: int fileCount = _rnd.Next(44) + 44;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries_Spaces,The following statement contains a magic number: int fileCount = _rnd.Next(44) + 44;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries_Spaces,The following statement contains a magic number: string space = (_rnd.Next(2) == 0) ? " " : "";
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries_Spaces,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries_Spaces,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries_Spaces,The following statement contains a magic number: _rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries2,The following statement contains a magic number: int fileCount = _rnd.Next(44) + 44;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries2,The following statement contains a magic number: int fileCount = _rnd.Next(44) + 44;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries2,The following statement contains a magic number: string space = (_rnd.Next(2) == 0) ? " " : "";
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries2,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries2,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 5000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_RemoveSelectedEntries2,The following statement contains a magic number: _rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: int subdirCount = _rnd.Next(17) + 9;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: int subdirCount = _rnd.Next(17) + 9;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: string subDirShort = new System.String(new char[] { (char)(i + 65) });
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: int filecount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: int filecount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: TestUtilities.CreateAndFillFile(fqFilename' _rnd.Next(1000) + 1000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: TestUtilities.CreateAndFillFile(fqFilename' _rnd.Next(1000) + 1000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: string dirInArchive = new System.String(new char[] { (char)(i + 65) });
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_subDirs,The following statement contains a magic number: string dirInArchive = new System.String(new char[] { (char)(i + 65) });
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: int subdirCount = _rnd.Next(17) + 9;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: int subdirCount = _rnd.Next(17) + 9;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: string subDirShort = new System.String(new char[] { (char)(i + 65) });
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: int filecount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: int filecount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: TestUtilities.CreateAndFillFile(fqFilename' _rnd.Next(1000) + 1000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: TestUtilities.CreateAndFillFile(fqFilename' _rnd.Next(1000) + 1000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: string dirInArchive = new System.String(new char[] { (char)(i + 65) });
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_Fullpath,The following statement contains a magic number: string dirInArchive = new System.String(new char[] { (char)(i + 65) });
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: int dirCount = _rnd.Next(4) + 3;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: int dirCount = _rnd.Next(4) + 3;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: String dir = new String((char)(65 + i)' i + 1);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: int subDirCount = _rnd.Next(3) + 2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: int subDirCount = _rnd.Next(3) + 2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: String subdir = Path.Combine(dir' new String((char)(90 - j)' 3));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: String subdir = Path.Combine(dir' new String((char)(90 - j)' 3));
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectEntries_NestedDirectories_wi8559,The following statement contains a magic number: String dir = new String((char)(65 + i)' i + 1);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles_DirName_wi9176,The following statement contains a magic number: int[] eCount = new int[2];
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles_DirName_wi9176,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_Twiddle_wi10153,The following statement contains a magic number: Assert.IsTrue(nEntries>2' "Not enough entries");
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: int nFolders = this._rnd.Next(4)+3;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: int nFolders = this._rnd.Next(4)+3;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: int nFiles = this._rnd.Next(3)+2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: int nFiles = this._rnd.Next(3)+2;
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(fname' this._rnd.Next(10000) + 1000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(fname' this._rnd.Next(10000) + 1000);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: TestContext.WriteLine("Try #{0}: {1}"' k+2' selectCriteria);
Magic Number,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SingleQuotesAndSlashes_wi14033,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_CanRead,The following statement contains a magic number: int fileCount = _rnd.Next(50) + 30;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_CanRead,The following statement contains a magic number: int fileCount = _rnd.Next(50) + 30;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_CanRead,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_CanRead,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: Assert.AreEqual<int>(TestUtilities.CountEntries(sfxFileToCreate)' 2' "The Zip file has the wrong number of entries.");
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: Assert.AreEqual<int>(TestUtilities.CountEntries(sfxFileToCreate)' 3' "The Zip file has the wrong number of entries.");
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Update,The following statement contains a magic number: int N = (flavor == SelfExtractorFlavor.ConsoleApplication) ? 2 : 1;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Console,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Console,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Console,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Console,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_WinForms,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_WinForms,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_WinForms,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_WinForms,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The following statement contains a magic number: string postExtractExe = String.Format(cmdFormat' _rnd.Next(3000));
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The following statement contains a magic number: int expectedReturnCode = (forceNoninteractive &&                                        flavor == SelfExtractorFlavor.WinFormsApplication)                  ? 0                  : _rnd.Next(1024) + 20;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The following statement contains a magic number: int expectedReturnCode = (forceNoninteractive &&                                        flavor == SelfExtractorFlavor.WinFormsApplication)                  ? 0                  : _rnd.Next(1024) + 20;
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The following statement contains a magic number: Assert.AreEqual<Int32>                                  (5' rc' "In trial {0}' the exit code was unexpected."' k);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,_Internal_SelfExtractor_Command,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Save_Zip_As_EXE,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Save_Zip_As_EXE,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Save_Zip_As_EXE,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_Save_Zip_As_EXE,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_RemoveFilesAfterUnpack_wi10682,The following statement contains a magic number: string postExtractExe = String.Format(postExeFormat' _rnd.Next(10000));
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_RemoveFilesAfterUnpack_wi10682,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests,SelfExtractor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SelfExtractor.cs,SFX_RemoveFilesAfterUnpack_wi10682,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,OverwriteDecider,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite:                      // randomly choose whether to overwrite or not                      e.CurrentEntry.ExtractExistingFile = (_rnd.Next(2) == 0)                          ? ExtractExistingFileAction.DoNotOverwrite                          : ExtractExistingFileAction.OverwriteSilently;                      break;              }
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,_Internal_ExtractExisting,The following statement contains a magic number: flavor > 10
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,_Internal_ExtractExisting,The following statement contains a magic number: flavor == 4
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,_Internal_ExtractExisting,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Extract_ExistingFileWithoutOverwrite_NoArg,The following statement contains a magic number: _Internal_ExtractExisting(4);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Extract_ExistingFileWithoutOverwrite_InvokeProgress_2,The following statement contains a magic number: _Internal_ExtractExisting(10+(int)ExtractExistingFileAction.InvokeExtractProgressEvent);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Extract_ExistingFileWithoutOverwrite_7,The following statement contains a magic number: _Internal_ExtractExisting(7);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_EmptySplitZip,The following statement contains a magic number: zip.MaxOutputSegmentSize = 1024*1024;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_EmptySplitZip,The following statement contains a magic number: zip.MaxOutputSegmentSize = 1024*1024;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,CreateSmallZip,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_UseOpenReaderWith_ZIS_wi10923,The following statement contains a magic number: var buffer = new byte[2048];
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Save_NonExistentFile,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(20) + 18;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Save_NonExistentFile,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(20) + 18;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Save_NonExistentFile,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(1800) + 1500);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Save_NonExistentFile,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(1800) + 1500);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Save_NonExistentFile,The following statement contains a magic number: count == filenames.Length - 2
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_Read_WithoutSave,The following statement contains a magic number: byte[] buffer= new byte[1024];
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: byte[] corruption = new byte[_rnd.Next(100) + 12];
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: byte[] corruption = new byte[_rnd.Next(100) + 12];
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: int min = 5;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: int max = (int)fs.Length - 20;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: int numCorruptions = _rnd.Next(2) + 2;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: int numCorruptions = _rnd.Next(2) + 2;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: lengthOfCorruption = _rnd.Next(2) + 3;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IntroduceCorruption,The following statement contains a magic number: lengthOfCorruption = _rnd.Next(2) + 3;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_ReadCorruptedZipFile_Passwords,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_ReadCorruptedZipFile,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_LockedFile_wi13903,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(fname' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_LockedFile_wi13903,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(fname' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_AddFile_Twice,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_AddFile_Twice,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_AddFile_Twice,The following statement contains a magic number: TestUtilities.CreateUniqueFile("bin"' subdir' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,Error_AddFile_Twice,The following statement contains a magic number: TestUtilities.CreateUniqueFile("bin"' subdir' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,IncorrectZipContentTest3_wi10459,The following statement contains a magic number: byte[] content = new byte[8192];
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,TrimVolumeAndSwapSlashes,The following statement contains a magic number: pathName.Length < 2
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,TrimVolumeAndSwapSlashes,The following statement contains a magic number: return (((pathName[1] == ':') && (pathName[2] == '\\')) ? pathName.Substring(3) : pathName)                  .Replace('\\'' '/');
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,TrimVolumeAndSwapSlashes,The following statement contains a magic number: return (((pathName[1] == ':') && (pathName[2] == '\\')) ? pathName.Substring(3) : pathName)                  .Replace('\\'' '/');
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,RoundToEvenSecond,The following statement contains a magic number: (source.Second % 2) == 1
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: int chunkSize = 48 * 1024;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: int chunkSize = 48 * 1024;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: int variationSize = 2 * 1024;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: int variationSize = 2 * 1024;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: var fodder = new byte[32][];
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: (nCycles % 1024) == 0
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: size > 128 * 1024
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: size > 128 * 1024
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,CreateAndFillFileText,The following statement contains a magic number: bytesRemaining < Line.Length + 2
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,_CreateAndFillBinary,The following statement contains a magic number: int sz = 65536 * 8;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,_CreateAndFillBinary,The following statement contains a magic number: int sz = 65536 * 8;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,_CreateAndFillBinary,The following statement contains a magic number: (nCycles % 256) == 0
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,_CreateAndFillBinary,The following statement contains a magic number: size > 1024*1024
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,_CreateAndFillBinary,The following statement contains a magic number: size > 1024*1024
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomPasswordChar,The following statement contains a magic number: const int range = 126 - 33;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomPasswordChar,The following statement contains a magic number: const int range = 126 - 33;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomPasswordChar,The following statement contains a magic number: const int start = 33;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomPassword,The following statement contains a magic number: int length = _rnd.Next(22) + 12;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomPassword,The following statement contains a magic number: int length = _rnd.Next(22) + 12;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomAsciiString,The following statement contains a magic number: return GenerateRandomAsciiString(_rnd.Next(14));
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomName,The following statement contains a magic number: return                  GenerateRandomUpperString(1) +                  GenerateRandomLowerString(_rnd.Next(9) + 3);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomName,The following statement contains a magic number: return                  GenerateRandomUpperString(1) +                  GenerateRandomLowerString(_rnd.Next(9) + 3);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomUpperString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(_rnd.Next(10) + 3' 65);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomUpperString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(_rnd.Next(10) + 3' 65);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomUpperString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(_rnd.Next(10) + 3' 65);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomUpperString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(length' 65);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomLowerString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(length' 97);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomLowerString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(_rnd.Next(9) + 4' 97);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomLowerString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(_rnd.Next(9) + 4' 97);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomLowerString,The following statement contains a magic number: return GenerateRandomAsciiStringImpl(_rnd.Next(9) + 4' 97);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomAsciiStringImpl,The following statement contains a magic number: delta = (_rnd.Next(2) == 0) ? 65 : 97;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomAsciiStringImpl,The following statement contains a magic number: delta = (_rnd.Next(2) == 0) ? 65 : 97;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateRandomAsciiStringImpl,The following statement contains a magic number: delta = (_rnd.Next(2) == 0) ? 65 : 97;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomAsciiChar,The following statement contains a magic number: return (char)(_rnd.Next(26) + delta);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomLowercaseAsciiChar,The following statement contains a magic number: return (char)(_rnd.Next(26) + 97);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomLowercaseAsciiChar,The following statement contains a magic number: return (char)(_rnd.Next(26) + 97);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomUppercaseAsciiChar,The following statement contains a magic number: return (char)(_rnd.Next(26) + 65);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetOneRandomUppercaseAsciiChar,The following statement contains a magic number: return (char)(_rnd.Next(26) + 65);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int[] settings = { 7' 6' 17' 23' 4000' 4000 };
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int[] settings = { 7' 6' 17' 23' 4000' 4000 };
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int[] settings = { 7' 6' 17' 23' 4000' 4000 };
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int[] settings = { 7' 6' 17' 23' 4000' 4000 };
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int[] settings = { 7' 6' 17' 23' 4000' 4000 };
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int[] settings = { 7' 6' 17' 23' 4000' 4000 };
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int filecount = _rnd.Next(settings[2]) + settings[3];
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int filecount = _rnd.Next(settings[2]) + settings[3];
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: int n = _rnd.Next(2);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: TestUtilities.CreateAndFillFile(Path.Combine(subdir' filename)'                                                      _rnd.Next(settings[4]) + settings[5]'                                                      (FileFlavor)n);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: TestUtilities.CreateAndFillFile(Path.Combine(subdir' filename)'                                                      _rnd.Next(settings[4]) + settings[5]'                                                      (FileFlavor)n);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: update(3' j + 1);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: update(2' i + 1);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesOneLevelDeep,The following statement contains a magic number: update(4' entriesAdded);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,The following statement contains a magic number: numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,The following statement contains a magic number: numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,The following statement contains a magic number: lowSize = 5000;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,The following statement contains a magic number: highSize = 39000;
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GenerateFilesFlat,The following statement contains a magic number: update(2'i'numFilesToCreate);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,GetTestDependentDir,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,StartProgressMonitor,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,StartProgressMonitor,The following statement contains a magic number: System.Threading.Thread.Sleep(450);
Magic Number,Ionic.Zip.Tests.Utilities,TestUtilities,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,StartProgressMonitor,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Utilities,Extensions,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\TestUtilities.cs,Capitalize,The following statement contains a magic number: subject.Length < 2
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateFilesAndChecksums,The following statement contains a magic number: DateTime fortyFiveDaysAgo = atMidnight - new TimeSpan(45' 0' 0' 0);
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateFilesAndChecksums,The following statement contains a magic number: rnd.Next(3) == 0
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: filesToZip = TestUtilities.GenerateFilesFlat(subdir'                                                           numFiles'                                                           256 * 1024'                                                           3 * 1024 * 1024'                                                           update);
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: filesToZip = TestUtilities.GenerateFilesFlat(subdir'                                                           numFiles'                                                           256 * 1024'                                                           3 * 1024 * 1024'                                                           update);
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: filesToZip = TestUtilities.GenerateFilesFlat(subdir'                                                           numFiles'                                                           256 * 1024'                                                           3 * 1024 * 1024'                                                           update);
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: filesToZip = TestUtilities.GenerateFilesFlat(subdir'                                                           numFiles'                                                           256 * 1024'                                                           3 * 1024 * 1024'                                                           update);
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: filesToZip = TestUtilities.GenerateFilesFlat(subdir'                                                           numFiles'                                                           256 * 1024'                                                           3 * 1024 * 1024'                                                           update);
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: var dates = new DateTime[rnd.Next(6) + 7];
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: var dates = new DateTime[rnd.Next(6) + 7];
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: dates[i] = DateTime.Now -                      new TimeSpan(rnd.Next(300)'                                   rnd.Next(23)'                                   rnd.Next(60)'                                   rnd.Next(60));
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: dates[i] = DateTime.Now -                      new TimeSpan(rnd.Next(300)'                                   rnd.Next(23)'                                   rnd.Next(60)'                                   rnd.Next(60));
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: dates[i] = DateTime.Now -                      new TimeSpan(rnd.Next(300)'                                   rnd.Next(23)'                                   rnd.Next(60)'                                   rnd.Next(60));
Magic Number,Ionic.Zip.Tests.Utilities,IonicTestClass,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\IonicTestClass.cs,CreateLargeFilesWithChecksums,The following statement contains a magic number: dates[i] = DateTime.Now -                      new TimeSpan(rnd.Next(300)'                                   rnd.Next(23)'                                   rnd.Next(60)'                                   rnd.Next(60));
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int numFiles = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int numFiles = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: var update = new Action<int'int'Int64>( (x'y'z) => {                      switch (x)                      {                          case 0:                          _txrx.Send(String.Format("pb 2 max {0}"' ((int)z)));                          break;                          case 1:                          msg = String.Format("pb 2 value {0}"' ((int)z));                          _txrx.Send(msg);                          break;                          case 2:                          _txrx.Send("pb 1 step");                          _txrx.Send("pb 2 value 0");                          msg = String.Format("status created {0}/{1} files"'                                              y+1'                                              ((int)z));                          _txrx.Send(msg);                          break;                      }                  });
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: int[] segmentSizes = { 0' 64*1024' 128*1024' 512*1024' 1024*1024'                                     2*1024*1024' 8*1024*1024' 16*1024*1024'                                     1024*1024*1024 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: msg = String.Format("status trial {0}/{1}  (max seg size {2}k)"'                                      m+1' segmentSizes.Length' maxSegSize/1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following statement contains a magic number: Assert.IsTrue(overflows < 3' "Too many overflows. Check the test.");
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchive,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 5'                  // segmentSize32Bit: 4 * 1024 * 1024);                  // segmentSize32Bit: 80 * 1024 * 1024);                  segmentSize32Bit: 120 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Create_LargeSegmentedArchiveWithOver32bitSegmentSize,The following statement contains a magic number: Test_LargeSegmentedArchive(                  minFileSize: 420 * 1024 * 1024'                  minFilesCount: 10'                  segmentSize64Bit: 3L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: int sizeRandom = 20 * 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: int sizeRandom = 20 * 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: int sizeRandom = 20 * 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: int numFiles = _rnd.Next(5) + minFilesCount;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      Stream input = null;                      Stream cache = null;                      try                      {                          // use a cahce file as the content.  The entry                          // name will vary but we'll get the content for                          // each entry from the a single cache file.                          if (File.Exists(cacheFile))                          {                              input = File.Open(cacheFile'                                                FileMode.Open'                                                FileAccess.ReadWrite'                                                FileShare.ReadWrite);                              // Make the file slightly shorter with each                              // successive entry' - just to shake things                              // up a little.  Also seek forward a little.                              var fl = input.Length;                              input.SetLength(fl - _rnd.Next(sizeRandom/2) + 5201);                              input.Seek(_rnd.Next(sizeRandom/2)' SeekOrigin.Begin);                          }                          else                          {                              sz = minFileSize + _rnd.Next(sizeRandom);                              // input = new Ionic.Zip.Tests.Utilities.RandomTextInputStream((int)sz);                              input = new Ionic.Zip.Tests.Utilities.RandomBytesInputStream((int)sz);                              // cache = File.Create(cacheFile);                          }                          _txrx.Send(String.Format("pb 2 max {0}"' sz));                          _txrx.Send("pb 2 value 0");                          var buffer = new byte[8192];                          int n;                          Int64 totalWritten = 0;                          int nCycles = 0;                          using (input)                          {                              while ((n= input.Read(buffer'0' buffer.Length))>0)                              {                                  stream.Write(buffer'0'n);                                  if (cache!=null)                                      cache.Write(buffer'0'n);                                  totalWritten += n;                                  // for performance' don't update the                                  // progress monitor every time.                                  nCycles++;                                  if (nCycles % 312 == 0)                                  {                                      _txrx.Send(String.Format("pb 2 value {0}"' totalWritten));                                      _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                                                               numSaving' totalToSave'                                                               name'                                                               totalWritten/(1024*1024)' sz/(1024*1024)'                                                               ((double)totalWritten) / (0.01 * sz)));                                  }                              }                          }                      }                      finally                      {                          if (cache!=null) cache.Dispose();                      }                  };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: zip.BufferSize = 256 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: zip.BufferSize = 256 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: zip.CodecBufferSize = 128 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following statement contains a magic number: zip.CodecBufferSize = 128 * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InvalidSegmentSize,The following statement contains a magic number: int segSize = 65536/3 + _rnd.Next(65536/2);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InvalidSegmentSize,The following statement contains a magic number: int segSize = 65536/3 + _rnd.Next(65536/2);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InvalidSegmentSize,The following statement contains a magic number: int segSize = 65536/3 + _rnd.Next(65536/2);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InvalidSegmentSize,The following statement contains a magic number: int segSize = 65536/3 + _rnd.Next(65536/2);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,CreateSomeFiles,The following statement contains a magic number: int baseNumFiles = 12;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,CreateSomeFiles,The following statement contains a magic number: int numFilesToAdd = baseNumFiles + _rnd.Next(4);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,CreateSomeFiles,The following statement contains a magic number: int fileSize = baseSize + _rnd.Next(baseSize/2);
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Resave_wi13915,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Resave_wi13915,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Resave_wi13915,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Resave_wi13915,The following statement contains a magic number: zip1.MaxOutputSegmentSize = segSizes[k] * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Resave_wi13915,The following statement contains a magic number: zip2.MaxOutputSegmentSize = segSizes[k] * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Resave_wi13915,The following statement contains a magic number: m < 3
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Unzip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Unzip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Unzip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Unzip_wi13691,The following statement contains a magic number: zip1.MaxOutputSegmentSize = segSizes[k] * 1024;
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Zip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Zip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_WinZip_Zip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InfoZip_Zip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InfoZip_Zip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_InfoZip_Zip_wi13691,The following statement contains a magic number: int[] segSizes = { 128' 256' 512 };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: var update = new Action<Int32'Int32'Int64>((op'ix'sz) => {                      switch(op)                      {                          case 0:                          _txrx.Send("pb 1 max " + sz);                          _txrx.Send("status Creating file " + ix);                          break;                          case 1:                          _txrx.Send("pb 1 value " + sz);                          break;                          case 2:                          _txrx.Send("pb 0 step");                          _txrx.Send("pb 1 value 0");                          break;                      }              });
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: int threshold = 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: int threshold = 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: int n = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: int n = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: _txrx.Send("pb 0 max " + (4*2));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: _txrx.Send("pb 0 max " + (4*2));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: var ts = new TimeSpan[2];
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: var fileSize = new Int64[2];
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: System.Threading.Thread.Sleep(1200);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: TestContext.WriteLine("size of resulting zip: {0}k"'                                        fileSize[k] / 1024);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: var delta = (ts[0].TotalSeconds - ts[1].TotalSeconds) /                  (0.01 * ts[0].TotalSeconds);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: delta = Math.Abs((int)(fileSize[1]-fileSize[0])) /                  (0.01 * fileSize[0]);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following statement contains a magic number: Assert.IsTrue(delta < 5.0'                            "Parallel compression is not within 5% of normal filesize.");
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile,The following statement contains a magic number: filename = Path.Combine(subdir' String.Format("ThisFileDoesNotExist.{0:D2}.txt"' _rnd.Next(2000)));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile_Stream,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile_Stream,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile_Stream,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,TestZip_IsZipFile_Stream,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_RenameRemoveAndRenameAgain_wi8047,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_EmitTimestampOptions,The following statement contains a magic number: j == 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_EmitTimestampOptions,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_EmitTimestampOptions,The following statement contains a magic number: j < 3
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddUpdateFileFromStream,The following statement contains a magic number: string[] inputStrings = new string[]                          {                              TestUtilities.LoremIpsum.Substring(_rnd.Next(5)' 170 + _rnd.Next(25))'                              TestUtilities.LoremIpsum.Substring(100 + _rnd.Next(40)' 180+ _rnd.Next(30))                          };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName,The following statement contains a magic number: string dirName = TestUtilities.GenerateRandomName(24);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName,The following statement contains a magic number: n <= 10
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_Nested,The following statement contains a magic number: DirName = Path.Combine(DirName' TestUtilities.GenerateRandomAsciiString(11));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_Nested,The following statement contains a magic number: n <= 14
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: int T = 3 + _rnd.Next(4);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: int T = 3 + _rnd.Next(4);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: dirName = (n == 0) ? "root" :                          Path.Combine(dirName' TestUtilities.GenerateRandomAsciiString(8));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: n % 2 == 0
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: zip1.AddEntry(Path.Combine(dirName' new System.String((char)(n + 48)' 3) + ".txt")' "Hello' Dolly!");
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: zip1.AddEntry(Path.Combine(dirName' new System.String((char)(n + 48)' 3) + ".txt")' "Hello' Dolly!");
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: n % 2 == 0
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Test_AddDirectoryByName_WithFiles,The following statement contains a magic number: Assert.AreEqual<int>(dirsAdded.Count * 2' entryCount);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      if (_txrx != null)                      {                          _txrx.Send("status saving started...");                          _pb1Set = false;                          _numSaving= 1;                      }                      break;                  case ZipProgressEventType.Saving_BeforeWriteEntry:                      if (_txrx != null)                      {                          _txrx.Send("status Compressing " + e.CurrentEntry.FileName);                          spCycles = 0;                          if (!_pb1Set)                          {                              _txrx.Send("pb 1 max " + e.EntriesTotal);                              _pb1Set = true;                          }                          _totalToSave = e.EntriesTotal;                          _pb2Set = false;                      }                      break;                  case ZipProgressEventType.Saving_AfterWriteEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                      }                      if (_txrx != null)                      {                          _txrx.Send("pb 1 step");                          _numSaving++;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer'                          "For entry {0}' BytesTransferred is greater than TotalBytesToTransfer: ({1} > {2})"'                          e.CurrentEntry.FileName' e.BytesTransferred' e.TotalBytesToTransfer);                      maxBytesXferred = e.BytesTransferred;                      if (_txrx!=null)                      {                          spCycles++;                          if ((spCycles % 128) == 0)                          {                              if (!_pb2Set)                              {                                  _txrx.Send("pb 2 max " + e.TotalBytesToTransfer);                                  _pb2Set = true;                              }                              _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                       _numSaving' _totalToSave'                                                       e.CurrentEntry.FileName'                                                       e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                       ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                              _txrx.Send("pb 2 value " +  e.BytesTransferred);                          }                      }                      break;                    case ZipProgressEventType.Saving_Completed:                      if (_txrx != null)                      {                          _txrx.Send("status Save completed");                          _pb2Set = false;                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                      }                      break;                    default:                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      if (_txrx != null)                      {                          _txrx.Send("status saving started...");                          _pb1Set = false;                          _numSaving= 1;                      }                      break;                  case ZipProgressEventType.Saving_BeforeWriteEntry:                      if (_txrx != null)                      {                          _txrx.Send("status Compressing " + e.CurrentEntry.FileName);                          spCycles = 0;                          if (!_pb1Set)                          {                              _txrx.Send("pb 1 max " + e.EntriesTotal);                              _pb1Set = true;                          }                          _totalToSave = e.EntriesTotal;                          _pb2Set = false;                      }                      break;                  case ZipProgressEventType.Saving_AfterWriteEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                      }                      if (_txrx != null)                      {                          _txrx.Send("pb 1 step");                          _numSaving++;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer'                          "For entry {0}' BytesTransferred is greater than TotalBytesToTransfer: ({1} > {2})"'                          e.CurrentEntry.FileName' e.BytesTransferred' e.TotalBytesToTransfer);                      maxBytesXferred = e.BytesTransferred;                      if (_txrx!=null)                      {                          spCycles++;                          if ((spCycles % 128) == 0)                          {                              if (!_pb2Set)                              {                                  _txrx.Send("pb 2 max " + e.TotalBytesToTransfer);                                  _pb2Set = true;                              }                              _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                       _numSaving' _totalToSave'                                                       e.CurrentEntry.FileName'                                                       e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                       ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                              _txrx.Send("pb 2 value " +  e.BytesTransferred);                          }                      }                      break;                    case ZipProgressEventType.Saving_Completed:                      if (_txrx != null)                      {                          _txrx.Send("status Save completed");                          _pb2Set = false;                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                      }                      break;                    default:                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      if (_txrx != null)                      {                          _txrx.Send("status saving started...");                          _pb1Set = false;                          _numSaving= 1;                      }                      break;                  case ZipProgressEventType.Saving_BeforeWriteEntry:                      if (_txrx != null)                      {                          _txrx.Send("status Compressing " + e.CurrentEntry.FileName);                          spCycles = 0;                          if (!_pb1Set)                          {                              _txrx.Send("pb 1 max " + e.EntriesTotal);                              _pb1Set = true;                          }                          _totalToSave = e.EntriesTotal;                          _pb2Set = false;                      }                      break;                  case ZipProgressEventType.Saving_AfterWriteEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                      }                      if (_txrx != null)                      {                          _txrx.Send("pb 1 step");                          _numSaving++;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer'                          "For entry {0}' BytesTransferred is greater than TotalBytesToTransfer: ({1} > {2})"'                          e.CurrentEntry.FileName' e.BytesTransferred' e.TotalBytesToTransfer);                      maxBytesXferred = e.BytesTransferred;                      if (_txrx!=null)                      {                          spCycles++;                          if ((spCycles % 128) == 0)                          {                              if (!_pb2Set)                              {                                  _txrx.Send("pb 2 max " + e.TotalBytesToTransfer);                                  _pb2Set = true;                              }                              _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                       _numSaving' _totalToSave'                                                       e.CurrentEntry.FileName'                                                       e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                       ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                              _txrx.Send("pb 2 value " +  e.BytesTransferred);                          }                      }                      break;                    case ZipProgressEventType.Saving_Completed:                      if (_txrx != null)                      {                          _txrx.Send("status Save completed");                          _pb2Set = false;                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                      }                      break;                    default:                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      if (_txrx != null)                      {                          _txrx.Send("status saving started...");                          _pb1Set = false;                          _numSaving= 1;                      }                      break;                  case ZipProgressEventType.Saving_BeforeWriteEntry:                      if (_txrx != null)                      {                          _txrx.Send("status Compressing " + e.CurrentEntry.FileName);                          spCycles = 0;                          if (!_pb1Set)                          {                              _txrx.Send("pb 1 max " + e.EntriesTotal);                              _pb1Set = true;                          }                          _totalToSave = e.EntriesTotal;                          _pb2Set = false;                      }                      break;                  case ZipProgressEventType.Saving_AfterWriteEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                      }                      if (_txrx != null)                      {                          _txrx.Send("pb 1 step");                          _numSaving++;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer'                          "For entry {0}' BytesTransferred is greater than TotalBytesToTransfer: ({1} > {2})"'                          e.CurrentEntry.FileName' e.BytesTransferred' e.TotalBytesToTransfer);                      maxBytesXferred = e.BytesTransferred;                      if (_txrx!=null)                      {                          spCycles++;                          if ((spCycles % 128) == 0)                          {                              if (!_pb2Set)                              {                                  _txrx.Send("pb 2 max " + e.TotalBytesToTransfer);                                  _pb2Set = true;                              }                              _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                       _numSaving' _totalToSave'                                                       e.CurrentEntry.FileName'                                                       e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                       ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                              _txrx.Send("pb 2 value " +  e.BytesTransferred);                          }                      }                      break;                    case ZipProgressEventType.Saving_Completed:                      if (_txrx != null)                      {                          _txrx.Send("status Save completed");                          _pb2Set = false;                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                      }                      break;                    default:                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      if (_txrx != null)                      {                          _txrx.Send("status saving started...");                          _pb1Set = false;                          _numSaving= 1;                      }                      break;                  case ZipProgressEventType.Saving_BeforeWriteEntry:                      if (_txrx != null)                      {                          _txrx.Send("status Compressing " + e.CurrentEntry.FileName);                          spCycles = 0;                          if (!_pb1Set)                          {                              _txrx.Send("pb 1 max " + e.EntriesTotal);                              _pb1Set = true;                          }                          _totalToSave = e.EntriesTotal;                          _pb2Set = false;                      }                      break;                  case ZipProgressEventType.Saving_AfterWriteEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                      }                      if (_txrx != null)                      {                          _txrx.Send("pb 1 step");                          _numSaving++;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer'                          "For entry {0}' BytesTransferred is greater than TotalBytesToTransfer: ({1} > {2})"'                          e.CurrentEntry.FileName' e.BytesTransferred' e.TotalBytesToTransfer);                      maxBytesXferred = e.BytesTransferred;                      if (_txrx!=null)                      {                          spCycles++;                          if ((spCycles % 128) == 0)                          {                              if (!_pb2Set)                              {                                  _txrx.Send("pb 2 max " + e.TotalBytesToTransfer);                                  _pb2Set = true;                              }                              _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                       _numSaving' _totalToSave'                                                       e.CurrentEntry.FileName'                                                       e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                       ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                              _txrx.Send("pb 2 value " +  e.BytesTransferred);                          }                      }                      break;                    case ZipProgressEventType.Saving_Completed:                      if (_txrx != null)                      {                          _txrx.Send("status Save completed");                          _pb2Set = false;                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                      }                      break;                    default:                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      if (_txrx != null)                      {                          _txrx.Send("status saving started...");                          _pb1Set = false;                          _numSaving= 1;                      }                      break;                  case ZipProgressEventType.Saving_BeforeWriteEntry:                      if (_txrx != null)                      {                          _txrx.Send("status Compressing " + e.CurrentEntry.FileName);                          spCycles = 0;                          if (!_pb1Set)                          {                              _txrx.Send("pb 1 max " + e.EntriesTotal);                              _pb1Set = true;                          }                          _totalToSave = e.EntriesTotal;                          _pb2Set = false;                      }                      break;                  case ZipProgressEventType.Saving_AfterWriteEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1} ({2}/{3})"' e.EventType.ToString()' e.CurrentEntry.FileName' e.EntriesSaved' e.EntriesTotal);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                      }                      if (_txrx != null)                      {                          _txrx.Send("pb 1 step");                          _numSaving++;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer'                          "For entry {0}' BytesTransferred is greater than TotalBytesToTransfer: ({1} > {2})"'                          e.CurrentEntry.FileName' e.BytesTransferred' e.TotalBytesToTransfer);                      maxBytesXferred = e.BytesTransferred;                      if (_txrx!=null)                      {                          spCycles++;                          if ((spCycles % 128) == 0)                          {                              if (!_pb2Set)                              {                                  _txrx.Send("pb 2 max " + e.TotalBytesToTransfer);                                  _pb2Set = true;                              }                              _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                       _numSaving' _totalToSave'                                                       e.CurrentEntry.FileName'                                                       e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                       ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                              _txrx.Send("pb 2 value " +  e.BytesTransferred);                          }                      }                      break;                    case ZipProgressEventType.Saving_Completed:                      if (_txrx != null)                      {                          _txrx.Send("status Save completed");                          _pb2Set = false;                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                      }                      break;                    default:                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: var randomizerSettings = new int[]                  {                      6' 4'        // dircount                      7' 8'        // filecount                      10000' 15000 // filesize                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: var randomizerSettings = new int[]                  {                      6' 4'        // dircount                      7' 8'        // filecount                      10000' 15000 // filesize                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: var randomizerSettings = new int[]                  {                      6' 4'        // dircount                      7' 8'        // filecount                      10000' 15000 // filesize                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: var randomizerSettings = new int[]                  {                      6' 4'        // dircount                      7' 8'        // filecount                      10000' 15000 // filesize                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: var randomizerSettings = new int[]                  {                      6' 4'        // dircount                      7' 8'        // filecount                      10000' 15000 // filesize                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: var randomizerSettings = new int[]                  {                      6' 4'        // dircount                      7' 8'        // filecount                      10000' 15000 // filesize                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_WithEvents,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The following statement contains a magic number: int subdirCount = _rnd.Next(5) + 5;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The following statement contains a magic number: int subdirCount = _rnd.Next(5) + 5;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The following statement contains a magic number: int fileCount = _rnd.Next(13) + 7;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The following statement contains a magic number: int fileCount = _rnd.Next(13) + 7;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(100) + 500);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,CreateZip_AddDirectory_NoFilesInRoot_WI5893,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(100) + 500);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The following statement contains a magic number: int subdirCount = _rnd.Next(4) + 4;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The following statement contains a magic number: int subdirCount = _rnd.Next(4) + 4;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The following statement contains a magic number: int fileCount = _rnd.Next(16) + 8;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The following statement contains a magic number: int fileCount = _rnd.Next(16) + 8;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(100) + 500);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddDirectory_NoFilesInRoot_WI5893a,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(100) + 500);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_SaveCancellation,The following statement contains a magic number: _cancelIndex = entriesAdded - _rnd.Next(entriesAdded / 2);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_AddCancellation_wi13371,The following statement contains a magic number: _cancelIndex = entriesAdded - _rnd.Next(entriesAdded / 2);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ExtractAll_Cancellation,The following statement contains a magic number: _cancelIndex = entriesAdded - _rnd.Next(entriesAdded / 2);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Extract_MultiThreaded_wi6637,The following statement contains a magic number: int nConcurrentZipFiles = 5;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Extract_MultiThreaded_wi6637,The following statement contains a magic number: System.Threading.Thread.Sleep(400);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,OverwriteDecider,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite:                      // randomly choose whether to overwrite or not                      e.CurrentEntry.ExtractExistingFile = (_rnd.Next(2) == 0)                          ? ExtractExistingFileAction.DoNotOverwrite                          : ExtractExistingFileAction.OverwriteSilently;                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Extract_ExistingFile,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Extended_CheckZip2,The following statement contains a magic number: int N = _rnd.Next(11) + 5;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Extended_CheckZip2,The following statement contains a magic number: int N = _rnd.Next(11) + 5;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,_Internal_DuplicateNames_DifferentFolders_wi8982,The following statement contains a magic number: TestUtilities.GenerateFilesFlat(dirToZip' 3);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,_Internal_DuplicateNames_DifferentFolders_wi8982,The following statement contains a magic number: TestUtilities.GenerateFilesFlat(subdir' 2);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,_Internal_DuplicateNames_DifferentFolders_wi8982,The following statement contains a magic number: Assert.AreEqual<int>(5' TestUtilities.CountEntries(zipFileToCreate)'                                       "Trial {0}: The zip file created has the wrong number of entries."' i);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,_Internal_DuplicateNames_DifferentFolders_wi8982,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_ZipErrorAction_Skip,The following statement contains a magic number: System.Threading.Thread.Sleep(320);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_ZipErrorAction_Skip,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_ZipErrorAction_Skip,The following statement contains a magic number: m < 4
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ErrorHandler_RetryAndEventuallySkip,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Error_Saving:                      _retryCount++;                      if (_retryCount < 29)                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Retry;                      else                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Skip;                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ErrorHandler_RetryAndEventuallyThrow,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Error_Saving:                      _retryCount++;                      if (_retryCount < 29)                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Retry;                      else                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Throw;                      break;              }
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_ZipErrorAction_RetryAndEventuallySucceed,The following statement contains a magic number: System.Threading.ThreadPool.QueueUserWorkItem(lockFile' new Object[] { files[n]' 3000 });
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Create_ZipErrorAction_RetryAndEventuallySucceed,The following statement contains a magic number: System.Threading.Thread.Sleep(200);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create,The following statement contains a magic number: zip.ParallelDeflateThreshold = 65536;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 2048 * 1024 + _rnd.Next(200000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 2048 * 1024 + _rnd.Next(200000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 2048 * 1024 + _rnd.Next(200000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 2048 * 1024 + _rnd.Next(200000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 2048 * 1024 + _rnd.Next(200000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: var ts = new TimeSpan[2];
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_CompareSpeeds,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_InvalidThreshold,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_InvalidThreshold,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_InvalidThreshold,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_InvalidThreshold,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_InvalidThreshold,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' _rnd.Next(5) + 5' 128 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ParallelDeflateStream_Create_InvalidThreshold,The following statement contains a magic number: zip.ParallelDeflateThreshold = 17129;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,AddDirectory_ReparsePoint_wi8617_Error1,The following statement contains a magic number: _Internal_AddDirectory_ReparsePoint_wi8617(2);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ContainsEntryTest,The following statement contains a magic number: i < 28
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SortedSave,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      byte[] buffer = System.Text.Encoding.ASCII.GetBytes(rtg.Generate(_rnd.Next(2000) + 200));                      stream.Write(buffer' 0' buffer.Length);                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SortedSave,The following statement contains a magic number: WriteDelegate writer = (name' stream) =>                  {                      byte[] buffer = System.Text.Encoding.ASCII.GetBytes(rtg.Generate(_rnd.Next(2000) + 200));                      stream.Write(buffer' 0' buffer.Length);                  };
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SortedSave,The following statement contains a magic number: int numEntries = _rnd.Next(256) + 48;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SortedSave,The following statement contains a magic number: int numEntries = _rnd.Next(256) + 48;
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SortedSave,The following statement contains a magic number: string filename = String.Format("{0}-{1:000}.txt"'                                                          TestUtilities.GenerateRandomAsciiString(6)' i);
Magic Number,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,SortedSave,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LNSF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _numEntriesSaved = 0;                      _txrx.Send("status saving started...");                      _pb1Set = false;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _numEntriesSaved++;                      if (_numEntriesSaved % 64 == 0)                          _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LNSF_AddProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Adding_Started:                      _txrx.Send("status Adding files to the zip...");                      _pb1Set = false;                      break;                    case ZipProgressEventType.Adding_AfterAddEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numEntriesToAdd));                          _pb1Set = true;                      }                      if (!e.CurrentEntry.FileName.EndsWith("/"))                      {                          _numEntriesAdded++;                          if (_numEntriesAdded % 64 == 0)                              _txrx.Send(String.Format("status Adding file {0}/{1} :: {2}"'                                                       _numEntriesAdded' _numEntriesToAdd' e.CurrentEntry.FileName));                          _txrx.Send("pb 1 step");                      }                      break;                    case ZipProgressEventType.Adding_Completed:                      _txrx.Send("status Added all files");                      _pb1Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: Action<Int16' Int32> progressUpdate = (x' y) => {                  if (x == 0)                  {                      _txrx.Send(String.Format("pb 1 max {0}"' y));                      max1 = y;                  }                  else if (x == 2)                  {                      _txrx.Send(String.Format("pb 1 value {0}"' y));                      _txrx.Send(String.Format("status creating directory {0} of {1}"'                                               y' max1));                  }                  else if (x == 4)                  {                      _txrx.Send(String.Format("status done creating {0} files"' y));                  }              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: Action<Int16' Int32> progressUpdate = (x' y) => {                  if (x == 0)                  {                      _txrx.Send(String.Format("pb 1 max {0}"' y));                      max1 = y;                  }                  else if (x == 2)                  {                      _txrx.Send(String.Format("pb 1 value {0}"' y));                      _txrx.Send(String.Format("status creating directory {0} of {1}"'                                               y' max1));                  }                  else if (x == 4)                  {                      _txrx.Send(String.Format("status done creating {0} files"' y));                  }              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: int[][] settings = {                  // sizes and numbers of files/directories to create                  new int[] {71' 21' 97' 27' 200' 200 }'                  new int[] {51' 171' 47' 197' 100' 100 }'              };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: _txrx.Send(String.Format("pb 0 max {0}"' settings.Length * 2));
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,CreateZip_AddDirectory_LargeNumberOfSmallFiles,The following statement contains a magic number: zip.BufferSize = 4096;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,InjectNoise,The following statement contains a magic number: var segmentSize = flen/128;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,InjectNoise,The following statement contains a magic number: var bytes = new byte[Math.Min(segmentSize'128)];
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,InjectNoise,The following statement contains a magic number: var t = _rnd.Next((int)segmentSize) + 8;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,InjectNoise,The following statement contains a magic number: fs.Write(bytes' 0' bytes.Length/2+_rnd.Next(bytes.Length/2));
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,InjectNoise,The following statement contains a magic number: fs.Write(bytes' 0' bytes.Length/2+_rnd.Next(bytes.Length/2));
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,InjectNoise,The following statement contains a magic number: fs.Position < flen - segmentSize - 8
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: Int64 minFileSize = 0x7FFFFFFFL + _rnd.Next(1000000);
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating a large file' ({0}/{1}mb) ({2:N0}%)"'                                               x / (1024 * 1024)' minFileSize / (1024 * 1024)'                                               ((double)x) / (0.01 * minFileSize)));                  };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating a large file' ({0}/{1}mb) ({2:N0}%)"'                                               x / (1024 * 1024)' minFileSize / (1024 * 1024)'                                               ((double)x) / (0.01 * minFileSize)));                  };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating a large file' ({0}/{1}mb) ({2:N0}%)"'                                               x / (1024 * 1024)' minFileSize / (1024 * 1024)'                                               ((double)x) / (0.01 * minFileSize)));                  };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating a large file' ({0}/{1}mb) ({2:N0}%)"'                                               x / (1024 * 1024)' minFileSize / (1024 * 1024)'                                               ((double)x) / (0.01 * minFileSize)));                  };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating a large file' ({0}/{1}mb) ({2:N0}%)"'                                               x / (1024 * 1024)' minFileSize / (1024 * 1024)'                                               ((double)x) / (0.01 * minFileSize)));                  };
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: zip1.BufferSize = 65536 * 8;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: zip1.BufferSize = 65536 * 8;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: zip1.CodecBufferSize = 65536 * 2;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: zip1.CodecBufferSize = 65536 * 2;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: zip2.BufferSize = 65536 * 8;
Magic Number,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LargeFile_WithProgress,The following statement contains a magic number: zip2.BufferSize = 65536 * 8;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_Encrypt_wi12815,The following statement contains a magic number: var content = new byte[1789];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ReadZip_OpenReader,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ReadZip_OpenReader,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_WithComment_wi10339,The following statement contains a magic number: string entryName = String.Format("entry{0:D4}.txt"' _rnd.Next(10000));
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_TestDriver,The following statement contains a magic number: int[] fileCounts = new int[] { 1' 2' _rnd.Next(14) + 13 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_TestDriver,The following statement contains a magic number: int[] fileCounts = new int[] { 1' 2' _rnd.Next(14) + 13 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_TestDriver,The following statement contains a magic number: int[] fileCounts = new int[] { 1' 2' _rnd.Next(14) + 13 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_AddEntry_WriteDelegate,The following statement contains a magic number: int bufferSize = 2048;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_ZeroBytes_Encrypt_NonSeekable,The following statement contains a magic number: int fileCount = _rnd.Next(4) + 1;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_ZeroBytes_Encrypt_NonSeekable,The following statement contains a magic number: _Internal_ZOS_Create(files' EncryptionAlgorithm.PkzipWeak' false' 99' format);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: int fileCount = _rnd.Next(14616) + 65536;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: int fileCount = _rnd.Next(14616) + 65536;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: System.Threading.Thread.Sleep(400);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: _rnd.Next(7) == 0
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: _txrx.Send(String.Format("status saving ({0}/{1}) {2:N0}%"'                                                       k' fileCount'                                                       ((double)k) / (0.01 * fileCount)));
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: k % 1024 == 0
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: System.Threading.Thread.Sleep(400);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: System.Threading.Thread.Sleep(140);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: System.Threading.Thread.Sleep(200);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_ZOS_z64Over65534Entries,The following statement contains a magic number: System.Threading.Thread.Sleep(800);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,Streams_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if ((_numExtracted % 512) == 0)                          _txrx.Send("pb 1 value " + _numExtracted);                      else if ((_numExtracted % 256) == 0)                          _txrx.Send(String.Format("status extract {0}/{1} {2:N0}%"'                                                   _numExtracted' _numFilesToExtract'                                                   _numExtracted / (0.01 *_numFilesToExtract)));                      break;              }
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,Streams_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if ((_numExtracted % 512) == 0)                          _txrx.Send("pb 1 value " + _numExtracted);                      else if ((_numExtracted % 256) == 0)                          _txrx.Send(String.Format("status extract {0}/{1} {2:N0}%"'                                                   _numExtracted' _numFilesToExtract'                                                   _numExtracted / (0.01 *_numFilesToExtract)));                      break;              }
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,Streams_ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if ((_numExtracted % 512) == 0)                          _txrx.Send("pb 1 value " + _numExtracted);                      else if ((_numExtracted % 256) == 0)                          _txrx.Send(String.Format("status extract {0}/{1} {2:N0}%"'                                                   _numExtracted' _numFilesToExtract'                                                   _numExtracted / (0.01 *_numFilesToExtract)));                      break;              }
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_Directories,The following statement contains a magic number: Assert.AreEqual<int>(4' TestUtilities.CountEntries(zipFileToCreate)'                                               "Trial ({0}'{1})"' i' j);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_Directories,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_Directories_Write,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_EmptyEntries,The following statement contains a magic number: Assert.AreEqual<int>(5' TestUtilities.CountEntries(zipFileToCreate)'                                               "Trial ({0}'{1}): The zip file created has the wrong number of entries."' i' j);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZOS_Create_EmptyEntries,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_ZOS_Create,The following statement contains a magic number: int BufferSize = 2048;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_JitStream_CloserTwice_wi10489,The following statement contains a magic number: int fileCount = 20 + _rnd.Next(20);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_JitStream_CloserTwice_wi10489,The following statement contains a magic number: int fileCount = 20 + _rnd.Next(20);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_JitStream_CloserTwice_wi10489,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_JitStream_CloserTwice_wi10489,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,JitStream_Update_wi13899,The following statement contains a magic number: int fileCount = 12 + _rnd.Next(16);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,JitStream_Update_wi13899,The following statement contains a magic number: int fileCount = 12 + _rnd.Next(16);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,JitStream_Update_wi13899,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,JitStream_Update_wi13899,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,JitStream_Update_wi13899,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: int nCycles = 4096;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: int nFiles = 3;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: int sizeBase = 384 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: int sizeBase = 384 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: int sizeRange = 32 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: int sizeRange = 32 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: string status = String.Format("status Cycle {0}/{1} {2:N0}%"'                                                    x + 1' nCycles'                                                    ((x+1)/(0.01 * nCycles)));
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: x != 0 && x % 16 == 0
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: zip.ParallelDeflateThreshold = 128 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipFile_PDOS_LeakTest_wi10030,The following statement contains a magic number: zip.ParallelDeflateThreshold = 128 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int _sizeBase = 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int _sizeBase = 1024 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int _sizeRange = 256 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int _sizeRange = 256 * 1024;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: TimeSpan[] ts = new TimeSpan[2];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int nFiles = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int nFiles = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: string channel = String.Format("ZOS_Parallel{0:000}"' _rnd.Next(1000));
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int c = (i + 2) % crypto.Length;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int kCycles = (compLevels[j] == Ionic.Zlib.CompressionLevel.None)                          ? 1                          : 2;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: int tCycles = (compLevels[j] == Ionic.Zlib.CompressionLevel.None)                              ? ((k == 0) ? 1 : 0)                              : 2;
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZipOutputStream_Parallel,The following statement contains a magic number: TestContext.WriteLine(new String('-'' 72));
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,Streams_7z_Zip_Mixed,The following statement contains a magic number: _Internal_Streams_7z_Zip(2' "mixed");
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,Streams_Winzip_Zip_Mixed_Password,The following statement contains a magic number: _Internal_Streams_WinZip_Zip(2' password' "mixed");
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_7z_Zip,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: int[] fileCounts = { 1' 2' _rnd.Next(8) + 6' _rnd.Next(18) + 16' _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_WinZip_Zip,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_zero_subdir,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(3);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_nonzero_subdir,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(4);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_mixed,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(2);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_mixed_subdir,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(5);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_zero_subdir_file,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(3' 1);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_nonzero_subdir_file,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(4' 1);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_mixed_file,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(2' 1);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_Crypto_mixed_subdir_file,The following statement contains a magic number: _Internal_Streams_ZipInput_Encryption(5' 1);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: int[] fileCounts = { 1'                                   2'                                   _rnd.Next(8) + 6'                                   _rnd.Next(18) + 16'                                   _rnd.Next(48) + 56 };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: var files = (new Func<string[]>( () => {                                   if (fodderOption == 0)                                   {                                       // zero length files                                       var a = new string[fileCount];                                       for (int i = 0; i < fileCount; i++)                                           a[i] = CreateZeroLengthFile(i' dirToZip);                                       return a;                                   }                                     if (fodderOption == 1)                                       return TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);                                       // mixed = some zero and some not                                   var b = new string[fileCount];                                   for (int i = 0; i < fileCount; i++)                                   {                                       if (_rnd.Next(3) == 0)                                           b[i] = CreateZeroLengthFile(i' dirToZip);                                       else                                       {                                           b[i] = Path.Combine(dirToZip' String.Format("nonzero{0:D4}.txt"' i));                                           TestUtilities.CreateAndFillFileText(b[i]' _rnd.Next(60000) + 100);                                       }                                   }                                   return b;                               }))();
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: var files = (new Func<string[]>( () => {                                   if (fodderOption == 0)                                   {                                       // zero length files                                       var a = new string[fileCount];                                       for (int i = 0; i < fileCount; i++)                                           a[i] = CreateZeroLengthFile(i' dirToZip);                                       return a;                                   }                                     if (fodderOption == 1)                                       return TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);                                       // mixed = some zero and some not                                   var b = new string[fileCount];                                   for (int i = 0; i < fileCount; i++)                                   {                                       if (_rnd.Next(3) == 0)                                           b[i] = CreateZeroLengthFile(i' dirToZip);                                       else                                       {                                           b[i] = Path.Combine(dirToZip' String.Format("nonzero{0:D4}.txt"' i));                                           TestUtilities.CreateAndFillFileText(b[i]' _rnd.Next(60000) + 100);                                       }                                   }                                   return b;                               }))();
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: var files = (new Func<string[]>( () => {                                   if (fodderOption == 0)                                   {                                       // zero length files                                       var a = new string[fileCount];                                       for (int i = 0; i < fileCount; i++)                                           a[i] = CreateZeroLengthFile(i' dirToZip);                                       return a;                                   }                                     if (fodderOption == 1)                                       return TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);                                       // mixed = some zero and some not                                   var b = new string[fileCount];                                   for (int i = 0; i < fileCount; i++)                                   {                                       if (_rnd.Next(3) == 0)                                           b[i] = CreateZeroLengthFile(i' dirToZip);                                       else                                       {                                           b[i] = Path.Combine(dirToZip' String.Format("nonzero{0:D4}.txt"' i));                                           TestUtilities.CreateAndFillFileText(b[i]' _rnd.Next(60000) + 100);                                       }                                   }                                   return b;                               }))();
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: var files = (new Func<string[]>( () => {                                   if (fodderOption == 0)                                   {                                       // zero length files                                       var a = new string[fileCount];                                       for (int i = 0; i < fileCount; i++)                                           a[i] = CreateZeroLengthFile(i' dirToZip);                                       return a;                                   }                                     if (fodderOption == 1)                                       return TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);                                       // mixed = some zero and some not                                   var b = new string[fileCount];                                   for (int i = 0; i < fileCount; i++)                                   {                                       if (_rnd.Next(3) == 0)                                           b[i] = CreateZeroLengthFile(i' dirToZip);                                       else                                       {                                           b[i] = Path.Combine(dirToZip' String.Format("nonzero{0:D4}.txt"' i));                                           TestUtilities.CreateAndFillFileText(b[i]' _rnd.Next(60000) + 100);                                       }                                   }                                   return b;                               }))();
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: var files = (new Func<string[]>( () => {                                   if (fodderOption == 0)                                   {                                       // zero length files                                       var a = new string[fileCount];                                       for (int i = 0; i < fileCount; i++)                                           a[i] = CreateZeroLengthFile(i' dirToZip);                                       return a;                                   }                                     if (fodderOption == 1)                                       return TestUtilities.GenerateFilesFlat(dirToZip' fileCount' 100' 72000);                                       // mixed = some zero and some not                                   var b = new string[fileCount];                                   for (int i = 0; i < fileCount; i++)                                   {                                       if (_rnd.Next(3) == 0)                                           b[i] = CreateZeroLengthFile(i' dirToZip);                                       else                                       {                                           b[i] = Path.Combine(dirToZip' String.Format("nonzero{0:D4}.txt"' i));                                           TestUtilities.CreateAndFillFileText(b[i]' _rnd.Next(60000) + 100);                                       }                                   }                                   return b;                               }))();
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: fodderOption > 2
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,_Internal_Streams_ZipInput_Encryption,The following statement contains a magic number: string[] filesUnzipped = (fodderOption > 2)                          ? Directory.GetFiles(Path.Combine(extractDir' "subdir"))                          : Directory.GetFiles(extractDir);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ASPNET_GenerateZip,The following statement contains a magic number: Assert.AreEqual<int>(nEntries'                                   2' "wrong number of entries ({0})"' nEntries);
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,CopyStream,The following statement contains a magic number: var buf = new byte[2048];
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_ZOS_VaryCompression,The following statement contains a magic number: Func<int' int' bool> chooseCompression = (ix' cycle) => {                  var name = Path.GetFileName(filesToAdd[ix]);                  switch (cycle)                  {                      case 0:                          return !(name.EndsWith(".zip") ||                                   name.EndsWith(".docx") ||                                   name.EndsWith(".xslx"));                      case 1:                          return ((ix%2)==0);                        default:                          return (ix == filesToAdd.Length - 1);                  }              };
Magic Number,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,ZIS_ZOS_VaryCompression,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_BasicAddAndExtract,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_BasicAddAndExtract,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_BasicAddAndExtract,The following statement contains a magic number: int sz = _rnd.Next(22000) + 3000;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_BasicAddAndExtract,The following statement contains a magic number: int sz = _rnd.Next(22000) + 3000;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_UnsetEncryptionAfterSetPassword_wi13909_ZOS,The following statement contains a magic number: int numTotalEntries = _rnd.Next(46)+653;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_UnsetEncryptionAfterSetPassword_wi13909_ZOS,The following statement contains a magic number: int numTotalEntries = _rnd.Next(46)+653;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_UnsetEncryptionAfterSetPassword_wi13909_ZOS,The following statement contains a magic number: _rnd.Next(7)==0
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_UnsetEncryptionAfterSetPassword_wi13909_ZF,The following statement contains a magic number: int numTotalEntries = _rnd.Next(46)+653;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_UnsetEncryptionAfterSetPassword_wi13909_ZF,The following statement contains a magic number: int numTotalEntries = _rnd.Next(46)+653;
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_UnsetEncryptionAfterSetPassword_wi13909_ZF,The following statement contains a magic number: _rnd.Next(7)==0
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,_GetNameForZipContentFile,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_MultipleEntriesDifferentPasswords,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_Extract_WrongPassword,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_AddEntryWithPasswordToExistingZip,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_AddEntryWithPasswordToExistingZip,The following statement contains a magic number: Assert.AreEqual<int>(TestUtilities.CountEntries(zipFileToCreate)' 2'                      "wrong number of entries.");
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,Password_AddEntryWithPasswordToExistingZip,The following statement contains a magic number: Assert.AreEqual<int>(TestUtilities.CountEntries(zipFileToCreate)' 3'                      "wrong number of entries.");
Magic Number,Ionic.Zip.Tests.Password,PasswordTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\PasswordTests.cs,SilentDeletion_wi10639,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_CharCase_wi13481,The following statement contains a magic number: Assert.IsFalse(nEntries < 2' "not enough entries");
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFileInDirectory,The following statement contains a magic number: int n = _rnd.Next(filesToSelectFrom.Length / 2) + 2;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFileInDirectory,The following statement contains a magic number: int n = _rnd.Next(filesToSelectFrom.Length / 2) + 2;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFileInDirectory,The following statement contains a magic number: k < 4
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFileInDirectory,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddEntry_ByteArray,The following statement contains a magic number: int entriesToCreate = _rnd.Next(42) + 12;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddEntry_ByteArray,The following statement contains a magic number: int entriesToCreate = _rnd.Next(42) + 12;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddEntry_ByteArray,The following statement contains a magic number: var b = new byte[_rnd.Next(1000) + 1000];
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddEntry_ByteArray,The following statement contains a magic number: var b = new byte[_rnd.Next(1000) + 1000];
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_AddItem,The following statement contains a magic number: _rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_Basic_ParameterizedSave,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_Basic_ParameterizedSave,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_Basic_ParameterizedSave,The following statement contains a magic number: _rnd.Next(2) == 0
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_OnlyZeroLengthFiles,The following statement contains a magic number: _Internal_ZeroLengthFiles(_rnd.Next(33) + 3' "CreateZip_AddFile_OnlyZeroLengthFiles"' null);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_OnlyZeroLengthFiles,The following statement contains a magic number: _Internal_ZeroLengthFiles(_rnd.Next(33) + 3' "CreateZip_AddFile_OnlyZeroLengthFiles"' null);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_OnlyZeroLengthFiles_Password,The following statement contains a magic number: _Internal_ZeroLengthFiles(_rnd.Next(33) + 3' "CreateZip_AddFile_OnlyZeroLengthFiles"' Path.GetRandomFileName());
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_OnlyZeroLengthFiles_Password,The following statement contains a magic number: _Internal_ZeroLengthFiles(_rnd.Next(33) + 3' "CreateZip_AddFile_OnlyZeroLengthFiles"' Path.GetRandomFileName());
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: int subdirCount = _rnd.Next(17) + 14;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: int subdirCount = _rnd.Next(17) + 14;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: int filecount = _rnd.Next(11) + 17;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: int filecount = _rnd.Next(11) + 17;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFile(fqFilename' _rnd.Next(1000) + 100);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFile(fqFilename' _rnd.Next(1000) + 100);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFile(Path.Combine(subdir' filename)'                                                          _rnd.Next(1000) + 100);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFile(Path.Combine(subdir' filename)'                                                          _rnd.Next(1000) + 100);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_UpdateDirectory,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OnlyZeroLengthFiles,The following statement contains a magic number: int subdirCount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OnlyZeroLengthFiles,The following statement contains a magic number: int subdirCount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OnlyZeroLengthFiles,The following statement contains a magic number: int n = _rnd.Next(6) + 2;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OnlyZeroLengthFiles,The following statement contains a magic number: int n = _rnd.Next(6) + 2;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OnlyEmptyDirectories,The following statement contains a magic number: int subdirCount = _rnd.Next(28) + 18;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OnlyEmptyDirectories,The following statement contains a magic number: int subdirCount = _rnd.Next(28) + 18;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: int subdirCount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: int subdirCount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: int fileCount = _rnd.Next(12) + 4;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: int fileCount = _rnd.Next(12) + 4;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' 1020);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: Assert.IsTrue(status.Length > 24 * entries' "status messages? ({0}!>{1})"'                            status.Length' 24 * entries);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_CheckStatusTextWriter,The following statement contains a magic number: Assert.IsTrue(status.Length > 24 * entries' "status messages? ({0}!>{1})"'                            status.Length' 24 * entries);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory,The following statement contains a magic number: int fileCount = _rnd.Next(5) + 4;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory,The following statement contains a magic number: int fileCount = _rnd.Next(5) + 4;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(2000) + 500);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(2000) + 500);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_Nested,The following statement contains a magic number: int subdirCount = _rnd.Next(23) + 7;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_Nested,The following statement contains a magic number: int subdirCount = _rnd.Next(23) + 7;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_Nested,The following statement contains a magic number: int fileCount = _rnd.Next(8);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_Nested,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(10750) + 50);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_Nested,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(10750) + 50);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: int filesToAdd = _rnd.Next(k * 10 + 3) + k * 10 + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: int filesToAdd = _rnd.Next(k * 10 + 3) + k * 10 + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: int filesToAdd = _rnd.Next(k * 10 + 3) + k * 10 + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: int filesToAdd = _rnd.Next(k * 10 + 3) + k * 10 + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: int sz = _rnd.Next(10000) + 5000;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: int sz = _rnd.Next(10000) + 5000;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_SaveToFileStream,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: int filesToAdd = _rnd.Next(33) + 11;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: int filesToAdd = _rnd.Next(33) + 11;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: int sz = _rnd.Next(10000) + 5000;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: int sz = _rnd.Next(10000) + 5000;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: break;                              case 1: if ((count % 2) == 0) e.IsText = true; break;                              case 2: if ((count % 2) != 0) e.IsText = true; break;                              case 3: e.IsText = true; break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: break;                              case 1: if ((count % 2) == 0) e.IsText = true; break;                              case 2: if ((count % 2) != 0) e.IsText = true; break;                              case 3: e.IsText = true; break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: break;                              case 1: if ((count % 2) == 0) e.IsText = true; break;                              case 2: if ((count % 2) != 0) e.IsText = true; break;                              case 3: e.IsText = true; break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: break;                              case 1: if ((count % 2) == 0) e.IsText = true; break;                              case 2: if ((count % 2) != 0) e.IsText = true; break;                              case 3: e.IsText = true; break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: Assert.IsFalse(e.IsText); break;                              case 1: Assert.AreEqual<bool>((count % 2) == 0' e.IsText); break;                              case 2: Assert.AreEqual<bool>((count % 2) != 0' e.IsText); break;                              case 3: Assert.IsTrue(e.IsText); break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: Assert.IsFalse(e.IsText); break;                              case 1: Assert.AreEqual<bool>((count % 2) == 0' e.IsText); break;                              case 2: Assert.AreEqual<bool>((count % 2) != 0' e.IsText); break;                              case 3: Assert.IsTrue(e.IsText); break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: Assert.IsFalse(e.IsText); break;                              case 1: Assert.AreEqual<bool>((count % 2) == 0' e.IsText); break;                              case 2: Assert.AreEqual<bool>((count % 2) != 0' e.IsText); break;                              case 3: Assert.IsTrue(e.IsText); break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: switch (k)                          {                              case 0: Assert.IsFalse(e.IsText); break;                              case 1: Assert.AreEqual<bool>((count % 2) == 0' e.IsText); break;                              case 2: Assert.AreEqual<bool>((count % 2) != 0' e.IsText); break;                              case 3: Assert.IsTrue(e.IsText); break;                          }
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following statement contains a magic number: k < 3
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyThatStreamRemainsOpenAfterSave,The following statement contains a magic number: int filesAdded = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyThatStreamRemainsOpenAfterSave,The following statement contains a magic number: int filesAdded = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyThatStreamRemainsOpenAfterSave,The following statement contains a magic number: int sz = _rnd.Next(10000) + 5000;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyThatStreamRemainsOpenAfterSave,The following statement contains a magic number: int sz = _rnd.Next(10000) + 5000;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_VerifyCrcAndContents,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_VerifyCrcAndContents,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_VerifyCrcAndContents,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddFile_VerifyCrcAndContents,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Extract_IntoMemoryStream,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Extract_IntoMemoryStream,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Extract_IntoMemoryStream,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Extract_IntoMemoryStream,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,ExtraField_TestNull,The following statement contains a magic number: Assert.AreEqual<int>(14' entries' "Error opening zip file with extra field");
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer2_wi11056,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(23000) + 4000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(23000) + 4000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer,The following statement contains a magic number: n < 2
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Retrieve_ViaIndexer,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The following statement contains a magic number: TestUtilities.CreateAndFillFile(filesToZip[i]' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileComments,The following statement contains a magic number: TestUtilities.CreateAndFillFile(filesToZip[i]' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 2;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 2;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: DateTime[] timestamp =                  {                      new System.DateTime(2007' 9' 1' 15' 0' 0)'                      new System.DateTime(2007' 4' 2' 14' 0' 0)'                      new System.DateTime(2007' 5' 18' 19' 0' 0)'                  };
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_SetFileLastModified,The following statement contains a magic number: n < 3
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateAndExtract_VerifyAttributes,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateAndExtract_VerifyAttributes,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(10000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyFileLastModified,The following statement contains a magic number: int maxFiles = _rnd.Next(candidateFileNames.Length / 2) + candidateFileNames.Length / 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyFileLastModified,The following statement contains a magic number: int maxFiles = _rnd.Next(candidateFileNames.Length / 2) + candidateFileNames.Length / 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyFileLastModified,The following statement contains a magic number: maxFiles = Math.Min(maxFiles' 145);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_VerifyFileLastModified,The following statement contains a magic number: Path.GetFileName(filename)[0] == '~'                          || actualFilenames.Contains(filename)                          || fi.Length > 10000000                          || Path.GetFileName(filename) == "dd_BITS.log"
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_NoFilesInRoot,The following statement contains a magic number: int subdirCount = _rnd.Next(4) + 4;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_NoFilesInRoot,The following statement contains a magic number: int subdirCount = _rnd.Next(4) + 4;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_NoFilesInRoot,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_NoFilesInRoot,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_NoFilesInRoot,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(1000) + 1500);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_NoFilesInRoot,The following statement contains a magic number: TestUtilities.CreateAndFillFile(file' _rnd.Next(1000) + 1500);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OneCharOverrideName,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OneCharOverrideName,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OneCharOverrideName,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(12000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_AddDirectory_OneCharOverrideName,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(12000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_CompressionLevelZero_AllEntries,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_CompressionLevelZero_AllEntries,The following statement contains a magic number: int fileCount = _rnd.Next(10) + 10;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_CompressionLevelZero_AllEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_CompressionLevelZero_AllEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_ForceNoCompressionSomeEntries,The following statement contains a magic number: int fileCount = _rnd.Next(13) + 13;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_ForceNoCompressionSomeEntries,The following statement contains a magic number: int fileCount = _rnd.Next(13) + 13;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_ForceNoCompressionSomeEntries,The following statement contains a magic number: filename = Path.Combine(subdir' String.Format("{0}-file{1:D3}.txt"' (_rnd.Next(2) == 0) ? "C":"U"' j));
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_ForceNoCompressionSomeEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,CreateZip_ForceNoCompressionSomeEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,AddFile_CompressionMethod_None_wi9208,The following statement contains a magic number: string filename = Path.Combine(subdir' String.Format("FileToBeAdded-{0:D2}.txt"' _rnd.Next(1000)));
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,AddFile_CompressionMethod_None_wi9208,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,AddFile_CompressionMethod_None_wi9208,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: string subdir = Path.Combine(TopLevelDir'                                           TestUtilities.GenerateRandomAsciiString(9));
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: int fileCount = _rnd.Next(27) + 23;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: int fileCount = _rnd.Next(27) + 23;
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: _rnd.Next(7)!=0
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: zip.Password = TestUtilities.GenerateRandomPassword(11);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: _rnd.Next(3)==0
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,GetInfo,The following statement contains a magic number: Assert.IsTrue(info.Length > 300'                                "Suspect info string (length({0}))"'                                info.Length);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Create_WithChangeDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Create_WithChangeDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,QuickCreateZipAndChecksums,The following statement contains a magic number: Assert.IsTrue(count > 5'                            "Unexpected number of entries ({0}) in the zip file."' count);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,_Internal_Resave,The following statement contains a magic number: string[] passwords = new string[2];
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_0,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_1,The following statement contains a magic number: i!=3
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_1,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_2,The following statement contains a magic number: _Internal_Resave(Variance.Method' 2' i);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_2,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_3,The following statement contains a magic number: _Internal_Resave(Variance.Method' 3' i);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionMethod_3,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_0,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_1,The following statement contains a magic number: i!=3
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_1,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_2,The following statement contains a magic number: _Internal_Resave(Variance.Level' 2' i);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_2,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_3,The following statement contains a magic number: _Internal_Resave(Variance.Level' 3' i);
Magic Number,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Resave_CompressionLevel_3,The following statement contains a magic number: i<8
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(18) + 14;
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(18) + 14;
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,_CreateUnicodeFiles,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(18) + 14;
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,_CreateUnicodeFiles,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(18) + 14;
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,_CreateUnicodeFiles,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(f' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,_CreateUnicodeFiles,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(f' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries_Mixed,The following statement contains a magic number: switch (j)                      {  #pragma warning disable 618                          case 0:                              zip1.UseUnicodeAsNecessary = (j == 0);                              break;  #pragma warning restore 618                          case 1:                              // do nothing                              break;                          case 2:                              zip1.AlternateEncoding = System.Text.Encoding.UTF8;                              zip1.AlternateEncodingUsage = ZipOption.Always;                              break;                          case 3:                              zip1.AlternateEncoding = System.Text.Encoding.UTF8;                              zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                              break;                      }
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries_Mixed,The following statement contains a magic number: switch (j)                      {  #pragma warning disable 618                          case 0:                              zip1.UseUnicodeAsNecessary = (j == 0);                              break;  #pragma warning restore 618                          case 1:                              // do nothing                              break;                          case 2:                              zip1.AlternateEncoding = System.Text.Encoding.UTF8;                              zip1.AlternateEncodingUsage = ZipOption.Always;                              break;                          case 3:                              zip1.AlternateEncoding = System.Text.Encoding.UTF8;                              zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                              break;                      }
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries_Mixed,The following statement contains a magic number: j < 4
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Unicode_Create_ZOS_wi12634,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Unicode_Create_ZOS_wi12634,The following statement contains a magic number: j < 2
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,UnicodeUpdate_wi12744,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,UnicodeUpdate_wi12744,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,UnicodeUpdate_wi12744,The following statement contains a magic number: i < 2
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,UnicodeUpdate_wi12744,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following statement contains a magic number: int numFiles = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following statement contains a magic number: int numFiles = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filesToZip[i]' _rnd.Next(5000) + 2000);
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following statement contains a magic number: switch (j)                          {                              case 0:  #pragma warning disable 618                                  zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(trials[k].codepage);  #pragma warning restore 618                                  break;                              case 1:                                  zip1.AlternateEncoding = System.Text.Encoding.GetEncoding(trials[k].codepage);                                  zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                                  break;                              case 2:                                  zip1.AlternateEncoding = System.Text.Encoding.GetEncoding(trials[k].codepage);                                  zip1.AlternateEncodingUsage = ZipOption.Always;                                  break;                          }
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following statement contains a magic number: j < 3
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,CodePage_UpdateZip_AlternateEncoding_wi10180,The following statement contains a magic number: switch (j)                      {                          case 0:  #pragma warning disable 618                              zip.ProvisionalAlternateEncoding = JIS;  #pragma warning restore 618                              break;                          case 1:                              zip.AlternateEncoding = JIS;                              zip.AlternateEncodingUsage = ZipOption.AsNecessary;                              break;                          case 2:                              zip.AlternateEncoding = JIS;                              zip.AlternateEncodingUsage = ZipOption.Always;                              break;                      }
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,CodePage_UpdateZip_AlternateEncoding_wi10180,The following statement contains a magic number: j < 3
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Unicode_AddDirectoryByName_wi8984,The following statement contains a magic number: switch (j)                          {                              case 0:  #pragma warning disable 618                                  zip1.UseUnicodeAsNecessary = true;  #pragma warning restore 618                                  break;                              case 1:                                  zip1.AlternateEncoding = UTF8;                                  zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                                  break;                              case 2:                                  zip1.AlternateEncoding = UTF8;                                  zip1.AlternateEncodingUsage = ZipOption.Always;                                  break;                          }
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Unicode_AddDirectoryByName_wi8984,The following statement contains a magic number: n <= 10
Magic Number,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Unicode_AddDirectoryByName_wi8984,The following statement contains a magic number: j < 3
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: int subdirCount = _rnd.Next(4) + 4;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: int subdirCount = _rnd.Next(4) + 4;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(12000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(12000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(12000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddNewDirectory,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(12000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: byte[] buffer = new byte[_rnd.Next(10000) + 10000];
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: byte[] buffer = new byte[_rnd.Next(10000) + 10000];
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: zip[0].LastModified = DateTime.Now - new TimeSpan(7 * 31' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_ChangeMetadata_AES,The following statement contains a magic number: zip[0].LastModified = DateTime.Now - new TimeSpan(7 * 31' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,VerifyZip,The following statement contains a magic number: zip.BufferSize = 65536;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: System.DateTime origDate = new System.DateTime(2007' 1' 15' 12' 1' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: System.DateTime origDate = new System.DateTime(2007' 1' 15' 12' 1' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: System.DateTime origDate = new System.DateTime(2007' 1' 15' 12' 1' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: e.LastModified = origDate + new TimeSpan(24 * 31 * ix' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: e.LastModified = origDate + new TimeSpan(24 * 31 * ix' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: var threshold = new TimeSpan(24 * 31 * (2 + _rnd.Next(ix - 12))' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: var threshold = new TimeSpan(24 * 31 * (2 + _rnd.Next(ix - 12))' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: var threshold = new TimeSpan(24 * 31 * (2 + _rnd.Next(ix - 12))' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByLastModTime,The following statement contains a magic number: var threshold = new TimeSpan(24 * 31 * (2 + _rnd.Next(ix - 12))' 0' 0);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename_WithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename_WithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename_WithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename_WithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename_WithPassword,The following statement contains a magic number: int numToRemove = _rnd.Next(numFilesToCreate - 4) + 1;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip'                                                          _rnd.Next(13) + 24'                                                          42 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip'                                                          _rnd.Next(13) + 24'                                                          42 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip'                                                          _rnd.Next(13) + 24'                                                          42 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip'                                                          _rnd.Next(13) + 24'                                                          42 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: var files = TestUtilities.GenerateFilesFlat(dirToZip'                                                          _rnd.Next(13) + 24'                                                          42 * 1024 + _rnd.Next(20000));
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: toRename.Count < 2
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RenameEntry,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(5) + 3;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(5) + 3;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The following statement contains a magic number: int filesize = _rnd.Next(34000) + 800;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The following statement contains a magic number: int filesize = _rnd.Next(34000) + 800;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateEntryComment,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 24;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,The following statement contains a magic number: int numToRemove = _rnd.Next(numFilesToCreate - 4) + 1;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ByFilename,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ViaIndexer_WithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ViaIndexer_WithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ViaIndexer_WithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ViaIndexer_WithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveEntry_ViaIndexer_WithPassword,The following statement contains a magic number: int numToRemove = _rnd.Next(numFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveAllEntries,The following statement contains a magic number: string password = "Wheeee!!" + TestUtilities.GenerateRandomLowerString(7);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveAllEntries,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveAllEntries,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(13) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveAllEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_RemoveAllEntries,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: int numToUpdate = _rnd.Next(numFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: int newFileCount = numFilesToCreate + _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: int newFileCount = numFilesToCreate + _rnd.Next(3) + 3;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(1000) + 2000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateItem,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(1000) + 2000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(10) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: int numToUpdate = _rnd.Next(numFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(11) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The following statement contains a magic number: int numFilesToCreate = _rnd.Next(11) + 8;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: int NumToUpdate = _rnd.Next(NumFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: int NumToUpdate = _rnd.Next(NumFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_2_NoPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: int NumToUpdate = _rnd.Next(NumFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_OldEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 9;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(23) + 9;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: int NumToUpdate = _rnd.Next(NumFilesToCreate - 5);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_NewEntriesWithPassword,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(13) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: int NumFilesToCreate = _rnd.Next(13) + 14;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: int NumToUpdate = _rnd.Next(NumFilesToCreate - 4);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_UpdateFile_DifferentPasswords,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(Path.Combine(subdir' filename)' repeatedLine' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_ExistingFile_Error,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 4;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_ExistingFile_Error,The following statement contains a magic number: int fileCount = _rnd.Next(3) + 4;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_ExistingFile_Error,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_ExistingFile_Error,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' _rnd.Next(34000) + 5000);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_ExistingFile_Error,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(21567) + 23872);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,UpdateZip_AddFile_ExistingFile_Error,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(filename' repeatedLine' _rnd.Next(21567) + 23872);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_MultipleSaves_wi10694,The following statement contains a magic number: Assert.AreEqual<int>(TestUtilities.CountEntries(zipFileToCreate)' 2 * filesToZip.Length'                                   "Incorrect number of entries in the zip file.");
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_MultipleSaves_wi10694,The following statement contains a magic number: Assert.AreEqual<int>(TestUtilities.CountEntries(zipFileToCreate)' 2 * filesToZip.Length'                                   "Incorrect number of entries in the zip file.");
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_MultipleSavesWithRename_wi10544,The following statement contains a magic number: int N = _rnd.Next(34) + 59;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_MultipleSavesWithRename_wi10544,The following statement contains a magic number: int N = _rnd.Next(34) + 59;
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_MultipleSavesWithRename_wi10544,The following statement contains a magic number: zip.AddEntry(entryName' (name' stream) =>                              {                                  var src = zip1[name].OpenReader();                                  int n;                                  byte[] b = new byte[2048];                                  while ((n = src.Read(b' 0' b.Length)) > 0)                                      stream.Write(b' 0' n);                                    string update = String.Format("Updating zip file {0} at {1}\n"' i' DateTime.Now.ToString("G"));                                  byte[] a = System.Text.Encoding.ASCII.GetBytes(update.ToCharArray());                                  stream.Write(a' 0' a.Length);                              });
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_MultipleSavesWithRename_wi10544,The following statement contains a magic number: System.Threading.Thread.Sleep(1400);
Magic Number,Ionic.Zip.Tests.Update,UpdateTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UpdateTests.cs,Update_FromRoot_wi11988,The following statement contains a magic number: Assert.IsTrue(files.Length > 3);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip,The following statement contains a magic number: WZA_CreateZip_Impl("WZA_CreateZip"' 14400' 5000);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip,The following statement contains a magic number: WZA_CreateZip_Impl("WZA_CreateZip"' 14400' 5000);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_VerySmallFiles,The following statement contains a magic number: WZA_CreateZip_Impl("WZA_CreateZip_VerySmallFiles"' 14' 5);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_VerySmallFiles,The following statement contains a magic number: WZA_CreateZip_Impl("WZA_CreateZip_VerySmallFiles"' 14' 5);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Impl,The following statement contains a magic number: int entries = _rnd.Next(11) + 8;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Impl,The following statement contains a magic number: int entries = _rnd.Next(11) + 8;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Impl,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Impl,The following statement contains a magic number: System.Threading.Thread.Sleep(1200);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Impl,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoPassword,The following statement contains a magic number: int entries = _rnd.Next(11) + 8;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoPassword,The following statement contains a magic number: int entries = _rnd.Next(11) + 8;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoPassword,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoPassword,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoPassword,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_DirectoriesOnly,The following statement contains a magic number: int subdirCount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_DirectoriesOnly,The following statement contains a magic number: int subdirCount = _rnd.Next(8) + 8;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_ZeroLengthFiles_256,The following statement contains a magic number: string password = TestUtilities.GenerateRandomPassword(12);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_ZeroLengthFiles_128,The following statement contains a magic number: string password = TestUtilities.GenerateRandomPassword(12);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,_Internal_CreateZip_ZeroLengthFiles,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,_Internal_CreateZip_ZeroLengthFiles,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_ReadZip_Fail_WrongPassword,The following statement contains a magic number: GenerateFiles_CreateZip("-ycAES256"' password' 2);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_ReadZip_Fail_WrongMethod,The following statement contains a magic number: GenerateFiles_CreateZip("-ycAES256"' password' 3);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,GenerateFiles_CreateZip,The following statement contains a magic number: string pwForReading = (pwFlavor == 0)                  ? password                  : (pwFlavor == 1)                  ? null                  : (pwFlavor == 2)                  ? "-wrongpassword-"                  : TestUtilities.GenerateRandomPassword();
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_NoCompression,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Spanned,The following statement contains a magic number: int filesize = 1024 * 1024;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Spanned,The following statement contains a magic number: int filesize = 1024 * 1024;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_Spanned,The following statement contains a magic number: zip1.MaxOutputSegmentSize = 262144;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_CreateZip_EmptyPassword,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,The following statement contains a magic number: string[] TextFiles = new string[5];
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(TextFiles[i]' _rnd.Next(4000) + 5000);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(TextFiles[i]' _rnd.Next(4000) + 5000);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,The following statement contains a magic number: TestContext.WriteLine(new String('='' 66));
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,The following statement contains a magic number: TestContext.WriteLine(new String('-'' 55));
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_RemoveEntryAndSave,The following statement contains a magic number: k < 2
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_SmallBuffers_wi7967,The following statement contains a magic number: int[] sizes = { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 13' 21' 35' 93 };
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_InMemory_wi8493,The following statement contains a magic number: m < 2
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_InMemory_wi8493a,The following statement contains a magic number: string[] TextFiles = new string[25 + _rnd.Next(8)];
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_InMemory_wi8493a,The following statement contains a magic number: string[] TextFiles = new string[25 + _rnd.Next(8)];
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_InMemory_wi8493a,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(TextFiles[i]' _rnd.Next(14000) + 13000);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_InMemory_wi8493a,The following statement contains a magic number: TestUtilities.CreateAndFillFileText(TextFiles[i]' _rnd.Next(14000) + 13000);
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_MacCheck_ZeroLengthEntry_wi13892,The following statement contains a magic number: i < 3
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The following statement contains a magic number: int entries = _rnd.Next(21) + 5;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The following statement contains a magic number: int filesize = _rnd.Next(144000) + 5000;
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.WinZipAes,WinZipAesTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\WinZipAesTests.cs,WZA_Update_SwitchCompression,The following statement contains a magic number: j < 5
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: switch (fc)                          {                              case 0:                              case 1:                                  // check for fodder files                                  testDir = dir;                                  string fdir = Path.Combine(dir'"dir");                                  if (Directory.Exists(fdir))                                  {                                      var fodderFiles = Directory.GetFiles(fdir' "*.txt");                                      if (fodderFiles == null || fodderFiles.Length <= 6)                                          try { Directory.Delete(dir' true); } catch { }                                  }                                  else try { Directory.Delete(dir' true); } catch { }                                  break;                              case 2:                                  // found both large zips' so use them.                                  zipsToCreate[0] = Path.Combine(dir' zipsToCreate[0]);                                  zipsToCreate[1] = Path.Combine(dir' zipsToCreate[1]);                                  TestContext.WriteLine("Using the existing zips in: {0}"' dir);                                  return zipsToCreate;                          }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: switch (fc)                          {                              case 0:                              case 1:                                  // check for fodder files                                  testDir = dir;                                  string fdir = Path.Combine(dir'"dir");                                  if (Directory.Exists(fdir))                                  {                                      var fodderFiles = Directory.GetFiles(fdir' "*.txt");                                      if (fodderFiles == null || fodderFiles.Length <= 6)                                          try { Directory.Delete(dir' true); } catch { }                                  }                                  else try { Directory.Delete(dir' true); } catch { }                                  break;                              case 2:                                  // found both large zips' so use them.                                  zipsToCreate[0] = Path.Combine(dir' zipsToCreate[0]);                                  zipsToCreate[1] = Path.Combine(dir' zipsToCreate[1]);                                  TestContext.WriteLine("Using the existing zips in: {0}"' dir);                                  return zipsToCreate;                          }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: pass < 2
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: int numFilesToAdd = _rnd.Next(4) + 7;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: int numFilesToAdd = _rnd.Next(4) + 7;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: var buf = new byte[2048];
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: int fnameLength = _rnd.Next(25) + 6;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: int fnameLength = _rnd.Next(25) + 6;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: cycles % 640 == 0
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: zip.BufferSize = 1024 * 756;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: zip.BufferSize = 1024 * 756;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: zip.CodecBufferSize = 1024 * 128;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: zip.CodecBufferSize = 1024 * 128;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLinksToLargeFiles,The following statement contains a magic number: candidates.Count() < 3
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLinksToLargeFiles,The following statement contains a magic number: const Int64 threshold = (long)(11L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLinksToLargeFiles,The following statement contains a magic number: const Int64 threshold = (long)(11L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLinksToLargeFiles,The following statement contains a magic number: const Int64 threshold = (long)(11L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLinksToLargeFiles,The following statement contains a magic number: const Int64 threshold = (long)(11L * 1024 * 1024 * 1024);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Create,The following statement contains a magic number: int entries = _rnd.Next(5) + 13;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Create,The following statement contains a magic number: int entries = _rnd.Next(5) + 13;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Create,The following statement contains a magic number: int filesize = _rnd.Next(44000) + 5000;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Create,The following statement contains a magic number: int filesize = _rnd.Next(44000) + 5000;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Create,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: int entries = _rnd.Next(8) + 6;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: int entries = _rnd.Next(8) + 6;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filename' _rnd.Next(44000) + 5000);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: TestUtilities.CreateAndFillFileBinary(filename' _rnd.Next(44000) + 5000);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: _rnd.Next(2) == 1
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: zip2[4].FileName += ".renamed";
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: string entriesToRemove = (_rnd.Next(2) == 0) ? "*.txt" : "*.bin";
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Convert,The following statement contains a magic number: u < 2
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following statement contains a magic number: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64VerifyZip,The following statement contains a magic number: zip.BufferSize = 65536*4;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64VerifyZip,The following statement contains a magic number: zip.BufferSize = 65536*4;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: int numUpdates = 2;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: int baseSize = _rnd.Next(0x1000ff) + 80000;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: _txrx.Send( String.Format("pb 0 max {0}"' numUpdates + 2));
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: long size = baseSize + _rnd.Next(28000);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: zip.BufferSize = 65536*8;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: zip.BufferSize = 65536*8;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: _txrx.Send("pb 0 value " + (j+2));
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64UpdateAddFiles,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: int baseSize = _rnd.Next(0x1000ff) + 80000;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: wzzipEntryCount > numEntries * 3
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: _txrx.Send(String.Format("pb 1 max {0}"' numEntries*2));
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: nCycles > numEntries * 4
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Unzip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLargeFiles,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 2 value {0}"' x));                      _txrx.Send(String.Format("status Creating {0}' [{1}/{2}] ({3:N0}%)"'                                               fileName' x' fileSize' ((double)x)/ (0.01 * fileSize) ));                  };
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLargeFiles,The following statement contains a magic number: int n = _rnd.Next(2);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLargeFiles,The following statement contains a magic number: int x = _rnd.Next(6);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,CreateLargeFiles,The following statement contains a magic number: fileSize = (firstFileDone) ? (baseSize + _rnd.Next(0x880000)) : (2*baseSize);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: int baseSize = _rnd.Next(80000) + 0x1000ff;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: CreateLargeFiles(_rnd.Next(4) + 4' baseSize' contentDir);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: CreateLargeFiles(_rnd.Next(4) + 4' baseSize' contentDir);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(420);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: int filesize = _rnd.Next(50000) + 440000;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: int filesize = _rnd.Next(50000) + 440000;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Winzip_Zip_Huge,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: desiredSize+= System.Int32.MaxValue/4;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating {0}' [{1}/{2}mb] ({3:N0}%)"'                                               nameOfFodderFile'                                               x/(1024*1024)'                                               desiredSize/(1024*1024)'                                               ((double)x)/ (0.01 * desiredSize)));                  };
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating {0}' [{1}/{2}mb] ({3:N0}%)"'                                               nameOfFodderFile'                                               x/(1024*1024)'                                               desiredSize/(1024*1024)'                                               ((double)x)/ (0.01 * desiredSize)));                  };
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating {0}' [{1}/{2}mb] ({3:N0}%)"'                                               nameOfFodderFile'                                               x/(1024*1024)'                                               desiredSize/(1024*1024)'                                               ((double)x)/ (0.01 * desiredSize)));                  };
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating {0}' [{1}/{2}mb] ({3:N0}%)"'                                               nameOfFodderFile'                                               x/(1024*1024)'                                               desiredSize/(1024*1024)'                                               ((double)x)/ (0.01 * desiredSize)));                  };
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: Action<Int64> progressUpdate = (x) =>                  {                      _txrx.Send(String.Format("pb 1 value {0}"' x));                      _txrx.Send(String.Format("status Creating {0}' [{1}/{2}mb] ({3:N0}%)"'                                               nameOfFodderFile'                                               x/(1024*1024)'                                               desiredSize/(1024*1024)'                                               ((double)x)/ (0.01 * desiredSize)));                  };
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: zip.BufferSize = 65536*8;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: zip.BufferSize = 65536*8;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64_Over_4gb,The following statement contains a magic number: System.Threading.Thread.Sleep(120);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: int numTotalEntries = _rnd.Next(4616)+65534;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: int numTotalEntries = _rnd.Next(4616)+65534;
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: enc = enc.Substring(6);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: var saveProgress = new EventHandler<SaveProgressEventArgs>( (sender' e) => {                      switch (e.EventType)                      {                          case ZipProgressEventType.Saving_Started:                          _txrx.Send("status saving...");                          _txrx.Send("pb 1 max " + numTotalEntries);                          numSaved= 0;                          break;                            case ZipProgressEventType.Saving_AfterWriteEntry:                          numSaved++;                          if ((numSaved % 128) == 0)                          {                              _txrx.Send("pb 1 value " + numSaved);                              _txrx.Send(String.Format("status Saving entry {0}/{1} ({2:N0}%)"'                                                       numSaved' numTotalEntries'                                                       numSaved / (0.01 * numTotalEntries)                                                       ));                          }                          break;                            case ZipProgressEventType.Saving_Completed:                          _txrx.Send("status Save completed");                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                          break;                      }                  });
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: var saveProgress = new EventHandler<SaveProgressEventArgs>( (sender' e) => {                      switch (e.EventType)                      {                          case ZipProgressEventType.Saving_Started:                          _txrx.Send("status saving...");                          _txrx.Send("pb 1 max " + numTotalEntries);                          numSaved= 0;                          break;                            case ZipProgressEventType.Saving_AfterWriteEntry:                          numSaved++;                          if ((numSaved % 128) == 0)                          {                              _txrx.Send("pb 1 value " + numSaved);                              _txrx.Send(String.Format("status Saving entry {0}/{1} ({2:N0}%)"'                                                       numSaved' numTotalEntries'                                                       numSaved / (0.01 * numTotalEntries)                                                       ));                          }                          break;                            case ZipProgressEventType.Saving_Completed:                          _txrx.Send("status Save completed");                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                          break;                      }                  });
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: _rnd.Next(7)==0
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: string msg = String.Format("status adding entry {0}/{1}  ({2:N0}%)"'                                              m' numTotalEntries' (m/(0.01*numTotalEntries)));
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following statement contains a magic number: m % 1024 == 0
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Z64UpdateHugeZipWithComment,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Magic Number,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Z64UpdateHugeZipWithComment,The following statement contains a magic number: System.Threading.Thread.Sleep(220);
Missing Default,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Zip_Split,The following switch statement is missing a default case: switch (x)                      {                          case 0:                          break;                          case 1:                          break;                          case 2:                          _txrx.Send("pb 1 step");                          msg = String.Format("status created {0}/{1} files"'                                              y+1'                                              ((int)z));                          _txrx.Send(msg);                          break;                      }
Missing Default,Ionic.Zip.Tests,Compatibility,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Compatibility.cs,InfoZip_Unzip_z64_wi11936,The following switch statement is missing a default case: switch (x)                      {                          case 0:                          break;                          case 1:                          break;                          case 2:                          _txrx.Send("pb 1 step");                          msg = String.Format("status created {0}/{1} files"'                                              y+1'                                              ((int)z));                          _txrx.Send(msg);                          break;                      }
Missing Default,Ionic.Zip.Tests,Progress,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Progress.cs,ReadProgress1,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Reading_Started:                      TestContext.WriteLine("Reading_Started");                      break;                  case ZipProgressEventType.Reading_Completed:                      TestContext.WriteLine("Reading_Completed");                      break;                  case ZipProgressEventType.Reading_BeforeReadEntry:                      TestContext.WriteLine("Reading_BeforeReadEntry");                      break;                  case ZipProgressEventType.Reading_AfterReadEntry:                      TestContext.WriteLine("Reading_AfterReadEntry: {0}"'                                            e.CurrentEntry.FileName);                      break;                  case ZipProgressEventType.Reading_ArchiveBytesRead:                      break;              }
Missing Default,Ionic.Zip.Tests,Progress,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Progress.cs,AddProgress1,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Adding_Started:                      TestContext.WriteLine("Adding_Started");                      break;                  case ZipProgressEventType.Adding_Completed:                      TestContext.WriteLine("Adding_Completed");                      break;                  case ZipProgressEventType.Adding_AfterAddEntry:                      TestContext.WriteLine("Adding_AfterAddEntry: {0}"'                                            e.CurrentEntry.FileName);                      break;              }
Missing Default,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following switch statement is missing a default case: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".txt"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length < 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = s.EndsWith(".bin") && fi.Length > 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Missing Default,Ionic.Zip.Tests,Selector,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Selector.cs,Selector_SelectFiles,The following switch statement is missing a default case: switch (m)                      {                          case 0:                          case 1:                              Assert.IsTrue(s.EndsWith(".bin"));                              break;                          case 2:                              {                                  FileInfo fi = new FileInfo(s);                                  Assert.IsTrue(fi.Length >= 7500);                              }                              break;                          case 4:                              {                                  FileInfo fi = new FileInfo(s);                                  bool x = !s.EndsWith(".bin") || fi.Length <= 7500;                                  Assert.IsTrue(x);                              }                              break;                      }
Missing Default,Ionic.Zip.Tests.Error,ErrorTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ErrorTests.cs,OverwriteDecider,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite:                      // randomly choose whether to overwrite or not                      e.CurrentEntry.ExtractExistingFile = (_rnd.Next(2) == 0)                          ? ExtractExistingFileAction.DoNotOverwrite                          : ExtractExistingFileAction.OverwriteSilently;                      break;              }
Missing Default,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following switch statement is missing a default case: switch (x)                      {                          case 0:                          _txrx.Send(String.Format("pb 2 max {0}"' ((int)z)));                          break;                          case 1:                          msg = String.Format("pb 2 value {0}"' ((int)z));                          _txrx.Send(msg);                          break;                          case 2:                          _txrx.Send("pb 1 step");                          _txrx.Send("pb 2 value 0");                          msg = String.Format("status created {0}/{1} files"'                                              y+1'                                              ((int)z));                          _txrx.Send(msg);                          break;                      }
Missing Default,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Spanned_Create,The following switch statement is missing a default case: switch (e1.EventType)                      {                          case ZipProgressEventType.Saving_Started:                          _txrx.Send(String.Format("pb 2 max {0}"' filesToZip.Length));                          _txrx.Send("pb 2 value 0");                          break;                            case ZipProgressEventType.Saving_AfterWriteEntry:                          TestContext.WriteLine("Saved entry {0}' {1} bytes"'                                                e1.CurrentEntry.FileName'                                                e1.CurrentEntry.UncompressedSize);                          _txrx.Send("pb 2 step");                          break;                      }
Missing Default,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,ExtractProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _nCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                      // for performance' don't update the progress monitor every time.                      _nCycles++;                      if (_nCycles % 64 == 0)                      {                      _txrx.Send(String.Format("status Extracting entry {0}/{1} :: {2} :: {3}/{4}mb ::  {5:N0}%"'                                               _numExtracted' _numFilesToExtract'                                               e.CurrentEntry.FileName'                                               e.BytesTransferred/(1024*1024)'                                               e.TotalBytesToTransfer/(1024*1024)'                                               ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                               ));                      string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      _txrx.Send("pb 1 step");                      break;              }
Missing Default,Ionic.Zip.Tests.Split,Split,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\SplitArchives.cs,Test_LargeSegmentedArchive,The following switch statement is missing a default case: switch (e1.EventType)                      {                          case ZipProgressEventType.Saving_Started:                          numSaving= 0;                          break;                            case ZipProgressEventType.Saving_BeforeWriteEntry:                          _txrx.Send("test Large Segmented Zip");                          _txrx.Send(String.Format("status saving {0}"' e1.CurrentEntry.FileName));                          totalToSave = e1.EntriesTotal;                          numSaving++;                          break;                            // case ZipProgressEventType.Saving_EntryBytesRead:                          // if (!_pb2Set)                          // {                          //     _txrx.Send(String.Format("pb 2 max {0}"' e1.TotalBytesToTransfer));                          //     _pb2Set = true;                          // }                          // _txrx.Send(String.Format("status Saving entry {0}/{1} {2} :: {3}/{4}mb {5:N0}%"'                          //                          numSaving' totalToSave'                          //                          e1.CurrentEntry.FileName'                          //                          e1.BytesTransferred/(1024*1024)' e1.TotalBytesToTransfer/(1024*1024)'                          //                          ((double)e1.BytesTransferred) / (0.01 * e1.TotalBytesToTransfer)));                          // string msg = String.Format("pb 2 value {0}"' e1.BytesTransferred);                          // _txrx.Send(msg);                          // break;                            case ZipProgressEventType.Saving_AfterWriteEntry:                          TestContext.WriteLine("Saved entry {0}' {1} bytes"' e1.CurrentEntry.FileName'                                                e1.CurrentEntry.UncompressedSize);                          _txrx.Send("pb 1 step");                          _pb2Set = false;                          break;                      }
Missing Default,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,Bzip2_Perf,The following switch statement is missing a default case: switch(op)                      {                          case 0:                          _txrx.Send("pb 1 max " + sz);                          _txrx.Send("status Creating file " + ix);                          break;                          case 1:                          _txrx.Send("pb 1 value " + sz);                          break;                          case 2:                          _txrx.Send("pb 0 step");                          _txrx.Send("pb 1 value 0");                          break;                      }
Missing Default,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,AddProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Adding_AfterAddEntry:                      _progressEventCalls++;                      TestContext.WriteLine("{0}: {1}"' e.EventType.ToString()' e.CurrentEntry.FileName);                      if (_cancelIndex == _progressEventCalls)                      {                          e.Cancel = true;                          TestContext.WriteLine("Cancelling...");                          _wasCanceled = true;                      }                      break;              }
Missing Default,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,OverwriteDecider,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite:                      // randomly choose whether to overwrite or not                      e.CurrentEntry.ExtractExistingFile = (_rnd.Next(2) == 0)                          ? ExtractExistingFileAction.DoNotOverwrite                          : ExtractExistingFileAction.OverwriteSilently;                      break;              }
Missing Default,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ErrorHandler_RetryAndEventuallySkip,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Error_Saving:                      _retryCount++;                      if (_retryCount < 29)                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Retry;                      else                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Skip;                      break;              }
Missing Default,Ionic.Zip.Tests.Extended,ExtendedTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\ExtendedTests.cs,ErrorHandler_RetryAndEventuallyThrow,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Error_Saving:                      _retryCount++;                      if (_retryCount < 29)                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Retry;                      else                          e.CurrentEntry.ZipErrorAction = ZipErrorAction.Throw;                      break;              }
Missing Default,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LNSF_SaveProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _numEntriesSaved = 0;                      _txrx.Send("status saving started...");                      _pb1Set = false;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _numEntriesSaved++;                      if (_numEntriesSaved % 64 == 0)                          _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Missing Default,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LNSF_AddProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Adding_Started:                      _txrx.Send("status Adding files to the zip...");                      _pb1Set = false;                      break;                    case ZipProgressEventType.Adding_AfterAddEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numEntriesToAdd));                          _pb1Set = true;                      }                      if (!e.CurrentEntry.FileName.EndsWith("/"))                      {                          _numEntriesAdded++;                          if (_numEntriesAdded % 64 == 0)                              _txrx.Send(String.Format("status Adding file {0}/{1} :: {2}"'                                                       _numEntriesAdded' _numEntriesToAdd' e.CurrentEntry.FileName));                          _txrx.Send("pb 1 step");                      }                      break;                    case ZipProgressEventType.Adding_Completed:                      _txrx.Send("status Added all files");                      _pb1Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Missing Default,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_SaveProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      //_txrx.Send(String.Format("pb1 max {0}"' e.EntriesTotal));                      //_txrx.Send("pb2 max 1");                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _pb2Set = false;                      _spCycles = 0;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred / (1024 * 1024)' e.TotalBytesToTransfer / (1024 * 1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                          Assert.IsTrue(e.BytesTransferred <= e.TotalBytesToTransfer);                      }                      if (maxBytesXferred < e.BytesTransferred)                          maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Missing Default,Ionic.Zip.Tests.LongRunning,LongRunning,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\LongRunning.cs,LF_ExtractProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles=0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 32) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Extracting {0} :: [{1}/{2}mb] ({3:N0}%)"'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred / (0.01 * e.TotalBytesToTransfer))                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                          if (maxBytesXferred < e.BytesTransferred)                              maxBytesXferred = e.BytesTransferred;                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _txrx.Send("pb 1 step");                      break;              }
Missing Default,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,Streams_ExtractProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if ((_numExtracted % 512) == 0)                          _txrx.Send("pb 1 value " + _numExtracted);                      else if ((_numExtracted % 256) == 0)                          _txrx.Send(String.Format("status extract {0}/{1} {2:N0}%"'                                                   _numExtracted' _numFilesToExtract'                                                   _numExtracted / (0.01 *_numFilesToExtract)));                      break;              }
Missing Default,Ionic.Zip.Tests.Streams,StreamsTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Streams.cs,streams_SaveProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      //_txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving = 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      //_txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      if (!_pb2Set)                      {                          _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                          _pb2Set = true;                      }                        //                     _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                      //                                              _numSaving' _totalToSave'                      //                                              e.CurrentEntry.FileName'                      //                                              e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                      //                                              ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                      msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                      _txrx.Send(msg);                      //System.Threading.Thread.Sleep(40);                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      //_txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Missing Default,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following switch statement is missing a default case: switch (k)                          {                              case 0: break;                              case 1: if ((count % 2) == 0) e.IsText = true; break;                              case 2: if ((count % 2) != 0) e.IsText = true; break;                              case 3: e.IsText = true; break;                          }
Missing Default,Ionic.Zip.Tests.Basic,BasicTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\BasicTests.cs,Basic_IsText,The following switch statement is missing a default case: switch (k)                          {                              case 0: Assert.IsFalse(e.IsText); break;                              case 1: Assert.AreEqual<bool>((count % 2) == 0' e.IsText); break;                              case 2: Assert.AreEqual<bool>((count % 2) != 0' e.IsText); break;                              case 3: Assert.IsTrue(e.IsText); break;                          }
Missing Default,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_UnicodeEntries_Mixed,The following switch statement is missing a default case: switch (j)                      {  #pragma warning disable 618                          case 0:                              zip1.UseUnicodeAsNecessary = (j == 0);                              break;  #pragma warning restore 618                          case 1:                              // do nothing                              break;                          case 2:                              zip1.AlternateEncoding = System.Text.Encoding.UTF8;                              zip1.AlternateEncodingUsage = ZipOption.Always;                              break;                          case 3:                              zip1.AlternateEncoding = System.Text.Encoding.UTF8;                              zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                              break;                      }
Missing Default,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Create_WithSpecifiedCodepage,The following switch statement is missing a default case: switch (j)                          {                              case 0:  #pragma warning disable 618                                  zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(trials[k].codepage);  #pragma warning restore 618                                  break;                              case 1:                                  zip1.AlternateEncoding = System.Text.Encoding.GetEncoding(trials[k].codepage);                                  zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                                  break;                              case 2:                                  zip1.AlternateEncoding = System.Text.Encoding.GetEncoding(trials[k].codepage);                                  zip1.AlternateEncodingUsage = ZipOption.Always;                                  break;                          }
Missing Default,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,CodePage_UpdateZip_AlternateEncoding_wi10180,The following switch statement is missing a default case: switch (j)                      {                          case 0:  #pragma warning disable 618                              zip.ProvisionalAlternateEncoding = JIS;  #pragma warning restore 618                              break;                          case 1:                              zip.AlternateEncoding = JIS;                              zip.AlternateEncodingUsage = ZipOption.AsNecessary;                              break;                          case 2:                              zip.AlternateEncoding = JIS;                              zip.AlternateEncodingUsage = ZipOption.Always;                              break;                      }
Missing Default,Ionic.Zip.Tests.Unicode,UnicodeTests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\UnicodeTests.cs,Unicode_AddDirectoryByName_wi8984,The following switch statement is missing a default case: switch (j)                          {                              case 0:  #pragma warning disable 618                                  zip1.UseUnicodeAsNecessary = true;  #pragma warning restore 618                                  break;                              case 1:                                  zip1.AlternateEncoding = UTF8;                                  zip1.AlternateEncodingUsage = ZipOption.AsNecessary;                                  break;                              case 2:                                  zip1.AlternateEncoding = UTF8;                                  zip1.AlternateEncodingUsage = ZipOption.Always;                                  break;                          }
Missing Default,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_CreateHugeZipfiles,The following switch statement is missing a default case: switch (fc)                          {                              case 0:                              case 1:                                  // check for fodder files                                  testDir = dir;                                  string fdir = Path.Combine(dir'"dir");                                  if (Directory.Exists(fdir))                                  {                                      var fodderFiles = Directory.GetFiles(fdir' "*.txt");                                      if (fodderFiles == null || fodderFiles.Length <= 6)                                          try { Directory.Delete(dir' true); } catch { }                                  }                                  else try { Directory.Delete(dir' true); } catch { }                                  break;                              case 2:                                  // found both large zips' so use them.                                  zipsToCreate[0] = Path.Combine(dir' zipsToCreate[0]);                                  zipsToCreate[1] = Path.Combine(dir' zipsToCreate[1]);                                  TestContext.WriteLine("Using the existing zips in: {0}"' dir);                                  return zipsToCreate;                          }
Missing Default,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64SaveProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Saving_Started:                      _txrx.Send("status saving started...");                      _pb1Set = false;                      _numSaving= 1;                      break;                    case ZipProgressEventType.Saving_BeforeWriteEntry:                      _txrx.Send(String.Format("status Compressing {0}"' e.CurrentEntry.FileName));                      _spCycles = 0;                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' e.EntriesTotal));                          _pb1Set = true;                      }                      _totalToSave = e.EntriesTotal;                      _pb2Set = false;                      break;                    case ZipProgressEventType.Saving_EntryBytesRead:                      _spCycles++;                      if ((_spCycles % 128) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status Saving entry {0}/{1} :: {2} :: {3}/{4}mb {5:N0}%"'                                                   _numSaving' _totalToSave'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)' e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)));                          msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Saving_AfterWriteEntry:                      _txrx.Send("test " +  _testTitle); // just in case it was missed                      _txrx.Send("pb 1 step");                      _numSaving++;                      break;                    case ZipProgressEventType.Saving_Completed:                      _txrx.Send("status Save completed");                      _pb1Set = false;                      _pb2Set = false;                      _txrx.Send("pb 1 max 1");                      _txrx.Send("pb 1 value 1");                      break;              }
Missing Default,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64AddProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Adding_Started:                      _txrx.Send("status Adding files to the zip...");                      break;                  case ZipProgressEventType.Adding_AfterAddEntry:                      _txrx.Send(String.Format("status Adding file {0}"'                                               e.CurrentEntry.FileName));                      break;                  case ZipProgressEventType.Adding_Completed:                      _txrx.Send("status Added all files");                      break;              }
Missing Default,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,Zip64ExtractProgress,The following switch statement is missing a default case: switch (e.EventType)              {                  case ZipProgressEventType.Extracting_BeforeExtractEntry:                      if (!_pb1Set)                      {                          _txrx.Send(String.Format("pb 1 max {0}"' _numFilesToExtract));                          _pb1Set = true;                      }                      _pb2Set = false;                      _epCycles = 0;                      break;                    case ZipProgressEventType.Extracting_EntryBytesWritten:                      _epCycles++;                      if ((_epCycles % 512) == 0)                      {                          if (!_pb2Set)                          {                              _txrx.Send(String.Format("pb 2 max {0}"' e.TotalBytesToTransfer));                              _pb2Set = true;                          }                          _txrx.Send(String.Format("status {0} entry {1}/{2} :: {3} :: {4}/{5}mb ::  {6:N0}%"'                                                   verb'                                                   _numExtracted' _numFilesToExtract'                                                   e.CurrentEntry.FileName'                                                   e.BytesTransferred/(1024*1024)'                                                   e.TotalBytesToTransfer/(1024*1024)'                                                   ((double)e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)                                                   ));                          string msg = String.Format("pb 2 value {0}"' e.BytesTransferred);                          _txrx.Send(msg);                      }                      break;                    case ZipProgressEventType.Extracting_AfterExtractEntry:                      _numExtracted++;                      if (_numFilesToExtract < 1024 || (_numExtracted % 128) == 0)                      {                          _txrx.Send("test " +  _testTitle); // just in case it was missed                          while (_numExtracted > _numFilesToExtract) _numExtracted--;                          _txrx.Send("pb 1 value " + _numExtracted);                          if (_numExtracted == _numFilesToExtract)                          {                              _txrx.Send("status All done " + verb);                          }                          else                          {                              _txrx.Send(String.Format("status {0} entry {1}/{2} {3:N0}%"'                                                       verb'                                                       _numExtracted' _numFilesToExtract'                                                       _numExtracted / (0.01 *_numFilesToExtract)));                          }                      }                      break;              }
Missing Default,Ionic.Zip.Tests.Zip64,Zip64Tests,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\Zip Tests\Zip64Tests.cs,_Zip64_Over65534Entries,The following switch statement is missing a default case: switch (e.EventType)                      {                          case ZipProgressEventType.Saving_Started:                          _txrx.Send("status saving...");                          _txrx.Send("pb 1 max " + numTotalEntries);                          numSaved= 0;                          break;                            case ZipProgressEventType.Saving_AfterWriteEntry:                          numSaved++;                          if ((numSaved % 128) == 0)                          {                              _txrx.Send("pb 1 value " + numSaved);                              _txrx.Send(String.Format("status Saving entry {0}/{1} ({2:N0}%)"'                                                       numSaved' numTotalEntries'                                                       numSaved / (0.01 * numTotalEntries)                                                       ));                          }                          break;                            case ZipProgressEventType.Saving_Completed:                          _txrx.Send("status Save completed");                          _txrx.Send("pb 1 max 1");                          _txrx.Send("pb 1 value 1");                          break;                      }
