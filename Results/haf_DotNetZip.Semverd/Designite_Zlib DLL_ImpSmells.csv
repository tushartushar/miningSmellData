Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The method has 110 lines of code.
Long Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The method has 128 lines of code.
Long Method,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The method has 443 lines of code.
Long Method,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The method has 344 lines of code.
Long Method,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The method has 234 lines of code.
Long Method,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The method has 165 lines of code.
Long Method,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The method has 216 lines of code.
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_fillWindow,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateFast,Cyclomatic complexity of the method is 12
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,Cyclomatic complexity of the method is 15
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,SetDeflater,Cyclomatic complexity of the method is 9
Complex Method,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,Cyclomatic complexity of the method is 21
Complex Method,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,Cyclomatic complexity of the method is 125
Complex Method,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Flush,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,Cyclomatic complexity of the method is 126
Complex Method,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,Cyclomatic complexity of the method is 22
Complex Method,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,Cyclomatic complexity of the method is 110
Complex Method,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,Cyclomatic complexity of the method is 30
Complex Method,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_dynamic,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,EmitPendingBuffers,Cyclomatic complexity of the method is 11
Complex Method,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,Cyclomatic complexity of the method is 15
Complex Method,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,Cyclomatic complexity of the method is 16
Complex Method,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,Cyclomatic complexity of the method is 8
Complex Method,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,Read,Cyclomatic complexity of the method is 20
Long Parameter List,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The method has 5 parameters.
Long Parameter List,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Init,The method has 6 parameters.
Long Parameter List,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The method has 8 parameters.
Long Parameter List,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The method has 11 parameters.
Long Parameter List,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_bits,The method has 5 parameters.
Long Parameter List,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_dynamic,The method has 9 parameters.
Long Parameter List,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_fixed,The method has 5 parameters.
Long Parameter List,Ionic.Zlib,StaticTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,StaticTree,The method has 5 parameters.
Long Parameter List,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,ZlibBaseStream,The method has 5 parameters.
Long Statement,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The length of the statement  "			if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) { " is 145.
Long Statement,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The length of the statement  "		if (window [match + best_len] != scan_end || window [match + best_len - 1] != scan_end1 || window [match] != window [scan] || window [++match] != window [scan + 1]) " is 164.
Long Statement,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The length of the statement  "		} while (window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && scan < strend); " is 336.
Long Statement,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The length of the statement  "	if (_codec.OutputBuffer == null || (_codec.InputBuffer == null && _codec.AvailableBytesIn != 0) || (status == FINISH_STATE && flush != FlushType.Finish)) { " is 155.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,Write,The length of the statement  "		int limit = ((workitem.buffer.Length - workitem.inputBytesAvailable) > count) ? count : (workitem.buffer.Length - workitem.inputBytesAvailable); " is 144.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,Write,The length of the statement  "		TraceOutput (TraceBits.Write' "Write    lock     wi({0}) ord({1}) iba({2})"' workitem.index' workitem.ordinal' workitem.inputBytesAvailable); " is 141.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,Write,The length of the statement  "			TraceOutput (TraceBits.Write' "Write    QUWI     wi({0}) ord({1}) iba({2}) nf({3})"' workitem.index' workitem.ordinal' workitem.inputBytesAvailable); " is 149.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,EmitPendingBuffers,The length of the statement  "						TraceOutput (TraceBits.EmitSkip' "Emit     skip     wi({0}) ord({1}) lw({2}) fs({3})"' workitem.index' workitem.ordinal' _lastWritten' firstSkip); " is 146.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,EmitPendingBuffers,The length of the statement  "					TraceOutput (TraceBits.EmitBegin' "Emit     begin    wi({0}) ord({1})              cba({2})"' workitem.index' workitem.ordinal' workitem.compressedBytesAvailable); " is 163.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,EmitPendingBuffers,The length of the statement  "					TraceOutput (TraceBits.EmitDone' "Emit     done     wi({0}) ord({1})              cba({2}) mtw({3})"' workitem.index' workitem.ordinal' workitem.compressedBytesAvailable' millisecondsToWait); " is 191.
Long Statement,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,_DeflateOne,The length of the statement  "		TraceOutput (TraceBits.Compress' "Compress          wi({0}) ord({1}) len({2})"' workitem.index' workitem.ordinal' workitem.compressedBytesAvailable); " is 149.
Long Statement,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The length of the statement  "						throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead)); " is 140.
Long Statement,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The length of the statement  "					throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected)); " is 136.
Long Statement,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The length of the statement  "					throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected)); " is 129.
Long Statement,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,Read,The length of the statement  "			throw new ZlibException (String.Format ("{0}flating:  rc={1}  msg={2}"' (_wantCompress ? "de" : "in")' rc' _z.Message)); " is 120.
Long Statement,Ionic.Zlib,ZlibCodec,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibCodec.cs,flush_pending,The length of the statement  "	if (dstate.pending.Length <= dstate.nextPending || OutputBuffer.Length <= NextOut || dstate.pending.Length < (dstate.nextPending + len) || OutputBuffer.Length < (NextOut + len)) { " is 179.
Long Statement,Ionic.Zlib,ZlibCodec,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibCodec.cs,flush_pending,The length of the statement  "		throw new ZlibException (String.Format ("Invalid State. (pending.Length={0}' pendingCount={1})"' dstate.pending.Length' dstate.pendingCount)); " is 142.
Complex Conditional,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The conditional expression  "match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))"  is complex.
Complex Conditional,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The conditional expression  "window [match + best_len] != scan_end || window [match + best_len - 1] != scan_end1 || window [match] != window [scan] || window [++match] != window [scan + 1]"  is complex.
Complex Conditional,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The conditional expression  "window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && scan < strend"  is complex.
Complex Conditional,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The conditional expression  "_codec.OutputBuffer == null || (_codec.InputBuffer == null && _codec.AvailableBytesIn != 0) || (status == FINISH_STATE && flush != FlushType.Finish)"  is complex.
Complex Conditional,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The conditional expression  "_codec.AvailableBytesIn != 0 || lookahead != 0 || (flush != FlushType.None && status != FINISH_STATE)"  is complex.
Complex Conditional,Ionic.Zlib,ZlibCodec,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibCodec.cs,flush_pending,The conditional expression  "dstate.pending.Length <= dstate.nextPending || OutputBuffer.Length <= NextOut || dstate.pending.Length < (dstate.nextPending + len) || OutputBuffer.Length < (NextOut + len)"  is complex.
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,_InternalComputeCrc32,The following statement contains a magic number: return (Int32)(crc32Table [(W ^ B) & 0xFF] ^ (W >> 8));  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int x = offset + i;  	byte b = block [x];  	if (this.reverseBits) {  		UInt32 temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [temp];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [temp];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int x = offset + i;  	byte b = block [x];  	if (this.reverseBits) {  		UInt32 temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [temp];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [temp];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int x = offset + i;  	byte b = block [x];  	if (this.reverseBits) {  		UInt32 temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [temp];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [temp];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: if (this.reverseBits) {  	UInt32 temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [temp];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [temp];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: if (this.reverseBits) {  	UInt32 temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [temp];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [temp];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: if (this.reverseBits) {  	UInt32 temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [temp];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [temp];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table [temp];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,SlurpBlock,The following statement contains a magic number: _register = (_register >> 8) ^ crc32Table [temp];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	UInt32 temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [temp];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [temp];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	UInt32 temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [temp];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [temp];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	UInt32 temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [temp];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [temp];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table [temp];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register >> 8) ^ crc32Table [temp];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: while (n-- > 0) {  	if (this.reverseBits) {  		uint temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: while (n-- > 0) {  	if (this.reverseBits) {  		uint temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: while (n-- > 0) {  	if (this.reverseBits) {  		uint temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: while (n-- > 0) {  	if (this.reverseBits) {  		uint temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: while (n-- > 0) {  	if (this.reverseBits) {  		uint temp = (_register >> 24) ^ b;  		_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	} else {  		UInt32 temp = (_register & 0x000000FF) ^ b;  		_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	uint temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	uint temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	uint temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	uint temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: if (this.reverseBits) {  	uint temp = (_register >> 24) ^ b;  	_register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  } else {  	UInt32 temp = (_register & 0x000000FF) ^ b;  	_register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register >> 8) ^ crc32Table [(temp >= 0) ? temp : (temp + 256)];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint ret = data;  	ret = (ret & 0x55555555) << 1 | (ret >> 1) & 0x55555555;  	ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  	ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  	ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  	return ret;  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint u = (uint)data * 0x00020202;  	uint m = 0x01044010;  	uint s = u & m;  	uint t = (u << 2) & (m << 1);  	return (byte)((0x01001001 * (s + t)) >> 24);  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: unchecked {  	uint u = (uint)data * 0x00020202;  	uint m = 0x01044010;  	uint s = u & m;  	uint t = (u << 2) & (m << 1);  	return (byte)((0x01001001 * (s + t)) >> 24);  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,ReverseBits,The following statement contains a magic number: return (byte)((0x01001001 * (s + t)) >> 24);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,GenerateLookupTable,The following statement contains a magic number: crc32Table = new UInt32[256];  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,GenerateLookupTable,The following statement contains a magic number: unchecked {  	UInt32 dwCrc;  	byte i = 0;  	do {  		dwCrc = i;  		for (byte j = 8; j > 0; j--) {  			if ((dwCrc & 1) == 1) {  				dwCrc = (dwCrc >> 1) ^ dwPolynomial;  			} else {  				dwCrc >>= 1;  			}  		}  		if (reverseBits) {  			crc32Table [ReverseBits (i)] = ReverseBits (dwCrc);  		} else {  			crc32Table [i] = dwCrc;  		}  		i++;  	} while (i != 0);  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,GenerateLookupTable,The following statement contains a magic number: do {  	dwCrc = i;  	for (byte j = 8; j > 0; j--) {  		if ((dwCrc & 1) == 1) {  			dwCrc = (dwCrc >> 1) ^ dwPolynomial;  		} else {  			dwCrc >>= 1;  		}  	}  	if (reverseBits) {  		crc32Table [ReverseBits (i)] = ReverseBits (dwCrc);  	} else {  		crc32Table [i] = dwCrc;  	}  	i++;  } while (i != 0);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,GenerateLookupTable,The following statement contains a magic number: for (byte j = 8; j > 0; j--) {  	if ((dwCrc & 1) == 1) {  		dwCrc = (dwCrc >> 1) ^ dwPolynomial;  	} else {  		dwCrc >>= 1;  	}  }  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,gf2_matrix_square,The following statement contains a magic number: for (int i = 0; i < 32; i++)  	square [i] = gf2_matrix_times (mat' mat [i]);  
Magic Number,Ionic.Crc,CRC32,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\CRC32.cs,Combine,The following statement contains a magic number: for (int i = 1; i < 32; i++) {  	odd [i] = row;  	row <<= 1;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateManager,The following statement contains a magic number: dyn_ltree = new short[HEAP_SIZE * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateManager,The following statement contains a magic number: dyn_dtree = new short[(2 * InternalConstants.D_CODES + 1) * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateManager,The following statement contains a magic number: dyn_dtree = new short[(2 * InternalConstants.D_CODES + 1) * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateManager,The following statement contains a magic number: bl_tree = new short[(2 * InternalConstants.BL_CODES + 1) * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateManager,The following statement contains a magic number: bl_tree = new short[(2 * InternalConstants.BL_CODES + 1) * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeLazyMatch,The following statement contains a magic number: window_size = 2 * w_size;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeTreeData,The following statement contains a magic number: last_eob_len = 8;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: for (int i = 0; i < InternalConstants.L_CODES; i++)  	dyn_ltree [i * 2] = 0;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: dyn_ltree [i * 2] = 0;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: for (int i = 0; i < InternalConstants.D_CODES; i++)  	dyn_dtree [i * 2] = 0;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: dyn_dtree [i * 2] = 0;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: for (int i = 0; i < InternalConstants.BL_CODES; i++)  	bl_tree [i * 2] = 0;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: bl_tree [i * 2] = 0;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_InitializeBlocks,The following statement contains a magic number: dyn_ltree [END_BLOCK * 2] = 1;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: max_count = 138;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: min_count = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: tree [(max_code + 1) * 2 + 1] = (short)0x7fff;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = (int)tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  	} else if (curlen != 0) {  		if (curlen != prevlen)  			bl_tree [curlen * 2]++;  		bl_tree [InternalConstants.REP_3_6 * 2]++;  	} else if (count <= 10) {  		bl_tree [InternalConstants.REPZ_3_10 * 2]++;  	} else {  		bl_tree [InternalConstants.REPZ_11_138 * 2]++;  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: nextlen = (int)tree [(n + 1) * 2 + 1];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count < min_count) {  	bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  } else if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: bl_tree [curlen * 2] = (short)(bl_tree [curlen * 2] + count);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen)  		bl_tree [curlen * 2]++;  	bl_tree [InternalConstants.REP_3_6 * 2]++;  } else if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen != prevlen)  	bl_tree [curlen * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: bl_tree [curlen * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: bl_tree [InternalConstants.REP_3_6 * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (count <= 10) {  	bl_tree [InternalConstants.REPZ_3_10 * 2]++;  } else {  	bl_tree [InternalConstants.REPZ_11_138 * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: bl_tree [InternalConstants.REPZ_3_10 * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: bl_tree [InternalConstants.REPZ_11_138 * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: max_count = 138;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: min_count = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: max_count = 6;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: min_count = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: max_count = 7;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,scan_tree,The following statement contains a magic number: min_count = 4;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: for (max_blindex = InternalConstants.BL_CODES - 1; max_blindex >= 3; max_blindex--) {  	if (bl_tree [Tree.bl_order [max_blindex] * 2 + 1] != 0)  		break;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: for (max_blindex = InternalConstants.BL_CODES - 1; max_blindex >= 3; max_blindex--) {  	if (bl_tree [Tree.bl_order [max_blindex] * 2 + 1] != 0)  		break;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: if (bl_tree [Tree.bl_order [max_blindex] * 2 + 1] != 0)  	break;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,build_bl_tree,The following statement contains a magic number: opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (lcodes - 257' 5);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (lcodes - 257' 5);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (dcodes - 1' 5);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (blcodes - 4' 4);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (blcodes - 4' 4);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: for (rank = 0; rank < blcodes; rank++) {  	send_bits (bl_tree [Tree.bl_order [rank] * 2 + 1]' 3);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: for (rank = 0; rank < blcodes; rank++) {  	send_bits (bl_tree [Tree.bl_order [rank] * 2 + 1]' 3);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (bl_tree [Tree.bl_order [rank] * 2 + 1]' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_all_trees,The following statement contains a magic number: send_bits (bl_tree [Tree.bl_order [rank] * 2 + 1]' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: max_count = 138;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: min_count = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	curlen = nextlen;  	nextlen = tree [(n + 1) * 2 + 1];  	if (++count < max_count && curlen == nextlen) {  		continue;  	} else if (count < min_count) {  		do {  			send_code (curlen' bl_tree);  		} while (--count != 0);  	} else if (curlen != 0) {  		if (curlen != prevlen) {  			send_code (curlen' bl_tree);  			count--;  		}  		send_code (InternalConstants.REP_3_6' bl_tree);  		send_bits (count - 3' 2);  	} else if (count <= 10) {  		send_code (InternalConstants.REPZ_3_10' bl_tree);  		send_bits (count - 3' 3);  	} else {  		send_code (InternalConstants.REPZ_11_138' bl_tree);  		send_bits (count - 11' 7);  	}  	count = 0;  	prevlen = curlen;  	if (nextlen == 0) {  		max_count = 138;  		min_count = 3;  	} else if (curlen == nextlen) {  		max_count = 6;  		min_count = 3;  	} else {  		max_count = 7;  		min_count = 4;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: nextlen = tree [(n + 1) * 2 + 1];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (++count < max_count && curlen == nextlen) {  	continue;  } else if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count < min_count) {  	do {  		send_code (curlen' bl_tree);  	} while (--count != 0);  } else if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen != 0) {  	if (curlen != prevlen) {  		send_code (curlen' bl_tree);  		count--;  	}  	send_code (InternalConstants.REP_3_6' bl_tree);  	send_bits (count - 3' 2);  } else if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: send_bits (count - 3' 2);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: send_bits (count - 3' 2);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (count <= 10) {  	send_code (InternalConstants.REPZ_3_10' bl_tree);  	send_bits (count - 3' 3);  } else {  	send_code (InternalConstants.REPZ_11_138' bl_tree);  	send_bits (count - 11' 7);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: send_bits (count - 3' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: send_bits (count - 3' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: send_bits (count - 11' 7);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: send_bits (count - 11' 7);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (nextlen == 0) {  	max_count = 138;  	min_count = 3;  } else if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: max_count = 138;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: min_count = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: if (curlen == nextlen) {  	max_count = 6;  	min_count = 3;  } else {  	max_count = 7;  	min_count = 4;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: max_count = 6;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: min_count = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: max_count = 7;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_tree,The following statement contains a magic number: min_count = 4;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_bits,The following statement contains a magic number: unchecked {  	if (bi_valid > (int)Buf_size - len) {  		//int val = value;  		//      bi_buf |= (val << bi_valid);  		bi_buf |= (short)((value << bi_valid) & 0xffff);  		//put_short(bi_buf);  		pending [pendingCount++] = (byte)bi_buf;  		pending [pendingCount++] = (byte)(bi_buf >> 8);  		bi_buf = (short)((uint)value >> (Buf_size - bi_valid));  		bi_valid += len - Buf_size;  	} else {  		//      bi_buf |= (value) << bi_valid;  		bi_buf |= (short)((value << bi_valid) & 0xffff);  		bi_valid += len;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_bits,The following statement contains a magic number: if (bi_valid > (int)Buf_size - len) {  	//int val = value;  	//      bi_buf |= (val << bi_valid);  	bi_buf |= (short)((value << bi_valid) & 0xffff);  	//put_short(bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  	bi_buf = (short)((uint)value >> (Buf_size - bi_valid));  	bi_valid += len - Buf_size;  } else {  	//      bi_buf |= (value) << bi_valid;  	bi_buf |= (short)((value << bi_valid) & 0xffff);  	bi_valid += len;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_bits,The following statement contains a magic number: pending [pendingCount++] = (byte)(bi_buf >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_align,The following statement contains a magic number: send_bits (STATIC_TREES << 1' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_align,The following statement contains a magic number: if (1 + last_eob_len + 10 - bi_valid < 9) {  	send_bits (STATIC_TREES << 1' 3);  	send_code (END_BLOCK' StaticTree.lengthAndLiteralsTreeCodes);  	bi_flush ();  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_align,The following statement contains a magic number: if (1 + last_eob_len + 10 - bi_valid < 9) {  	send_bits (STATIC_TREES << 1' 3);  	send_code (END_BLOCK' StaticTree.lengthAndLiteralsTreeCodes);  	bi_flush ();  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_align,The following statement contains a magic number: if (1 + last_eob_len + 10 - bi_valid < 9) {  	send_bits (STATIC_TREES << 1' 3);  	send_code (END_BLOCK' StaticTree.lengthAndLiteralsTreeCodes);  	bi_flush ();  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_align,The following statement contains a magic number: send_bits (STATIC_TREES << 1' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_align,The following statement contains a magic number: last_eob_len = 7;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: pending [_distanceOffset + last_lit * 2] = unchecked((byte)((uint)dist >> 8));  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: pending [_distanceOffset + last_lit * 2] = unchecked((byte)((uint)dist >> 8));  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: pending [_distanceOffset + last_lit * 2 + 1] = unchecked((byte)dist);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if (dist == 0) {  	// lc is the unmatched char  	dyn_ltree [lc * 2]++;  } else {  	matches++;  	// Here' lc is the match length - MIN_MATCH  	dist--;  	// dist = match distance - 1  	dyn_ltree [(Tree.LengthCode [lc] + InternalConstants.LITERALS + 1) * 2]++;  	dyn_dtree [Tree.DistanceCode (dist) * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if (dist == 0) {  	// lc is the unmatched char  	dyn_ltree [lc * 2]++;  } else {  	matches++;  	// Here' lc is the match length - MIN_MATCH  	dist--;  	// dist = match distance - 1  	dyn_ltree [(Tree.LengthCode [lc] + InternalConstants.LITERALS + 1) * 2]++;  	dyn_dtree [Tree.DistanceCode (dist) * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if (dist == 0) {  	// lc is the unmatched char  	dyn_ltree [lc * 2]++;  } else {  	matches++;  	// Here' lc is the match length - MIN_MATCH  	dist--;  	// dist = match distance - 1  	dyn_ltree [(Tree.LengthCode [lc] + InternalConstants.LITERALS + 1) * 2]++;  	dyn_dtree [Tree.DistanceCode (dist) * 2]++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: dyn_ltree [lc * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: dyn_ltree [(Tree.LengthCode [lc] + InternalConstants.LITERALS + 1) * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: dyn_dtree [Tree.DistanceCode (dist) * 2]++;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((last_lit & 0x1fff) == 0 && (int)compressionLevel > 2) {  	// Compute an upper bound for the compressed length  	int out_length = last_lit << 3;  	int in_length = strstart - block_start;  	int dcode;  	for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  		out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  	}  	out_length >>= 3;  	if ((matches < (last_lit / 2)) && out_length < in_length / 2)  		return true;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((last_lit & 0x1fff) == 0 && (int)compressionLevel > 2) {  	// Compute an upper bound for the compressed length  	int out_length = last_lit << 3;  	int in_length = strstart - block_start;  	int dcode;  	for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  		out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  	}  	out_length >>= 3;  	if ((matches < (last_lit / 2)) && out_length < in_length / 2)  		return true;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((last_lit & 0x1fff) == 0 && (int)compressionLevel > 2) {  	// Compute an upper bound for the compressed length  	int out_length = last_lit << 3;  	int in_length = strstart - block_start;  	int dcode;  	for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  		out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  	}  	out_length >>= 3;  	if ((matches < (last_lit / 2)) && out_length < in_length / 2)  		return true;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((last_lit & 0x1fff) == 0 && (int)compressionLevel > 2) {  	// Compute an upper bound for the compressed length  	int out_length = last_lit << 3;  	int in_length = strstart - block_start;  	int dcode;  	for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  		out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  	}  	out_length >>= 3;  	if ((matches < (last_lit / 2)) && out_length < in_length / 2)  		return true;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((last_lit & 0x1fff) == 0 && (int)compressionLevel > 2) {  	// Compute an upper bound for the compressed length  	int out_length = last_lit << 3;  	int in_length = strstart - block_start;  	int dcode;  	for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  		out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  	}  	out_length >>= 3;  	if ((matches < (last_lit / 2)) && out_length < in_length / 2)  		return true;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((last_lit & 0x1fff) == 0 && (int)compressionLevel > 2) {  	// Compute an upper bound for the compressed length  	int out_length = last_lit << 3;  	int in_length = strstart - block_start;  	int dcode;  	for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  		out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  	}  	out_length >>= 3;  	if ((matches < (last_lit / 2)) && out_length < in_length / 2)  		return true;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: for (dcode = 0; dcode < InternalConstants.D_CODES; dcode++) {  	out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: out_length = (int)(out_length + (int)dyn_dtree [dcode * 2] * (5L + Tree.ExtraDistanceBits [dcode]));  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: out_length >>= 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((matches < (last_lit / 2)) && out_length < in_length / 2)  	return true;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_tally,The following statement contains a magic number: if ((matches < (last_lit / 2)) && out_length < in_length / 2)  	return true;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_compressed_block,The following statement contains a magic number: if (last_lit != 0) {  	do {  		int ix = _distanceOffset + lx * 2;  		distance = ((pending [ix] << 8) & 0xff00) | (pending [ix + 1] & 0xff);  		lc = (pending [_lengthOffset + lx]) & 0xff;  		lx++;  		if (distance == 0) {  			send_code (lc' ltree);  			// send a literal byte  		} else {  			// literal or match pair  			// Here' lc is the match length - MIN_MATCH  			code = Tree.LengthCode [lc];  			// send the length code  			send_code (code + InternalConstants.LITERALS + 1' ltree);  			extra = Tree.ExtraLengthBits [code];  			if (extra != 0) {  				// send the extra length bits  				lc -= Tree.LengthBase [code];  				send_bits (lc' extra);  			}  			distance--;  			// dist is now the match distance - 1  			code = Tree.DistanceCode (distance);  			// send the distance code  			send_code (code' dtree);  			extra = Tree.ExtraDistanceBits [code];  			if (extra != 0) {  				// send the extra distance bits  				distance -= Tree.DistanceBase [code];  				send_bits (distance' extra);  			}  		}  		// Check that the overlay between pending and d_buf+l_buf is ok:  	} while (lx < last_lit);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_compressed_block,The following statement contains a magic number: if (last_lit != 0) {  	do {  		int ix = _distanceOffset + lx * 2;  		distance = ((pending [ix] << 8) & 0xff00) | (pending [ix + 1] & 0xff);  		lc = (pending [_lengthOffset + lx]) & 0xff;  		lx++;  		if (distance == 0) {  			send_code (lc' ltree);  			// send a literal byte  		} else {  			// literal or match pair  			// Here' lc is the match length - MIN_MATCH  			code = Tree.LengthCode [lc];  			// send the length code  			send_code (code + InternalConstants.LITERALS + 1' ltree);  			extra = Tree.ExtraLengthBits [code];  			if (extra != 0) {  				// send the extra length bits  				lc -= Tree.LengthBase [code];  				send_bits (lc' extra);  			}  			distance--;  			// dist is now the match distance - 1  			code = Tree.DistanceCode (distance);  			// send the distance code  			send_code (code' dtree);  			extra = Tree.ExtraDistanceBits [code];  			if (extra != 0) {  				// send the extra distance bits  				distance -= Tree.DistanceBase [code];  				send_bits (distance' extra);  			}  		}  		// Check that the overlay between pending and d_buf+l_buf is ok:  	} while (lx < last_lit);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_compressed_block,The following statement contains a magic number: do {  	int ix = _distanceOffset + lx * 2;  	distance = ((pending [ix] << 8) & 0xff00) | (pending [ix + 1] & 0xff);  	lc = (pending [_lengthOffset + lx]) & 0xff;  	lx++;  	if (distance == 0) {  		send_code (lc' ltree);  		// send a literal byte  	} else {  		// literal or match pair  		// Here' lc is the match length - MIN_MATCH  		code = Tree.LengthCode [lc];  		// send the length code  		send_code (code + InternalConstants.LITERALS + 1' ltree);  		extra = Tree.ExtraLengthBits [code];  		if (extra != 0) {  			// send the extra length bits  			lc -= Tree.LengthBase [code];  			send_bits (lc' extra);  		}  		distance--;  		// dist is now the match distance - 1  		code = Tree.DistanceCode (distance);  		// send the distance code  		send_code (code' dtree);  		extra = Tree.ExtraDistanceBits [code];  		if (extra != 0) {  			// send the extra distance bits  			distance -= Tree.DistanceBase [code];  			send_bits (distance' extra);  		}  	}  	// Check that the overlay between pending and d_buf+l_buf is ok:  } while (lx < last_lit);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_compressed_block,The following statement contains a magic number: do {  	int ix = _distanceOffset + lx * 2;  	distance = ((pending [ix] << 8) & 0xff00) | (pending [ix + 1] & 0xff);  	lc = (pending [_lengthOffset + lx]) & 0xff;  	lx++;  	if (distance == 0) {  		send_code (lc' ltree);  		// send a literal byte  	} else {  		// literal or match pair  		// Here' lc is the match length - MIN_MATCH  		code = Tree.LengthCode [lc];  		// send the length code  		send_code (code + InternalConstants.LITERALS + 1' ltree);  		extra = Tree.ExtraLengthBits [code];  		if (extra != 0) {  			// send the extra length bits  			lc -= Tree.LengthBase [code];  			send_bits (lc' extra);  		}  		distance--;  		// dist is now the match distance - 1  		code = Tree.DistanceCode (distance);  		// send the distance code  		send_code (code' dtree);  		extra = Tree.ExtraDistanceBits [code];  		if (extra != 0) {  			// send the extra distance bits  			distance -= Tree.DistanceBase [code];  			send_bits (distance' extra);  		}  	}  	// Check that the overlay between pending and d_buf+l_buf is ok:  } while (lx < last_lit);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_compressed_block,The following statement contains a magic number: distance = ((pending [ix] << 8) & 0xff00) | (pending [ix + 1] & 0xff);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,send_compressed_block,The following statement contains a magic number: last_eob_len = ltree [END_BLOCK * 2 + 1];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: while (n < 7) {  	bin_freq += dyn_ltree [n * 2];  	n++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: while (n < 7) {  	bin_freq += dyn_ltree [n * 2];  	n++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: bin_freq += dyn_ltree [n * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: while (n < 128) {  	ascii_freq += dyn_ltree [n * 2];  	n++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: while (n < 128) {  	ascii_freq += dyn_ltree [n * 2];  	n++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: ascii_freq += dyn_ltree [n * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: while (n < InternalConstants.LITERALS) {  	bin_freq += dyn_ltree [n * 2];  	n++;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: bin_freq += dyn_ltree [n * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,set_data_type,The following statement contains a magic number: data_type = (sbyte)(bin_freq > (ascii_freq >> 2) ? Z_BINARY : Z_ASCII);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid == 16) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  	bi_buf = 0;  	bi_valid = 0;  } else if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid == 16) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  	bi_buf = 0;  	bi_valid = 0;  } else if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid == 16) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  	bi_buf = 0;  	bi_valid = 0;  } else if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid == 16) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  	bi_buf = 0;  	bi_valid = 0;  } else if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid == 16) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  	bi_buf = 0;  	bi_valid = 0;  } else if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: pending [pendingCount++] = (byte)(bi_buf >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: if (bi_valid >= 8) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  	bi_buf >>= 8;  	bi_valid -= 8;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: bi_buf >>= 8;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_flush,The following statement contains a magic number: bi_valid -= 8;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_windup,The following statement contains a magic number: if (bi_valid > 8) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  } else if (bi_valid > 0) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_windup,The following statement contains a magic number: if (bi_valid > 8) {  	pending [pendingCount++] = (byte)bi_buf;  	pending [pendingCount++] = (byte)(bi_buf >> 8);  } else if (bi_valid > 0) {  	//put_byte((byte)bi_buf);  	pending [pendingCount++] = (byte)bi_buf;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,bi_windup,The following statement contains a magic number: pending [pendingCount++] = (byte)(bi_buf >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: last_eob_len = 8;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: if (header)  	unchecked {  		//put_short((short)len);  		pending [pendingCount++] = (byte)len;  		pending [pendingCount++] = (byte)(len >> 8);  		//put_short((short)~len);  		pending [pendingCount++] = (byte)~len;  		pending [pendingCount++] = (byte)(~len >> 8);  	}  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: if (header)  	unchecked {  		//put_short((short)len);  		pending [pendingCount++] = (byte)len;  		pending [pendingCount++] = (byte)(len >> 8);  		//put_short((short)~len);  		pending [pendingCount++] = (byte)~len;  		pending [pendingCount++] = (byte)(~len >> 8);  	}  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: unchecked {  	//put_short((short)len);  	pending [pendingCount++] = (byte)len;  	pending [pendingCount++] = (byte)(len >> 8);  	//put_short((short)~len);  	pending [pendingCount++] = (byte)~len;  	pending [pendingCount++] = (byte)(~len >> 8);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: unchecked {  	//put_short((short)len);  	pending [pendingCount++] = (byte)len;  	pending [pendingCount++] = (byte)(len >> 8);  	//put_short((short)~len);  	pending [pendingCount++] = (byte)~len;  	pending [pendingCount++] = (byte)(~len >> 8);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: pending [pendingCount++] = (byte)(len >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,copy_block,The following statement contains a magic number: pending [pendingCount++] = (byte)(~len >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateNone,The following statement contains a magic number: if (max_block_size > pending.Length - 5) {  	max_block_size = pending.Length - 5;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateNone,The following statement contains a magic number: if (max_block_size > pending.Length - 5) {  	max_block_size = pending.Length - 5;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateNone,The following statement contains a magic number: max_block_size = pending.Length - 5;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_stored_block,The following statement contains a magic number: send_bits ((STORED_BLOCK << 1) + (eof ? 1 : 0)' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (compressionLevel > 0) {  	// Check if the file is ascii or binary  	if (data_type == Z_UNKNOWN)  		set_data_type ();  	// Construct the literal and distance trees  	treeLiterals.build_tree (this);  	treeDistances.build_tree (this);  	// At this point' opt_len and static_len are the total bit lengths of  	// the compressed block data' excluding the tree representations.  	// Build the bit length tree for the above two trees' and get the index  	// in bl_order of the last bit length code to send.  	max_blindex = build_bl_tree ();  	// Determine the best encoding. Compute first the block length in bytes  	opt_lenb = (opt_len + 3 + 7) >> 3;  	static_lenb = (static_len + 3 + 7) >> 3;  	if (static_lenb <= opt_lenb)  		opt_lenb = static_lenb;  } else {  	opt_lenb = static_lenb = stored_len + 5;  	// force a stored block  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: opt_lenb = (opt_len + 3 + 7) >> 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: opt_lenb = (opt_len + 3 + 7) >> 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: opt_lenb = (opt_len + 3 + 7) >> 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: static_lenb = (static_len + 3 + 7) >> 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: static_lenb = (static_len + 3 + 7) >> 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: static_lenb = (static_len + 3 + 7) >> 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: opt_lenb = static_lenb = stored_len + 5;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (stored_len + 4 <= opt_lenb && buf != -1) {  	// 4: two words for the lengths  	// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.  	// Otherwise we can't have processed more than WSIZE input bytes since  	// the last block flush' because compression would have been  	// successful. If LIT_BUFSIZE <= WSIZE' it is never too late to  	// transform a block into a stored block.  	_tr_stored_block (buf' stored_len' eof);  } else if (static_lenb == opt_lenb) {  	send_bits ((STATIC_TREES << 1) + (eof ? 1 : 0)' 3);  	send_compressed_block (StaticTree.lengthAndLiteralsTreeCodes' StaticTree.distTreeCodes);  } else {  	send_bits ((DYN_TREES << 1) + (eof ? 1 : 0)' 3);  	send_all_trees (treeLiterals.max_code + 1' treeDistances.max_code + 1' max_blindex + 1);  	send_compressed_block (dyn_ltree' dyn_dtree);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (stored_len + 4 <= opt_lenb && buf != -1) {  	// 4: two words for the lengths  	// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.  	// Otherwise we can't have processed more than WSIZE input bytes since  	// the last block flush' because compression would have been  	// successful. If LIT_BUFSIZE <= WSIZE' it is never too late to  	// transform a block into a stored block.  	_tr_stored_block (buf' stored_len' eof);  } else if (static_lenb == opt_lenb) {  	send_bits ((STATIC_TREES << 1) + (eof ? 1 : 0)' 3);  	send_compressed_block (StaticTree.lengthAndLiteralsTreeCodes' StaticTree.distTreeCodes);  } else {  	send_bits ((DYN_TREES << 1) + (eof ? 1 : 0)' 3);  	send_all_trees (treeLiterals.max_code + 1' treeDistances.max_code + 1' max_blindex + 1);  	send_compressed_block (dyn_ltree' dyn_dtree);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (stored_len + 4 <= opt_lenb && buf != -1) {  	// 4: two words for the lengths  	// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.  	// Otherwise we can't have processed more than WSIZE input bytes since  	// the last block flush' because compression would have been  	// successful. If LIT_BUFSIZE <= WSIZE' it is never too late to  	// transform a block into a stored block.  	_tr_stored_block (buf' stored_len' eof);  } else if (static_lenb == opt_lenb) {  	send_bits ((STATIC_TREES << 1) + (eof ? 1 : 0)' 3);  	send_compressed_block (StaticTree.lengthAndLiteralsTreeCodes' StaticTree.distTreeCodes);  } else {  	send_bits ((DYN_TREES << 1) + (eof ? 1 : 0)' 3);  	send_all_trees (treeLiterals.max_code + 1' treeDistances.max_code + 1' max_blindex + 1);  	send_compressed_block (dyn_ltree' dyn_dtree);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (static_lenb == opt_lenb) {  	send_bits ((STATIC_TREES << 1) + (eof ? 1 : 0)' 3);  	send_compressed_block (StaticTree.lengthAndLiteralsTreeCodes' StaticTree.distTreeCodes);  } else {  	send_bits ((DYN_TREES << 1) + (eof ? 1 : 0)' 3);  	send_all_trees (treeLiterals.max_code + 1' treeDistances.max_code + 1' max_blindex + 1);  	send_compressed_block (dyn_ltree' dyn_dtree);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: if (static_lenb == opt_lenb) {  	send_bits ((STATIC_TREES << 1) + (eof ? 1 : 0)' 3);  	send_compressed_block (StaticTree.lengthAndLiteralsTreeCodes' StaticTree.distTreeCodes);  } else {  	send_bits ((DYN_TREES << 1) + (eof ? 1 : 0)' 3);  	send_all_trees (treeLiterals.max_code + 1' treeDistances.max_code + 1' max_blindex + 1);  	send_compressed_block (dyn_ltree' dyn_dtree);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: send_bits ((STATIC_TREES << 1) + (eof ? 1 : 0)' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,_tr_flush_block,The following statement contains a magic number: send_bits ((DYN_TREES << 1) + (eof ? 1 : 0)' 3);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: while (true) {  	// Make sure that we always have enough lookahead' except  	// at the end of the input file. We need MAX_MATCH bytes  	// for the next match' plus MIN_MATCH bytes to insert the  	// string following the next match.  	if (lookahead < MIN_LOOKAHEAD) {  		_fillWindow ();  		if (lookahead < MIN_LOOKAHEAD && flush == FlushType.None)  			return BlockState.NeedMore;  		if (lookahead == 0)  			break;  		// flush the current block  	}  	// Insert the string window[strstart .. strstart+2] in the  	// dictionary' and set hash_head to the head of the hash chain:  	if (lookahead >= MIN_MATCH) {  		ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  		//  prev[strstart&w_mask]=hash_head=head[ins_h];  		hash_head = (head [ins_h] & 0xffff);  		prev [strstart & w_mask] = head [ins_h];  		head [ins_h] = unchecked((short)strstart);  	}  	// Find the longest match' discarding those <= prev_length.  	prev_length = match_length;  	prev_match = match_start;  	match_length = MIN_MATCH - 1;  	if (hash_head != 0 && prev_length < config.MaxLazy && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {  		// To simplify the code' we prevent matches with the string  		// of window index 0 (in particular we have to avoid a match  		// of the string with itself at the start of the input file).  		if (compressionStrategy != CompressionStrategy.HuffmanOnly) {  			match_length = longest_match (hash_head);  		}  		// longest_match() sets match_start  		if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  			// If prev_match is also MIN_MATCH' match_start is garbage  			// but we will ignore the current match anyway.  			match_length = MIN_MATCH - 1;  		}  	}  	// If there was a match at the previous step and the current  	// match is not better' output the previous match:  	if (prev_length >= MIN_MATCH && match_length <= prev_length) {  		int max_insert = strstart + lookahead - MIN_MATCH;  		// Do not insert strings in hash table beyond this.  		//          check_match(strstart-1' prev_match' prev_length);  		bflush = _tr_tally (strstart - 1 - prev_match' prev_length - MIN_MATCH);  		// Insert in hash table all strings up to the end of the match.  		// strstart-1 and strstart are already inserted. If there is not  		// enough lookahead' the last two strings are not inserted in  		// the hash table.  		lookahead -= (prev_length - 1);  		prev_length -= 2;  		do {  			if (++strstart <= max_insert) {  				ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  				//prev[strstart&w_mask]=hash_head=head[ins_h];  				hash_head = (head [ins_h] & 0xffff);  				prev [strstart & w_mask] = head [ins_h];  				head [ins_h] = unchecked((short)strstart);  			}  		} while (--prev_length != 0);  		match_available = 0;  		match_length = MIN_MATCH - 1;  		strstart++;  		if (bflush) {  			flush_block_only (false);  			if (_codec.AvailableBytesOut == 0)  				return BlockState.NeedMore;  		}  	} else if (match_available != 0) {  		// If there was no match at the previous position' output a  		// single literal. If there was a match but the current match  		// is longer' truncate the previous match to a single literal.  		bflush = _tr_tally (0' window [strstart - 1] & 0xff);  		if (bflush) {  			flush_block_only (false);  		}  		strstart++;  		lookahead--;  		if (_codec.AvailableBytesOut == 0)  			return BlockState.NeedMore;  	} else {  		// There is no previous match to compare with' wait for  		// the next step to decide.  		match_available = 1;  		strstart++;  		lookahead--;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: while (true) {  	// Make sure that we always have enough lookahead' except  	// at the end of the input file. We need MAX_MATCH bytes  	// for the next match' plus MIN_MATCH bytes to insert the  	// string following the next match.  	if (lookahead < MIN_LOOKAHEAD) {  		_fillWindow ();  		if (lookahead < MIN_LOOKAHEAD && flush == FlushType.None)  			return BlockState.NeedMore;  		if (lookahead == 0)  			break;  		// flush the current block  	}  	// Insert the string window[strstart .. strstart+2] in the  	// dictionary' and set hash_head to the head of the hash chain:  	if (lookahead >= MIN_MATCH) {  		ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  		//  prev[strstart&w_mask]=hash_head=head[ins_h];  		hash_head = (head [ins_h] & 0xffff);  		prev [strstart & w_mask] = head [ins_h];  		head [ins_h] = unchecked((short)strstart);  	}  	// Find the longest match' discarding those <= prev_length.  	prev_length = match_length;  	prev_match = match_start;  	match_length = MIN_MATCH - 1;  	if (hash_head != 0 && prev_length < config.MaxLazy && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {  		// To simplify the code' we prevent matches with the string  		// of window index 0 (in particular we have to avoid a match  		// of the string with itself at the start of the input file).  		if (compressionStrategy != CompressionStrategy.HuffmanOnly) {  			match_length = longest_match (hash_head);  		}  		// longest_match() sets match_start  		if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  			// If prev_match is also MIN_MATCH' match_start is garbage  			// but we will ignore the current match anyway.  			match_length = MIN_MATCH - 1;  		}  	}  	// If there was a match at the previous step and the current  	// match is not better' output the previous match:  	if (prev_length >= MIN_MATCH && match_length <= prev_length) {  		int max_insert = strstart + lookahead - MIN_MATCH;  		// Do not insert strings in hash table beyond this.  		//          check_match(strstart-1' prev_match' prev_length);  		bflush = _tr_tally (strstart - 1 - prev_match' prev_length - MIN_MATCH);  		// Insert in hash table all strings up to the end of the match.  		// strstart-1 and strstart are already inserted. If there is not  		// enough lookahead' the last two strings are not inserted in  		// the hash table.  		lookahead -= (prev_length - 1);  		prev_length -= 2;  		do {  			if (++strstart <= max_insert) {  				ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  				//prev[strstart&w_mask]=hash_head=head[ins_h];  				hash_head = (head [ins_h] & 0xffff);  				prev [strstart & w_mask] = head [ins_h];  				head [ins_h] = unchecked((short)strstart);  			}  		} while (--prev_length != 0);  		match_available = 0;  		match_length = MIN_MATCH - 1;  		strstart++;  		if (bflush) {  			flush_block_only (false);  			if (_codec.AvailableBytesOut == 0)  				return BlockState.NeedMore;  		}  	} else if (match_available != 0) {  		// If there was no match at the previous position' output a  		// single literal. If there was a match but the current match  		// is longer' truncate the previous match to a single literal.  		bflush = _tr_tally (0' window [strstart - 1] & 0xff);  		if (bflush) {  			flush_block_only (false);  		}  		strstart++;  		lookahead--;  		if (_codec.AvailableBytesOut == 0)  			return BlockState.NeedMore;  	} else {  		// There is no previous match to compare with' wait for  		// the next step to decide.  		match_available = 1;  		strstart++;  		lookahead--;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: while (true) {  	// Make sure that we always have enough lookahead' except  	// at the end of the input file. We need MAX_MATCH bytes  	// for the next match' plus MIN_MATCH bytes to insert the  	// string following the next match.  	if (lookahead < MIN_LOOKAHEAD) {  		_fillWindow ();  		if (lookahead < MIN_LOOKAHEAD && flush == FlushType.None)  			return BlockState.NeedMore;  		if (lookahead == 0)  			break;  		// flush the current block  	}  	// Insert the string window[strstart .. strstart+2] in the  	// dictionary' and set hash_head to the head of the hash chain:  	if (lookahead >= MIN_MATCH) {  		ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  		//  prev[strstart&w_mask]=hash_head=head[ins_h];  		hash_head = (head [ins_h] & 0xffff);  		prev [strstart & w_mask] = head [ins_h];  		head [ins_h] = unchecked((short)strstart);  	}  	// Find the longest match' discarding those <= prev_length.  	prev_length = match_length;  	prev_match = match_start;  	match_length = MIN_MATCH - 1;  	if (hash_head != 0 && prev_length < config.MaxLazy && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {  		// To simplify the code' we prevent matches with the string  		// of window index 0 (in particular we have to avoid a match  		// of the string with itself at the start of the input file).  		if (compressionStrategy != CompressionStrategy.HuffmanOnly) {  			match_length = longest_match (hash_head);  		}  		// longest_match() sets match_start  		if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  			// If prev_match is also MIN_MATCH' match_start is garbage  			// but we will ignore the current match anyway.  			match_length = MIN_MATCH - 1;  		}  	}  	// If there was a match at the previous step and the current  	// match is not better' output the previous match:  	if (prev_length >= MIN_MATCH && match_length <= prev_length) {  		int max_insert = strstart + lookahead - MIN_MATCH;  		// Do not insert strings in hash table beyond this.  		//          check_match(strstart-1' prev_match' prev_length);  		bflush = _tr_tally (strstart - 1 - prev_match' prev_length - MIN_MATCH);  		// Insert in hash table all strings up to the end of the match.  		// strstart-1 and strstart are already inserted. If there is not  		// enough lookahead' the last two strings are not inserted in  		// the hash table.  		lookahead -= (prev_length - 1);  		prev_length -= 2;  		do {  			if (++strstart <= max_insert) {  				ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  				//prev[strstart&w_mask]=hash_head=head[ins_h];  				hash_head = (head [ins_h] & 0xffff);  				prev [strstart & w_mask] = head [ins_h];  				head [ins_h] = unchecked((short)strstart);  			}  		} while (--prev_length != 0);  		match_available = 0;  		match_length = MIN_MATCH - 1;  		strstart++;  		if (bflush) {  			flush_block_only (false);  			if (_codec.AvailableBytesOut == 0)  				return BlockState.NeedMore;  		}  	} else if (match_available != 0) {  		// If there was no match at the previous position' output a  		// single literal. If there was a match but the current match  		// is longer' truncate the previous match to a single literal.  		bflush = _tr_tally (0' window [strstart - 1] & 0xff);  		if (bflush) {  			flush_block_only (false);  		}  		strstart++;  		lookahead--;  		if (_codec.AvailableBytesOut == 0)  			return BlockState.NeedMore;  	} else {  		// There is no previous match to compare with' wait for  		// the next step to decide.  		match_available = 1;  		strstart++;  		lookahead--;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: if (hash_head != 0 && prev_length < config.MaxLazy && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {  	// To simplify the code' we prevent matches with the string  	// of window index 0 (in particular we have to avoid a match  	// of the string with itself at the start of the input file).  	if (compressionStrategy != CompressionStrategy.HuffmanOnly) {  		match_length = longest_match (hash_head);  	}  	// longest_match() sets match_start  	if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  		// If prev_match is also MIN_MATCH' match_start is garbage  		// but we will ignore the current match anyway.  		match_length = MIN_MATCH - 1;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: if (hash_head != 0 && prev_length < config.MaxLazy && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {  	// To simplify the code' we prevent matches with the string  	// of window index 0 (in particular we have to avoid a match  	// of the string with itself at the start of the input file).  	if (compressionStrategy != CompressionStrategy.HuffmanOnly) {  		match_length = longest_match (hash_head);  	}  	// longest_match() sets match_start  	if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  		// If prev_match is also MIN_MATCH' match_start is garbage  		// but we will ignore the current match anyway.  		match_length = MIN_MATCH - 1;  	}  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  	// If prev_match is also MIN_MATCH' match_start is garbage  	// but we will ignore the current match anyway.  	match_length = MIN_MATCH - 1;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: if (match_length <= 5 && (compressionStrategy == CompressionStrategy.Filtered || (match_length == MIN_MATCH && strstart - match_start > 4096))) {  	// If prev_match is also MIN_MATCH' match_start is garbage  	// but we will ignore the current match anyway.  	match_length = MIN_MATCH - 1;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: if (prev_length >= MIN_MATCH && match_length <= prev_length) {  	int max_insert = strstart + lookahead - MIN_MATCH;  	// Do not insert strings in hash table beyond this.  	//          check_match(strstart-1' prev_match' prev_length);  	bflush = _tr_tally (strstart - 1 - prev_match' prev_length - MIN_MATCH);  	// Insert in hash table all strings up to the end of the match.  	// strstart-1 and strstart are already inserted. If there is not  	// enough lookahead' the last two strings are not inserted in  	// the hash table.  	lookahead -= (prev_length - 1);  	prev_length -= 2;  	do {  		if (++strstart <= max_insert) {  			ins_h = (((ins_h) << hash_shift) ^ (window [(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;  			//prev[strstart&w_mask]=hash_head=head[ins_h];  			hash_head = (head [ins_h] & 0xffff);  			prev [strstart & w_mask] = head [ins_h];  			head [ins_h] = unchecked((short)strstart);  		}  	} while (--prev_length != 0);  	match_available = 0;  	match_length = MIN_MATCH - 1;  	strstart++;  	if (bflush) {  		flush_block_only (false);  		if (_codec.AvailableBytesOut == 0)  			return BlockState.NeedMore;  	}  } else if (match_available != 0) {  	// If there was no match at the previous position' output a  	// single literal. If there was a match but the current match  	// is longer' truncate the previous match to a single literal.  	bflush = _tr_tally (0' window [strstart - 1] & 0xff);  	if (bflush) {  		flush_block_only (false);  	}  	strstart++;  	lookahead--;  	if (_codec.AvailableBytesOut == 0)  		return BlockState.NeedMore;  } else {  	// There is no previous match to compare with' wait for  	// the next step to decide.  	match_available = 1;  	strstart++;  	lookahead--;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,DeflateSlow,The following statement contains a magic number: prev_length -= 2;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The following statement contains a magic number: if (prev_length >= config.GoodLength) {  	chain_length >>= 2;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The following statement contains a magic number: chain_length >>= 2;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The following statement contains a magic number: do {  	match = cur_match;  	// Skip to next match if the match length cannot increase  	// or if the match length is less than 2:  	if (window [match + best_len] != scan_end || window [match + best_len - 1] != scan_end1 || window [match] != window [scan] || window [++match] != window [scan + 1])  		continue;  	// The check at best_len-1 can be removed because it will be made  	// again later. (This heuristic is not always a win.)  	// It is not necessary to compare scan[2] and match[2] since they  	// are always equal when the other bytes match' given that  	// the hash keys are equal and that HASH_BITS >= 8.  	scan += 2;  	match++;  	// We check for insufficient lookahead only every 8th comparison;  	// the 256th check will be made at strstart+258.  	do {  	} while (window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && window [++scan] == window [++match] && scan < strend);  	len = MAX_MATCH - (int)(strend - scan);  	scan = strend - MAX_MATCH;  	if (len > best_len) {  		match_start = cur_match;  		best_len = len;  		if (len >= niceLength)  			break;  		scan_end1 = window [scan + best_len - 1];  		scan_end = window [scan + best_len];  	}  } while ((cur_match = (prev [cur_match & wmask] & 0xffff)) > limit && --chain_length != 0);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,longest_match,The following statement contains a magic number: scan += 2;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: if (windowBits < 9 || windowBits > 15)  	throw new ZlibException ("windowBits must be in the range 9..15.");  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: if (windowBits < 9 || windowBits > 15)  	throw new ZlibException ("windowBits must be in the range 9..15.");  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: hash_bits = memLevel + 7;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: window = new byte[w_size * 2];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: lit_bufsize = 1 << (memLevel + 6);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: pending = new byte[lit_bufsize * 4];  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Initialize,The following statement contains a magic number: _lengthOffset = (1 + 2) * lit_bufsize;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (status == INIT_STATE) {  	int header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;  	int level_flags = (((int)compressionLevel - 1) & 0xff) >> 1;  	if (level_flags > 3)  		level_flags = 3;  	header |= (level_flags << 6);  	if (strstart != 0)  		header |= PRESET_DICT;  	header += 31 - (header % 31);  	status = BUSY_STATE;  	//putShortMSB(header);  	unchecked {  		pending [pendingCount++] = (byte)(header >> 8);  		pending [pendingCount++] = (byte)header;  	}  	// Save the adler32 of the preset dictionary:  	if (strstart != 0) {  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  		pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  		pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  	}  	_codec._Adler32 = Adler.Adler32 (0' null' 0' 0);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (level_flags > 3)  	level_flags = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (level_flags > 3)  	level_flags = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: level_flags = 3;  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: header |= (level_flags << 6);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: header += 31 - (header % 31);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: header += 31 - (header % 31);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: unchecked {  	pending [pendingCount++] = (byte)(header >> 8);  	pending [pendingCount++] = (byte)header;  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)(header >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (strstart != 0) {  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  	pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (strstart != 0) {  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  	pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: if (strstart != 0) {  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  	pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  	pending [pendingCount++] = (byte)(_codec._Adler32 & 0x000000FF);  }  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)((_codec._Adler32 & 0xFF000000) >> 24);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)((_codec._Adler32 & 0x00FF0000) >> 16);  
Magic Number,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,Deflate,The following statement contains a magic number: pending [pendingCount++] = (byte)((_codec._Adler32 & 0x0000FF00) >> 8);  
Magic Number,Ionic.Zlib,GZipStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\GZipStream.cs,EmitHeader,The following statement contains a magic number: header [i++] = 8;  
Magic Number,Ionic.Zlib,GZipStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\GZipStream.cs,EmitHeader,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (timet)' 0' header' i' 4);  
Magic Number,Ionic.Zlib,GZipStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\GZipStream.cs,EmitHeader,The following statement contains a magic number: i += 4;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateBlocks,The following statement contains a magic number: hufts = new int[MANY * 3];  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateBlockMode.TYPE:  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = (int)(b & 7);  		last = t & 1;  		switch ((uint)t >> 1) {  		case 0:  			// stored  			b >>= 3;  			k -= (3);  			t = k & 7;  			// go to byte boundary  			b >>= t;  			k -= t;  			mode = InflateBlockMode.LENS;  			// get length of stored block  			break;  		case 1:  			// fixed  			int[] bl = new int[1];  			int[] bd = new int[1];  			int[][] tl = new int[1][];  			int[][] td = new int[1][];  			InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  			codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.CODES;  			break;  		case 2:  			// dynamic  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.TABLE;  			break;  		case 3:  			// illegal  			b >>= 3;  			k -= 3;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid block type";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		break;  	case InflateBlockMode.LENS:  		while (k < (32)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			;  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid stored block lengths";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		left = (b & 0xffff);  		b = k = 0;  		// dump bits  		mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  		break;  	case InflateBlockMode.STORED:  		if (n == 0) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		if (m == 0) {  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				writeAt = q;  				r = Flush (r);  				q = writeAt;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  				if (q == end && readAt != 0) {  					q = 0;  					m = (int)(q < readAt ? readAt - q - 1 : end - q);  				}  				if (m == 0) {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		t = left;  		if (t > n)  			t = n;  		if (t > m)  			t = m;  		Array.Copy (_codec.InputBuffer' p' window' q' t);  		p += t;  		n -= t;  		q += t;  		m -= t;  		if ((left -= t) != 0)  			break;  		mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  		break;  	case InflateBlockMode.TABLE:  		while (k < (14)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		table = t = (b & 0x3fff);  		if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  			mode = InflateBlockMode.BAD;  			_codec.Message = "too many length or distance symbols";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  		if (blens == null || blens.Length < t) {  			blens = new int[t];  		} else {  			Array.Clear (blens' 0' t);  			// for (int i = 0; i < t; i++)  			// {  			//     blens[i] = 0;  			// }  		}  		b >>= 14;  		k -= 14;  		index = 0;  		mode = InflateBlockMode.BTREE;  		goto case InflateBlockMode.BTREE;  	case InflateBlockMode.BTREE:  		while (index < 4 + (table >> 10)) {  			while (k < (3)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			blens [border [index++]] = b & 7;  			b >>= 3;  			k -= 3;  		}  		while (index < 19) {  			blens [border [index++]] = 0;  		}  		bb [0] = 7;  		t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			r = t;  			if (r == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		index = 0;  		mode = InflateBlockMode.DTREE;  		goto case InflateBlockMode.DTREE;  	case InflateBlockMode.DTREE:  		while (true) {  			t = table;  			if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  				break;  			}  			int i' j' c;  			t = bb [0];  			while (k < t) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  			c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  			if (c < 16) {  				b >>= t;  				k -= t;  				blens [index++] = c;  			} else {  				// c == 16..18  				i = c == 18 ? 7 : c - 14;  				j = c == 18 ? 11 : 3;  				while (k < (t + i)) {  					if (n != 0) {  						r = ZlibConstants.Z_OK;  					} else {  						bitb = b;  						bitk = k;  						_codec.AvailableBytesIn = n;  						_codec.TotalBytesIn += p - _codec.NextIn;  						_codec.NextIn = p;  						writeAt = q;  						return Flush (r);  					}  					n--;  					b |= (_codec.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				b >>= t;  				k -= t;  				j += (b & InternalInflateConstants.InflateMask [i]);  				b >>= i;  				k -= i;  				i = index;  				t = table;  				if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  					blens = null;  					mode = InflateBlockMode.BAD;  					_codec.Message = "invalid bit length repeat";  					r = ZlibConstants.Z_DATA_ERROR;  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				c = (c == 16) ? blens [i - 1] : 0;  				do {  					blens [i++] = c;  				} while (--j != 0);  				index = i;  			}  		}  		tb [0] = -1;  		{  			int[] bl = new int[] {  				9  			};  			// must be <= 9 for lookahead assumptions  			int[] bd = new int[] {  				6  			};  			// must be <= 9 for lookahead assumptions  			int[] tl = new int[1];  			int[] td = new int[1];  			t = table;  			t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  			if (t != ZlibConstants.Z_OK) {  				if (t == ZlibConstants.Z_DATA_ERROR) {  					blens = null;  					mode = InflateBlockMode.BAD;  				}  				r = t;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  		}  		mode = InflateBlockMode.CODES;  		goto case InflateBlockMode.CODES;  	case InflateBlockMode.CODES:  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		r = codes.Process (this' r);  		if (r != ZlibConstants.Z_STREAM_END) {  			return Flush (r);  		}  		r = ZlibConstants.Z_OK;  		p = _codec.NextIn;  		n = _codec.AvailableBytesIn;  		b = bitb;  		k = bitk;  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (last == 0) {  			mode = InflateBlockMode.TYPE;  			break;  		}  		mode = InflateBlockMode.DRY;  		goto case InflateBlockMode.DRY;  	case InflateBlockMode.DRY:  		writeAt = q;  		r = Flush (r);  		q = writeAt;  		m = (int)(q < readAt ? readAt - q - 1 : end - q);  		if (readAt != writeAt) {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		mode = InflateBlockMode.DONE;  		goto case InflateBlockMode.DONE;  	case InflateBlockMode.DONE:  		r = ZlibConstants.Z_STREAM_END;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	case InflateBlockMode.BAD:  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  case InflateBlockMode.TYPE:  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = (int)(b & 7);  	last = t & 1;  	switch ((uint)t >> 1) {  	case 0:  		// stored  		b >>= 3;  		k -= (3);  		t = k & 7;  		// go to byte boundary  		b >>= t;  		k -= t;  		mode = InflateBlockMode.LENS;  		// get length of stored block  		break;  	case 1:  		// fixed  		int[] bl = new int[1];  		int[] bd = new int[1];  		int[][] tl = new int[1][];  		int[][] td = new int[1][];  		InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  		codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.CODES;  		break;  	case 2:  		// dynamic  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.TABLE;  		break;  	case 3:  		// illegal  		b >>= 3;  		k -= 3;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid block type";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	break;  case InflateBlockMode.LENS:  	while (k < (32)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		;  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid stored block lengths";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	left = (b & 0xffff);  	b = k = 0;  	// dump bits  	mode = left != 0 ? InflateBlockMode.STORED : (last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE);  	break;  case InflateBlockMode.STORED:  	if (n == 0) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	if (m == 0) {  		if (q == end && readAt != 0) {  			q = 0;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  		}  		if (m == 0) {  			writeAt = q;  			r = Flush (r);  			q = writeAt;  			m = (int)(q < readAt ? readAt - q - 1 : end - q);  			if (q == end && readAt != 0) {  				q = 0;  				m = (int)(q < readAt ? readAt - q - 1 : end - q);  			}  			if (m == 0) {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	t = left;  	if (t > n)  		t = n;  	if (t > m)  		t = m;  	Array.Copy (_codec.InputBuffer' p' window' q' t);  	p += t;  	n -= t;  	q += t;  	m -= t;  	if ((left -= t) != 0)  		break;  	mode = last != 0 ? InflateBlockMode.DRY : InflateBlockMode.TYPE;  	break;  case InflateBlockMode.TABLE:  	while (k < (14)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	table = t = (b & 0x3fff);  	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  		mode = InflateBlockMode.BAD;  		_codec.Message = "too many length or distance symbols";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  	if (blens == null || blens.Length < t) {  		blens = new int[t];  	} else {  		Array.Clear (blens' 0' t);  		// for (int i = 0; i < t; i++)  		// {  		//     blens[i] = 0;  		// }  	}  	b >>= 14;  	k -= 14;  	index = 0;  	mode = InflateBlockMode.BTREE;  	goto case InflateBlockMode.BTREE;  case InflateBlockMode.BTREE:  	while (index < 4 + (table >> 10)) {  		while (k < (3)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		blens [border [index++]] = b & 7;  		b >>= 3;  		k -= 3;  	}  	while (index < 19) {  		blens [border [index++]] = 0;  	}  	bb [0] = 7;  	t = inftree.inflate_trees_bits (blens' bb' tb' hufts' _codec);  	if (t != ZlibConstants.Z_OK) {  		r = t;  		if (r == ZlibConstants.Z_DATA_ERROR) {  			blens = null;  			mode = InflateBlockMode.BAD;  		}  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	index = 0;  	mode = InflateBlockMode.DTREE;  	goto case InflateBlockMode.DTREE;  case InflateBlockMode.DTREE:  	while (true) {  		t = table;  		if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  			break;  		}  		int i' j' c;  		t = bb [0];  		while (k < t) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  		c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  		if (c < 16) {  			b >>= t;  			k -= t;  			blens [index++] = c;  		} else {  			// c == 16..18  			i = c == 18 ? 7 : c - 14;  			j = c == 18 ? 11 : 3;  			while (k < (t + i)) {  				if (n != 0) {  					r = ZlibConstants.Z_OK;  				} else {  					bitb = b;  					bitk = k;  					_codec.AvailableBytesIn = n;  					_codec.TotalBytesIn += p - _codec.NextIn;  					_codec.NextIn = p;  					writeAt = q;  					return Flush (r);  				}  				n--;  				b |= (_codec.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			b >>= t;  			k -= t;  			j += (b & InternalInflateConstants.InflateMask [i]);  			b >>= i;  			k -= i;  			i = index;  			t = table;  			if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  				blens = null;  				mode = InflateBlockMode.BAD;  				_codec.Message = "invalid bit length repeat";  				r = ZlibConstants.Z_DATA_ERROR;  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			c = (c == 16) ? blens [i - 1] : 0;  			do {  				blens [i++] = c;  			} while (--j != 0);  			index = i;  		}  	}  	tb [0] = -1;  	{  		int[] bl = new int[] {  			9  		};  		// must be <= 9 for lookahead assumptions  		int[] bd = new int[] {  			6  		};  		// must be <= 9 for lookahead assumptions  		int[] tl = new int[1];  		int[] td = new int[1];  		t = table;  		t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  		if (t != ZlibConstants.Z_OK) {  			if (t == ZlibConstants.Z_DATA_ERROR) {  				blens = null;  				mode = InflateBlockMode.BAD;  			}  			r = t;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		codes.Init (bl [0]' bd [0]' hufts' tl [0]' hufts' td [0]);  	}  	mode = InflateBlockMode.CODES;  	goto case InflateBlockMode.CODES;  case InflateBlockMode.CODES:  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	r = codes.Process (this' r);  	if (r != ZlibConstants.Z_STREAM_END) {  		return Flush (r);  	}  	r = ZlibConstants.Z_OK;  	p = _codec.NextIn;  	n = _codec.AvailableBytesIn;  	b = bitb;  	k = bitk;  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (last == 0) {  		mode = InflateBlockMode.TYPE;  		break;  	}  	mode = InflateBlockMode.DRY;  	goto case InflateBlockMode.DRY;  case InflateBlockMode.DRY:  	writeAt = q;  	r = Flush (r);  	q = writeAt;  	m = (int)(q < readAt ? readAt - q - 1 : end - q);  	if (readAt != writeAt) {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	mode = InflateBlockMode.DONE;  	goto case InflateBlockMode.DONE;  case InflateBlockMode.DONE:  	r = ZlibConstants.Z_STREAM_END;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  case InflateBlockMode.BAD:  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (3)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (3)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = (int)(b & 7);  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: b >>= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= (3);  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = k & 7;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: b >>= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: b >>= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: b >>= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (32)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	;  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (32)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	;  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((((~b) >> 16) & 0xffff) != (b & 0xffff)) {  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid stored block lengths";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (14)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (14)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  	mode = InflateBlockMode.BAD;  	_codec.Message = "too many length or distance symbols";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  	mode = InflateBlockMode.BAD;  	_codec.Message = "too many length or distance symbols";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {  	mode = InflateBlockMode.BAD;  	_codec.Message = "too many length or distance symbols";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: b >>= 14;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= 14;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 4 + (table >> 10)) {  	while (k < (3)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	blens [border [index++]] = b & 7;  	b >>= 3;  	k -= 3;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (3)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (3)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: blens [border [index++]] = b & 7;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: b >>= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (index < 19) {  	blens [border [index++]] = 0;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: bb [0] = 7;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	t = table;  	if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  		break;  	}  	int i' j' c;  	t = bb [0];  	while (k < t) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  	c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  	if (c < 16) {  		b >>= t;  		k -= t;  		blens [index++] = c;  	} else {  		// c == 16..18  		i = c == 18 ? 7 : c - 14;  		j = c == 18 ? 11 : 3;  		while (k < (t + i)) {  			if (n != 0) {  				r = ZlibConstants.Z_OK;  			} else {  				bitb = b;  				bitk = k;  				_codec.AvailableBytesIn = n;  				_codec.TotalBytesIn += p - _codec.NextIn;  				_codec.NextIn = p;  				writeAt = q;  				return Flush (r);  			}  			n--;  			b |= (_codec.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		b >>= t;  		k -= t;  		j += (b & InternalInflateConstants.InflateMask [i]);  		b >>= i;  		k -= i;  		i = index;  		t = table;  		if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  			blens = null;  			mode = InflateBlockMode.BAD;  			_codec.Message = "invalid bit length repeat";  			r = ZlibConstants.Z_DATA_ERROR;  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		c = (c == 16) ? blens [i - 1] : 0;  		do {  			blens [i++] = c;  		} while (--j != 0);  		index = i;  	}  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  	break;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (!(index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))) {  	break;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < t) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 1];  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: c = hufts [(tb [0] + (b & InternalInflateConstants.InflateMask [t])) * 3 + 2];  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (c < 16) {  	b >>= t;  	k -= t;  	blens [index++] = c;  } else {  	// c == 16..18  	i = c == 18 ? 7 : c - 14;  	j = c == 18 ? 11 : 3;  	while (k < (t + i)) {  		if (n != 0) {  			r = ZlibConstants.Z_OK;  		} else {  			bitb = b;  			bitk = k;  			_codec.AvailableBytesIn = n;  			_codec.TotalBytesIn += p - _codec.NextIn;  			_codec.NextIn = p;  			writeAt = q;  			return Flush (r);  		}  		n--;  		b |= (_codec.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	b >>= t;  	k -= t;  	j += (b & InternalInflateConstants.InflateMask [i]);  	b >>= i;  	k -= i;  	i = index;  	t = table;  	if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  		blens = null;  		mode = InflateBlockMode.BAD;  		_codec.Message = "invalid bit length repeat";  		r = ZlibConstants.Z_DATA_ERROR;  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	c = (c == 16) ? blens [i - 1] : 0;  	do {  		blens [i++] = c;  	} while (--j != 0);  	index = i;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: i = c == 18 ? 7 : c - 14;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: i = c == 18 ? 7 : c - 14;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: i = c == 18 ? 7 : c - 14;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: j = c == 18 ? 11 : 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: j = c == 18 ? 11 : 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: j = c == 18 ? 11 : 3;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < (t + i)) {  	if (n != 0) {  		r = ZlibConstants.Z_OK;  	} else {  		bitb = b;  		bitk = k;  		_codec.AvailableBytesIn = n;  		_codec.TotalBytesIn += p - _codec.NextIn;  		_codec.NextIn = p;  		writeAt = q;  		return Flush (r);  	}  	n--;  	b |= (_codec.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  	blens = null;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid bit length repeat";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  	blens = null;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid bit length repeat";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {  	blens = null;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid bit length repeat";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: c = (c == 16) ? blens [i - 1] : 0;  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: t = inftree.inflate_trees_dynamic (257 + (t & 0x1f)' 1 + ((t >> 5) & 0x1f)' blens' bl' bd' tl' td' hufts' _codec);  
Magic Number,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Flush,The following statement contains a magic number: for (int pass = 0; pass < 2; pass++) {  	if (pass == 0) {  		// compute number of bytes to copy as far as end of window  		nBytes = (int)((readAt <= writeAt ? writeAt : end) - readAt);  	} else {  		// compute bytes to copy  		nBytes = writeAt - readAt;  	}  	// workitem 8870  	if (nBytes == 0) {  		if (r == ZlibConstants.Z_BUF_ERROR)  			r = ZlibConstants.Z_OK;  		return r;  	}  	if (nBytes > _codec.AvailableBytesOut)  		nBytes = _codec.AvailableBytesOut;  	if (nBytes != 0 && r == ZlibConstants.Z_BUF_ERROR)  		r = ZlibConstants.Z_OK;  	// update counters  	_codec.AvailableBytesOut -= nBytes;  	_codec.TotalBytesOut += nBytes;  	// update check information  	if (checkfn != null)  		_codec._Adler32 = check = Adler.Adler32 (check' window' readAt' nBytes);  	// copy as far as end of window  	Array.Copy (window' readAt' _codec.OutputBuffer' _codec.NextOut' nBytes);  	_codec.NextOut += nBytes;  	readAt += nBytes;  	// see if more to copy at beginning of window  	if (readAt == end && pass == 0) {  		// wrap pointers  		readAt = 0;  		if (writeAt == end)  			writeAt = 0;  	} else  		pass++;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (true) {  	switch (mode) {  	// waiting for "i:"=input' "o:"=output' "x:"=nothing  	case START:  		// x: set up for LEN  		if (m >= 258 && n >= 10) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  			p = z.NextIn;  			n = z.AvailableBytesIn;  			b = blocks.bitb;  			k = blocks.bitk;  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (r != ZlibConstants.Z_OK) {  				mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  				break;  			}  		}  		need = lbits;  		tree = ltree;  		tree_index = ltree_index;  		mode = LEN;  		goto case LEN;  	case LEN:  		// i: get length/literal/eob next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= (tree [tindex + 1]);  		k -= (tree [tindex + 1]);  		e = tree [tindex];  		if (e == 0) {  			// literal  			lit = tree [tindex + 2];  			mode = LIT;  			break;  		}  		if ((e & 16) != 0) {  			// length  			bitsToGet = e & 15;  			len = tree [tindex + 2];  			mode = LENEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		if ((e & 32) != 0) {  			// end of block  			mode = WASH;  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid literal/length code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case LENEXT:  		// i: getting length extra (have base)  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		len += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		need = dbits;  		tree = dtree;  		tree_index = dtree_index;  		mode = DIST;  		goto case DIST;  	case DIST:  		// i: get distance next  		j = need;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  		b >>= tree [tindex + 1];  		k -= tree [tindex + 1];  		e = (tree [tindex]);  		if ((e & 0x10) != 0) {  			// distance  			bitsToGet = e & 15;  			dist = tree [tindex + 2];  			mode = DISTEXT;  			break;  		}  		if ((e & 64) == 0) {  			// next table  			need = e;  			tree_index = tindex / 3 + tree [tindex + 2];  			break;  		}  		mode = BADCODE;  		// invalid code  		z.Message = "invalid distance code";  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case DISTEXT:  		// i: getting distance extra  		j = bitsToGet;  		while (k < j) {  			if (n != 0)  				r = ZlibConstants.Z_OK;  			else {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		dist += (b & InternalInflateConstants.InflateMask [j]);  		b >>= j;  		k -= j;  		mode = COPY;  		goto case COPY;  	case COPY:  		// o: copying bytes in window' waiting for space  		f = q - dist;  		while (f < 0) {  			// modulo window size-"while" instead  			f += blocks.end;  			// of "if" handles invalid distances  		}  		while (len != 0) {  			if (m == 0) {  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.writeAt = q;  					r = blocks.Flush (r);  					q = blocks.writeAt;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					if (q == blocks.end && blocks.readAt != 0) {  						q = 0;  						m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  					}  					if (m == 0) {  						blocks.bitb = b;  						blocks.bitk = k;  						z.AvailableBytesIn = n;  						z.TotalBytesIn += p - z.NextIn;  						z.NextIn = p;  						blocks.writeAt = q;  						return blocks.Flush (r);  					}  				}  			}  			blocks.window [q++] = blocks.window [f++];  			m--;  			if (f == blocks.end)  				f = 0;  			len--;  		}  		mode = START;  		break;  	case LIT:  		// o: got literal' waiting for output space  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		r = ZlibConstants.Z_OK;  		blocks.window [q++] = (byte)lit;  		m--;  		mode = START;  		break;  	case WASH:  		// o: got eob' possibly more output  		if (k > 7) {  			// return unused byte' if any  			k -= 8;  			n++;  			p--;  			// can always return one  		}  		blocks.writeAt = q;  		r = blocks.Flush (r);  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (blocks.readAt != blocks.writeAt) {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		mode = END;  		goto case END;  	case END:  		r = ZlibConstants.Z_STREAM_END;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	case BADCODE:  		// x: got error  		r = ZlibConstants.Z_DATA_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	default:  		r = ZlibConstants.Z_STREAM_ERROR;  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: switch (mode) {  // waiting for "i:"=input' "o:"=output' "x:"=nothing  case START:  	// x: set up for LEN  	if (m >= 258 && n >= 10) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  		p = z.NextIn;  		n = z.AvailableBytesIn;  		b = blocks.bitb;  		k = blocks.bitk;  		q = blocks.writeAt;  		m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		if (r != ZlibConstants.Z_OK) {  			mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  			break;  		}  	}  	need = lbits;  	tree = ltree;  	tree_index = ltree_index;  	mode = LEN;  	goto case LEN;  case LEN:  	// i: get length/literal/eob next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= (tree [tindex + 1]);  	k -= (tree [tindex + 1]);  	e = tree [tindex];  	if (e == 0) {  		// literal  		lit = tree [tindex + 2];  		mode = LIT;  		break;  	}  	if ((e & 16) != 0) {  		// length  		bitsToGet = e & 15;  		len = tree [tindex + 2];  		mode = LENEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	if ((e & 32) != 0) {  		// end of block  		mode = WASH;  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid literal/length code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case LENEXT:  	// i: getting length extra (have base)  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	len += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	need = dbits;  	tree = dtree;  	tree_index = dtree_index;  	mode = DIST;  	goto case DIST;  case DIST:  	// i: get distance next  	j = need;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  	b >>= tree [tindex + 1];  	k -= tree [tindex + 1];  	e = (tree [tindex]);  	if ((e & 0x10) != 0) {  		// distance  		bitsToGet = e & 15;  		dist = tree [tindex + 2];  		mode = DISTEXT;  		break;  	}  	if ((e & 64) == 0) {  		// next table  		need = e;  		tree_index = tindex / 3 + tree [tindex + 2];  		break;  	}  	mode = BADCODE;  	// invalid code  	z.Message = "invalid distance code";  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case DISTEXT:  	// i: getting distance extra  	j = bitsToGet;  	while (k < j) {  		if (n != 0)  			r = ZlibConstants.Z_OK;  		else {  			blocks.bitb = b;  			blocks.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			blocks.writeAt = q;  			return blocks.Flush (r);  		}  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	dist += (b & InternalInflateConstants.InflateMask [j]);  	b >>= j;  	k -= j;  	mode = COPY;  	goto case COPY;  case COPY:  	// o: copying bytes in window' waiting for space  	f = q - dist;  	while (f < 0) {  		// modulo window size-"while" instead  		f += blocks.end;  		// of "if" handles invalid distances  	}  	while (len != 0) {  		if (m == 0) {  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.writeAt = q;  				r = blocks.Flush (r);  				q = blocks.writeAt;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				if (q == blocks.end && blocks.readAt != 0) {  					q = 0;  					m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  				}  				if (m == 0) {  					blocks.bitb = b;  					blocks.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					blocks.writeAt = q;  					return blocks.Flush (r);  				}  			}  		}  		blocks.window [q++] = blocks.window [f++];  		m--;  		if (f == blocks.end)  			f = 0;  		len--;  	}  	mode = START;  	break;  case LIT:  	// o: got literal' waiting for output space  	if (m == 0) {  		if (q == blocks.end && blocks.readAt != 0) {  			q = 0;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  		}  		if (m == 0) {  			blocks.writeAt = q;  			r = blocks.Flush (r);  			q = blocks.writeAt;  			m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			if (q == blocks.end && blocks.readAt != 0) {  				q = 0;  				m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  			}  			if (m == 0) {  				blocks.bitb = b;  				blocks.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				blocks.writeAt = q;  				return blocks.Flush (r);  			}  		}  	}  	r = ZlibConstants.Z_OK;  	blocks.window [q++] = (byte)lit;  	m--;  	mode = START;  	break;  case WASH:  	// o: got eob' possibly more output  	if (k > 7) {  		// return unused byte' if any  		k -= 8;  		n++;  		p--;  		// can always return one  	}  	blocks.writeAt = q;  	r = blocks.Flush (r);  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (blocks.readAt != blocks.writeAt) {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	mode = END;  	goto case END;  case END:  	r = ZlibConstants.Z_STREAM_END;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  case BADCODE:  	// x: got error  	r = ZlibConstants.Z_DATA_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  default:  	r = ZlibConstants.Z_STREAM_ERROR;  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	return blocks.Flush (r);  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (m >= 258 && n >= 10) {  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  	p = z.NextIn;  	n = z.AvailableBytesIn;  	b = blocks.bitb;  	k = blocks.bitk;  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (r != ZlibConstants.Z_OK) {  		mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  		break;  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (m >= 258 && n >= 10) {  	blocks.bitb = b;  	blocks.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	blocks.writeAt = q;  	r = InflateFast (lbits' dbits' ltree' ltree_index' dtree' dtree_index' blocks' z);  	p = z.NextIn;  	n = z.AvailableBytesIn;  	b = blocks.bitb;  	k = blocks.bitk;  	q = blocks.writeAt;  	m = q < blocks.readAt ? blocks.readAt - q - 1 : blocks.end - q;  	if (r != ZlibConstants.Z_OK) {  		mode = (r == ZlibConstants.Z_STREAM_END) ? WASH : BADCODE;  		break;  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < j) {  	if (n != 0)  		r = ZlibConstants.Z_OK;  	else {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (e == 0) {  	// literal  	lit = tree [tindex + 2];  	mode = LIT;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: lit = tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 16) != 0) {  	// length  	bitsToGet = e & 15;  	len = tree [tindex + 2];  	mode = LENEXT;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 16) != 0) {  	// length  	bitsToGet = e & 15;  	len = tree [tindex + 2];  	mode = LENEXT;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 16) != 0) {  	// length  	bitsToGet = e & 15;  	len = tree [tindex + 2];  	mode = LENEXT;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: bitsToGet = e & 15;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: len = tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 64) == 0) {  	// next table  	need = e;  	tree_index = tindex / 3 + tree [tindex + 2];  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 64) == 0) {  	// next table  	need = e;  	tree_index = tindex / 3 + tree [tindex + 2];  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 64) == 0) {  	// next table  	need = e;  	tree_index = tindex / 3 + tree [tindex + 2];  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: tree_index = tindex / 3 + tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: tree_index = tindex / 3 + tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 32) != 0) {  	// end of block  	mode = WASH;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < j) {  	if (n != 0)  		r = ZlibConstants.Z_OK;  	else {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < j) {  	if (n != 0)  		r = ZlibConstants.Z_OK;  	else {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: tindex = (tree_index + (b & InternalInflateConstants.InflateMask [j])) * 3;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 0x10) != 0) {  	// distance  	bitsToGet = e & 15;  	dist = tree [tindex + 2];  	mode = DISTEXT;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 0x10) != 0) {  	// distance  	bitsToGet = e & 15;  	dist = tree [tindex + 2];  	mode = DISTEXT;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: bitsToGet = e & 15;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: dist = tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 64) == 0) {  	// next table  	need = e;  	tree_index = tindex / 3 + tree [tindex + 2];  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 64) == 0) {  	// next table  	need = e;  	tree_index = tindex / 3 + tree [tindex + 2];  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if ((e & 64) == 0) {  	// next table  	need = e;  	tree_index = tindex / 3 + tree [tindex + 2];  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: tree_index = tindex / 3 + tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: tree_index = tindex / 3 + tree [tindex + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: while (k < j) {  	if (n != 0)  		r = ZlibConstants.Z_OK;  	else {  		blocks.bitb = b;  		blocks.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		blocks.writeAt = q;  		return blocks.Flush (r);  	}  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (k > 7) {  	// return unused byte' if any  	k -= 8;  	n++;  	p--;  	// can always return one  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: if (k > 7) {  	// return unused byte' if any  	k -= 8;  	n++;  	p--;  	// can always return one  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following statement contains a magic number: k -= 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	// assume called with m >= 258 && n >= 10  	// get literal/length code  	while (k < (20)) {  		// max bits for literal/length code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & ml;  	tp = tl;  	tp_index = tl_index;  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		continue;  	}  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			e &= 15;  			c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// decode distance base of block to copy  			while (k < 15) {  				// max bits for distance code  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			t = b & md;  			tp = td;  			tp_index = td_index;  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  			do {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				if ((e & 16) != 0) {  					// get extra bits to add to distance base  					e &= 15;  					while (k < e) {  						// get extra bits (up to 13)  						n--;  						b |= (z.InputBuffer [p++] & 0xff) << k;  						k += 8;  					}  					d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  					b >>= e;  					k -= e;  					// do the copy  					m -= c;  					if (q >= d) {  						// offset before dest  						//  just copy  						r = q - d;  						if (q - r > 0 && 2 > (q - r)) {  							s.window [q++] = s.window [r++];  							// minimum count is three'  							s.window [q++] = s.window [r++];  							// so unroll loop a little  							c -= 2;  						} else {  							Array.Copy (s.window' r' s.window' q' 2);  							q += 2;  							r += 2;  							c -= 2;  						}  					} else {  						// else offset after destination  						r = q - d;  						do {  							r += s.end;  							// force pointer in window  						} while (r < 0);  						// covers invalid distances  						e = s.end - r;  						if (c > e) {  							// if source crosses'  							c -= e;  							// wrapped copy  							if (q - r > 0 && e > (q - r)) {  								do {  									s.window [q++] = s.window [r++];  								} while (--e != 0);  							} else {  								Array.Copy (s.window' r' s.window' q' e);  								q += e;  								r += e;  								e = 0;  							}  							r = 0;  							// copy rest from start of window  						}  					}  					// copy all or what's left  					if (q - r > 0 && c > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--c != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' c);  						q += c;  						r += c;  						c = 0;  					}  					break;  				} else if ((e & 64) == 0) {  					t += tp [tp_index_t_3 + 2];  					t += (b & InternalInflateConstants.InflateMask [e]);  					tp_index_t_3 = (tp_index + t) * 3;  					e = tp [tp_index_t_3];  				} else {  					z.Message = "invalid distance code";  					c = z.AvailableBytesIn - n;  					c = (k >> 3) < c ? k >> 3 : c;  					n += c;  					p -= c;  					k -= (c << 3);  					s.bitb = b;  					s.bitk = k;  					z.AvailableBytesIn = n;  					z.TotalBytesIn += p - z.NextIn;  					z.NextIn = p;  					s.writeAt = q;  					return ZlibConstants.Z_DATA_ERROR;  				}  			} while (true);  			break;  		}  		if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			if ((e = tp [tp_index_t_3]) == 0) {  				b >>= (tp [tp_index_t_3 + 1]);  				k -= (tp [tp_index_t_3 + 1]);  				s.window [q++] = (byte)tp [tp_index_t_3 + 2];  				m--;  				break;  			}  		} else if ((e & 32) != 0) {  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_STREAM_END;  		} else {  			z.Message = "invalid literal/length code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  } while (m >= 258 && n >= 10);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: while (k < (20)) {  	// max bits for literal/length code  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: while (k < (20)) {  	// max bits for literal/length code  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: tp_index_t_3 = (tp_index + t) * 3;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e = tp [tp_index_t_3]) == 0) {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	s.window [q++] = (byte)tp [tp_index_t_3 + 2];  	m--;  	continue;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: s.window [q++] = (byte)tp [tp_index_t_3 + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		e &= 15;  		c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// decode distance base of block to copy  		while (k < 15) {  			// max bits for distance code  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		t = b & md;  		tp = td;  		tp_index = td_index;  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  		do {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			if ((e & 16) != 0) {  				// get extra bits to add to distance base  				e &= 15;  				while (k < e) {  					// get extra bits (up to 13)  					n--;  					b |= (z.InputBuffer [p++] & 0xff) << k;  					k += 8;  				}  				d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  				b >>= e;  				k -= e;  				// do the copy  				m -= c;  				if (q >= d) {  					// offset before dest  					//  just copy  					r = q - d;  					if (q - r > 0 && 2 > (q - r)) {  						s.window [q++] = s.window [r++];  						// minimum count is three'  						s.window [q++] = s.window [r++];  						// so unroll loop a little  						c -= 2;  					} else {  						Array.Copy (s.window' r' s.window' q' 2);  						q += 2;  						r += 2;  						c -= 2;  					}  				} else {  					// else offset after destination  					r = q - d;  					do {  						r += s.end;  						// force pointer in window  					} while (r < 0);  					// covers invalid distances  					e = s.end - r;  					if (c > e) {  						// if source crosses'  						c -= e;  						// wrapped copy  						if (q - r > 0 && e > (q - r)) {  							do {  								s.window [q++] = s.window [r++];  							} while (--e != 0);  						} else {  							Array.Copy (s.window' r' s.window' q' e);  							q += e;  							r += e;  							e = 0;  						}  						r = 0;  						// copy rest from start of window  					}  				}  				// copy all or what's left  				if (q - r > 0 && c > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--c != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' c);  					q += c;  					r += c;  					c = 0;  				}  				break;  			} else if ((e & 64) == 0) {  				t += tp [tp_index_t_3 + 2];  				t += (b & InternalInflateConstants.InflateMask [e]);  				tp_index_t_3 = (tp_index + t) * 3;  				e = tp [tp_index_t_3];  			} else {  				z.Message = "invalid distance code";  				c = z.AvailableBytesIn - n;  				c = (k >> 3) < c ? k >> 3 : c;  				n += c;  				p -= c;  				k -= (c << 3);  				s.bitb = b;  				s.bitk = k;  				z.AvailableBytesIn = n;  				z.TotalBytesIn += p - z.NextIn;  				z.NextIn = p;  				s.writeAt = q;  				return ZlibConstants.Z_DATA_ERROR;  			}  		} while (true);  		break;  	}  	if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		if ((e = tp [tp_index_t_3]) == 0) {  			b >>= (tp [tp_index_t_3 + 1]);  			k -= (tp [tp_index_t_3 + 1]);  			s.window [q++] = (byte)tp [tp_index_t_3 + 2];  			m--;  			break;  		}  	} else if ((e & 32) != 0) {  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_STREAM_END;  	} else {  		z.Message = "invalid literal/length code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	e &= 15;  	c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// decode distance base of block to copy  	while (k < 15) {  		// max bits for distance code  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	t = b & md;  	tp = td;  	tp_index = td_index;  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  	do {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		if ((e & 16) != 0) {  			// get extra bits to add to distance base  			e &= 15;  			while (k < e) {  				// get extra bits (up to 13)  				n--;  				b |= (z.InputBuffer [p++] & 0xff) << k;  				k += 8;  			}  			d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  			b >>= e;  			k -= e;  			// do the copy  			m -= c;  			if (q >= d) {  				// offset before dest  				//  just copy  				r = q - d;  				if (q - r > 0 && 2 > (q - r)) {  					s.window [q++] = s.window [r++];  					// minimum count is three'  					s.window [q++] = s.window [r++];  					// so unroll loop a little  					c -= 2;  				} else {  					Array.Copy (s.window' r' s.window' q' 2);  					q += 2;  					r += 2;  					c -= 2;  				}  			} else {  				// else offset after destination  				r = q - d;  				do {  					r += s.end;  					// force pointer in window  				} while (r < 0);  				// covers invalid distances  				e = s.end - r;  				if (c > e) {  					// if source crosses'  					c -= e;  					// wrapped copy  					if (q - r > 0 && e > (q - r)) {  						do {  							s.window [q++] = s.window [r++];  						} while (--e != 0);  					} else {  						Array.Copy (s.window' r' s.window' q' e);  						q += e;  						r += e;  						e = 0;  					}  					r = 0;  					// copy rest from start of window  				}  			}  			// copy all or what's left  			if (q - r > 0 && c > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--c != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' c);  				q += c;  				r += c;  				c = 0;  			}  			break;  		} else if ((e & 64) == 0) {  			t += tp [tp_index_t_3 + 2];  			t += (b & InternalInflateConstants.InflateMask [e]);  			tp_index_t_3 = (tp_index + t) * 3;  			e = tp [tp_index_t_3];  		} else {  			z.Message = "invalid distance code";  			c = z.AvailableBytesIn - n;  			c = (k >> 3) < c ? k >> 3 : c;  			n += c;  			p -= c;  			k -= (c << 3);  			s.bitb = b;  			s.bitk = k;  			z.AvailableBytesIn = n;  			z.TotalBytesIn += p - z.NextIn;  			z.NextIn = p;  			s.writeAt = q;  			return ZlibConstants.Z_DATA_ERROR;  		}  	} while (true);  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: e &= 15;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = tp [tp_index_t_3 + 2] + ((int)b & InternalInflateConstants.InflateMask [e]);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: while (k < 15) {  	// max bits for distance code  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: while (k < 15) {  	// max bits for distance code  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: tp_index_t_3 = (tp_index + t) * 3;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: do {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	if ((e & 16) != 0) {  		// get extra bits to add to distance base  		e &= 15;  		while (k < e) {  			// get extra bits (up to 13)  			n--;  			b |= (z.InputBuffer [p++] & 0xff) << k;  			k += 8;  		}  		d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  		b >>= e;  		k -= e;  		// do the copy  		m -= c;  		if (q >= d) {  			// offset before dest  			//  just copy  			r = q - d;  			if (q - r > 0 && 2 > (q - r)) {  				s.window [q++] = s.window [r++];  				// minimum count is three'  				s.window [q++] = s.window [r++];  				// so unroll loop a little  				c -= 2;  			} else {  				Array.Copy (s.window' r' s.window' q' 2);  				q += 2;  				r += 2;  				c -= 2;  			}  		} else {  			// else offset after destination  			r = q - d;  			do {  				r += s.end;  				// force pointer in window  			} while (r < 0);  			// covers invalid distances  			e = s.end - r;  			if (c > e) {  				// if source crosses'  				c -= e;  				// wrapped copy  				if (q - r > 0 && e > (q - r)) {  					do {  						s.window [q++] = s.window [r++];  					} while (--e != 0);  				} else {  					Array.Copy (s.window' r' s.window' q' e);  					q += e;  					r += e;  					e = 0;  				}  				r = 0;  				// copy rest from start of window  			}  		}  		// copy all or what's left  		if (q - r > 0 && c > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--c != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' c);  			q += c;  			r += c;  			c = 0;  		}  		break;  	} else if ((e & 64) == 0) {  		t += tp [tp_index_t_3 + 2];  		t += (b & InternalInflateConstants.InflateMask [e]);  		tp_index_t_3 = (tp_index + t) * 3;  		e = tp [tp_index_t_3];  	} else {  		z.Message = "invalid distance code";  		c = z.AvailableBytesIn - n;  		c = (k >> 3) < c ? k >> 3 : c;  		n += c;  		p -= c;  		k -= (c << 3);  		s.bitb = b;  		s.bitk = k;  		z.AvailableBytesIn = n;  		z.TotalBytesIn += p - z.NextIn;  		z.NextIn = p;  		s.writeAt = q;  		return ZlibConstants.Z_DATA_ERROR;  	}  } while (true);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 16) != 0) {  	// get extra bits to add to distance base  	e &= 15;  	while (k < e) {  		// get extra bits (up to 13)  		n--;  		b |= (z.InputBuffer [p++] & 0xff) << k;  		k += 8;  	}  	d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  	b >>= e;  	k -= e;  	// do the copy  	m -= c;  	if (q >= d) {  		// offset before dest  		//  just copy  		r = q - d;  		if (q - r > 0 && 2 > (q - r)) {  			s.window [q++] = s.window [r++];  			// minimum count is three'  			s.window [q++] = s.window [r++];  			// so unroll loop a little  			c -= 2;  		} else {  			Array.Copy (s.window' r' s.window' q' 2);  			q += 2;  			r += 2;  			c -= 2;  		}  	} else {  		// else offset after destination  		r = q - d;  		do {  			r += s.end;  			// force pointer in window  		} while (r < 0);  		// covers invalid distances  		e = s.end - r;  		if (c > e) {  			// if source crosses'  			c -= e;  			// wrapped copy  			if (q - r > 0 && e > (q - r)) {  				do {  					s.window [q++] = s.window [r++];  				} while (--e != 0);  			} else {  				Array.Copy (s.window' r' s.window' q' e);  				q += e;  				r += e;  				e = 0;  			}  			r = 0;  			// copy rest from start of window  		}  	}  	// copy all or what's left  	if (q - r > 0 && c > (q - r)) {  		do {  			s.window [q++] = s.window [r++];  		} while (--c != 0);  	} else {  		Array.Copy (s.window' r' s.window' q' c);  		q += c;  		r += c;  		c = 0;  	}  	break;  } else if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: e &= 15;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: while (k < e) {  	// get extra bits (up to 13)  	n--;  	b |= (z.InputBuffer [p++] & 0xff) << k;  	k += 8;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k += 8;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: d = tp [tp_index_t_3 + 2] + (b & InternalInflateConstants.InflateMask [e]);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q >= d) {  	// offset before dest  	//  just copy  	r = q - d;  	if (q - r > 0 && 2 > (q - r)) {  		s.window [q++] = s.window [r++];  		// minimum count is three'  		s.window [q++] = s.window [r++];  		// so unroll loop a little  		c -= 2;  	} else {  		Array.Copy (s.window' r' s.window' q' 2);  		q += 2;  		r += 2;  		c -= 2;  	}  } else {  	// else offset after destination  	r = q - d;  	do {  		r += s.end;  		// force pointer in window  	} while (r < 0);  	// covers invalid distances  	e = s.end - r;  	if (c > e) {  		// if source crosses'  		c -= e;  		// wrapped copy  		if (q - r > 0 && e > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--e != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' e);  			q += e;  			r += e;  			e = 0;  		}  		r = 0;  		// copy rest from start of window  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q >= d) {  	// offset before dest  	//  just copy  	r = q - d;  	if (q - r > 0 && 2 > (q - r)) {  		s.window [q++] = s.window [r++];  		// minimum count is three'  		s.window [q++] = s.window [r++];  		// so unroll loop a little  		c -= 2;  	} else {  		Array.Copy (s.window' r' s.window' q' 2);  		q += 2;  		r += 2;  		c -= 2;  	}  } else {  	// else offset after destination  	r = q - d;  	do {  		r += s.end;  		// force pointer in window  	} while (r < 0);  	// covers invalid distances  	e = s.end - r;  	if (c > e) {  		// if source crosses'  		c -= e;  		// wrapped copy  		if (q - r > 0 && e > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--e != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' e);  			q += e;  			r += e;  			e = 0;  		}  		r = 0;  		// copy rest from start of window  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q >= d) {  	// offset before dest  	//  just copy  	r = q - d;  	if (q - r > 0 && 2 > (q - r)) {  		s.window [q++] = s.window [r++];  		// minimum count is three'  		s.window [q++] = s.window [r++];  		// so unroll loop a little  		c -= 2;  	} else {  		Array.Copy (s.window' r' s.window' q' 2);  		q += 2;  		r += 2;  		c -= 2;  	}  } else {  	// else offset after destination  	r = q - d;  	do {  		r += s.end;  		// force pointer in window  	} while (r < 0);  	// covers invalid distances  	e = s.end - r;  	if (c > e) {  		// if source crosses'  		c -= e;  		// wrapped copy  		if (q - r > 0 && e > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--e != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' e);  			q += e;  			r += e;  			e = 0;  		}  		r = 0;  		// copy rest from start of window  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q >= d) {  	// offset before dest  	//  just copy  	r = q - d;  	if (q - r > 0 && 2 > (q - r)) {  		s.window [q++] = s.window [r++];  		// minimum count is three'  		s.window [q++] = s.window [r++];  		// so unroll loop a little  		c -= 2;  	} else {  		Array.Copy (s.window' r' s.window' q' 2);  		q += 2;  		r += 2;  		c -= 2;  	}  } else {  	// else offset after destination  	r = q - d;  	do {  		r += s.end;  		// force pointer in window  	} while (r < 0);  	// covers invalid distances  	e = s.end - r;  	if (c > e) {  		// if source crosses'  		c -= e;  		// wrapped copy  		if (q - r > 0 && e > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--e != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' e);  			q += e;  			r += e;  			e = 0;  		}  		r = 0;  		// copy rest from start of window  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q >= d) {  	// offset before dest  	//  just copy  	r = q - d;  	if (q - r > 0 && 2 > (q - r)) {  		s.window [q++] = s.window [r++];  		// minimum count is three'  		s.window [q++] = s.window [r++];  		// so unroll loop a little  		c -= 2;  	} else {  		Array.Copy (s.window' r' s.window' q' 2);  		q += 2;  		r += 2;  		c -= 2;  	}  } else {  	// else offset after destination  	r = q - d;  	do {  		r += s.end;  		// force pointer in window  	} while (r < 0);  	// covers invalid distances  	e = s.end - r;  	if (c > e) {  		// if source crosses'  		c -= e;  		// wrapped copy  		if (q - r > 0 && e > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--e != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' e);  			q += e;  			r += e;  			e = 0;  		}  		r = 0;  		// copy rest from start of window  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q >= d) {  	// offset before dest  	//  just copy  	r = q - d;  	if (q - r > 0 && 2 > (q - r)) {  		s.window [q++] = s.window [r++];  		// minimum count is three'  		s.window [q++] = s.window [r++];  		// so unroll loop a little  		c -= 2;  	} else {  		Array.Copy (s.window' r' s.window' q' 2);  		q += 2;  		r += 2;  		c -= 2;  	}  } else {  	// else offset after destination  	r = q - d;  	do {  		r += s.end;  		// force pointer in window  	} while (r < 0);  	// covers invalid distances  	e = s.end - r;  	if (c > e) {  		// if source crosses'  		c -= e;  		// wrapped copy  		if (q - r > 0 && e > (q - r)) {  			do {  				s.window [q++] = s.window [r++];  			} while (--e != 0);  		} else {  			Array.Copy (s.window' r' s.window' q' e);  			q += e;  			r += e;  			e = 0;  		}  		r = 0;  		// copy rest from start of window  	}  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q - r > 0 && 2 > (q - r)) {  	s.window [q++] = s.window [r++];  	// minimum count is three'  	s.window [q++] = s.window [r++];  	// so unroll loop a little  	c -= 2;  } else {  	Array.Copy (s.window' r' s.window' q' 2);  	q += 2;  	r += 2;  	c -= 2;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q - r > 0 && 2 > (q - r)) {  	s.window [q++] = s.window [r++];  	// minimum count is three'  	s.window [q++] = s.window [r++];  	// so unroll loop a little  	c -= 2;  } else {  	Array.Copy (s.window' r' s.window' q' 2);  	q += 2;  	r += 2;  	c -= 2;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q - r > 0 && 2 > (q - r)) {  	s.window [q++] = s.window [r++];  	// minimum count is three'  	s.window [q++] = s.window [r++];  	// so unroll loop a little  	c -= 2;  } else {  	Array.Copy (s.window' r' s.window' q' 2);  	q += 2;  	r += 2;  	c -= 2;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q - r > 0 && 2 > (q - r)) {  	s.window [q++] = s.window [r++];  	// minimum count is three'  	s.window [q++] = s.window [r++];  	// so unroll loop a little  	c -= 2;  } else {  	Array.Copy (s.window' r' s.window' q' 2);  	q += 2;  	r += 2;  	c -= 2;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q - r > 0 && 2 > (q - r)) {  	s.window [q++] = s.window [r++];  	// minimum count is three'  	s.window [q++] = s.window [r++];  	// so unroll loop a little  	c -= 2;  } else {  	Array.Copy (s.window' r' s.window' q' 2);  	q += 2;  	r += 2;  	c -= 2;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if (q - r > 0 && 2 > (q - r)) {  	s.window [q++] = s.window [r++];  	// minimum count is three'  	s.window [q++] = s.window [r++];  	// so unroll loop a little  	c -= 2;  } else {  	Array.Copy (s.window' r' s.window' q' 2);  	q += 2;  	r += 2;  	c -= 2;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c -= 2;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: Array.Copy (s.window' r' s.window' q' 2);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: q += 2;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: r += 2;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c -= 2;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	e = tp [tp_index_t_3];  } else {  	z.Message = "invalid distance code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: t += tp [tp_index_t_3 + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: tp_index_t_3 = (tp_index + t) * 3;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k -= (c << 3);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 64) == 0) {  	t += tp [tp_index_t_3 + 2];  	t += (b & InternalInflateConstants.InflateMask [e]);  	tp_index_t_3 = (tp_index + t) * 3;  	if ((e = tp [tp_index_t_3]) == 0) {  		b >>= (tp [tp_index_t_3 + 1]);  		k -= (tp [tp_index_t_3 + 1]);  		s.window [q++] = (byte)tp [tp_index_t_3 + 2];  		m--;  		break;  	}  } else if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: t += tp [tp_index_t_3 + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: tp_index_t_3 = (tp_index + t) * 3;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e = tp [tp_index_t_3]) == 0) {  	b >>= (tp [tp_index_t_3 + 1]);  	k -= (tp [tp_index_t_3 + 1]);  	s.window [q++] = (byte)tp [tp_index_t_3 + 2];  	m--;  	break;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: s.window [q++] = (byte)tp [tp_index_t_3 + 2];  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: if ((e & 32) != 0) {  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_STREAM_END;  } else {  	z.Message = "invalid literal/length code";  	c = z.AvailableBytesIn - n;  	c = (k >> 3) < c ? k >> 3 : c;  	n += c;  	p -= c;  	k -= (c << 3);  	s.bitb = b;  	s.bitk = k;  	z.AvailableBytesIn = n;  	z.TotalBytesIn += p - z.NextIn;  	z.NextIn = p;  	s.writeAt = q;  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k -= (c << 3);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k -= (c << 3);  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: c = (k >> 3) < c ? k >> 3 : c;  
Magic Number,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,InflateFast,The following statement contains a magic number: k -= (c << 3);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Initialize,The following statement contains a magic number: if (w < 8 || w > 15) {  	End ();  	throw new ZlibException ("Bad window size.");  	//return ZlibConstants.Z_STREAM_ERROR;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Initialize,The following statement contains a magic number: if (w < 8 || w > 15) {  	End ();  	throw new ZlibException ("Bad window size.");  	//return ZlibConstants.Z_STREAM_ERROR;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: while (true) {  	switch (mode) {  	case InflateManagerMode.METHOD:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  			marker = 5;  			// can't try inflateSync  			break;  		}  		if ((method >> 4) + 8 > wbits) {  			mode = InflateManagerMode.BAD;  			_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.FLAG;  		break;  	case InflateManagerMode.FLAG:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  		if ((((method << 8) + b) % 31) != 0) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect header check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  		break;  	case InflateManagerMode.DICT4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.DICT3;  		break;  	case InflateManagerMode.DICT3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.DICT2;  		break;  	case InflateManagerMode.DICT2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.DICT1;  		break;  	case InflateManagerMode.DICT1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		_codec._Adler32 = expectedCheck;  		mode = InflateManagerMode.DICT0;  		return ZlibConstants.Z_NEED_DICT;  	case InflateManagerMode.DICT0:  		mode = InflateManagerMode.BAD;  		_codec.Message = "need dictionary";  		marker = 0;  		// can try inflateSync  		return ZlibConstants.Z_STREAM_ERROR;  	case InflateManagerMode.BLOCKS:  		r = blocks.Process (r);  		if (r == ZlibConstants.Z_DATA_ERROR) {  			mode = InflateManagerMode.BAD;  			marker = 0;  			// can try inflateSync  			break;  		}  		if (r == ZlibConstants.Z_OK)  			r = f;  		if (r != ZlibConstants.Z_STREAM_END)  			return r;  		r = f;  		computedCheck = blocks.Reset ();  		if (!HandleRfc1950HeaderBytes) {  			mode = InflateManagerMode.DONE;  			return ZlibConstants.Z_STREAM_END;  		}  		mode = InflateManagerMode.CHECK4;  		break;  	case InflateManagerMode.CHECK4:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  		mode = InflateManagerMode.CHECK3;  		break;  	case InflateManagerMode.CHECK3:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  		mode = InflateManagerMode.CHECK2;  		break;  	case InflateManagerMode.CHECK2:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  		mode = InflateManagerMode.CHECK1;  		break;  	case InflateManagerMode.CHECK1:  		if (_codec.AvailableBytesIn == 0)  			return r;  		r = f;  		_codec.AvailableBytesIn--;  		_codec.TotalBytesIn++;  		expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  		if (computedCheck != expectedCheck) {  			mode = InflateManagerMode.BAD;  			_codec.Message = "incorrect data check";  			marker = 5;  			// can't try inflateSync  			break;  		}  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.DONE:  		return ZlibConstants.Z_STREAM_END;  	case InflateManagerMode.BAD:  		throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  	default:  		throw new ZlibException ("Stream error.");  	}  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: switch (mode) {  case InflateManagerMode.METHOD:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  		marker = 5;  		// can't try inflateSync  		break;  	}  	if ((method >> 4) + 8 > wbits) {  		mode = InflateManagerMode.BAD;  		_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.FLAG;  	break;  case InflateManagerMode.FLAG:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	b = (_codec.InputBuffer [_codec.NextIn++]) & 0xff;  	if ((((method << 8) + b) % 31) != 0) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect header check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = ((b & PRESET_DICT) == 0) ? InflateManagerMode.BLOCKS : InflateManagerMode.DICT4;  	break;  case InflateManagerMode.DICT4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.DICT3;  	break;  case InflateManagerMode.DICT3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.DICT2;  	break;  case InflateManagerMode.DICT2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.DICT1;  	break;  case InflateManagerMode.DICT1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	_codec._Adler32 = expectedCheck;  	mode = InflateManagerMode.DICT0;  	return ZlibConstants.Z_NEED_DICT;  case InflateManagerMode.DICT0:  	mode = InflateManagerMode.BAD;  	_codec.Message = "need dictionary";  	marker = 0;  	// can try inflateSync  	return ZlibConstants.Z_STREAM_ERROR;  case InflateManagerMode.BLOCKS:  	r = blocks.Process (r);  	if (r == ZlibConstants.Z_DATA_ERROR) {  		mode = InflateManagerMode.BAD;  		marker = 0;  		// can try inflateSync  		break;  	}  	if (r == ZlibConstants.Z_OK)  		r = f;  	if (r != ZlibConstants.Z_STREAM_END)  		return r;  	r = f;  	computedCheck = blocks.Reset ();  	if (!HandleRfc1950HeaderBytes) {  		mode = InflateManagerMode.DONE;  		return ZlibConstants.Z_STREAM_END;  	}  	mode = InflateManagerMode.CHECK4;  	break;  case InflateManagerMode.CHECK4:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  	mode = InflateManagerMode.CHECK3;  	break;  case InflateManagerMode.CHECK3:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  	mode = InflateManagerMode.CHECK2;  	break;  case InflateManagerMode.CHECK2:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  	mode = InflateManagerMode.CHECK1;  	break;  case InflateManagerMode.CHECK1:  	if (_codec.AvailableBytesIn == 0)  		return r;  	r = f;  	_codec.AvailableBytesIn--;  	_codec.TotalBytesIn++;  	expectedCheck += (uint)(_codec.InputBuffer [_codec.NextIn++] & 0x000000ff);  	if (computedCheck != expectedCheck) {  		mode = InflateManagerMode.BAD;  		_codec.Message = "incorrect data check";  		marker = 5;  		// can't try inflateSync  		break;  	}  	mode = InflateManagerMode.DONE;  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.DONE:  	return ZlibConstants.Z_STREAM_END;  case InflateManagerMode.BAD:  	throw new ZlibException (String.Format ("Bad state ({0})"' _codec.Message));  default:  	throw new ZlibException ("Stream error.");  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if (((method = _codec.InputBuffer [_codec.NextIn++]) & 0xf) != Z_DEFLATED) {  	mode = InflateManagerMode.BAD;  	_codec.Message = String.Format ("unknown compression method (0x{0:X2})"' method);  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: marker = 5;  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((method >> 4) + 8 > wbits) {  	mode = InflateManagerMode.BAD;  	_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((method >> 4) + 8 > wbits) {  	mode = InflateManagerMode.BAD;  	_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((method >> 4) + 8 > wbits) {  	mode = InflateManagerMode.BAD;  	_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((method >> 4) + 8 > wbits) {  	mode = InflateManagerMode.BAD;  	_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((method >> 4) + 8 > wbits) {  	mode = InflateManagerMode.BAD;  	_codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: _codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: _codec.Message = String.Format ("invalid window size ({0})"' (method >> 4) + 8);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: marker = 5;  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((((method << 8) + b) % 31) != 0) {  	mode = InflateManagerMode.BAD;  	_codec.Message = "incorrect header check";  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((((method << 8) + b) % 31) != 0) {  	mode = InflateManagerMode.BAD;  	_codec.Message = "incorrect header check";  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if ((((method << 8) + b) % 31) != 0) {  	mode = InflateManagerMode.BAD;  	_codec.Message = "incorrect header check";  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: marker = 5;  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: expectedCheck = (uint)((_codec.InputBuffer [_codec.NextIn++] << 24) & 0xff000000);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 16) & 0x00ff0000);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: expectedCheck += (uint)((_codec.InputBuffer [_codec.NextIn++] << 8) & 0x0000ff00);  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: if (computedCheck != expectedCheck) {  	mode = InflateManagerMode.BAD;  	_codec.Message = "incorrect data check";  	marker = 5;  	// can't try inflateSync  	break;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Inflate,The following statement contains a magic number: marker = 5;  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Sync,The following statement contains a magic number: while (n != 0 && m < 4) {  	if (_codec.InputBuffer [p] == mark [m]) {  		m++;  	} else if (_codec.InputBuffer [p] != 0) {  		m = 0;  	} else {  		m = 4 - m;  	}  	p++;  	n--;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Sync,The following statement contains a magic number: while (n != 0 && m < 4) {  	if (_codec.InputBuffer [p] == mark [m]) {  		m++;  	} else if (_codec.InputBuffer [p] != 0) {  		m = 0;  	} else {  		m = 4 - m;  	}  	p++;  	n--;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Sync,The following statement contains a magic number: if (_codec.InputBuffer [p] == mark [m]) {  	m++;  } else if (_codec.InputBuffer [p] != 0) {  	m = 0;  } else {  	m = 4 - m;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Sync,The following statement contains a magic number: if (_codec.InputBuffer [p] != 0) {  	m = 0;  } else {  	m = 4 - m;  }  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Sync,The following statement contains a magic number: m = 4 - m;  
Magic Number,Ionic.Zlib,InflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Sync,The following statement contains a magic number: if (m != 4) {  	return ZlibConstants.Z_DATA_ERROR;  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: xp = 2;  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (; k <= g; k++) {  	a = c [k];  	while (a-- != 0) {  		// here i is the Huffman code of length k bits for value *p  		// make tables up to required level  		while (k > w + l) {  			h++;  			w += l;  			// previous table always l bits  			// compute minimum size table less than or equal to l bits  			z = g - w;  			z = (z > l) ? l : z;  			// table size upper limit  			if ((f = 1 << (j = k - w)) > a + 1) {  				// try a k-w bit table  				// too few codes for k-w bit table  				f -= (a + 1);  				// deduct codes from patterns left  				xp = k;  				if (j < z) {  					while (++j < z) {  						// try smaller tables up to z bits  						if ((f <<= 1) <= c [++xp])  							break;  						// enough codes to use up j bits  						f -= c [xp];  						// else deduct codes from patterns  					}  				}  			}  			z = 1 << j;  			// table entries for j-bit table  			// allocate new table  			if (hn [0] + z > MANY) {  				// (note: doesn't matter for fixed)  				return Z_DATA_ERROR;  				// overflow of MANY  			}  			u [h] = q = hn [0];  			// DEBUG  			hn [0] += z;  			// connect to last table' if there is one  			if (h != 0) {  				x [h] = i;  				// save pattern for backing up  				r [0] = (sbyte)j;  				// bits in this table  				r [1] = (sbyte)l;  				// bits to dump before this table  				j = SharedUtils.URShift (i' (w - l));  				r [2] = (int)(q - u [h - 1] - j);  				// offset to this table  				Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  				// connect to last table  			} else {  				t [0] = q;  				// first table is returned result  			}  		}  		// set up table entry in r  		r [1] = (sbyte)(k - w);  		if (p >= n) {  			r [0] = 128 + 64;  			// out of values--invalid code  		} else if (v [p] < s) {  			r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  			// 256 is end-of-block  			r [2] = v [p++];  			// simple code is just the value  		} else {  			r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  			// non-simple--look up in lists  			r [2] = d [v [p++] - s];  		}  		// fill code-like entries with r  		f = 1 << (k - w);  		for (j = SharedUtils.URShift (i' w); j < z; j += f) {  			Array.Copy (r' 0' hp' (q + j) * 3' 3);  		}  		// backwards increment the k-bit code i  		for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  			i ^= j;  		}  		i ^= j;  		// backup over finished tables  		mask = (1 << w) - 1;  		// needed on HP' cc -O bug  		while ((i & mask) != x [h]) {  			h--;  			// don't need to update q  			w -= l;  			mask = (1 << w) - 1;  		}  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (a-- != 0) {  	// here i is the Huffman code of length k bits for value *p  	// make tables up to required level  	while (k > w + l) {  		h++;  		w += l;  		// previous table always l bits  		// compute minimum size table less than or equal to l bits  		z = g - w;  		z = (z > l) ? l : z;  		// table size upper limit  		if ((f = 1 << (j = k - w)) > a + 1) {  			// try a k-w bit table  			// too few codes for k-w bit table  			f -= (a + 1);  			// deduct codes from patterns left  			xp = k;  			if (j < z) {  				while (++j < z) {  					// try smaller tables up to z bits  					if ((f <<= 1) <= c [++xp])  						break;  					// enough codes to use up j bits  					f -= c [xp];  					// else deduct codes from patterns  				}  			}  		}  		z = 1 << j;  		// table entries for j-bit table  		// allocate new table  		if (hn [0] + z > MANY) {  			// (note: doesn't matter for fixed)  			return Z_DATA_ERROR;  			// overflow of MANY  		}  		u [h] = q = hn [0];  		// DEBUG  		hn [0] += z;  		// connect to last table' if there is one  		if (h != 0) {  			x [h] = i;  			// save pattern for backing up  			r [0] = (sbyte)j;  			// bits in this table  			r [1] = (sbyte)l;  			// bits to dump before this table  			j = SharedUtils.URShift (i' (w - l));  			r [2] = (int)(q - u [h - 1] - j);  			// offset to this table  			Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  			// connect to last table  		} else {  			t [0] = q;  			// first table is returned result  		}  	}  	// set up table entry in r  	r [1] = (sbyte)(k - w);  	if (p >= n) {  		r [0] = 128 + 64;  		// out of values--invalid code  	} else if (v [p] < s) {  		r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  		// 256 is end-of-block  		r [2] = v [p++];  		// simple code is just the value  	} else {  		r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  		// non-simple--look up in lists  		r [2] = d [v [p++] - s];  	}  	// fill code-like entries with r  	f = 1 << (k - w);  	for (j = SharedUtils.URShift (i' w); j < z; j += f) {  		Array.Copy (r' 0' hp' (q + j) * 3' 3);  	}  	// backwards increment the k-bit code i  	for (j = 1 << (k - 1); (i & j) != 0; j = SharedUtils.URShift (j' 1)) {  		i ^= j;  	}  	i ^= j;  	// backup over finished tables  	mask = (1 << w) - 1;  	// needed on HP' cc -O bug  	while ((i & mask) != x [h]) {  		h--;  		// don't need to update q  		w -= l;  		mask = (1 << w) - 1;  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (k > w + l) {  	h++;  	w += l;  	// previous table always l bits  	// compute minimum size table less than or equal to l bits  	z = g - w;  	z = (z > l) ? l : z;  	// table size upper limit  	if ((f = 1 << (j = k - w)) > a + 1) {  		// try a k-w bit table  		// too few codes for k-w bit table  		f -= (a + 1);  		// deduct codes from patterns left  		xp = k;  		if (j < z) {  			while (++j < z) {  				// try smaller tables up to z bits  				if ((f <<= 1) <= c [++xp])  					break;  				// enough codes to use up j bits  				f -= c [xp];  				// else deduct codes from patterns  			}  		}  	}  	z = 1 << j;  	// table entries for j-bit table  	// allocate new table  	if (hn [0] + z > MANY) {  		// (note: doesn't matter for fixed)  		return Z_DATA_ERROR;  		// overflow of MANY  	}  	u [h] = q = hn [0];  	// DEBUG  	hn [0] += z;  	// connect to last table' if there is one  	if (h != 0) {  		x [h] = i;  		// save pattern for backing up  		r [0] = (sbyte)j;  		// bits in this table  		r [1] = (sbyte)l;  		// bits to dump before this table  		j = SharedUtils.URShift (i' (w - l));  		r [2] = (int)(q - u [h - 1] - j);  		// offset to this table  		Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  		// connect to last table  	} else {  		t [0] = q;  		// first table is returned result  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (k > w + l) {  	h++;  	w += l;  	// previous table always l bits  	// compute minimum size table less than or equal to l bits  	z = g - w;  	z = (z > l) ? l : z;  	// table size upper limit  	if ((f = 1 << (j = k - w)) > a + 1) {  		// try a k-w bit table  		// too few codes for k-w bit table  		f -= (a + 1);  		// deduct codes from patterns left  		xp = k;  		if (j < z) {  			while (++j < z) {  				// try smaller tables up to z bits  				if ((f <<= 1) <= c [++xp])  					break;  				// enough codes to use up j bits  				f -= c [xp];  				// else deduct codes from patterns  			}  		}  	}  	z = 1 << j;  	// table entries for j-bit table  	// allocate new table  	if (hn [0] + z > MANY) {  		// (note: doesn't matter for fixed)  		return Z_DATA_ERROR;  		// overflow of MANY  	}  	u [h] = q = hn [0];  	// DEBUG  	hn [0] += z;  	// connect to last table' if there is one  	if (h != 0) {  		x [h] = i;  		// save pattern for backing up  		r [0] = (sbyte)j;  		// bits in this table  		r [1] = (sbyte)l;  		// bits to dump before this table  		j = SharedUtils.URShift (i' (w - l));  		r [2] = (int)(q - u [h - 1] - j);  		// offset to this table  		Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  		// connect to last table  	} else {  		t [0] = q;  		// first table is returned result  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: while (k > w + l) {  	h++;  	w += l;  	// previous table always l bits  	// compute minimum size table less than or equal to l bits  	z = g - w;  	z = (z > l) ? l : z;  	// table size upper limit  	if ((f = 1 << (j = k - w)) > a + 1) {  		// try a k-w bit table  		// too few codes for k-w bit table  		f -= (a + 1);  		// deduct codes from patterns left  		xp = k;  		if (j < z) {  			while (++j < z) {  				// try smaller tables up to z bits  				if ((f <<= 1) <= c [++xp])  					break;  				// enough codes to use up j bits  				f -= c [xp];  				// else deduct codes from patterns  			}  		}  	}  	z = 1 << j;  	// table entries for j-bit table  	// allocate new table  	if (hn [0] + z > MANY) {  		// (note: doesn't matter for fixed)  		return Z_DATA_ERROR;  		// overflow of MANY  	}  	u [h] = q = hn [0];  	// DEBUG  	hn [0] += z;  	// connect to last table' if there is one  	if (h != 0) {  		x [h] = i;  		// save pattern for backing up  		r [0] = (sbyte)j;  		// bits in this table  		r [1] = (sbyte)l;  		// bits to dump before this table  		j = SharedUtils.URShift (i' (w - l));  		r [2] = (int)(q - u [h - 1] - j);  		// offset to this table  		Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  		// connect to last table  	} else {  		t [0] = q;  		// first table is returned result  	}  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (h != 0) {  	x [h] = i;  	// save pattern for backing up  	r [0] = (sbyte)j;  	// bits in this table  	r [1] = (sbyte)l;  	// bits to dump before this table  	j = SharedUtils.URShift (i' (w - l));  	r [2] = (int)(q - u [h - 1] - j);  	// offset to this table  	Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  	// connect to last table  } else {  	t [0] = q;  	// first table is returned result  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (h != 0) {  	x [h] = i;  	// save pattern for backing up  	r [0] = (sbyte)j;  	// bits in this table  	r [1] = (sbyte)l;  	// bits to dump before this table  	j = SharedUtils.URShift (i' (w - l));  	r [2] = (int)(q - u [h - 1] - j);  	// offset to this table  	Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  	// connect to last table  } else {  	t [0] = q;  	// first table is returned result  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (h != 0) {  	x [h] = i;  	// save pattern for backing up  	r [0] = (sbyte)j;  	// bits in this table  	r [1] = (sbyte)l;  	// bits to dump before this table  	j = SharedUtils.URShift (i' (w - l));  	r [2] = (int)(q - u [h - 1] - j);  	// offset to this table  	Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  	// connect to last table  } else {  	t [0] = q;  	// first table is returned result  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [2] = (int)(q - u [h - 1] - j);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: Array.Copy (r' 0' hp' (u [h - 1] + j) * 3' 3);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (p >= n) {  	r [0] = 128 + 64;  	// out of values--invalid code  } else if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = 128 + 64;  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = 128 + 64;  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: if (v [p] < s) {  	r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  	// 256 is end-of-block  	r [2] = v [p++];  	// simple code is just the value  } else {  	r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  	// non-simple--look up in lists  	r [2] = d [v [p++] - s];  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = (sbyte)(v [p] < 256 ? 0 : 32 + 64);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [2] = v [p++];  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [0] = (sbyte)(e [v [p] - s] + 16 + 64);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: r [2] = d [v [p++] - s];  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (j = SharedUtils.URShift (i' w); j < z; j += f) {  	Array.Copy (r' 0' hp' (q + j) * 3' 3);  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: for (j = SharedUtils.URShift (i' w); j < z; j += f) {  	Array.Copy (r' 0' hp' (q + j) * 3' 3);  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: Array.Copy (r' 0' hp' (q + j) * 3' 3);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,huft_build,The following statement contains a magic number: Array.Copy (r' 0' hp' (q + j) * 3' 3);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_bits,The following statement contains a magic number: initWorkArea (19);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_bits,The following statement contains a magic number: result = huft_build (c' 0' 19' 19' null' null' tb' bb' hp' hn' v);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_bits,The following statement contains a magic number: result = huft_build (c' 0' 19' 19' null' null' tb' bb' hp' hn' v);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_dynamic,The following statement contains a magic number: initWorkArea (288);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_dynamic,The following statement contains a magic number: result = huft_build (c' 0' nl' 257' cplens' cplext' tl' bl' hp' hn' v);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_dynamic,The following statement contains a magic number: initWorkArea (288);  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,inflate_trees_dynamic,The following statement contains a magic number: if (result != Z_OK || (bd [0] == 0 && nl > 257)) {  	if (result == Z_DATA_ERROR) {  		z.Message = "oversubscribed distance tree";  	} else if (result == Z_BUF_ERROR) {  		z.Message = "incomplete distance tree";  		result = Z_DATA_ERROR;  	} else if (result != Z_MEM_ERROR) {  		z.Message = "empty distance tree with lengths";  		result = Z_DATA_ERROR;  	}  	return result;  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,initWorkArea,The following statement contains a magic number: if (hn == null) {  	hn = new int[1];  	v = new int[vsize];  	c = new int[BMAX + 1];  	r = new int[3];  	u = new int[BMAX];  	x = new int[BMAX + 1];  } else {  	if (v.Length < vsize) {  		v = new int[vsize];  	}  	Array.Clear (v' 0' vsize);  	Array.Clear (c' 0' BMAX + 1);  	r [0] = 0;  	r [1] = 0;  	r [2] = 0;  	//  for(int i=0; i<BMAX; i++){u[i]=0;}  	//Array.Copy(c' 0' u' 0' BMAX);  	Array.Clear (u' 0' BMAX);  	//  for(int i=0; i<BMAX+1; i++){x[i]=0;}  	//Array.Copy(c' 0' x' 0' BMAX + 1);  	Array.Clear (x' 0' BMAX + 1);  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,initWorkArea,The following statement contains a magic number: if (hn == null) {  	hn = new int[1];  	v = new int[vsize];  	c = new int[BMAX + 1];  	r = new int[3];  	u = new int[BMAX];  	x = new int[BMAX + 1];  } else {  	if (v.Length < vsize) {  		v = new int[vsize];  	}  	Array.Clear (v' 0' vsize);  	Array.Clear (c' 0' BMAX + 1);  	r [0] = 0;  	r [1] = 0;  	r [2] = 0;  	//  for(int i=0; i<BMAX; i++){u[i]=0;}  	//Array.Copy(c' 0' u' 0' BMAX);  	Array.Clear (u' 0' BMAX);  	//  for(int i=0; i<BMAX+1; i++){x[i]=0;}  	//Array.Copy(c' 0' x' 0' BMAX + 1);  	Array.Clear (x' 0' BMAX + 1);  }  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,initWorkArea,The following statement contains a magic number: r = new int[3];  
Magic Number,Ionic.Zlib,InfTree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\InfTree.cs,initWorkArea,The following statement contains a magic number: r [2] = 0;  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,ParallelDeflateOutputStream,The following statement contains a magic number: this.MaxBufferPairs = 16;  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,EmitPendingBuffers,The following statement contains a magic number: do {  	int firstSkip = -1;  	int millisecondsToWait = doAll ? 200 : (mustWait ? -1 : 0);  	int nextToWrite = -1;  	do {  		if (Monitor.TryEnter (_toWrite' millisecondsToWait)) {  			nextToWrite = -1;  			try {  				if (_toWrite.Count > 0)  					nextToWrite = _toWrite.Dequeue ();  			} finally {  				Monitor.Exit (_toWrite);  			}  			if (nextToWrite >= 0) {  				WorkItem workitem = _pool [nextToWrite];  				if (workitem.ordinal != _lastWritten + 1) {  					// out of order. requeue and try again.  					TraceOutput (TraceBits.EmitSkip' "Emit     skip     wi({0}) ord({1}) lw({2}) fs({3})"' workitem.index' workitem.ordinal' _lastWritten' firstSkip);  					lock (_toWrite) {  						_toWrite.Enqueue (nextToWrite);  					}  					if (firstSkip == nextToWrite) {  						// We went around the list once.  						// None of the items in the list is the one we want.  						// Now wait for a compressor to signal again.  						_newlyCompressedBlob.WaitOne ();  						firstSkip = -1;  					} else if (firstSkip == -1)  						firstSkip = nextToWrite;  					continue;  				}  				firstSkip = -1;  				TraceOutput (TraceBits.EmitBegin' "Emit     begin    wi({0}) ord({1})              cba({2})"' workitem.index' workitem.ordinal' workitem.compressedBytesAvailable);  				_outStream.Write (workitem.compressed' 0' workitem.compressedBytesAvailable);  				_runningCrc.Combine (workitem.crc' workitem.inputBytesAvailable);  				_totalBytesProcessed += workitem.inputBytesAvailable;  				workitem.inputBytesAvailable = 0;  				TraceOutput (TraceBits.EmitDone' "Emit     done     wi({0}) ord({1})              cba({2}) mtw({3})"' workitem.index' workitem.ordinal' workitem.compressedBytesAvailable' millisecondsToWait);  				_lastWritten = workitem.ordinal;  				_toFill.Enqueue (workitem.index);  				// don't wait next time through  				if (millisecondsToWait == -1)  					millisecondsToWait = 0;  			}  		} else  			nextToWrite = -1;  	} while (nextToWrite >= 0);  } while (doAll && (_lastWritten != _latestCompressed || _lastWritten != _lastFilled));  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,TraceOutput,The following statement contains a magic number: if ((bits & _DesiredTrace) != 0) {  	lock (_outputLock) {  		#if !PCL  		int tid = Thread.CurrentThread.GetHashCode ();  		#if !SILVERLIGHT  		Console.ForegroundColor = (ConsoleColor)(tid % 8 + 8);  		#endif  		Console.Write ("{0:000} PDOS "' tid);  		Console.WriteLine (format' varParams);  		#if !SILVERLIGHT  		Console.ResetColor ();  		#endif  		#endif  	}  }  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,TraceOutput,The following statement contains a magic number: if ((bits & _DesiredTrace) != 0) {  	lock (_outputLock) {  		#if !PCL  		int tid = Thread.CurrentThread.GetHashCode ();  		#if !SILVERLIGHT  		Console.ForegroundColor = (ConsoleColor)(tid % 8 + 8);  		#endif  		Console.Write ("{0:000} PDOS "' tid);  		Console.WriteLine (format' varParams);  		#if !SILVERLIGHT  		Console.ResetColor ();  		#endif  		#endif  	}  }  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,TraceOutput,The following statement contains a magic number: lock (_outputLock) {  	#if !PCL  	int tid = Thread.CurrentThread.GetHashCode ();  	#if !SILVERLIGHT  	Console.ForegroundColor = (ConsoleColor)(tid % 8 + 8);  	#endif  	Console.Write ("{0:000} PDOS "' tid);  	Console.WriteLine (format' varParams);  	#if !SILVERLIGHT  	Console.ResetColor ();  	#endif  	#endif  }  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,TraceOutput,The following statement contains a magic number: lock (_outputLock) {  	#if !PCL  	int tid = Thread.CurrentThread.GetHashCode ();  	#if !SILVERLIGHT  	Console.ForegroundColor = (ConsoleColor)(tid % 8 + 8);  	#endif  	Console.Write ("{0:000} PDOS "' tid);  	Console.WriteLine (format' varParams);  	#if !SILVERLIGHT  	Console.ResetColor ();  	#endif  	#endif  }  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,TraceOutput,The following statement contains a magic number: Console.ForegroundColor = (ConsoleColor)(tid % 8 + 8);  
Magic Number,Ionic.Zlib,ParallelDeflateOutputStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ParallelDeflateOutputStream.cs,TraceOutput,The following statement contains a magic number: Console.ForegroundColor = (ConsoleColor)(tid % 8 + 8);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,DistanceCode,The following statement contains a magic number: return (dist < 256) ? _dist_code [dist] : _dist_code [256 + SharedUtils.URShift (dist' 7)];  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,DistanceCode,The following statement contains a magic number: return (dist < 256) ? _dist_code [dist] : _dist_code [256 + SharedUtils.URShift (dist' 7)];  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,DistanceCode,The following statement contains a magic number: return (dist < 256) ? _dist_code [dist] : _dist_code [256 + SharedUtils.URShift (dist' 7)];  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: tree [s.heap [s.heap_max] * 2 + 1] = 0;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {  	n = s.heap [h];  	bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  	if (bits > max_length) {  		bits = max_length;  		overflow++;  	}  	tree [n * 2 + 1] = (short)bits;  	// We overwrite tree[n*2+1] which is no longer needed  	if (n > max_code)  		continue;  	// not a leaf node  	s.bl_count [bits]++;  	xbits = 0;  	if (n >= base_Renamed)  		xbits = extra [n - base_Renamed];  	f = tree [n * 2];  	s.opt_len += f * (bits + xbits);  	if (stree != null)  		s.static_len += f * (stree [n * 2 + 1] + xbits);  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {  	n = s.heap [h];  	bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  	if (bits > max_length) {  		bits = max_length;  		overflow++;  	}  	tree [n * 2 + 1] = (short)bits;  	// We overwrite tree[n*2+1] which is no longer needed  	if (n > max_code)  		continue;  	// not a leaf node  	s.bl_count [bits]++;  	xbits = 0;  	if (n >= base_Renamed)  		xbits = extra [n - base_Renamed];  	f = tree [n * 2];  	s.opt_len += f * (bits + xbits);  	if (stree != null)  		s.static_len += f * (stree [n * 2 + 1] + xbits);  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {  	n = s.heap [h];  	bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  	if (bits > max_length) {  		bits = max_length;  		overflow++;  	}  	tree [n * 2 + 1] = (short)bits;  	// We overwrite tree[n*2+1] which is no longer needed  	if (n > max_code)  		continue;  	// not a leaf node  	s.bl_count [bits]++;  	xbits = 0;  	if (n >= base_Renamed)  		xbits = extra [n - base_Renamed];  	f = tree [n * 2];  	s.opt_len += f * (bits + xbits);  	if (stree != null)  		s.static_len += f * (stree [n * 2 + 1] + xbits);  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {  	n = s.heap [h];  	bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  	if (bits > max_length) {  		bits = max_length;  		overflow++;  	}  	tree [n * 2 + 1] = (short)bits;  	// We overwrite tree[n*2+1] which is no longer needed  	if (n > max_code)  		continue;  	// not a leaf node  	s.bl_count [bits]++;  	xbits = 0;  	if (n >= base_Renamed)  		xbits = extra [n - base_Renamed];  	f = tree [n * 2];  	s.opt_len += f * (bits + xbits);  	if (stree != null)  		s.static_len += f * (stree [n * 2 + 1] + xbits);  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {  	n = s.heap [h];  	bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  	if (bits > max_length) {  		bits = max_length;  		overflow++;  	}  	tree [n * 2 + 1] = (short)bits;  	// We overwrite tree[n*2+1] which is no longer needed  	if (n > max_code)  		continue;  	// not a leaf node  	s.bl_count [bits]++;  	xbits = 0;  	if (n >= base_Renamed)  		xbits = extra [n - base_Renamed];  	f = tree [n * 2];  	s.opt_len += f * (bits + xbits);  	if (stree != null)  		s.static_len += f * (stree [n * 2 + 1] + xbits);  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: bits = tree [tree [n * 2 + 1] * 2 + 1] + 1;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: tree [n * 2 + 1] = (short)bits;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: f = tree [n * 2];  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: if (stree != null)  	s.static_len += f * (stree [n * 2 + 1] + xbits);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: s.static_len += f * (stree [n * 2 + 1] + xbits);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: do {  	bits = max_length - 1;  	while (s.bl_count [bits] == 0)  		bits--;  	s.bl_count [bits]--;  	// move one leaf down the tree  	s.bl_count [bits + 1] = (short)(s.bl_count [bits + 1] + 2);  	// move one overflow item as its brother  	s.bl_count [max_length]--;  	// The brother of the overflow item also moves one step up'  	// but this does not affect bl_count[max_length]  	overflow -= 2;  } while (overflow > 0);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: do {  	bits = max_length - 1;  	while (s.bl_count [bits] == 0)  		bits--;  	s.bl_count [bits]--;  	// move one leaf down the tree  	s.bl_count [bits + 1] = (short)(s.bl_count [bits + 1] + 2);  	// move one overflow item as its brother  	s.bl_count [max_length]--;  	// The brother of the overflow item also moves one step up'  	// but this does not affect bl_count[max_length]  	overflow -= 2;  } while (overflow > 0);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: s.bl_count [bits + 1] = (short)(s.bl_count [bits + 1] + 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: overflow -= 2;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (bits = max_length; bits != 0; bits--) {  	n = s.bl_count [bits];  	while (n != 0) {  		m = s.heap [--h];  		if (m > max_code)  			continue;  		if (tree [m * 2 + 1] != bits) {  			s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  			tree [m * 2 + 1] = (short)bits;  		}  		n--;  	}  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (bits = max_length; bits != 0; bits--) {  	n = s.bl_count [bits];  	while (n != 0) {  		m = s.heap [--h];  		if (m > max_code)  			continue;  		if (tree [m * 2 + 1] != bits) {  			s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  			tree [m * 2 + 1] = (short)bits;  		}  		n--;  	}  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (bits = max_length; bits != 0; bits--) {  	n = s.bl_count [bits];  	while (n != 0) {  		m = s.heap [--h];  		if (m > max_code)  			continue;  		if (tree [m * 2 + 1] != bits) {  			s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  			tree [m * 2 + 1] = (short)bits;  		}  		n--;  	}  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: for (bits = max_length; bits != 0; bits--) {  	n = s.bl_count [bits];  	while (n != 0) {  		m = s.heap [--h];  		if (m > max_code)  			continue;  		if (tree [m * 2 + 1] != bits) {  			s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  			tree [m * 2 + 1] = (short)bits;  		}  		n--;  	}  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: while (n != 0) {  	m = s.heap [--h];  	if (m > max_code)  		continue;  	if (tree [m * 2 + 1] != bits) {  		s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  		tree [m * 2 + 1] = (short)bits;  	}  	n--;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: while (n != 0) {  	m = s.heap [--h];  	if (m > max_code)  		continue;  	if (tree [m * 2 + 1] != bits) {  		s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  		tree [m * 2 + 1] = (short)bits;  	}  	n--;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: while (n != 0) {  	m = s.heap [--h];  	if (m > max_code)  		continue;  	if (tree [m * 2 + 1] != bits) {  		s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  		tree [m * 2 + 1] = (short)bits;  	}  	n--;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: while (n != 0) {  	m = s.heap [--h];  	if (m > max_code)  		continue;  	if (tree [m * 2 + 1] != bits) {  		s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  		tree [m * 2 + 1] = (short)bits;  	}  	n--;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: if (tree [m * 2 + 1] != bits) {  	s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  	tree [m * 2 + 1] = (short)bits;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: if (tree [m * 2 + 1] != bits) {  	s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  	tree [m * 2 + 1] = (short)bits;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: if (tree [m * 2 + 1] != bits) {  	s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  	tree [m * 2 + 1] = (short)bits;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: if (tree [m * 2 + 1] != bits) {  	s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  	tree [m * 2 + 1] = (short)bits;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: s.opt_len = (int)(s.opt_len + ((long)bits - (long)tree [m * 2 + 1]) * (long)tree [m * 2]);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_bitlen,The following statement contains a magic number: tree [m * 2 + 1] = (short)bits;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: for (n = 0; n < elems; n++) {  	if (tree [n * 2] != 0) {  		s.heap [++s.heap_len] = max_code = n;  		s.depth [n] = 0;  	} else {  		tree [n * 2 + 1] = 0;  	}  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: for (n = 0; n < elems; n++) {  	if (tree [n * 2] != 0) {  		s.heap [++s.heap_len] = max_code = n;  		s.depth [n] = 0;  	} else {  		tree [n * 2 + 1] = 0;  	}  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: if (tree [n * 2] != 0) {  	s.heap [++s.heap_len] = max_code = n;  	s.depth [n] = 0;  } else {  	tree [n * 2 + 1] = 0;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: if (tree [n * 2] != 0) {  	s.heap [++s.heap_len] = max_code = n;  	s.depth [n] = 0;  } else {  	tree [n * 2 + 1] = 0;  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [n * 2 + 1] = 0;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: while (s.heap_len < 2) {  	node = s.heap [++s.heap_len] = (max_code < 2 ? ++max_code : 0);  	tree [node * 2] = 1;  	s.depth [node] = 0;  	s.opt_len--;  	if (stree != null)  		s.static_len -= stree [node * 2 + 1];  	// node is 0 or 1 so it does not have extra bits  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: while (s.heap_len < 2) {  	node = s.heap [++s.heap_len] = (max_code < 2 ? ++max_code : 0);  	tree [node * 2] = 1;  	s.depth [node] = 0;  	s.opt_len--;  	if (stree != null)  		s.static_len -= stree [node * 2 + 1];  	// node is 0 or 1 so it does not have extra bits  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: while (s.heap_len < 2) {  	node = s.heap [++s.heap_len] = (max_code < 2 ? ++max_code : 0);  	tree [node * 2] = 1;  	s.depth [node] = 0;  	s.opt_len--;  	if (stree != null)  		s.static_len -= stree [node * 2 + 1];  	// node is 0 or 1 so it does not have extra bits  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: while (s.heap_len < 2) {  	node = s.heap [++s.heap_len] = (max_code < 2 ? ++max_code : 0);  	tree [node * 2] = 1;  	s.depth [node] = 0;  	s.opt_len--;  	if (stree != null)  		s.static_len -= stree [node * 2 + 1];  	// node is 0 or 1 so it does not have extra bits  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: node = s.heap [++s.heap_len] = (max_code < 2 ? ++max_code : 0);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [node * 2] = 1;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: if (stree != null)  	s.static_len -= stree [node * 2 + 1];  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: s.static_len -= stree [node * 2 + 1];  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: for (n = s.heap_len / 2; n >= 1; n--)  	s.pqdownheap (tree' n);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: n = s.heap_len / 2
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: do {  	// n = node of least frequency  	n = s.heap [1];  	s.heap [1] = s.heap [s.heap_len--];  	s.pqdownheap (tree' 1);  	m = s.heap [1];  	// m = node of next least frequency  	s.heap [--s.heap_max] = n;  	// keep the nodes sorted by frequency  	s.heap [--s.heap_max] = m;  	// Create a new node father of n and m  	tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  	s.depth [node] = (sbyte)(System.Math.Max ((byte)s.depth [n]' (byte)s.depth [m]) + 1);  	tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  	// and insert the new node in the heap  	s.heap [1] = node++;  	s.pqdownheap (tree' 1);  } while (s.heap_len >= 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: do {  	// n = node of least frequency  	n = s.heap [1];  	s.heap [1] = s.heap [s.heap_len--];  	s.pqdownheap (tree' 1);  	m = s.heap [1];  	// m = node of next least frequency  	s.heap [--s.heap_max] = n;  	// keep the nodes sorted by frequency  	s.heap [--s.heap_max] = m;  	// Create a new node father of n and m  	tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  	s.depth [node] = (sbyte)(System.Math.Max ((byte)s.depth [n]' (byte)s.depth [m]) + 1);  	tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  	// and insert the new node in the heap  	s.heap [1] = node++;  	s.pqdownheap (tree' 1);  } while (s.heap_len >= 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: do {  	// n = node of least frequency  	n = s.heap [1];  	s.heap [1] = s.heap [s.heap_len--];  	s.pqdownheap (tree' 1);  	m = s.heap [1];  	// m = node of next least frequency  	s.heap [--s.heap_max] = n;  	// keep the nodes sorted by frequency  	s.heap [--s.heap_max] = m;  	// Create a new node father of n and m  	tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  	s.depth [node] = (sbyte)(System.Math.Max ((byte)s.depth [n]' (byte)s.depth [m]) + 1);  	tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  	// and insert the new node in the heap  	s.heap [1] = node++;  	s.pqdownheap (tree' 1);  } while (s.heap_len >= 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: do {  	// n = node of least frequency  	n = s.heap [1];  	s.heap [1] = s.heap [s.heap_len--];  	s.pqdownheap (tree' 1);  	m = s.heap [1];  	// m = node of next least frequency  	s.heap [--s.heap_max] = n;  	// keep the nodes sorted by frequency  	s.heap [--s.heap_max] = m;  	// Create a new node father of n and m  	tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  	s.depth [node] = (sbyte)(System.Math.Max ((byte)s.depth [n]' (byte)s.depth [m]) + 1);  	tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  	// and insert the new node in the heap  	s.heap [1] = node++;  	s.pqdownheap (tree' 1);  } while (s.heap_len >= 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: do {  	// n = node of least frequency  	n = s.heap [1];  	s.heap [1] = s.heap [s.heap_len--];  	s.pqdownheap (tree' 1);  	m = s.heap [1];  	// m = node of next least frequency  	s.heap [--s.heap_max] = n;  	// keep the nodes sorted by frequency  	s.heap [--s.heap_max] = m;  	// Create a new node father of n and m  	tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  	s.depth [node] = (sbyte)(System.Math.Max ((byte)s.depth [n]' (byte)s.depth [m]) + 1);  	tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  	// and insert the new node in the heap  	s.heap [1] = node++;  	s.pqdownheap (tree' 1);  } while (s.heap_len >= 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: do {  	// n = node of least frequency  	n = s.heap [1];  	s.heap [1] = s.heap [s.heap_len--];  	s.pqdownheap (tree' 1);  	m = s.heap [1];  	// m = node of next least frequency  	s.heap [--s.heap_max] = n;  	// keep the nodes sorted by frequency  	s.heap [--s.heap_max] = m;  	// Create a new node father of n and m  	tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  	s.depth [node] = (sbyte)(System.Math.Max ((byte)s.depth [n]' (byte)s.depth [m]) + 1);  	tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  	// and insert the new node in the heap  	s.heap [1] = node++;  	s.pqdownheap (tree' 1);  } while (s.heap_len >= 2);  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [node * 2] = unchecked((short)(tree [n * 2] + tree [m * 2]));  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,build_tree,The following statement contains a magic number: tree [n * 2 + 1] = tree [m * 2 + 1] = (short)node;  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_codes,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	int len = tree [n * 2 + 1];  	if (len == 0)  		continue;  	// Now reverse the bits  	tree [n * 2] = unchecked((short)(bi_reverse (next_code [len]++' len)));  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_codes,The following statement contains a magic number: for (n = 0; n <= max_code; n++) {  	int len = tree [n * 2 + 1];  	if (len == 0)  		continue;  	// Now reverse the bits  	tree [n * 2] = unchecked((short)(bi_reverse (next_code [len]++' len)));  }  
Magic Number,Ionic.Zlib,Tree,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Tree.cs,gen_codes,The following statement contains a magic number: tree [n * 2] = unchecked((short)(bi_reverse (next_code [len]++' len)));  
Magic Number,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The following statement contains a magic number: while (len > 0) {  	int k = len < NMAX ? len : NMAX;  	len -= k;  	while (k >= 16) {  		//s1 += (buf[index++] & 0xff); s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		k -= 16;  	}  	if (k != 0) {  		do {  			s1 += buf [index++];  			s2 += s1;  		} while (--k != 0);  	}  	s1 %= BASE;  	s2 %= BASE;  }  
Magic Number,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The following statement contains a magic number: while (len > 0) {  	int k = len < NMAX ? len : NMAX;  	len -= k;  	while (k >= 16) {  		//s1 += (buf[index++] & 0xff); s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		s1 += buf [index++];  		s2 += s1;  		k -= 16;  	}  	if (k != 0) {  		do {  			s1 += buf [index++];  			s2 += s1;  		} while (--k != 0);  	}  	s1 %= BASE;  	s2 %= BASE;  }  
Magic Number,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The following statement contains a magic number: while (k >= 16) {  	//s1 += (buf[index++] & 0xff); s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	k -= 16;  }  
Magic Number,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The following statement contains a magic number: while (k >= 16) {  	//s1 += (buf[index++] & 0xff); s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	s1 += buf [index++];  	s2 += s1;  	k -= 16;  }  
Magic Number,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The following statement contains a magic number: k -= 16;  
Magic Number,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The following statement contains a magic number: return (uint)((s2 << 16) | s1);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,Write,The following statement contains a magic number: do {  	_z.OutputBuffer = workingBuffer;  	_z.NextOut = 0;  	_z.AvailableBytesOut = _workingBuffer.Length;  	int rc = (_wantCompress) ? _z.Deflate (_flushMode) : _z.Inflate (_flushMode);  	if (rc != ZlibConstants.Z_OK && rc != ZlibConstants.Z_STREAM_END)  		throw new ZlibException ((_wantCompress ? "de" : "in") + "flating: " + _z.Message);  	//if (_workingBuffer.Length - _z.AvailableBytesOut > 0)  	_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  	done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  	// If GZIP and de-compress' we're done when 8 bytes remain.  	if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  		done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  } while (!done);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,Write,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  	done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,Write,The following statement contains a magic number: done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Writer) {  	bool done = false;  	do {  		_z.OutputBuffer = workingBuffer;  		_z.NextOut = 0;  		_z.AvailableBytesOut = _workingBuffer.Length;  		int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  		if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  			string verb = (_wantCompress ? "de" : "in") + "flating";  			if (_z.Message == null)  				throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  			else  				throw new ZlibException (verb + ": " + _z.Message);  		}  		if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  			_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  		}  		done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  		// If GZIP and de-compress' we're done when 8 bytes remain.  		if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  			done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  	} while (!done);  	Flush ();  	// workitem 7159  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (_wantCompress) {  			// Emit the GZIP trailer: CRC32 and  size mod 2^32  			int c1 = crc.Crc32Result;  			_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  			int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  			_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  		} else {  			throw new ZlibException ("Writing with decompression is not supported.");  		}  	}  } // workitem 7159  else if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: do {  	_z.OutputBuffer = workingBuffer;  	_z.NextOut = 0;  	_z.AvailableBytesOut = _workingBuffer.Length;  	int rc = (_wantCompress) ? _z.Deflate (FlushType.Finish) : _z.Inflate (FlushType.Finish);  	if (rc != ZlibConstants.Z_STREAM_END && rc != ZlibConstants.Z_OK) {  		string verb = (_wantCompress ? "de" : "in") + "flating";  		if (_z.Message == null)  			throw new ZlibException (String.Format ("{0}: (rc = {1})"' verb' rc));  		else  			throw new ZlibException (verb + ": " + _z.Message);  	}  	if (_workingBuffer.Length - _z.AvailableBytesOut > 0) {  		_stream.Write (_workingBuffer' 0' _workingBuffer.Length - _z.AvailableBytesOut);  	}  	done = _z.AvailableBytesIn == 0 && _z.AvailableBytesOut != 0;  	// If GZIP and de-compress' we're done when 8 bytes remain.  	if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  		done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  } while (!done);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP && !_wantCompress)  	done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: done = (_z.AvailableBytesIn == 8 && _z.AvailableBytesOut != 0);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP) {  	if (_wantCompress) {  		// Emit the GZIP trailer: CRC32 and  size mod 2^32  		int c1 = crc.Crc32Result;  		_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  		int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  		_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  	} else {  		throw new ZlibException ("Writing with decompression is not supported.");  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP) {  	if (_wantCompress) {  		// Emit the GZIP trailer: CRC32 and  size mod 2^32  		int c1 = crc.Crc32Result;  		_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  		int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  		_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  	} else {  		throw new ZlibException ("Writing with decompression is not supported.");  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_wantCompress) {  	// Emit the GZIP trailer: CRC32 and  size mod 2^32  	int c1 = crc.Crc32Result;  	_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  	int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  	_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  } else {  	throw new ZlibException ("Writing with decompression is not supported.");  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_wantCompress) {  	// Emit the GZIP trailer: CRC32 and  size mod 2^32  	int c1 = crc.Crc32Result;  	_stream.Write (BitConverter.GetBytes (c1)' 0' 4);  	int c2 = (Int32)(crc.TotalBytesRead & 0x00000000FFFFFFFF);  	_stream.Write (BitConverter.GetBytes (c2)' 0' 4);  } else {  	throw new ZlibException ("Writing with decompression is not supported.");  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: _stream.Write (BitConverter.GetBytes (c1)' 0' 4);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: _stream.Write (BitConverter.GetBytes (c2)' 0' 4);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_streamMode == StreamMode.Reader) {  	if (_flavor == ZlibStreamFlavor.GZIP) {  		if (!_wantCompress) {  			// workitem 8501: handle edge case (decompress empty stream)  			if (_z.TotalBytesOut == 0L)  				return;  			// Read and potentially verify the GZIP trailer:  			// CRC32 and size mod 2^32  			byte[] trailer = new byte[8];  			// workitems 8679 & 12554  			if (_z.AvailableBytesIn < 8) {  				// Make sure we have read to the end of the stream  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  				int bytesNeeded = 8 - _z.AvailableBytesIn;  				int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  				if (bytesNeeded != bytesRead) {  					throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  				}  			} else {  				Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  			}  			Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  			Int32 crc32_actual = crc.Crc32Result;  			Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  			Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  			if (crc32_actual != crc32_expected)  				throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  			if (isize_actual != isize_expected)  				throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  		} else {  			throw new ZlibException ("Reading with compression is not supported.");  		}  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP) {  	if (!_wantCompress) {  		// workitem 8501: handle edge case (decompress empty stream)  		if (_z.TotalBytesOut == 0L)  			return;  		// Read and potentially verify the GZIP trailer:  		// CRC32 and size mod 2^32  		byte[] trailer = new byte[8];  		// workitems 8679 & 12554  		if (_z.AvailableBytesIn < 8) {  			// Make sure we have read to the end of the stream  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  			int bytesNeeded = 8 - _z.AvailableBytesIn;  			int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  			if (bytesNeeded != bytesRead) {  				throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  			}  		} else {  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  		}  		Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  		Int32 crc32_actual = crc.Crc32Result;  		Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  		Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  		if (crc32_actual != crc32_expected)  			throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  		if (isize_actual != isize_expected)  			throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  	} else {  		throw new ZlibException ("Reading with compression is not supported.");  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP) {  	if (!_wantCompress) {  		// workitem 8501: handle edge case (decompress empty stream)  		if (_z.TotalBytesOut == 0L)  			return;  		// Read and potentially verify the GZIP trailer:  		// CRC32 and size mod 2^32  		byte[] trailer = new byte[8];  		// workitems 8679 & 12554  		if (_z.AvailableBytesIn < 8) {  			// Make sure we have read to the end of the stream  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  			int bytesNeeded = 8 - _z.AvailableBytesIn;  			int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  			if (bytesNeeded != bytesRead) {  				throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  			}  		} else {  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  		}  		Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  		Int32 crc32_actual = crc.Crc32Result;  		Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  		Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  		if (crc32_actual != crc32_expected)  			throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  		if (isize_actual != isize_expected)  			throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  	} else {  		throw new ZlibException ("Reading with compression is not supported.");  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP) {  	if (!_wantCompress) {  		// workitem 8501: handle edge case (decompress empty stream)  		if (_z.TotalBytesOut == 0L)  			return;  		// Read and potentially verify the GZIP trailer:  		// CRC32 and size mod 2^32  		byte[] trailer = new byte[8];  		// workitems 8679 & 12554  		if (_z.AvailableBytesIn < 8) {  			// Make sure we have read to the end of the stream  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  			int bytesNeeded = 8 - _z.AvailableBytesIn;  			int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  			if (bytesNeeded != bytesRead) {  				throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  			}  		} else {  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  		}  		Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  		Int32 crc32_actual = crc.Crc32Result;  		Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  		Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  		if (crc32_actual != crc32_expected)  			throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  		if (isize_actual != isize_expected)  			throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  	} else {  		throw new ZlibException ("Reading with compression is not supported.");  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_flavor == ZlibStreamFlavor.GZIP) {  	if (!_wantCompress) {  		// workitem 8501: handle edge case (decompress empty stream)  		if (_z.TotalBytesOut == 0L)  			return;  		// Read and potentially verify the GZIP trailer:  		// CRC32 and size mod 2^32  		byte[] trailer = new byte[8];  		// workitems 8679 & 12554  		if (_z.AvailableBytesIn < 8) {  			// Make sure we have read to the end of the stream  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  			int bytesNeeded = 8 - _z.AvailableBytesIn;  			int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  			if (bytesNeeded != bytesRead) {  				throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  			}  		} else {  			Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  		}  		Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  		Int32 crc32_actual = crc.Crc32Result;  		Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  		Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  		if (crc32_actual != crc32_expected)  			throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  		if (isize_actual != isize_expected)  			throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  	} else {  		throw new ZlibException ("Reading with compression is not supported.");  	}  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (!_wantCompress) {  	// workitem 8501: handle edge case (decompress empty stream)  	if (_z.TotalBytesOut == 0L)  		return;  	// Read and potentially verify the GZIP trailer:  	// CRC32 and size mod 2^32  	byte[] trailer = new byte[8];  	// workitems 8679 & 12554  	if (_z.AvailableBytesIn < 8) {  		// Make sure we have read to the end of the stream  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  		int bytesNeeded = 8 - _z.AvailableBytesIn;  		int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  		if (bytesNeeded != bytesRead) {  			throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  		}  	} else {  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  	}  	Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  	Int32 crc32_actual = crc.Crc32Result;  	Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  	Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  	if (crc32_actual != crc32_expected)  		throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  	if (isize_actual != isize_expected)  		throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  } else {  	throw new ZlibException ("Reading with compression is not supported.");  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (!_wantCompress) {  	// workitem 8501: handle edge case (decompress empty stream)  	if (_z.TotalBytesOut == 0L)  		return;  	// Read and potentially verify the GZIP trailer:  	// CRC32 and size mod 2^32  	byte[] trailer = new byte[8];  	// workitems 8679 & 12554  	if (_z.AvailableBytesIn < 8) {  		// Make sure we have read to the end of the stream  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  		int bytesNeeded = 8 - _z.AvailableBytesIn;  		int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  		if (bytesNeeded != bytesRead) {  			throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  		}  	} else {  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  	}  	Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  	Int32 crc32_actual = crc.Crc32Result;  	Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  	Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  	if (crc32_actual != crc32_expected)  		throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  	if (isize_actual != isize_expected)  		throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  } else {  	throw new ZlibException ("Reading with compression is not supported.");  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (!_wantCompress) {  	// workitem 8501: handle edge case (decompress empty stream)  	if (_z.TotalBytesOut == 0L)  		return;  	// Read and potentially verify the GZIP trailer:  	// CRC32 and size mod 2^32  	byte[] trailer = new byte[8];  	// workitems 8679 & 12554  	if (_z.AvailableBytesIn < 8) {  		// Make sure we have read to the end of the stream  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  		int bytesNeeded = 8 - _z.AvailableBytesIn;  		int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  		if (bytesNeeded != bytesRead) {  			throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  		}  	} else {  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  	}  	Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  	Int32 crc32_actual = crc.Crc32Result;  	Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  	Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  	if (crc32_actual != crc32_expected)  		throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  	if (isize_actual != isize_expected)  		throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  } else {  	throw new ZlibException ("Reading with compression is not supported.");  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (!_wantCompress) {  	// workitem 8501: handle edge case (decompress empty stream)  	if (_z.TotalBytesOut == 0L)  		return;  	// Read and potentially verify the GZIP trailer:  	// CRC32 and size mod 2^32  	byte[] trailer = new byte[8];  	// workitems 8679 & 12554  	if (_z.AvailableBytesIn < 8) {  		// Make sure we have read to the end of the stream  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  		int bytesNeeded = 8 - _z.AvailableBytesIn;  		int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  		if (bytesNeeded != bytesRead) {  			throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  		}  	} else {  		Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  	}  	Int32 crc32_expected = BitConverter.ToInt32 (trailer' 0);  	Int32 crc32_actual = crc.Crc32Result;  	Int32 isize_expected = BitConverter.ToInt32 (trailer' 4);  	Int32 isize_actual = (Int32)(_z.TotalBytesOut & 0x00000000FFFFFFFF);  	if (crc32_actual != crc32_expected)  		throw new ZlibException (String.Format ("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))"' crc32_actual' crc32_expected));  	if (isize_actual != isize_expected)  		throw new ZlibException (String.Format ("Bad size in GZIP trailer. (actual({0})!=expected({1}))"' isize_actual' isize_expected));  } else {  	throw new ZlibException ("Reading with compression is not supported.");  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_z.AvailableBytesIn < 8) {  	// Make sure we have read to the end of the stream  	Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  	int bytesNeeded = 8 - _z.AvailableBytesIn;  	int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  	if (bytesNeeded != bytesRead) {  		throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  	}  } else {  	Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,finish,The following statement contains a magic number: if (_z.AvailableBytesIn < 8) {  	// Make sure we have read to the end of the stream  	Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' _z.AvailableBytesIn);  	int bytesNeeded = 8 - _z.AvailableBytesIn;  	int bytesRead = _stream.Read (trailer' _z.AvailableBytesIn' bytesNeeded);  	if (bytesNeeded != bytesRead) {  		throw new ZlibException (String.Format ("Missing or incomplete GZIP trailer. Expected 8 bytes' got {0}."' _z.AvailableBytesIn + bytesRead));  	}  } else {  	Array.Copy (_z.InputBuffer' _z.NextIn' trailer' 0' trailer.Length);  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if (n != 10)  	throw new ZlibException ("Not a valid GZIP stream.");  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if (header [0] != 0x1F || header [1] != 0x8B || header [2] != 8)  	throw new ZlibException ("Bad GZIP header.");  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if (header [0] != 0x1F || header [1] != 0x8B || header [2] != 8)  	throw new ZlibException ("Bad GZIP header.");  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if ((header [3] & 0x04) == 0x04) {  	// read and discard extra field  	n = _stream.Read (header' 0' 2);  	// 2-byte length field  	totalBytesRead += n;  	Int16 extraLength = (Int16)(header [0] + header [1] * 256);  	byte[] extra = new byte[extraLength];  	n = _stream.Read (extra' 0' extra.Length);  	if (n != extraLength)  		throw new ZlibException ("Unexpected end-of-file reading GZIP header.");  	totalBytesRead += n;  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if ((header [3] & 0x04) == 0x04) {  	// read and discard extra field  	n = _stream.Read (header' 0' 2);  	// 2-byte length field  	totalBytesRead += n;  	Int16 extraLength = (Int16)(header [0] + header [1] * 256);  	byte[] extra = new byte[extraLength];  	n = _stream.Read (extra' 0' extra.Length);  	if (n != extraLength)  		throw new ZlibException ("Unexpected end-of-file reading GZIP header.");  	totalBytesRead += n;  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if ((header [3] & 0x04) == 0x04) {  	// read and discard extra field  	n = _stream.Read (header' 0' 2);  	// 2-byte length field  	totalBytesRead += n;  	Int16 extraLength = (Int16)(header [0] + header [1] * 256);  	byte[] extra = new byte[extraLength];  	n = _stream.Read (extra' 0' extra.Length);  	if (n != extraLength)  		throw new ZlibException ("Unexpected end-of-file reading GZIP header.");  	totalBytesRead += n;  }  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: n = _stream.Read (header' 0' 2);  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if ((header [3] & 0x08) == 0x08)  	_GzipFileName = ReadZeroTerminatedString ();  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if ((header [3] & 0x10) == 0x010)  	_GzipComment = ReadZeroTerminatedString ();  
Magic Number,Ionic.Zlib,ZlibBaseStream,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\ZlibBaseStream.cs,_ReadAndValidateGzipHeader,The following statement contains a magic number: if ((header [3] & 0x02) == 0x02)  	Read (_buf1' 0' 1);  
Duplicate Code,Ionic.Zlib,InflateCodes,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The method contains a code clone-set at the following line numbers (starting from the method definition): ((225' 249)' (260' 284))
Duplicate Code,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 30)' (13' 32)' (15' 34)' (17' 36)' (19' 38)' (21' 40)' (23' 42))
Duplicate Code,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 39)' (13' 41))
Duplicate Code,Ionic.Zlib,Adler,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Zlib.cs,Adler32,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 30)' (15' 34)' (17' 36)' (19' 38)' (21' 40)' (23' 42))
Missing Default,Ionic.Zlib,DeflateManager,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Deflate.cs,SetDeflater,The following switch statement is missing a default case: switch (config.Flavor) {  case DeflateFlavor.Store:  	DeflateFunction = DeflateNone;  	break;  case DeflateFlavor.Fast:  	DeflateFunction = DeflateFast;  	break;  case DeflateFlavor.Slow:  	DeflateFunction = DeflateSlow;  	break;  }  
Missing Default,Ionic.Zlib,InflateBlocks,F:\newReposMay17\haf_DotNetZip.Semverd\src\Zlib.Shared\Inflate.cs,Process,The following switch statement is missing a default case: switch ((uint)t >> 1) {  case 0:  	// stored  	b >>= 3;  	k -= (3);  	t = k & 7;  	// go to byte boundary  	b >>= t;  	k -= t;  	mode = InflateBlockMode.LENS;  	// get length of stored block  	break;  case 1:  	// fixed  	int[] bl = new int[1];  	int[] bd = new int[1];  	int[][] tl = new int[1][];  	int[][] td = new int[1][];  	InfTree.inflate_trees_fixed (bl' bd' tl' td' _codec);  	codes.Init (bl [0]' bd [0]' tl [0]' 0' td [0]' 0);  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.CODES;  	break;  case 2:  	// dynamic  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.TABLE;  	break;  case 3:  	// illegal  	b >>= 3;  	k -= 3;  	mode = InflateBlockMode.BAD;  	_codec.Message = "invalid block type";  	r = ZlibConstants.Z_DATA_ERROR;  	bitb = b;  	bitk = k;  	_codec.AvailableBytesIn = n;  	_codec.TotalBytesIn += p - _codec.NextIn;  	_codec.NextIn = p;  	writeAt = q;  	return Flush (r);  }  
