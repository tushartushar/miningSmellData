Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The method has 200 lines of code.
Long Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The method has 166 lines of code.
Long Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The method has 235 lines of code.
Long Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainQSort3,The method has 109 lines of code.
Long Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,generateMTFValues,The method has 115 lines of code.
Long Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The method has 138 lines of code.
Long Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The method has 109 lines of code.
Long Method,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,EmitPendingBuffers,The method has 139 lines of code.
Complex Method,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,ReadByte,Cyclomatic complexity of the method is 9
Complex Method,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,hbCreateDecodeTables,Cyclomatic complexity of the method is 9
Complex Method,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,Cyclomatic complexity of the method is 16
Complex Method,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,Cyclomatic complexity of the method is 26
Complex Method,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,Cyclomatic complexity of the method is 13
Complex Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,Cyclomatic complexity of the method is 25
Complex Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainQSort3,Cyclomatic complexity of the method is 13
Complex Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,generateMTFValues,Cyclomatic complexity of the method is 16
Complex Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,Cyclomatic complexity of the method is 20
Complex Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,Cyclomatic complexity of the method is 14
Complex Method,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,Cyclomatic complexity of the method is 10
Complex Method,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,Write,Cyclomatic complexity of the method is 8
Long Parameter List,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,hbCreateDecodeTables,The method has 7 parameters. Parameters: limit' bbase' perm' length' minLen' maxLen' alphaSize
Long Parameter List,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbAssignCodes,The method has 5 parameters. Parameters: code' length' minLen' maxLen' alphaSize
Long Parameter List,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The method has 5 parameters. Parameters: len' freq' state1' alphaSize' maxLen
Complex Conditional,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,InitBlock,The conditional expression  "magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45                  && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90"  is complex.
Complex Conditional,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,InitBlock,The conditional expression  "magic0 != 0x31 ||                       magic1 != 0x41 ||                       magic2 != 0x59 ||                       magic3 != 0x26 ||                       magic4 != 0x53 ||                       magic5 != 0x59"  is complex.
Complex Conditional,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues0,The conditional expression  "(ge > gs) && (nPart != nGroups) && (nPart != 1)                      && (((nGroups - nPart) & 1) != 0)"  is complex.
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,MakeMaps,The following statement contains a magic number: i < 256
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,init,The following statement contains a magic number: CheckMagicChar('h'' 2);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,EndBlock,The following statement contains a magic number: this.computedCombinedCRC = (this.computedCombinedCRC << 1)                  | (this.computedCombinedCRC >> 31);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,GetBits,The following statement contains a magic number: bsBuffShadow = (bsBuffShadow << 8) | thech;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,GetBits,The following statement contains a magic number: bsLiveShadow += 8;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetUByte,The following statement contains a magic number: return (char) GetBits(8);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,bsGetInt,The following statement contains a magic number: return (uint)((((((GetBits(8) << 8) | GetBits(8)) << 8) | GetBits(8)) << 8) | GetBits(8));
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: i < 16
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: int i16 = i << 4;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: j < 16
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: i < 16
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: int alphaSize = this.nInUse + 2;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: int nGroups = GetBits(3);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: int nSelectors = GetBits(15);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,recvDecodingTables,The following statement contains a magic number: int curr = GetBits(5);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,createHuffmanDecodingTables,The following statement contains a magic number: int minLen = 32;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The following statement contains a magic number: this.origPtr = GetBits(24);
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The following statement contains a magic number: this.origPtr > 10 + BZip2.BlockSizeMultiple * this.blockSize100k
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The following statement contains a magic number: bsBuffShadow = (bsBuffShadow << 8) | thech;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The following statement contains a magic number: bsLiveShadow += 8;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The following statement contains a magic number: bsBuffShadow = (bsBuffShadow << 8) | thech;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The following statement contains a magic number: bsLiveShadow += 8;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode0,The following statement contains a magic number: bsBuffShadow = (bsBuffShadow << 8) | thech;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode0,The following statement contains a magic number: bsLiveShadow += 8;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: i <= 255
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: i <= 256
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: i <= 256
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: i <= 256
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: i <= 256
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupBlock,The following statement contains a magic number: this.su_ch2 = 256;
Magic Number,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,SetupRandPartA,The following statement contains a magic number: ++this.su_rTPos == 512
Magic Number,Ionic.BZip2,DecompressionState,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,DecompressionState,The following statement contains a magic number: this.unzftab = new int[256];
Magic Number,Ionic.BZip2,DecompressionState,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,DecompressionState,The following statement contains a magic number: this.cftab = new int[257];
Magic Number,Ionic.BZip2,DecompressionState,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,DecompressionState,The following statement contains a magic number: this.getAndMoveToFrontDecode_yy = new byte[256];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,BZip2Compressor,The following statement contains a magic number: this.outBlockFillThreshold = (blockSize * BZip2.BlockSizeMultiple) - 20;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,write0,The following statement contains a magic number: return (rc) ? 2 : 1;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,write0,The following statement contains a magic number: ++this.runLength > 254
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,AddRunToOutputBlock,The following statement contains a magic number: switch (rl)              {                  case 1:                      block[previousLast + 2] = b;                      this.last = previousLast + 1;                      break;                    case 2:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      this.last = previousLast + 2;                      break;                    case 3:                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      this.last = previousLast + 3;                      break;                    default:                      rl -= 4;                      this.cstate.inUse[rl] = true;                      block[previousLast + 2] = b;                      block[previousLast + 3] = b;                      block[previousLast + 4] = b;                      block[previousLast + 5] = b;                      block[previousLast + 6] = (byte) rl;                      this.last = previousLast + 5;                      break;              }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,randomiseBlock,The following statement contains a magic number: ++rTPos == 512
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: block[lastShadow + i + 2] = block[(i % (lastShadow + 1)) + 1];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: ftab[(c1 << 8) + c2]++;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: i <= 65536
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: int c2 = block[i + 2] & 0xff;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: fmap[--ftab[(c1 << 8) + c2]] = i;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: fmap[--ftab[((block[lastShadow + 1] & 0xff) << 8) + (block[1] & 0xff)]] = lastShadow;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: h /= 3;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: int a = ftab[(vv + 1) << 8] - ftab[vv << 8];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: int a = ftab[(vv + 1) << 8] - ftab[vv << 8];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: (ftab[(ro + 1) << 8] - ftab[ro << 8]) > a
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: (ftab[(ro + 1) << 8] - ftab[ro << 8]) > a
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: i <= 255
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: int sb = (ss << 8) + j;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: mainQSort3(dataShadow' lo' hi' 2);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: j <= 255
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: copy[j] = ftab[(j << 8) + ss] & CLEARMASK;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: j <= 255
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: ftab[(j << 8) + ss] |= SETMASK;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: int bbStart = ftab[ss << 8] & CLEARMASK;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: int bbSize = (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: (bbSize >> shifts) > 65534
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: i < 255
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSort,The following statement contains a magic number: i <= 255
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: bigN < 2
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,mainSimpleSort,The following statement contains a magic number: X: while (x > 0)                                                      {                                                          x -= 4;                                                            if (block[i1 + 1] == block[i2 + 1])                                                          {                                                              if (quadrant[i1] == quadrant[i2])                                                              {                                                                  if (block[i1 + 2] == block[i2 + 2])                                                                  {                                                                      if (quadrant[i1 + 1] == quadrant[i2 + 1])                                                                      {                                                                          if (block[i1 + 3] == block[i2 + 3])                                                                          {                                                                              if (quadrant[i1 + 2] == quadrant[i2 + 2])                                                                              {                                                                                  if (block[i1 + 4] == block[i2 + 4])                                                                                  {                                                                                      if (quadrant[i1 + 3] == quadrant[i2 + 3])                                                                                      {                                                                                          if ((i1 += 4) >= lastPlus1)                                                                                          {                                                                                              i1 -= lastPlus1;                                                                                          }                                                                                          if ((i2 += 4) >= lastPlus1)                                                                                          {                                                                                              i2 -= lastPlus1;                                                                                          }                                                                                          workDoneShadow++;                                                                                          goto X;                                                                                      }                                                                                      else if ((quadrant[i1 + 3] > quadrant[i2 + 3]))                                                                                      {                                                                                          goto HAMMER;                                                                                      }                                                                                      else {                                                                                          goto END_HAMMER;                                                                                      }                                                                                  }                                                                                  else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff))                                                                                  {                                                                                      goto HAMMER;                                                                                  }                                                                                  else {                                                                                      goto END_HAMMER;                                                                                  }                                                                              }                                                                              else if ((quadrant[i1 + 2] > quadrant[i2 + 2]))                                                                              {                                                                                  goto HAMMER;                                                                              }                                                                              else {                                                                                  goto END_HAMMER;                                                                              }                                                                          }                                                                          else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff))                                                                          {                                                                              goto HAMMER;                                                                          }                                                                          else {                                                                              goto END_HAMMER;                                                                          }                                                                      }                                                                      else if ((quadrant[i1 + 1] > quadrant[i2 + 1]))                                                                      {                                                                          goto HAMMER;                                                                      }                                                                      else {                                                                          goto END_HAMMER;                                                                      }                                                                  }                                                                  else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff))                                                                  {                                                                      goto HAMMER;                                                                  }                                                                  else {                                                                      goto END_HAMMER;                                                                  }                                                              }                                                              else if ((quadrant[i1] > quadrant[i2]))                                                              {                                                                  goto HAMMER;                                                              }                                                              else {                                                                  goto END_HAMMER;                                                              }                                                          }                                                          else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff))                                                          {                                                              goto HAMMER;                                                          }                                                          else {                                                              goto END_HAMMER;                                                          }                                                        }
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,generateMTFValues,The following statement contains a magic number: i < 256
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,generateMTFValues,The following statement contains a magic number: zPend = (zPend - 2) >> 1;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,generateMTFValues,The following statement contains a magic number: zPend >= 2
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int alphaSize = this.nInUse + 2;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues,The following statement contains a magic number: int nGroups = (this.nMTF < 200) ? 2 : (this.nMTF < 600) ? 3                  : (this.nMTF < 1200) ? 4 : (this.nMTF < 2400) ? 5 : 6;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The following statement contains a magic number: weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The following statement contains a magic number: parent[0] = -2;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The following statement contains a magic number: int j = weight[i] >> 8;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The following statement contains a magic number: weight[i] = j << 8;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: byte[] len_2 = len[2];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: byte[] len_3 = len[3];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: byte[] len_4 = len[4];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: byte[] len_5 = len[5];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: int[] c = new int[6];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: c[2] += len_2[icv] & 0xff;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: c[3] += len_3[icv] & 0xff;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: c[4] += len_4[icv] & 0xff;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: c[5] += len_5[icv] & 0xff;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[2] = (short) c[2];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[2] = (short) c[2];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[3] = (short) c[3];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[3] = (short) c[3];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[4] = (short) c[4];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[4] = (short) c[4];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[5] = (short) c[5];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: cost[5] = (short) c[5];
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues1,The following statement contains a magic number: hbMakeCodeLengths(len[t]' rfreq[t]' this.cstate' alphaSize' 20);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues3,The following statement contains a magic number: int minLen = 32;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: int i16 = i * 16;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: u |= 1U << (16 - i - 1);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: i < 16
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: this.bw.WriteBits(16' u);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: int i16 = i * 16;
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: u |= 1U << (16 - j - 1);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: j < 16
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: this.bw.WriteBits(16' u);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues4,The following statement contains a magic number: i < 16
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues5,The following statement contains a magic number: this.bw.WriteBits(3' (uint) nGroups);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues5,The following statement contains a magic number: this.bw.WriteBits(15' (uint) nSelectors);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues6,The following statement contains a magic number: this.bw.WriteBits(5' curr);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues6,The following statement contains a magic number: this.bw.WriteBits(2' 2U);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues6,The following statement contains a magic number: this.bw.WriteBits(2' 2U);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues6,The following statement contains a magic number: this.bw.WriteBits(2' 3U);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,sendMTFValues6,The following statement contains a magic number: this.bw.WriteBits(2' 3U);
Magic Number,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,moveToFrontCodeAndSend,The following statement contains a magic number: this.bw.WriteBits(24' (uint) this.origPtr);
Magic Number,Ionic.BZip2,CompressionState,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,CompressionState,The following statement contains a magic number: this.sfmap = new char[2 * n];
Magic Number,Ionic.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2OutputStream.cs,Finish,The following statement contains a magic number: this.combinedCRC = (this.combinedCRC << 1) | (this.combinedCRC >> 31);
Magic Number,Ionic.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2OutputStream.cs,Write,The following statement contains a magic number: this.combinedCRC = (this.combinedCRC << 1) | (this.combinedCRC >> 31);
Magic Number,Ionic.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2OutputStream.cs,TraceOutput,The following statement contains a magic number: Console.ForegroundColor = (ConsoleColor) (tid % 8 + 10);
Magic Number,Ionic.BZip2,BZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2OutputStream.cs,TraceOutput,The following statement contains a magic number: Console.ForegroundColor = (ConsoleColor) (tid % 8 + 10);
Magic Number,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,ParallelBZip2OutputStream,The following statement contains a magic number: this.MaxWorkers = 16;
Magic Number,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,EmitPendingBuffers,The following statement contains a magic number: int millisecondsToWait = doAll ? 200 : (mustWait ? -1 : 0);
Magic Number,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,EmitPendingBuffers,The following statement contains a magic number: var buffer = new byte[1024];
Magic Number,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,EmitPendingBuffers,The following statement contains a magic number: this.combinedCRC = (this.combinedCRC << 1) | (this.combinedCRC >> 31);
Magic Number,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,TraceOutput,The following statement contains a magic number: Console.ForegroundColor = (ConsoleColor) (tid % 8 + 10);
Magic Number,Ionic.BZip2,ParallelBZip2OutputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\ParallelBZip2OutputStream.cs,TraceOutput,The following statement contains a magic number: Console.ForegroundColor = (ConsoleColor) (tid % 8 + 10);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteBits,The following statement contains a magic number: this.output.WriteByte ((byte)(u >> 24 & 0xff));
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteBits,The following statement contains a magic number: u <<= 8;
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteBits,The following statement contains a magic number: nAccumulated -= 8;
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteBits,The following statement contains a magic number: nAccumulated >= 8
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteBits,The following statement contains a magic number: this.accumulator = u | (value << (32 - nAccumulated - nbits));
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteByte,The following statement contains a magic number: WriteBits(8' b);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' (u >> 24) & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' (u >> 24) & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' (u >> 16) & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' (u >> 16) & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' (u >> 8) & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' (u >> 8) & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,WriteInt,The following statement contains a magic number: WriteBits(8' u & 0xff);
Magic Number,Ionic.BZip2,BitWriter,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BitWriter.cs,FinishAndPad,The following statement contains a magic number: byte b = (byte)((this.accumulator >> 24) & 0xff);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,_InternalComputeCrc32,The following statement contains a magic number: return (Int32)(crc32Table[(W ^ B) & 0xFF] ^ (W >> 8));
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,SlurpBlock,The following statement contains a magic number: UInt32 temp = (_register >> 24) ^ b;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,SlurpBlock,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table[temp];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,UpdateCRC,The following statement contains a magic number: UInt32 temp = (_register >> 24) ^ b;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table[temp];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,UpdateCRC,The following statement contains a magic number: uint temp = (_register >> 24) ^ b;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table[(temp >= 0)                                                                ? temp                                                                : (temp + 256)];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,UpdateCRC,The following statement contains a magic number: _register = (_register << 8) ^ crc32Table[(temp >= 0)                                                                ? temp                                                                : (temp + 256)];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x33333333) << 2 | (ret >> 2) & 0x33333333;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret & 0x0F0F0F0F) << 4 | (ret >> 4) & 0x0F0F0F0F;
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: ret = (ret << 24) | ((ret & 0xFF00) << 8) | ((ret >> 8) & 0xFF00) | (ret >> 24);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: uint t = (u << 2) & (m << 1);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,ReverseBits,The following statement contains a magic number: return (byte)((0x01001001 * (s + t)) >> 24);
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,GenerateLookupTable,The following statement contains a magic number: crc32Table = new UInt32[256];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,gf2_matrix_square,The following statement contains a magic number: i < 32
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,Combine,The following statement contains a magic number: uint[] even = new uint[32];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,Combine,The following statement contains a magic number: uint[] odd = new uint[32];
Magic Number,Ionic.Crc,CRC32,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\CommonSrc\CRC32.cs,Combine,The following statement contains a magic number: i < 32
Duplicate Code,Ionic.BZip2,BZip2InputStream,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2InputStream.cs,getAndMoveToFrontDecode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((59' 113)' (158' 212))
Duplicate Code,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,generateMTFValues,The method contains a code clone-set at the following line numbers (starting from the method definition): ((60' 86)' (95' 121))
Duplicate Code,Ionic.BZip2,BZip2Compressor,D:\research\architectureSmells\repos\haf_DotNetZip.Semverd\src\BZip2\BZip2Compressor.cs,hbMakeCodeLengths,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 75)' (84' 109))
