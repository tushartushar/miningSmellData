Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,Cyclomatic complexity of the method is 7
Long Statement,MessageVault.Server.Auth,LoadAuth,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Auth\LoadAuth.cs,GetEmptyConfig,The length of the statement  "	log.Warning ("Auth JSON file {blob} doesn't exist in container {container}. Using default login/password"' Constants.AuthFileName' Constants.SysContainer); " is 155.
Long Statement,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,The length of the statement  "	_log.Information ("Node is a leader with {processors} processors. Setting parallelism to {parallelism}"' processors' parallelism); " is 130.
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var info = await LeaderInfo.Get (_storage);  		if (info == null) {  			_cloudClient = null;  			await Task.Delay (500' token);  			continue;  		}  		var newEndpoint = info.GetEndpoint ();  		if (_endpoint != newEndpoint) {  			Log.Information ("Detected new leader {endpoint}"' newEndpoint);  			_endpoint = newEndpoint;  			var password = _storage.GetSysPassword ();  			_cloudClient = new CloudClient (_endpoint' Constants.ClusterNodeUser' password);  		}  		await Task.Delay (3500' token);  	} catch (StorageException ex) {  		Log.Warning (ex' "Failed to refresh leader info");  		token.WaitHandle.WaitOne (1000);  	}  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var info = await LeaderInfo.Get (_storage);  		if (info == null) {  			_cloudClient = null;  			await Task.Delay (500' token);  			continue;  		}  		var newEndpoint = info.GetEndpoint ();  		if (_endpoint != newEndpoint) {  			Log.Information ("Detected new leader {endpoint}"' newEndpoint);  			_endpoint = newEndpoint;  			var password = _storage.GetSysPassword ();  			_cloudClient = new CloudClient (_endpoint' Constants.ClusterNodeUser' password);  		}  		await Task.Delay (3500' token);  	} catch (StorageException ex) {  		Log.Warning (ex' "Failed to refresh leader info");  		token.WaitHandle.WaitOne (1000);  	}  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var info = await LeaderInfo.Get (_storage);  		if (info == null) {  			_cloudClient = null;  			await Task.Delay (500' token);  			continue;  		}  		var newEndpoint = info.GetEndpoint ();  		if (_endpoint != newEndpoint) {  			Log.Information ("Detected new leader {endpoint}"' newEndpoint);  			_endpoint = newEndpoint;  			var password = _storage.GetSysPassword ();  			_cloudClient = new CloudClient (_endpoint' Constants.ClusterNodeUser' password);  		}  		await Task.Delay (3500' token);  	} catch (StorageException ex) {  		Log.Warning (ex' "Failed to refresh leader info");  		token.WaitHandle.WaitOne (1000);  	}  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: try {  	var info = await LeaderInfo.Get (_storage);  	if (info == null) {  		_cloudClient = null;  		await Task.Delay (500' token);  		continue;  	}  	var newEndpoint = info.GetEndpoint ();  	if (_endpoint != newEndpoint) {  		Log.Information ("Detected new leader {endpoint}"' newEndpoint);  		_endpoint = newEndpoint;  		var password = _storage.GetSysPassword ();  		_cloudClient = new CloudClient (_endpoint' Constants.ClusterNodeUser' password);  	}  	await Task.Delay (3500' token);  } catch (StorageException ex) {  	Log.Warning (ex' "Failed to refresh leader info");  	token.WaitHandle.WaitOne (1000);  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: try {  	var info = await LeaderInfo.Get (_storage);  	if (info == null) {  		_cloudClient = null;  		await Task.Delay (500' token);  		continue;  	}  	var newEndpoint = info.GetEndpoint ();  	if (_endpoint != newEndpoint) {  		Log.Information ("Detected new leader {endpoint}"' newEndpoint);  		_endpoint = newEndpoint;  		var password = _storage.GetSysPassword ();  		_cloudClient = new CloudClient (_endpoint' Constants.ClusterNodeUser' password);  	}  	await Task.Delay (3500' token);  } catch (StorageException ex) {  	Log.Warning (ex' "Failed to refresh leader info");  	token.WaitHandle.WaitOne (1000);  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: try {  	var info = await LeaderInfo.Get (_storage);  	if (info == null) {  		_cloudClient = null;  		await Task.Delay (500' token);  		continue;  	}  	var newEndpoint = info.GetEndpoint ();  	if (_endpoint != newEndpoint) {  		Log.Information ("Detected new leader {endpoint}"' newEndpoint);  		_endpoint = newEndpoint;  		var password = _storage.GetSysPassword ();  		_cloudClient = new CloudClient (_endpoint' Constants.ClusterNodeUser' password);  	}  	await Task.Delay (3500' token);  } catch (StorageException ex) {  	Log.Warning (ex' "Failed to refresh leader info");  	token.WaitHandle.WaitOne (1000);  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: if (info == null) {  	_cloudClient = null;  	await Task.Delay (500' token);  	continue;  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: await Task.Delay (500' token);  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: await Task.Delay (3500' token);  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,KeepPollingForLeaderInfo,The following statement contains a magic number: token.WaitHandle.WaitOne (1000);  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,GetLeaderClientAsync,The following statement contains a magic number: while (_cloudClient == null) {  	await Task.Delay (100);  }  
Magic Number,MessageVault.Server.Election,LeaderInfoPoller,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderInfoPoller.cs,GetLeaderClientAsync,The following statement contains a magic number: await Task.Delay (100);  
Magic Number,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,The following statement contains a magic number: using (var source = new CancellationTokenSource ())  	using (var linked = CancellationTokenSource.CreateLinkedTokenSource (token' source.Token))  		using (var scheduler = MessageWriteScheduler.Create (_account' parallelism' source)) {  			try {  				_log.Information ("Message write scheduler created");  				_api.EnableDirectWrites (scheduler);  				// tell the world who is the leader  				await _info.WriteToBlob (_account);  				// sleep till cancelled  				await Task.Delay (-1' linked.Token);  			} catch (OperationCanceledException) {  				// expect this exception to be thrown in normal circumstances or check the cancellation token' because  				// if the lease can't be renewed' the token will signal a cancellation request.  				_log.Information ("Shutting down the scheduler");  				// shutdown the scheduler  				_api.DisableDirectWrites ();  				var shutdown = scheduler.Shutdown ();  				if (shutdown.Wait (5000)) {  					_log.Information ("Scheduler is down");  				} else {  					_log.Error ("Scheduler failed to shutdown in time");  				}  			} finally {  				_api.DisableDirectWrites ();  				_log.Information ("This node is no longer a leader");  			}  		}  
Magic Number,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,The following statement contains a magic number: using (var linked = CancellationTokenSource.CreateLinkedTokenSource (token' source.Token))  	using (var scheduler = MessageWriteScheduler.Create (_account' parallelism' source)) {  		try {  			_log.Information ("Message write scheduler created");  			_api.EnableDirectWrites (scheduler);  			// tell the world who is the leader  			await _info.WriteToBlob (_account);  			// sleep till cancelled  			await Task.Delay (-1' linked.Token);  		} catch (OperationCanceledException) {  			// expect this exception to be thrown in normal circumstances or check the cancellation token' because  			// if the lease can't be renewed' the token will signal a cancellation request.  			_log.Information ("Shutting down the scheduler");  			// shutdown the scheduler  			_api.DisableDirectWrites ();  			var shutdown = scheduler.Shutdown ();  			if (shutdown.Wait (5000)) {  				_log.Information ("Scheduler is down");  			} else {  				_log.Error ("Scheduler failed to shutdown in time");  			}  		} finally {  			_api.DisableDirectWrites ();  			_log.Information ("This node is no longer a leader");  		}  	}  
Magic Number,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,The following statement contains a magic number: using (var scheduler = MessageWriteScheduler.Create (_account' parallelism' source)) {  	try {  		_log.Information ("Message write scheduler created");  		_api.EnableDirectWrites (scheduler);  		// tell the world who is the leader  		await _info.WriteToBlob (_account);  		// sleep till cancelled  		await Task.Delay (-1' linked.Token);  	} catch (OperationCanceledException) {  		// expect this exception to be thrown in normal circumstances or check the cancellation token' because  		// if the lease can't be renewed' the token will signal a cancellation request.  		_log.Information ("Shutting down the scheduler");  		// shutdown the scheduler  		_api.DisableDirectWrites ();  		var shutdown = scheduler.Shutdown ();  		if (shutdown.Wait (5000)) {  			_log.Information ("Scheduler is down");  		} else {  			_log.Error ("Scheduler failed to shutdown in time");  		}  	} finally {  		_api.DisableDirectWrites ();  		_log.Information ("This node is no longer a leader");  	}  }  
Magic Number,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,The following statement contains a magic number: try {  	_log.Information ("Message write scheduler created");  	_api.EnableDirectWrites (scheduler);  	// tell the world who is the leader  	await _info.WriteToBlob (_account);  	// sleep till cancelled  	await Task.Delay (-1' linked.Token);  } catch (OperationCanceledException) {  	// expect this exception to be thrown in normal circumstances or check the cancellation token' because  	// if the lease can't be renewed' the token will signal a cancellation request.  	_log.Information ("Shutting down the scheduler");  	// shutdown the scheduler  	_api.DisableDirectWrites ();  	var shutdown = scheduler.Shutdown ();  	if (shutdown.Wait (5000)) {  		_log.Information ("Scheduler is down");  	} else {  		_log.Error ("Scheduler failed to shutdown in time");  	}  } finally {  	_api.DisableDirectWrites ();  	_log.Information ("This node is no longer a leader");  }  
Magic Number,MessageVault.Server.Election,LeaderLock,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Server\Election\LeaderLock.cs,LeaderMethod,The following statement contains a magic number: if (shutdown.Wait (5000)) {  	_log.Information ("Scheduler is down");  } else {  	_log.Error ("Scheduler failed to shutdown in time");  }  
