Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: args.Length < 2
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: cache =  args[2];
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: args.Length > 2
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: var pwd = connection[2];
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: fetcher.AmountToLoadMax = 1024*512;
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: fetcher.AmountToLoadMax = 1024*512;
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: i < 5
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: var percent = (100*(result.UsedBytes + result.CurrentRemotePosition))/  					              result.MaxRemotePosition;
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: Task.WaitAll(tasks.ToArray()' TimeSpan.FromSeconds(10));
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: var recordCount = 500;
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				var pos = 0L;  				while (!token.IsCancellationRequested) {    					try {    						var result = cacheReader.ReadAll(pos' recordCount' (id' position' maxPosition) =>  { });  						if (result.ReadEndOfCacheBeforeItWasFlushed) {  							Console.WriteLine(name + ": we are too eager to read data :]");  							token.WaitHandle.WaitOne(20);  						}  						if (result.ReadRecords == 0) {  							token.WaitHandle.WaitOne(50+ random.Next(150));  							continue;  						}  						Console.WriteLine(name + ": read {0} records"' result.ReadRecords);    						pos = result.CurrentCachePosition;  					}  					catch (Exception ex) {  						Console.WriteLine(name + ": error " + ex);  					}  				}    				Console.WriteLine(name + ": terminating");  			});
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				var pos = 0L;  				while (!token.IsCancellationRequested) {    					try {    						var result = cacheReader.ReadAll(pos' recordCount' (id' position' maxPosition) =>  { });  						if (result.ReadEndOfCacheBeforeItWasFlushed) {  							Console.WriteLine(name + ": we are too eager to read data :]");  							token.WaitHandle.WaitOne(20);  						}  						if (result.ReadRecords == 0) {  							token.WaitHandle.WaitOne(50+ random.Next(150));  							continue;  						}  						Console.WriteLine(name + ": read {0} records"' result.ReadRecords);    						pos = result.CurrentCachePosition;  					}  					catch (Exception ex) {  						Console.WriteLine(name + ": error " + ex);  					}  				}    				Console.WriteLine(name + ": terminating");  			});
Magic Number,Cache,Program,D:\research\architectureSmells\repos\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				var pos = 0L;  				while (!token.IsCancellationRequested) {    					try {    						var result = cacheReader.ReadAll(pos' recordCount' (id' position' maxPosition) =>  { });  						if (result.ReadEndOfCacheBeforeItWasFlushed) {  							Console.WriteLine(name + ": we are too eager to read data :]");  							token.WaitHandle.WaitOne(20);  						}  						if (result.ReadRecords == 0) {  							token.WaitHandle.WaitOne(50+ random.Next(150));  							continue;  						}  						Console.WriteLine(name + ": read {0} records"' result.ReadRecords);    						pos = result.CurrentCachePosition;  					}  					catch (Exception ex) {  						Console.WriteLine(name + ": error " + ex);  					}  				}    				Console.WriteLine(name + ": terminating");  			});
