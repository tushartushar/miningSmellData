Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The method has 67 lines of code.
Complex Method,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,Cyclomatic complexity of the method is 9
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Quit ("we need 2 args: connection string and stream name");  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	cache = args [2];  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	cache = args [2];  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: cache = args [2];  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: fetcher.AmountToLoadMax = 1024 * 512;  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: fetcher.AmountToLoadMax = 1024 * 512;  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: using (var source = new CancellationTokenSource ()) {  	var token = source.Token;  	var tasks = new List<Task> ();  	for (int i = 0; i < 5; i++) {  		var task = LaunchReader (fetcher' token' string.Format ("reader-{0}"' i));  		tasks.Add (task);  	}  	while (true) {  		var started = Stopwatch.StartNew ();  		var downloadTask = fetcher.DownloadNextAsync (token);  		downloadTask.Wait (token);  		var result = downloadTask.Result;  		var percent = (100 * (result.UsedBytes + result.CurrentRemotePosition)) / result.MaxRemotePosition;  		var usedPerSec = result.UsedBytes / started.Elapsed.TotalSeconds;  		Console.WriteLine ("Downloaded {0}% at speed {1:F1}. {2} records"' percent' usedPerSec' result.DownloadedRecords);  		if (result.DownloadedBytes == 0) {  			break;  		}  	}  	Console.WriteLine ("Downloading done. Hit <Enter> to stop readers");  	Console.ReadLine ();  	source.Cancel ();  	Console.Write ("Stopping readers....");  	Task.WaitAll (tasks.ToArray ()' TimeSpan.FromSeconds (10));  	Console.WriteLine ("done");  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: using (var source = new CancellationTokenSource ()) {  	var token = source.Token;  	var tasks = new List<Task> ();  	for (int i = 0; i < 5; i++) {  		var task = LaunchReader (fetcher' token' string.Format ("reader-{0}"' i));  		tasks.Add (task);  	}  	while (true) {  		var started = Stopwatch.StartNew ();  		var downloadTask = fetcher.DownloadNextAsync (token);  		downloadTask.Wait (token);  		var result = downloadTask.Result;  		var percent = (100 * (result.UsedBytes + result.CurrentRemotePosition)) / result.MaxRemotePosition;  		var usedPerSec = result.UsedBytes / started.Elapsed.TotalSeconds;  		Console.WriteLine ("Downloaded {0}% at speed {1:F1}. {2} records"' percent' usedPerSec' result.DownloadedRecords);  		if (result.DownloadedBytes == 0) {  			break;  		}  	}  	Console.WriteLine ("Downloading done. Hit <Enter> to stop readers");  	Console.ReadLine ();  	source.Cancel ();  	Console.Write ("Stopping readers....");  	Task.WaitAll (tasks.ToArray ()' TimeSpan.FromSeconds (10));  	Console.WriteLine ("done");  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: using (var source = new CancellationTokenSource ()) {  	var token = source.Token;  	var tasks = new List<Task> ();  	for (int i = 0; i < 5; i++) {  		var task = LaunchReader (fetcher' token' string.Format ("reader-{0}"' i));  		tasks.Add (task);  	}  	while (true) {  		var started = Stopwatch.StartNew ();  		var downloadTask = fetcher.DownloadNextAsync (token);  		downloadTask.Wait (token);  		var result = downloadTask.Result;  		var percent = (100 * (result.UsedBytes + result.CurrentRemotePosition)) / result.MaxRemotePosition;  		var usedPerSec = result.UsedBytes / started.Elapsed.TotalSeconds;  		Console.WriteLine ("Downloaded {0}% at speed {1:F1}. {2} records"' percent' usedPerSec' result.DownloadedRecords);  		if (result.DownloadedBytes == 0) {  			break;  		}  	}  	Console.WriteLine ("Downloading done. Hit <Enter> to stop readers");  	Console.ReadLine ();  	source.Cancel ();  	Console.Write ("Stopping readers....");  	Task.WaitAll (tasks.ToArray ()' TimeSpan.FromSeconds (10));  	Console.WriteLine ("done");  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	var task = LaunchReader (fetcher' token' string.Format ("reader-{0}"' i));  	tasks.Add (task);  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: while (true) {  	var started = Stopwatch.StartNew ();  	var downloadTask = fetcher.DownloadNextAsync (token);  	downloadTask.Wait (token);  	var result = downloadTask.Result;  	var percent = (100 * (result.UsedBytes + result.CurrentRemotePosition)) / result.MaxRemotePosition;  	var usedPerSec = result.UsedBytes / started.Elapsed.TotalSeconds;  	Console.WriteLine ("Downloaded {0}% at speed {1:F1}. {2} records"' percent' usedPerSec' result.DownloadedRecords);  	if (result.DownloadedBytes == 0) {  		break;  	}  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,Main,The following statement contains a magic number: Task.WaitAll (tasks.ToArray ()' TimeSpan.FromSeconds (10));  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: return Task.Factory.StartNew (() => {  	var pos = 0L;  	while (!token.IsCancellationRequested) {  		try {  			var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  			});  			if (result.ReadEndOfCacheBeforeItWasFlushed) {  				Console.WriteLine (name + ": we are too eager to read data :]");  				token.WaitHandle.WaitOne (20);  			}  			if (result.ReadRecords == 0) {  				token.WaitHandle.WaitOne (50 + random.Next (150));  				continue;  			}  			Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  			pos = result.CurrentCachePosition;  		} catch (Exception ex) {  			Console.WriteLine (name + ": error " + ex);  		}  	}  	Console.WriteLine (name + ": terminating");  });  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: return Task.Factory.StartNew (() => {  	var pos = 0L;  	while (!token.IsCancellationRequested) {  		try {  			var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  			});  			if (result.ReadEndOfCacheBeforeItWasFlushed) {  				Console.WriteLine (name + ": we are too eager to read data :]");  				token.WaitHandle.WaitOne (20);  			}  			if (result.ReadRecords == 0) {  				token.WaitHandle.WaitOne (50 + random.Next (150));  				continue;  			}  			Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  			pos = result.CurrentCachePosition;  		} catch (Exception ex) {  			Console.WriteLine (name + ": error " + ex);  		}  	}  	Console.WriteLine (name + ": terminating");  });  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: return Task.Factory.StartNew (() => {  	var pos = 0L;  	while (!token.IsCancellationRequested) {  		try {  			var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  			});  			if (result.ReadEndOfCacheBeforeItWasFlushed) {  				Console.WriteLine (name + ": we are too eager to read data :]");  				token.WaitHandle.WaitOne (20);  			}  			if (result.ReadRecords == 0) {  				token.WaitHandle.WaitOne (50 + random.Next (150));  				continue;  			}  			Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  			pos = result.CurrentCachePosition;  		} catch (Exception ex) {  			Console.WriteLine (name + ": error " + ex);  		}  	}  	Console.WriteLine (name + ": terminating");  });  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  		});  		if (result.ReadEndOfCacheBeforeItWasFlushed) {  			Console.WriteLine (name + ": we are too eager to read data :]");  			token.WaitHandle.WaitOne (20);  		}  		if (result.ReadRecords == 0) {  			token.WaitHandle.WaitOne (50 + random.Next (150));  			continue;  		}  		Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  		pos = result.CurrentCachePosition;  	} catch (Exception ex) {  		Console.WriteLine (name + ": error " + ex);  	}  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  		});  		if (result.ReadEndOfCacheBeforeItWasFlushed) {  			Console.WriteLine (name + ": we are too eager to read data :]");  			token.WaitHandle.WaitOne (20);  		}  		if (result.ReadRecords == 0) {  			token.WaitHandle.WaitOne (50 + random.Next (150));  			continue;  		}  		Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  		pos = result.CurrentCachePosition;  	} catch (Exception ex) {  		Console.WriteLine (name + ": error " + ex);  	}  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  		});  		if (result.ReadEndOfCacheBeforeItWasFlushed) {  			Console.WriteLine (name + ": we are too eager to read data :]");  			token.WaitHandle.WaitOne (20);  		}  		if (result.ReadRecords == 0) {  			token.WaitHandle.WaitOne (50 + random.Next (150));  			continue;  		}  		Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  		pos = result.CurrentCachePosition;  	} catch (Exception ex) {  		Console.WriteLine (name + ": error " + ex);  	}  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: try {  	var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  	});  	if (result.ReadEndOfCacheBeforeItWasFlushed) {  		Console.WriteLine (name + ": we are too eager to read data :]");  		token.WaitHandle.WaitOne (20);  	}  	if (result.ReadRecords == 0) {  		token.WaitHandle.WaitOne (50 + random.Next (150));  		continue;  	}  	Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  	pos = result.CurrentCachePosition;  } catch (Exception ex) {  	Console.WriteLine (name + ": error " + ex);  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: try {  	var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  	});  	if (result.ReadEndOfCacheBeforeItWasFlushed) {  		Console.WriteLine (name + ": we are too eager to read data :]");  		token.WaitHandle.WaitOne (20);  	}  	if (result.ReadRecords == 0) {  		token.WaitHandle.WaitOne (50 + random.Next (150));  		continue;  	}  	Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  	pos = result.CurrentCachePosition;  } catch (Exception ex) {  	Console.WriteLine (name + ": error " + ex);  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: try {  	var result = cacheReader.ReadAll (pos' recordCount' (id' position' maxPosition) => {  	});  	if (result.ReadEndOfCacheBeforeItWasFlushed) {  		Console.WriteLine (name + ": we are too eager to read data :]");  		token.WaitHandle.WaitOne (20);  	}  	if (result.ReadRecords == 0) {  		token.WaitHandle.WaitOne (50 + random.Next (150));  		continue;  	}  	Console.WriteLine (name + ": read {0} records"' result.ReadRecords);  	pos = result.CurrentCachePosition;  } catch (Exception ex) {  	Console.WriteLine (name + ": error " + ex);  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: if (result.ReadEndOfCacheBeforeItWasFlushed) {  	Console.WriteLine (name + ": we are too eager to read data :]");  	token.WaitHandle.WaitOne (20);  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: token.WaitHandle.WaitOne (20);  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: if (result.ReadRecords == 0) {  	token.WaitHandle.WaitOne (50 + random.Next (150));  	continue;  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: if (result.ReadRecords == 0) {  	token.WaitHandle.WaitOne (50 + random.Next (150));  	continue;  }  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: token.WaitHandle.WaitOne (50 + random.Next (150));  
Magic Number,Cache,Program,D:\newReposJune17\agileharbor_messageVault\src\Cache\Program.cs,LaunchReader,The following statement contains a magic number: token.WaitHandle.WaitOne (50 + random.Next (150));  
