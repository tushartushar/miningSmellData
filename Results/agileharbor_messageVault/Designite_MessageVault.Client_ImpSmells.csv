Implementation smell,Namespace,Class,File,Method,Description
Long Method,MessageVault.Api,CacheFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\CacheFetcher.cs,DownloadNextAsync,The method has 74 lines of code.
Complex Method,MessageVault.Api,CacheFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\CacheFetcher.cs,DownloadNextAsync,Cyclomatic complexity of the method is 13
Complex Method,MessageVault.Api,CacheReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\CacheReader.cs,ReadAll,Cyclomatic complexity of the method is 8
Complex Method,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,Publish,Cyclomatic complexity of the method is 7
Complex Method,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,Cyclomatic complexity of the method is 18
Long Parameter List,MessageVault.Api,CacheFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\CacheFetcher.cs,CacheFetcher,The method has 4 parameters.
Long Parameter List,MessageVault.Api,NonDisposingLZ4Stream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,NonDisposingLZ4Stream,The method has 4 parameters.
Long Parameter List,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,The method has 4 parameters.
Long Parameter List,MessageVault.Api,CloudClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\CloudClient.cs,CloudClient,The method has 4 parameters.
Magic Number,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,The following statement contains a magic number: using (var local = new CancellationTokenSource ()) {  	using (var linked = CancellationTokenSource.CreateLinkedTokenSource (token' local.Token)) {  		// TODO - figure buffer size  		var subscription = reader.Result.Subscribe (linked.Token' start' ReadBytesBuffer' ReadMessagesBuffer);  		var pages = new List<MessageWithId> ();  		while (!token.IsCancellationRequested) {  			MessageWithId msg;  			while (!subscription.Buffer.TryDequeue (out msg)) {  				if (idle != null) {  					idle (subscription);  				}  				if (token.WaitHandle.WaitOne (100)) {  					// time to stop  					return;  				}  			}  			pages.Add (msg);  			var hasMore = ((MessageFlags)msg.Attributes & MessageFlags.ToBeContinued) == MessageFlags.ToBeContinued;  			if (hasMore) {  				continue;  			}  			var total = pages.Sum (m => m.Value.Length);  			using (var mem = _manager.GetStream ("chase-1"' total)) {  				foreach (var page in pages) {  					mem.Write (page.Value' 0' page.Value.Length);  				}  				mem.Seek (0' SeekOrigin.Begin);  				using (var lz = new NonDisposingLZ4Stream (mem' CompressionMode.Decompress)) {  					using (var output = _manager.GetStream ("chase-2")) {  						lz.CopyTo (output);  						var last = pages.Last ();  						try {  							callback (new MessageWithId (last.Id' last.Attributes' last.Key' output.ToArray ()' 0)' subscription);  						} catch (Exception ex) {  							local.Cancel ();  							throw;  						}  					}  				}  			}  			pages.Clear ();  		}  	}  }  
Magic Number,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,The following statement contains a magic number: using (var linked = CancellationTokenSource.CreateLinkedTokenSource (token' local.Token)) {  	// TODO - figure buffer size  	var subscription = reader.Result.Subscribe (linked.Token' start' ReadBytesBuffer' ReadMessagesBuffer);  	var pages = new List<MessageWithId> ();  	while (!token.IsCancellationRequested) {  		MessageWithId msg;  		while (!subscription.Buffer.TryDequeue (out msg)) {  			if (idle != null) {  				idle (subscription);  			}  			if (token.WaitHandle.WaitOne (100)) {  				// time to stop  				return;  			}  		}  		pages.Add (msg);  		var hasMore = ((MessageFlags)msg.Attributes & MessageFlags.ToBeContinued) == MessageFlags.ToBeContinued;  		if (hasMore) {  			continue;  		}  		var total = pages.Sum (m => m.Value.Length);  		using (var mem = _manager.GetStream ("chase-1"' total)) {  			foreach (var page in pages) {  				mem.Write (page.Value' 0' page.Value.Length);  			}  			mem.Seek (0' SeekOrigin.Begin);  			using (var lz = new NonDisposingLZ4Stream (mem' CompressionMode.Decompress)) {  				using (var output = _manager.GetStream ("chase-2")) {  					lz.CopyTo (output);  					var last = pages.Last ();  					try {  						callback (new MessageWithId (last.Id' last.Attributes' last.Key' output.ToArray ()' 0)' subscription);  					} catch (Exception ex) {  						local.Cancel ();  						throw;  					}  				}  			}  		}  		pages.Clear ();  	}  }  
Magic Number,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	MessageWithId msg;  	while (!subscription.Buffer.TryDequeue (out msg)) {  		if (idle != null) {  			idle (subscription);  		}  		if (token.WaitHandle.WaitOne (100)) {  			// time to stop  			return;  		}  	}  	pages.Add (msg);  	var hasMore = ((MessageFlags)msg.Attributes & MessageFlags.ToBeContinued) == MessageFlags.ToBeContinued;  	if (hasMore) {  		continue;  	}  	var total = pages.Sum (m => m.Value.Length);  	using (var mem = _manager.GetStream ("chase-1"' total)) {  		foreach (var page in pages) {  			mem.Write (page.Value' 0' page.Value.Length);  		}  		mem.Seek (0' SeekOrigin.Begin);  		using (var lz = new NonDisposingLZ4Stream (mem' CompressionMode.Decompress)) {  			using (var output = _manager.GetStream ("chase-2")) {  				lz.CopyTo (output);  				var last = pages.Last ();  				try {  					callback (new MessageWithId (last.Id' last.Attributes' last.Key' output.ToArray ()' 0)' subscription);  				} catch (Exception ex) {  					local.Cancel ();  					throw;  				}  			}  		}  	}  	pages.Clear ();  }  
Magic Number,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,The following statement contains a magic number: while (!subscription.Buffer.TryDequeue (out msg)) {  	if (idle != null) {  		idle (subscription);  	}  	if (token.WaitHandle.WaitOne (100)) {  		// time to stop  		return;  	}  }  
Magic Number,MessageVault.Api,PagedClient,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Api\PagedClient.cs,ChaseEventsForever,The following statement contains a magic number: if (token.WaitHandle.WaitOne (100)) {  	// time to stop  	return;  }  
Magic Number,MessageVault,MemoryClientTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\MemoryClient.cs,Posting,The following statement contains a magic number: using (var client = new MemoryClient ()) {  	var task = client.PostMessagesAsync ("test"' new[] {  		Message.Create ("Key"' new byte[0])'  	});  	var ok = task.Wait (1000);  	Assert.IsTrue (ok);  	Assert.AreEqual (25' task.Result.Position);  }  
Magic Number,MessageVault,MemoryClientTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\MemoryClient.cs,Posting,The following statement contains a magic number: using (var client = new MemoryClient ()) {  	var task = client.PostMessagesAsync ("test"' new[] {  		Message.Create ("Key"' new byte[0])'  	});  	var ok = task.Wait (1000);  	Assert.IsTrue (ok);  	Assert.AreEqual (25' task.Result.Position);  }  
Magic Number,MessageVault,MemoryClientTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\MemoryClient.cs,Posting,The following statement contains a magic number: Assert.AreEqual (25' task.Result.Position);  
Magic Number,MessageVault.Tests,PageClientTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Tests\PageClientTests.cs,Roundtrip,The following statement contains a magic number: using (var s = new CancellationTokenSource (TimeSpan.FromSeconds (10))) {  	var unpackedMessage = new UnpackedMessage (GetBytes (Constants.MaxKeySize)' GetBytes (Constants.MaxValueSize * 5 + 1));  	Console.WriteLine ("Pub...");  	pager.Publish (new[] {  		unpackedMessage  	}).Wait (s.Token);  	Console.WriteLine ("Waiting...");  	pager.ChaseEventsForever (s.Token' (id' subscription) => {  		CollectionAssert.AreEqual (unpackedMessage.Value' id.Value);  		CollectionAssert.AreEqual (unpackedMessage.Key' id.Key);  		passed = true;  		Console.WriteLine ("Got it" + id);  		s.Cancel ();  	});  }  
Magic Number,MessageVault.Tests,PageClientTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault\Tests\PageClientTests.cs,Roundtrip,The following statement contains a magic number: using (var s = new CancellationTokenSource (TimeSpan.FromSeconds (10))) {  	var unpackedMessage = new UnpackedMessage (GetBytes (Constants.MaxKeySize)' GetBytes (Constants.MaxValueSize * 5 + 1));  	Console.WriteLine ("Pub...");  	pager.Publish (new[] {  		unpackedMessage  	}).Wait (s.Token);  	Console.WriteLine ("Waiting...");  	pager.ChaseEventsForever (s.Token' (id' subscription) => {  		CollectionAssert.AreEqual (unpackedMessage.Value' id.Value);  		CollectionAssert.AreEqual (unpackedMessage.Key' id.Key);  		passed = true;  		Console.WriteLine ("Got it" + id);  		s.Cancel ();  	});  }  
