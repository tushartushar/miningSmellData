Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Backup,Cyclomatic complexity of the method is 7
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Main,The following statement contains a magic number: switch (command.ToLowerInvariant ()) {  case "repair":  	Repair (cachePath);  	return;  case "backup":  	Backup (cachePath' args [2]);  	return;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Main,The following statement contains a magic number: Backup (cachePath' args [2]);  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: while (bytes > 0 && (read = input.Read (buffer' 0' (int)Math.Min (buffer.Length' bytes))) > 0) {  	output.Write (buffer' 0' read);  	bytes -= read;  	counter += 1;  	if ((counter % 16384 == 0)) {  		Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  	}  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: while (bytes > 0 && (read = input.Read (buffer' 0' (int)Math.Min (buffer.Length' bytes))) > 0) {  	output.Write (buffer' 0' read);  	bytes -= read;  	counter += 1;  	if ((counter % 16384 == 0)) {  		Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  	}  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: while (bytes > 0 && (read = input.Read (buffer' 0' (int)Math.Min (buffer.Length' bytes))) > 0) {  	output.Write (buffer' 0' read);  	bytes -= read;  	counter += 1;  	if ((counter % 16384 == 0)) {  		Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  	}  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: while (bytes > 0 && (read = input.Read (buffer' 0' (int)Math.Min (buffer.Length' bytes))) > 0) {  	output.Write (buffer' 0' read);  	bytes -= read;  	counter += 1;  	if ((counter % 16384 == 0)) {  		Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  	}  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: if ((counter % 16384 == 0)) {  	Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: if ((counter % 16384 == 0)) {  	Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: if ((counter % 16384 == 0)) {  	Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: if ((counter % 16384 == 0)) {  	Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,CopyStream,The following statement contains a magic number: Console.WriteLine ("{0:F1} GB to go"' 1F * bytes / 1024 / 1024 / 1024);  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Backup,The following statement contains a magic number: Console.WriteLine (new DateTime (2016' 4' 6' 12' 0' 0).ToUniversalTime ().ToString ("O"));  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Backup,The following statement contains a magic number: Console.WriteLine (new DateTime (2016' 4' 6' 12' 0' 0).ToUniversalTime ().ToString ("O"));  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Backup,The following statement contains a magic number: Console.WriteLine (new DateTime (2016' 4' 6' 12' 0' 0).ToUniversalTime ().ToString ("O"));  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Backup,The following statement contains a magic number: Console.WriteLine (new DateTime (2016' 4' 6' 12' 0' 0).ToUniversalTime ().ToString ("O"));  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: while (true) {  	try {  		var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  		});  		if (result.ReadRecords > 0) {  			prev = pos;  			pos = result.CurrentCachePosition;  			i += 1;  			if ((i % 100) == 0) {  				Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  			}  			continue;  		}  		Console.WriteLine ("We are good");  		return;  	} catch (InvalidStorageFormatException ex) {  		Console.WriteLine ("Last known position {0}"' pos);  		Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  		var previousBlock = reader.ReadAll (prev' 1);  		var msg = previousBlock.Messages.Single ();  		var offset = msg.Message.Id.GetOffset ();  		Console.WriteLine ("Previous offset {0}"' offset);  		var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  		replaceCheck.GetOrInitPosition ();  		replaceCheck.Update (new long[] {  			prev'  			offset  		});  		Console.WriteLine ("Backup written");  	}  	break;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: while (true) {  	try {  		var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  		});  		if (result.ReadRecords > 0) {  			prev = pos;  			pos = result.CurrentCachePosition;  			i += 1;  			if ((i % 100) == 0) {  				Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  			}  			continue;  		}  		Console.WriteLine ("We are good");  		return;  	} catch (InvalidStorageFormatException ex) {  		Console.WriteLine ("Last known position {0}"' pos);  		Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  		var previousBlock = reader.ReadAll (prev' 1);  		var msg = previousBlock.Messages.Single ();  		var offset = msg.Message.Id.GetOffset ();  		Console.WriteLine ("Previous offset {0}"' offset);  		var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  		replaceCheck.GetOrInitPosition ();  		replaceCheck.Update (new long[] {  			prev'  			offset  		});  		Console.WriteLine ("Backup written");  	}  	break;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: while (true) {  	try {  		var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  		});  		if (result.ReadRecords > 0) {  			prev = pos;  			pos = result.CurrentCachePosition;  			i += 1;  			if ((i % 100) == 0) {  				Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  			}  			continue;  		}  		Console.WriteLine ("We are good");  		return;  	} catch (InvalidStorageFormatException ex) {  		Console.WriteLine ("Last known position {0}"' pos);  		Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  		var previousBlock = reader.ReadAll (prev' 1);  		var msg = previousBlock.Messages.Single ();  		var offset = msg.Message.Id.GetOffset ();  		Console.WriteLine ("Previous offset {0}"' offset);  		var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  		replaceCheck.GetOrInitPosition ();  		replaceCheck.Update (new long[] {  			prev'  			offset  		});  		Console.WriteLine ("Backup written");  	}  	break;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: while (true) {  	try {  		var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  		});  		if (result.ReadRecords > 0) {  			prev = pos;  			pos = result.CurrentCachePosition;  			i += 1;  			if ((i % 100) == 0) {  				Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  			}  			continue;  		}  		Console.WriteLine ("We are good");  		return;  	} catch (InvalidStorageFormatException ex) {  		Console.WriteLine ("Last known position {0}"' pos);  		Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  		var previousBlock = reader.ReadAll (prev' 1);  		var msg = previousBlock.Messages.Single ();  		var offset = msg.Message.Id.GetOffset ();  		Console.WriteLine ("Previous offset {0}"' offset);  		var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  		replaceCheck.GetOrInitPosition ();  		replaceCheck.Update (new long[] {  			prev'  			offset  		});  		Console.WriteLine ("Backup written");  	}  	break;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: while (true) {  	try {  		var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  		});  		if (result.ReadRecords > 0) {  			prev = pos;  			pos = result.CurrentCachePosition;  			i += 1;  			if ((i % 100) == 0) {  				Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  			}  			continue;  		}  		Console.WriteLine ("We are good");  		return;  	} catch (InvalidStorageFormatException ex) {  		Console.WriteLine ("Last known position {0}"' pos);  		Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  		var previousBlock = reader.ReadAll (prev' 1);  		var msg = previousBlock.Messages.Single ();  		var offset = msg.Message.Id.GetOffset ();  		Console.WriteLine ("Previous offset {0}"' offset);  		var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  		replaceCheck.GetOrInitPosition ();  		replaceCheck.Update (new long[] {  			prev'  			offset  		});  		Console.WriteLine ("Backup written");  	}  	break;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: while (true) {  	try {  		var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  		});  		if (result.ReadRecords > 0) {  			prev = pos;  			pos = result.CurrentCachePosition;  			i += 1;  			if ((i % 100) == 0) {  				Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  			}  			continue;  		}  		Console.WriteLine ("We are good");  		return;  	} catch (InvalidStorageFormatException ex) {  		Console.WriteLine ("Last known position {0}"' pos);  		Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  		var previousBlock = reader.ReadAll (prev' 1);  		var msg = previousBlock.Messages.Single ();  		var offset = msg.Message.Id.GetOffset ();  		Console.WriteLine ("Previous offset {0}"' offset);  		var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  		replaceCheck.GetOrInitPosition ();  		replaceCheck.Update (new long[] {  			prev'  			offset  		});  		Console.WriteLine ("Backup written");  	}  	break;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: try {  	var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  	});  	if (result.ReadRecords > 0) {  		prev = pos;  		pos = result.CurrentCachePosition;  		i += 1;  		if ((i % 100) == 0) {  			Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  		}  		continue;  	}  	Console.WriteLine ("We are good");  	return;  } catch (InvalidStorageFormatException ex) {  	Console.WriteLine ("Last known position {0}"' pos);  	Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  	var previousBlock = reader.ReadAll (prev' 1);  	var msg = previousBlock.Messages.Single ();  	var offset = msg.Message.Id.GetOffset ();  	Console.WriteLine ("Previous offset {0}"' offset);  	var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  	replaceCheck.GetOrInitPosition ();  	replaceCheck.Update (new long[] {  		prev'  		offset  	});  	Console.WriteLine ("Backup written");  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: try {  	var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  	});  	if (result.ReadRecords > 0) {  		prev = pos;  		pos = result.CurrentCachePosition;  		i += 1;  		if ((i % 100) == 0) {  			Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  		}  		continue;  	}  	Console.WriteLine ("We are good");  	return;  } catch (InvalidStorageFormatException ex) {  	Console.WriteLine ("Last known position {0}"' pos);  	Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  	var previousBlock = reader.ReadAll (prev' 1);  	var msg = previousBlock.Messages.Single ();  	var offset = msg.Message.Id.GetOffset ();  	Console.WriteLine ("Previous offset {0}"' offset);  	var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  	replaceCheck.GetOrInitPosition ();  	replaceCheck.Update (new long[] {  		prev'  		offset  	});  	Console.WriteLine ("Backup written");  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: try {  	var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  	});  	if (result.ReadRecords > 0) {  		prev = pos;  		pos = result.CurrentCachePosition;  		i += 1;  		if ((i % 100) == 0) {  			Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  		}  		continue;  	}  	Console.WriteLine ("We are good");  	return;  } catch (InvalidStorageFormatException ex) {  	Console.WriteLine ("Last known position {0}"' pos);  	Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  	var previousBlock = reader.ReadAll (prev' 1);  	var msg = previousBlock.Messages.Single ();  	var offset = msg.Message.Id.GetOffset ();  	Console.WriteLine ("Previous offset {0}"' offset);  	var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  	replaceCheck.GetOrInitPosition ();  	replaceCheck.Update (new long[] {  		prev'  		offset  	});  	Console.WriteLine ("Backup written");  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: try {  	var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  	});  	if (result.ReadRecords > 0) {  		prev = pos;  		pos = result.CurrentCachePosition;  		i += 1;  		if ((i % 100) == 0) {  			Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  		}  		continue;  	}  	Console.WriteLine ("We are good");  	return;  } catch (InvalidStorageFormatException ex) {  	Console.WriteLine ("Last known position {0}"' pos);  	Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  	var previousBlock = reader.ReadAll (prev' 1);  	var msg = previousBlock.Messages.Single ();  	var offset = msg.Message.Id.GetOffset ();  	Console.WriteLine ("Previous offset {0}"' offset);  	var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  	replaceCheck.GetOrInitPosition ();  	replaceCheck.Update (new long[] {  		prev'  		offset  	});  	Console.WriteLine ("Backup written");  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: try {  	var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  	});  	if (result.ReadRecords > 0) {  		prev = pos;  		pos = result.CurrentCachePosition;  		i += 1;  		if ((i % 100) == 0) {  			Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  		}  		continue;  	}  	Console.WriteLine ("We are good");  	return;  } catch (InvalidStorageFormatException ex) {  	Console.WriteLine ("Last known position {0}"' pos);  	Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  	var previousBlock = reader.ReadAll (prev' 1);  	var msg = previousBlock.Messages.Single ();  	var offset = msg.Message.Id.GetOffset ();  	Console.WriteLine ("Previous offset {0}"' offset);  	var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  	replaceCheck.GetOrInitPosition ();  	replaceCheck.Update (new long[] {  		prev'  		offset  	});  	Console.WriteLine ("Backup written");  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: try {  	var result = reader.ReadAll (pos' 1000' (id' position' maxPosition) => {  	});  	if (result.ReadRecords > 0) {  		prev = pos;  		pos = result.CurrentCachePosition;  		i += 1;  		if ((i % 100) == 0) {  			Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  		}  		continue;  	}  	Console.WriteLine ("We are good");  	return;  } catch (InvalidStorageFormatException ex) {  	Console.WriteLine ("Last known position {0}"' pos);  	Console.WriteLine ("Previous position {0} (-{1} bytes)"' prev' pos - prev);  	var previousBlock = reader.ReadAll (prev' 1);  	var msg = previousBlock.Messages.Single ();  	var offset = msg.Message.Id.GetOffset ();  	Console.WriteLine ("Previous offset {0}"' offset);  	var replaceCheck = new FileCheckpointArrayWriter (replace' 2);  	replaceCheck.GetOrInitPosition ();  	replaceCheck.Update (new long[] {  		prev'  		offset  	});  	Console.WriteLine ("Backup written");  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if (result.ReadRecords > 0) {  	prev = pos;  	pos = result.CurrentCachePosition;  	i += 1;  	if ((i % 100) == 0) {  		Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  	}  	continue;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if (result.ReadRecords > 0) {  	prev = pos;  	pos = result.CurrentCachePosition;  	i += 1;  	if ((i % 100) == 0) {  		Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  	}  	continue;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if (result.ReadRecords > 0) {  	prev = pos;  	pos = result.CurrentCachePosition;  	i += 1;  	if ((i % 100) == 0) {  		Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  	}  	continue;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if (result.ReadRecords > 0) {  	prev = pos;  	pos = result.CurrentCachePosition;  	i += 1;  	if ((i % 100) == 0) {  		Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  	}  	continue;  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if ((i % 100) == 0) {  	Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if ((i % 100) == 0) {  	Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if ((i % 100) == 0) {  	Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: if ((i % 100) == 0) {  	Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  }  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  
Magic Number,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Repair,The following statement contains a magic number: Console.WriteLine ("{0}:{1:F1}GB"' i' 1F * pos / 1024 / 1024 / 1024);  
Missing Default,CacheRepair,Program,D:\newReposJune17\agileharbor_messageVault\src\CacheRepair\Program.cs,Main,The following switch statement is missing a default case: switch (command.ToLowerInvariant ()) {  case "repair":  	Repair (cachePath);  	return;  case "backup":  	Backup (cachePath' args [2]);  	return;  }  
