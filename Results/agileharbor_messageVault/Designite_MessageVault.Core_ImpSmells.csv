Implementation smell,Namespace,Class,File,Method,Description
Long Method,MessageVault.Cloud,MessageFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageFetcher.cs,ReadAll,The method has 60 lines of code.
Complex Method,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,ReadMessages,Cyclomatic complexity of the method is 7
Complex Method,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,ReadMessages,Cyclomatic complexity of the method is 7
Complex Method,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,Cyclomatic complexity of the method is 12
Complex Method,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,Cyclomatic complexity of the method is 9
Complex Method,MessageVault.Cloud,MessageFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageFetcher.cs,ReadAll,Cyclomatic complexity of the method is 13
Complex Method,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnLargeBuffer,Cyclomatic complexity of the method is 8
Complex Method,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnBlocks,Cyclomatic complexity of the method is 8
Complex Method,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,Seek,Cyclomatic complexity of the method is 13
Complex Method,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,Cyclomatic complexity of the method is 7
Long Parameter List,MessageVault,Crc32Algorithm,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Crc32Algorithm.cs,CalculateHash,The method has 5 parameters.
Long Parameter List,MessageVault,MessageWithId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageWithId.cs,MessageWithId,The method has 5 parameters.
Long Parameter List,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The method has 4 parameters.
Long Parameter List,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,ReadMessages,The method has 4 parameters.
Long Parameter List,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,Subscribe,The method has 4 parameters.
Long Parameter List,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The method has 5 parameters.
Long Parameter List,MessageVault,Message,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Message.cs,Message,The method has 4 parameters.
Long Parameter List,MessageVault,PageReadStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\PageReadStream.cs,PageReadStream,The method has 4 parameters.
Long Parameter List,MessageVault.Cloud,MessageCopier,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageCopier.cs,MessageCopier,The method has 5 parameters.
Long Parameter List,MessageVault.Cloud,MessageFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageFetcher.cs,MessageFetcher,The method has 4 parameters.
Long Parameter List,MessageVault.Cloud,MessageFetcher,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageFetcher.cs,ReadAll,The method has 4 parameters.
Long Parameter List,MessageVault.Cloud,CloudSetup,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudSetup.cs,CopyToFiles,The method has 4 parameters.
Long Parameter List,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,GetStream,The method has 4 parameters.
Long Parameter List,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,RecyclableMemoryStream,The method has 4 parameters.
Long Parameter List,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,InternalRead,The method has 4 parameters.
Long Statement,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ReadUintInBigEndian,The length of the statement  "	return ((uint)array [position + 0] << 24) + ((uint)array [position + 1] << 16) + ((uint)array [position + 2] << 8) + ((uint)array [position + 3]); " is 146.
Long Statement,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,Subscribe,The length of the statement  "	sub.Task = Task.Factory.StartNew (() => RunSubscription (sub' start' ct' bufferSize' cacheSize)' TaskCreationOptions.LongRunning); " is 130.
Long Statement,MessageVault,PageReadStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\PageReadStream.cs,PreLoad,The length of the statement  "		var message = string.Format ("Buffer is too small. Cached {0}' requested {1}' cap {2}"' remainInBuffer' count' _buffer.Length); " is 127.
Long Statement,MessageVault.Cloud,CloudPageWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudPageWriter.cs,SaveAsync,The length of the statement  "		await _blob.WritePagesAsync (stream' offset' null' AccessCondition.GenerateIfMatchCondition (_etag)' null' null' token).ConfigureAwait (false); " is 143.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnLargeBuffer,The length of the statement  "		throw new ArgumentException ("buffer did not originate from this memory manager. The size is not a multiple of " + this.LargeBufferMultiple); " is 141.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnLargeBuffer,The length of the statement  "		if ((this.largePools [poolIndex].Count + 1) * buffer.Length <= this.MaximumFreeLargePoolBytes || this.MaximumFreeLargePoolBytes == 0) { " is 135.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnLargeBuffer,The length of the statement  "			Events.Write.MemoryStreamDiscardBuffer (Events.MemoryStreamBufferType.Large' tag' Events.MemoryStreamDiscardReason.EnoughFree); " is 127.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnLargeBuffer,The length of the statement  "		Events.Write.MemoryStreamDiscardBuffer (Events.MemoryStreamBufferType.Large' tag' Events.MemoryStreamDiscardReason.TooLarge); " is 125.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStreamManager,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\Events.cs,ReturnBlocks,The length of the statement  "			Events.Write.MemoryStreamDiscardBuffer (Events.MemoryStreamBufferType.Small' tag' Events.MemoryStreamDiscardReason.EnoughFree); " is 127.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,Dispose,The length of the statement  "		RecyclableMemoryStreamManager.Events.Write.MemoryStreamDoubleDispose (this.id' this.tag' this.allocationStack' this.disposeStack' doubleDisposeStack); " is 150.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,CheckDisposed,The length of the statement  "		throw new ObjectDisposedException (string.Format ("The stream with Id {0} and Tag {1} is disposed."' this.id' this.tag)); " is 121.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,InternalRead,The length of the statement  "			Buffer.BlockCopy (this.blocks [blockAndOffset.Block]' blockAndOffset.Offset' buffer' bytesWritten + offset' amountToCopy); " is 122.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,EnsureCapacity,The length of the statement  "		RecyclableMemoryStreamManager.Events.Write.MemoryStreamOverCapacity (newCapacity' this.memoryManager.MaximumStreamCapacity' this.tag' this.allocationStack); " is 156.
Long Statement,MessageVault.MemoryPool,RecyclableMemoryStream,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MemoryPool\RecyclableMemoryStream.cs,EnsureCapacity,The length of the statement  "		throw new InvalidOperationException ("Requested capacity is too large: " + newCapacity + ". Limit is " + this.memoryManager.MaximumStreamCapacity); " is 147.
Magic Number,MessageVault,Crc32Algorithm,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Crc32Algorithm.cs,InitializeTable,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	var entry = i;  	for (var j = 0; j < 8; j++)  		entry = ((entry & 1) == 1) ? (entry >> 1) ^ polynomial : (entry >> 1);  	createTable [i] = entry;  }  
Magic Number,MessageVault,Crc32Algorithm,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Crc32Algorithm.cs,InitializeTable,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	var entry = i;  	for (var j = 0; j < 8; j++)  		entry = ((entry & 1) == 1) ? (entry >> 1) ^ polynomial : (entry >> 1);  	createTable [i] = entry;  }  
Magic Number,MessageVault,Crc32Algorithm,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Crc32Algorithm.cs,InitializeTable,The following statement contains a magic number: for (var j = 0; j < 8; j++)  	entry = ((entry & 1) == 1) ? (entry >> 1) ^ polynomial : (entry >> 1);  
Magic Number,MessageVault,Crc32Algorithm,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Crc32Algorithm.cs,CalculateHash,The following statement contains a magic number: for (var i = start; i < size - start; i++)  	crc = (crc >> 8) ^ table [buffer [i] ^ crc & 0xff];  
Magic Number,MessageVault,Crc32Algorithm,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Crc32Algorithm.cs,CalculateHash,The following statement contains a magic number: crc = (crc >> 8) ^ table [buffer [i] ^ crc & 0xff];  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetTimestamp,The following statement contains a magic number: return ((long)_a << 16) + (_b >> 16);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetTimestamp,The following statement contains a magic number: return ((long)_a << 16) + (_b >> 16);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ReadUintInBigEndian,The following statement contains a magic number: return ((uint)array [position + 0] << 24) + ((uint)array [position + 1] << 16) + ((uint)array [position + 2] << 8) + ((uint)array [position + 3]);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ReadUintInBigEndian,The following statement contains a magic number: return ((uint)array [position + 0] << 24) + ((uint)array [position + 1] << 16) + ((uint)array [position + 2] << 8) + ((uint)array [position + 3]);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ReadUintInBigEndian,The following statement contains a magic number: return ((uint)array [position + 0] << 24) + ((uint)array [position + 1] << 16) + ((uint)array [position + 2] << 8) + ((uint)array [position + 3]);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ReadUintInBigEndian,The following statement contains a magic number: return ((uint)array [position + 0] << 24) + ((uint)array [position + 1] << 16) + ((uint)array [position + 2] << 8) + ((uint)array [position + 3]);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ReadUintInBigEndian,The following statement contains a magic number: return ((uint)array [position + 0] << 24) + ((uint)array [position + 1] << 16) + ((uint)array [position + 2] << 8) + ((uint)array [position + 3]);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,WriteIntInBigEndian,The following statement contains a magic number: array [position + 0] = (byte)((value & 0xFF000000) >> 24);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,WriteIntInBigEndian,The following statement contains a magic number: array [position + 1] = (byte)((value & 0xFF0000) >> 16);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,WriteIntInBigEndian,The following statement contains a magic number: array [position + 2] = (byte)((value & 0xFF00) >> 8);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,WriteIntInBigEndian,The following statement contains a magic number: array [position + 2] = (byte)((value & 0xFF00) >> 8);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,WriteIntInBigEndian,The following statement contains a magic number: array [position + 3] = (byte)((value & 0xFF));  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The following statement contains a magic number: _b = ReadUintInBigEndian (array' 4);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The following statement contains a magic number: _c = ReadUintInBigEndian (array' 8);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The following statement contains a magic number: _d = ReadUintInBigEndian (array' 12);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ToString,The following statement contains a magic number: builder.Insert (6 * 4' '-');  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ToString,The following statement contains a magic number: builder.Insert (6 * 4' '-');  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ToString,The following statement contains a magic number: builder.Insert (6 * 2' '-');  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,ToString,The following statement contains a magic number: builder.Insert (6 * 2' '-');  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The following statement contains a magic number: _a = (uint)(timestamp >> 16);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The following statement contains a magic number: _b = (uint)(((timestamp & 0xFFFF) << 16) + (offset >> 32));  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,MessageId,The following statement contains a magic number: _b = (uint)(((timestamp & 0xFFFF) << 16) + (offset >> 32));  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetBytes,The following statement contains a magic number: WriteIntInBigEndian (_b' result' 4);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetBytes,The following statement contains a magic number: WriteIntInBigEndian (_c' result' 8);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetBytes,The following statement contains a magic number: WriteIntInBigEndian (_d' result' 12);  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = _b;  	hashCode = (hashCode * 397) ^ _a;  	hashCode = (hashCode * 397) ^ _c;  	hashCode = (hashCode * 397) ^ _d;  	return (int)hashCode;  }  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = _b;  	hashCode = (hashCode * 397) ^ _a;  	hashCode = (hashCode * 397) ^ _c;  	hashCode = (hashCode * 397) ^ _d;  	return (int)hashCode;  }  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = _b;  	hashCode = (hashCode * 397) ^ _a;  	hashCode = (hashCode * 397) ^ _c;  	hashCode = (hashCode * 397) ^ _d;  	return (int)hashCode;  }  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _a;  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _c;  
Magic Number,MessageVault,MessageId,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageId.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _d;  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (!ct.IsCancellationRequested) {  	try {  		// read current max length  		var length = Position.Read ();  		sub.DebugKnownMaxOffset = length;  		using (var prs = new PageReadStream (Messages' position' length' buffer)) {  			using (var bin = new BinaryReader (prs)) {  				while (prs.Position < prs.Length) {  					var message = StorageFormat.Read (bin);  					sub.Buffer.Enqueue (message);  					sub.DebugEnqueuedOffset = prs.Position;  					position = prs.Position;  					while (sub.Buffer.Count >= cacheSize) {  						ct.WaitHandle.WaitOne (500);  					}  				}  			}  		}  		// wait till we get chance to advance  		while (Position.Read () == position) {  			if (ct.WaitHandle.WaitOne (1000)) {  				return;  			}  		}  	} catch (ForbiddenException) {  		throw;  	} catch (Exception ex) {  		Debug.Print ("Exception {0}"' ex);  		ct.WaitHandle.WaitOne (1000 * 5);  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (!ct.IsCancellationRequested) {  	try {  		// read current max length  		var length = Position.Read ();  		sub.DebugKnownMaxOffset = length;  		using (var prs = new PageReadStream (Messages' position' length' buffer)) {  			using (var bin = new BinaryReader (prs)) {  				while (prs.Position < prs.Length) {  					var message = StorageFormat.Read (bin);  					sub.Buffer.Enqueue (message);  					sub.DebugEnqueuedOffset = prs.Position;  					position = prs.Position;  					while (sub.Buffer.Count >= cacheSize) {  						ct.WaitHandle.WaitOne (500);  					}  				}  			}  		}  		// wait till we get chance to advance  		while (Position.Read () == position) {  			if (ct.WaitHandle.WaitOne (1000)) {  				return;  			}  		}  	} catch (ForbiddenException) {  		throw;  	} catch (Exception ex) {  		Debug.Print ("Exception {0}"' ex);  		ct.WaitHandle.WaitOne (1000 * 5);  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (!ct.IsCancellationRequested) {  	try {  		// read current max length  		var length = Position.Read ();  		sub.DebugKnownMaxOffset = length;  		using (var prs = new PageReadStream (Messages' position' length' buffer)) {  			using (var bin = new BinaryReader (prs)) {  				while (prs.Position < prs.Length) {  					var message = StorageFormat.Read (bin);  					sub.Buffer.Enqueue (message);  					sub.DebugEnqueuedOffset = prs.Position;  					position = prs.Position;  					while (sub.Buffer.Count >= cacheSize) {  						ct.WaitHandle.WaitOne (500);  					}  				}  			}  		}  		// wait till we get chance to advance  		while (Position.Read () == position) {  			if (ct.WaitHandle.WaitOne (1000)) {  				return;  			}  		}  	} catch (ForbiddenException) {  		throw;  	} catch (Exception ex) {  		Debug.Print ("Exception {0}"' ex);  		ct.WaitHandle.WaitOne (1000 * 5);  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (!ct.IsCancellationRequested) {  	try {  		// read current max length  		var length = Position.Read ();  		sub.DebugKnownMaxOffset = length;  		using (var prs = new PageReadStream (Messages' position' length' buffer)) {  			using (var bin = new BinaryReader (prs)) {  				while (prs.Position < prs.Length) {  					var message = StorageFormat.Read (bin);  					sub.Buffer.Enqueue (message);  					sub.DebugEnqueuedOffset = prs.Position;  					position = prs.Position;  					while (sub.Buffer.Count >= cacheSize) {  						ct.WaitHandle.WaitOne (500);  					}  				}  			}  		}  		// wait till we get chance to advance  		while (Position.Read () == position) {  			if (ct.WaitHandle.WaitOne (1000)) {  				return;  			}  		}  	} catch (ForbiddenException) {  		throw;  	} catch (Exception ex) {  		Debug.Print ("Exception {0}"' ex);  		ct.WaitHandle.WaitOne (1000 * 5);  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: try {  	// read current max length  	var length = Position.Read ();  	sub.DebugKnownMaxOffset = length;  	using (var prs = new PageReadStream (Messages' position' length' buffer)) {  		using (var bin = new BinaryReader (prs)) {  			while (prs.Position < prs.Length) {  				var message = StorageFormat.Read (bin);  				sub.Buffer.Enqueue (message);  				sub.DebugEnqueuedOffset = prs.Position;  				position = prs.Position;  				while (sub.Buffer.Count >= cacheSize) {  					ct.WaitHandle.WaitOne (500);  				}  			}  		}  	}  	// wait till we get chance to advance  	while (Position.Read () == position) {  		if (ct.WaitHandle.WaitOne (1000)) {  			return;  		}  	}  } catch (ForbiddenException) {  	throw;  } catch (Exception ex) {  	Debug.Print ("Exception {0}"' ex);  	ct.WaitHandle.WaitOne (1000 * 5);  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: try {  	// read current max length  	var length = Position.Read ();  	sub.DebugKnownMaxOffset = length;  	using (var prs = new PageReadStream (Messages' position' length' buffer)) {  		using (var bin = new BinaryReader (prs)) {  			while (prs.Position < prs.Length) {  				var message = StorageFormat.Read (bin);  				sub.Buffer.Enqueue (message);  				sub.DebugEnqueuedOffset = prs.Position;  				position = prs.Position;  				while (sub.Buffer.Count >= cacheSize) {  					ct.WaitHandle.WaitOne (500);  				}  			}  		}  	}  	// wait till we get chance to advance  	while (Position.Read () == position) {  		if (ct.WaitHandle.WaitOne (1000)) {  			return;  		}  	}  } catch (ForbiddenException) {  	throw;  } catch (Exception ex) {  	Debug.Print ("Exception {0}"' ex);  	ct.WaitHandle.WaitOne (1000 * 5);  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: try {  	// read current max length  	var length = Position.Read ();  	sub.DebugKnownMaxOffset = length;  	using (var prs = new PageReadStream (Messages' position' length' buffer)) {  		using (var bin = new BinaryReader (prs)) {  			while (prs.Position < prs.Length) {  				var message = StorageFormat.Read (bin);  				sub.Buffer.Enqueue (message);  				sub.DebugEnqueuedOffset = prs.Position;  				position = prs.Position;  				while (sub.Buffer.Count >= cacheSize) {  					ct.WaitHandle.WaitOne (500);  				}  			}  		}  	}  	// wait till we get chance to advance  	while (Position.Read () == position) {  		if (ct.WaitHandle.WaitOne (1000)) {  			return;  		}  	}  } catch (ForbiddenException) {  	throw;  } catch (Exception ex) {  	Debug.Print ("Exception {0}"' ex);  	ct.WaitHandle.WaitOne (1000 * 5);  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: try {  	// read current max length  	var length = Position.Read ();  	sub.DebugKnownMaxOffset = length;  	using (var prs = new PageReadStream (Messages' position' length' buffer)) {  		using (var bin = new BinaryReader (prs)) {  			while (prs.Position < prs.Length) {  				var message = StorageFormat.Read (bin);  				sub.Buffer.Enqueue (message);  				sub.DebugEnqueuedOffset = prs.Position;  				position = prs.Position;  				while (sub.Buffer.Count >= cacheSize) {  					ct.WaitHandle.WaitOne (500);  				}  			}  		}  	}  	// wait till we get chance to advance  	while (Position.Read () == position) {  		if (ct.WaitHandle.WaitOne (1000)) {  			return;  		}  	}  } catch (ForbiddenException) {  	throw;  } catch (Exception ex) {  	Debug.Print ("Exception {0}"' ex);  	ct.WaitHandle.WaitOne (1000 * 5);  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: using (var prs = new PageReadStream (Messages' position' length' buffer)) {  	using (var bin = new BinaryReader (prs)) {  		while (prs.Position < prs.Length) {  			var message = StorageFormat.Read (bin);  			sub.Buffer.Enqueue (message);  			sub.DebugEnqueuedOffset = prs.Position;  			position = prs.Position;  			while (sub.Buffer.Count >= cacheSize) {  				ct.WaitHandle.WaitOne (500);  			}  		}  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: using (var bin = new BinaryReader (prs)) {  	while (prs.Position < prs.Length) {  		var message = StorageFormat.Read (bin);  		sub.Buffer.Enqueue (message);  		sub.DebugEnqueuedOffset = prs.Position;  		position = prs.Position;  		while (sub.Buffer.Count >= cacheSize) {  			ct.WaitHandle.WaitOne (500);  		}  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (prs.Position < prs.Length) {  	var message = StorageFormat.Read (bin);  	sub.Buffer.Enqueue (message);  	sub.DebugEnqueuedOffset = prs.Position;  	position = prs.Position;  	while (sub.Buffer.Count >= cacheSize) {  		ct.WaitHandle.WaitOne (500);  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (sub.Buffer.Count >= cacheSize) {  	ct.WaitHandle.WaitOne (500);  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: ct.WaitHandle.WaitOne (500);  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: while (Position.Read () == position) {  	if (ct.WaitHandle.WaitOne (1000)) {  		return;  	}  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: if (ct.WaitHandle.WaitOne (1000)) {  	return;  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: ct.WaitHandle.WaitOne (1000 * 5);  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,RunSubscription,The following statement contains a magic number: ct.WaitHandle.WaitOne (1000 * 5);  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,GetMessagesAsync,The following statement contains a magic number: while (!ct.IsCancellationRequested) {  	var actual = Position.Read ();  	if (actual < start) {  		var msg = string.Format ("Actual stream length is {0}' but requested {1}"' actual' start);  		throw new InvalidOperationException (msg);  	}  	if (actual == start) {  		await Task.Delay (1000' ct);  		continue;  	}  	var result = await Task.Run (() => ReadMessages (start' actual' limit)' ct);  	return result;  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,GetMessagesAsync,The following statement contains a magic number: if (actual == start) {  	await Task.Delay (1000' ct);  	continue;  }  
Magic Number,MessageVault,MessageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\MessageReader.cs,GetMessagesAsync,The following statement contains a magic number: await Task.Delay (1000' ct);  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: using (var md = new MD5CryptoServiceProvider ()) {  	using (var crypto = new CryptoStream (source' md' CryptoStreamMode.Read)) {  		using (var bin = new BinaryReader (crypto' Encoding.UTF8' true)) {  			var version = bin.ReadByte ();  			if (version != FormatVersion) {  				throw new InvalidOperationException ("Unexpected transfer format version");  			}  			var count = bin.ReadUInt16 ();  			var result = new Message[count];  			for (var i = 0; i < count; i++) {  				var flags = bin.ReadByte ();  				var keyLength = bin.ReadByte ();  				var key = bin.ReadBytes (keyLength);  				var valueLength = bin.ReadUInt16 ();  				var value = bin.ReadBytes (valueLength);  				var crc = bin.ReadUInt32 ();  				var messageToWrite = new Message (flags' key' value' crc);  				result [i] = messageToWrite;  			}  			crypto.FlushFinalBlock ();  			var computed = md.Hash;  			//Debug.WriteLine("Expecting to read {0} at {1}"' BitConverter.ToString(computed)' source.Position);  			var hash = new byte[16];  			source.Read (hash' 0' 16);  			VerifyHash (computed' hash);  			return result;  		}  	}  }  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: using (var md = new MD5CryptoServiceProvider ()) {  	using (var crypto = new CryptoStream (source' md' CryptoStreamMode.Read)) {  		using (var bin = new BinaryReader (crypto' Encoding.UTF8' true)) {  			var version = bin.ReadByte ();  			if (version != FormatVersion) {  				throw new InvalidOperationException ("Unexpected transfer format version");  			}  			var count = bin.ReadUInt16 ();  			var result = new Message[count];  			for (var i = 0; i < count; i++) {  				var flags = bin.ReadByte ();  				var keyLength = bin.ReadByte ();  				var key = bin.ReadBytes (keyLength);  				var valueLength = bin.ReadUInt16 ();  				var value = bin.ReadBytes (valueLength);  				var crc = bin.ReadUInt32 ();  				var messageToWrite = new Message (flags' key' value' crc);  				result [i] = messageToWrite;  			}  			crypto.FlushFinalBlock ();  			var computed = md.Hash;  			//Debug.WriteLine("Expecting to read {0} at {1}"' BitConverter.ToString(computed)' source.Position);  			var hash = new byte[16];  			source.Read (hash' 0' 16);  			VerifyHash (computed' hash);  			return result;  		}  	}  }  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: using (var crypto = new CryptoStream (source' md' CryptoStreamMode.Read)) {  	using (var bin = new BinaryReader (crypto' Encoding.UTF8' true)) {  		var version = bin.ReadByte ();  		if (version != FormatVersion) {  			throw new InvalidOperationException ("Unexpected transfer format version");  		}  		var count = bin.ReadUInt16 ();  		var result = new Message[count];  		for (var i = 0; i < count; i++) {  			var flags = bin.ReadByte ();  			var keyLength = bin.ReadByte ();  			var key = bin.ReadBytes (keyLength);  			var valueLength = bin.ReadUInt16 ();  			var value = bin.ReadBytes (valueLength);  			var crc = bin.ReadUInt32 ();  			var messageToWrite = new Message (flags' key' value' crc);  			result [i] = messageToWrite;  		}  		crypto.FlushFinalBlock ();  		var computed = md.Hash;  		//Debug.WriteLine("Expecting to read {0} at {1}"' BitConverter.ToString(computed)' source.Position);  		var hash = new byte[16];  		source.Read (hash' 0' 16);  		VerifyHash (computed' hash);  		return result;  	}  }  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: using (var crypto = new CryptoStream (source' md' CryptoStreamMode.Read)) {  	using (var bin = new BinaryReader (crypto' Encoding.UTF8' true)) {  		var version = bin.ReadByte ();  		if (version != FormatVersion) {  			throw new InvalidOperationException ("Unexpected transfer format version");  		}  		var count = bin.ReadUInt16 ();  		var result = new Message[count];  		for (var i = 0; i < count; i++) {  			var flags = bin.ReadByte ();  			var keyLength = bin.ReadByte ();  			var key = bin.ReadBytes (keyLength);  			var valueLength = bin.ReadUInt16 ();  			var value = bin.ReadBytes (valueLength);  			var crc = bin.ReadUInt32 ();  			var messageToWrite = new Message (flags' key' value' crc);  			result [i] = messageToWrite;  		}  		crypto.FlushFinalBlock ();  		var computed = md.Hash;  		//Debug.WriteLine("Expecting to read {0} at {1}"' BitConverter.ToString(computed)' source.Position);  		var hash = new byte[16];  		source.Read (hash' 0' 16);  		VerifyHash (computed' hash);  		return result;  	}  }  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: using (var bin = new BinaryReader (crypto' Encoding.UTF8' true)) {  	var version = bin.ReadByte ();  	if (version != FormatVersion) {  		throw new InvalidOperationException ("Unexpected transfer format version");  	}  	var count = bin.ReadUInt16 ();  	var result = new Message[count];  	for (var i = 0; i < count; i++) {  		var flags = bin.ReadByte ();  		var keyLength = bin.ReadByte ();  		var key = bin.ReadBytes (keyLength);  		var valueLength = bin.ReadUInt16 ();  		var value = bin.ReadBytes (valueLength);  		var crc = bin.ReadUInt32 ();  		var messageToWrite = new Message (flags' key' value' crc);  		result [i] = messageToWrite;  	}  	crypto.FlushFinalBlock ();  	var computed = md.Hash;  	//Debug.WriteLine("Expecting to read {0} at {1}"' BitConverter.ToString(computed)' source.Position);  	var hash = new byte[16];  	source.Read (hash' 0' 16);  	VerifyHash (computed' hash);  	return result;  }  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: using (var bin = new BinaryReader (crypto' Encoding.UTF8' true)) {  	var version = bin.ReadByte ();  	if (version != FormatVersion) {  		throw new InvalidOperationException ("Unexpected transfer format version");  	}  	var count = bin.ReadUInt16 ();  	var result = new Message[count];  	for (var i = 0; i < count; i++) {  		var flags = bin.ReadByte ();  		var keyLength = bin.ReadByte ();  		var key = bin.ReadBytes (keyLength);  		var valueLength = bin.ReadUInt16 ();  		var value = bin.ReadBytes (valueLength);  		var crc = bin.ReadUInt32 ();  		var messageToWrite = new Message (flags' key' value' crc);  		result [i] = messageToWrite;  	}  	crypto.FlushFinalBlock ();  	var computed = md.Hash;  	//Debug.WriteLine("Expecting to read {0} at {1}"' BitConverter.ToString(computed)' source.Position);  	var hash = new byte[16];  	source.Read (hash' 0' 16);  	VerifyHash (computed' hash);  	return result;  }  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,ReadMessages,The following statement contains a magic number: source.Read (hash' 0' 16);  
Magic Number,MessageVault,TransferFormat,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\TransferFormat.cs,VerifyHash,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	if (computed [i] != actual [i]) {  		throw new InvalidDataException ("Data transfer failure");  	}  }  
Magic Number,MessageVault.Cloud,CloudCheckpointReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudCheckpointReader.cs,Read,The following statement contains a magic number: try {  	// blob exists will actually fetch attributes but suppress error on 404  	if (!_blob.Exists ()) {  		return 0;  	}  	var s = _blob.Metadata [CloudSetup.CheckpointMetadataName];  	var result = long.Parse (s);  	Ensure.ZeroOrGreater ("result"' result);  	return result;  } catch (StorageException ex) {  	// if forbidden' then we might have an expired SAS token  	if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  		throw new ForbiddenException ("Can't read blob"' ex);  	}  	throw;  }  
Magic Number,MessageVault.Cloud,CloudCheckpointReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudCheckpointReader.cs,Read,The following statement contains a magic number: if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  	throw new ForbiddenException ("Can't read blob"' ex);  }  
Magic Number,MessageVault.Cloud,CloudCheckpointReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudCheckpointReader.cs,ReadAsync,The following statement contains a magic number: try {  	// blob exists will actually fetch attributes but suppress error on 404  	var exists = await _blob.ExistsAsync (token);  	if (!exists) {  		return 0;  	}  	var s = _blob.Metadata [CloudSetup.CheckpointMetadataName];  	var result = long.Parse (s);  	Ensure.ZeroOrGreater ("result"' result);  	return result;  } catch (StorageException ex) {  	// if forbidden' then we might have an expired SAS token  	if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  		throw new ForbiddenException ("Can't read blob"' ex);  	}  	throw;  }  
Magic Number,MessageVault.Cloud,CloudCheckpointReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudCheckpointReader.cs,ReadAsync,The following statement contains a magic number: if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  	throw new ForbiddenException ("Can't read blob"' ex);  }  
Magic Number,MessageVault.Cloud,MessageCopier,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageCopier.cs,Run,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	var result = await CopyNextBatch (token).ConfigureAwait (false);  	if (result.CopiedBytes == 0) {  		await Task.Delay (1000' token).ConfigureAwait (false);  	}  }  
Magic Number,MessageVault.Cloud,MessageCopier,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageCopier.cs,Run,The following statement contains a magic number: if (result.CopiedBytes == 0) {  	await Task.Delay (1000' token).ConfigureAwait (false);  }  
Magic Number,MessageVault.Cloud,MessageCopier,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\MessageCopier.cs,Run,The following statement contains a magic number: await Task.Delay (1000' token).ConfigureAwait (false);  
Magic Number,MessageVault.Cloud,CloudPageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudPageReader.cs,DownloadRangeToStream,The following statement contains a magic number: try {  	var context = new OperationContext ();  	context.SendingRequest += (sender' e) => {  		e.Request.Headers ["if-match"] = "*";  	};  	_blob.DownloadRangeToStream (stream' offset' length' null' null' context);  } catch (StorageException ex) {  	// if forbidden' then we might have an expired SAS token  	if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  		throw new ForbiddenException ("Can't read blob"' ex);  	}  	throw;  }  
Magic Number,MessageVault.Cloud,CloudPageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudPageReader.cs,DownloadRangeToStream,The following statement contains a magic number: if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  	throw new ForbiddenException ("Can't read blob"' ex);  }  
Magic Number,MessageVault.Cloud,CloudPageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudPageReader.cs,DownloadRangeToStreamAsync,The following statement contains a magic number: try {  	var context = new OperationContext ();  	context.SendingRequest += (sender' e) => {  		e.Request.Headers ["if-match"] = "*";  	};  	await _blob.DownloadRangeToStreamAsync (stream' offset' length' null' null' context).ConfigureAwait (false);  } catch (StorageException ex) {  	// if forbidden' then we might have an expired SAS token  	if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  		throw new ForbiddenException ("Can't read blob"' ex);  	}  	throw;  }  
Magic Number,MessageVault.Cloud,CloudPageReader,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Cloud\CloudPageReader.cs,DownloadRangeToStreamAsync,The following statement contains a magic number: if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 403) {  	throw new ForbiddenException ("Can't read blob"' ex);  }  
Magic Number,MessageVault.Files,FilePageWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Files\FilePageWriter.cs,SaveAsync,The following statement contains a magic number: await stream.CopyToAsync (_stream' 81920' token).ConfigureAwait (false);  
Magic Number,MessageVault.Files,FilePageWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Files\FilePageWriter.cs,GetMaxCommitSize,The following statement contains a magic number: return 4 * 1024 * 1024;  
Magic Number,MessageVault.Files,FilePageWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Files\FilePageWriter.cs,GetMaxCommitSize,The following statement contains a magic number: return 4 * 1024 * 1024;  
Magic Number,MessageVault.Files,FilePageWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Files\FilePageWriter.cs,GetMaxCommitSize,The following statement contains a magic number: return 4 * 1024 * 1024;  
Magic Number,MessageVault.Memory,MemoryPageReaderWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Memory\MemoryPageReaderWriter.cs,SaveAsync,The following statement contains a magic number: await stream.CopyToAsync (_stream' 81920' token).ConfigureAwait (false);  
Magic Number,MessageVault.Memory,MemoryPageReaderWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Memory\MemoryPageReaderWriter.cs,GetMaxCommitSize,The following statement contains a magic number: return 4 * 1024 * 1024;  
Magic Number,MessageVault.Memory,MemoryPageReaderWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Memory\MemoryPageReaderWriter.cs,GetMaxCommitSize,The following statement contains a magic number: return 4 * 1024 * 1024;  
Magic Number,MessageVault.Memory,MemoryPageReaderWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Memory\MemoryPageReaderWriter.cs,GetMaxCommitSize,The following statement contains a magic number: return 4 * 1024 * 1024;  
Magic Number,MessageVault.Memory,MemoryPageReaderWriter,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Memory\MemoryPageReaderWriter.cs,GetPageSize,The following statement contains a magic number: return 512;  
Magic Number,MessageVault.Tests,MessageIdTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\MessageIdTests.cs,OffsetRoundtrip,The following statement contains a magic number: for (int i = 0; i < 48; i++) {  	var created = MessageId.CreateNew (value);  	Assert.AreEqual (value' created.GetOffset ()' "instance " + created);  	var rehydrated = new MessageId (created.GetBytes ());  	Assert.AreEqual (value' rehydrated.GetOffset ()' "roundtrip");  	value = value << 1;  }  
Magic Number,MessageVault.Tests,MessageIdTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\MessageIdTests.cs,TimestampRoundtrip,The following statement contains a magic number: for (int i = 0; i < 48; i++) {  	var created = new MessageId (i' 0' 0);  	var actual = MessageId.Epoch.AddMilliseconds (i);  	Assert.AreEqual (actual' created.GetTimeUtc ()' "instance " + created);  	var rehydrated = new MessageId (created.GetBytes ());  	Assert.AreEqual (actual' rehydrated.GetTimeUtc ()' "roundtrip");  	value = value << 1;  }  
Magic Number,MessageVault.Tests,MessageIdTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\MessageIdTests.cs,RandRoundtrip,The following statement contains a magic number: for (int i = 0; i < 32; i++) {  	var created = new MessageId (0' 0' i);  	Assert.AreEqual (i' created.GetRand ()' "instance " + created);  	var rehydrated = new MessageId (created.GetBytes ());  	Assert.AreEqual (i' rehydrated.GetRand ()' "roundtrip");  	value = value << 1;  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: for (long i = 0; i < 20; i++) {  	_given.Write (i);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[11])) {  	using (var bin = new BinaryReader (reader)) {  		for (long i = 0; i < 20; i++) {  			Assert.AreEqual (i * 8' reader.Position);  			Assert.AreEqual (i' bin.ReadInt64 ());  		}  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[11])) {  	using (var bin = new BinaryReader (reader)) {  		for (long i = 0; i < 20; i++) {  			Assert.AreEqual (i * 8' reader.Position);  			Assert.AreEqual (i' bin.ReadInt64 ());  		}  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[11])) {  	using (var bin = new BinaryReader (reader)) {  		for (long i = 0; i < 20; i++) {  			Assert.AreEqual (i * 8' reader.Position);  			Assert.AreEqual (i' bin.ReadInt64 ());  		}  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	for (long i = 0; i < 20; i++) {  		Assert.AreEqual (i * 8' reader.Position);  		Assert.AreEqual (i' bin.ReadInt64 ());  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	for (long i = 0; i < 20; i++) {  		Assert.AreEqual (i * 8' reader.Position);  		Assert.AreEqual (i' bin.ReadInt64 ());  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: for (long i = 0; i < 20; i++) {  	Assert.AreEqual (i * 8' reader.Position);  	Assert.AreEqual (i' bin.ReadInt64 ());  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: for (long i = 0; i < 20; i++) {  	Assert.AreEqual (i * 8' reader.Position);  	Assert.AreEqual (i' bin.ReadInt64 ());  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_small_cache,The following statement contains a magic number: Assert.AreEqual (i * 8' reader.Position);  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (10' bin.ReadInt64 ());  		Assert.AreEqual (8' reader.Position);  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (10' bin.ReadInt64 ());  		Assert.AreEqual (8' reader.Position);  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (10' bin.ReadInt64 ());  		Assert.AreEqual (8' reader.Position);  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (10' bin.ReadInt64 ());  		Assert.AreEqual (8' reader.Position);  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (10' bin.ReadInt64 ());  		Assert.AreEqual (8' reader.Position);  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 0' _mem.Position' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (10' bin.ReadInt64 ());  		Assert.AreEqual (8' reader.Position);  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: Assert.AreEqual (16' reader.Length);  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	Assert.AreEqual (10' bin.ReadInt64 ());  	Assert.AreEqual (8' reader.Position);  	Assert.AreEqual (20' bin.ReadInt64 ());  	Assert.AreEqual (16' reader.Position);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	Assert.AreEqual (10' bin.ReadInt64 ());  	Assert.AreEqual (8' reader.Position);  	Assert.AreEqual (20' bin.ReadInt64 ());  	Assert.AreEqual (16' reader.Position);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	Assert.AreEqual (10' bin.ReadInt64 ());  	Assert.AreEqual (8' reader.Position);  	Assert.AreEqual (20' bin.ReadInt64 ());  	Assert.AreEqual (16' reader.Position);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	Assert.AreEqual (10' bin.ReadInt64 ());  	Assert.AreEqual (8' reader.Position);  	Assert.AreEqual (20' bin.ReadInt64 ());  	Assert.AreEqual (16' reader.Position);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: Assert.AreEqual (10' bin.ReadInt64 ());  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: Assert.AreEqual (8' reader.Position);  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: Assert.AreEqual (20' bin.ReadInt64 ());  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_large_cache,The following statement contains a magic number: Assert.AreEqual (16' reader.Position);  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var reader = new PageReadStream (_reader' 8' 16' new byte[1000])) {  	Assert.AreEqual (16' reader.Length);  	Assert.AreEqual (8' reader.Position);  	using (var bin = new BinaryReader (reader)) {  		Assert.AreEqual (20' bin.ReadInt64 ());  		Assert.AreEqual (16' reader.Position);  	}  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: Assert.AreEqual (16' reader.Length);  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: Assert.AreEqual (8' reader.Position);  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	Assert.AreEqual (20' bin.ReadInt64 ());  	Assert.AreEqual (16' reader.Position);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: using (var bin = new BinaryReader (reader)) {  	Assert.AreEqual (20' bin.ReadInt64 ());  	Assert.AreEqual (16' reader.Position);  }  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: Assert.AreEqual (20' bin.ReadInt64 ());  
Magic Number,MessageVault.Tests,PageReadStreamTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\PageReadStreamTests.cs,given_offset,The following statement contains a magic number: Assert.AreEqual (16' reader.Position);  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	var batchSize = (i % 10) + 1;  	var list = new Message[batchSize];  	for (int j = 0; j < batchSize; j++) {  		var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  		var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  		list [j] = write;  	}  	Writer.Append (list);  	written.AddRange (list);  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	var batchSize = (i % 10) + 1;  	var list = new Message[batchSize];  	for (int j = 0; j < batchSize; j++) {  		var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  		var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  		list [j] = write;  	}  	Writer.Append (list);  	written.AddRange (list);  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	var batchSize = (i % 10) + 1;  	var list = new Message[batchSize];  	for (int j = 0; j < batchSize; j++) {  		var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  		var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  		list [j] = write;  	}  	Writer.Append (list);  	written.AddRange (list);  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	var batchSize = (i % 10) + 1;  	var list = new Message[batchSize];  	for (int j = 0; j < batchSize; j++) {  		var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  		var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  		list [j] = write;  	}  	Writer.Append (list);  	written.AddRange (list);  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	var batchSize = (i % 10) + 1;  	var list = new Message[batchSize];  	for (int j = 0; j < batchSize; j++) {  		var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  		var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  		list [j] = write;  	}  	Writer.Append (list);  	written.AddRange (list);  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int j = 0; j < batchSize; j++) {  	var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  	var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  	list [j] = write;  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int j = 0; j < batchSize; j++) {  	var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  	var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  	list [j] = write;  }  
Magic Number,MessageVault.Tests,SyntheticTestBase,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\SyntheticTestBase.cs,quasi_random_test,The following statement contains a magic number: for (int j = 0; j < batchSize; j++) {  	var size = ((i * 1024 + j + 3) % (maxCommitSize - 512)) % Constants.MaxValueSize;  	var write = Message.Create ("{0}:{1}"' RandBytes (size + 1));  	list [j] = write;  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,GenerateMessages,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	var key = "key" + i;  	var bytes = new byte[i + i % 7 * 21];  	for (int j = 0; j < bytes.Length; j++) {  		bytes [j] = (byte)j;  	}  	result.Add (Message.Create (key' bytes));  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,GenerateMessages,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	var key = "key" + i;  	var bytes = new byte[i + i % 7 * 21];  	for (int j = 0; j < bytes.Length; j++) {  		bytes [j] = (byte)j;  	}  	result.Add (Message.Create (key' bytes));  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,ValidHash,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	var messages = GenerateMessages (7);  	TransferFormat.WriteMessages (messages' mem);  	mem.Seek (0' SeekOrigin.Begin);  	var actual = TransferFormat.ReadMessages (mem);  	AssertEqual (messages' actual);  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	var messages = GenerateMessages (7);  	TransferFormat.WriteMessages (messages' mem);  	// zero the hash  	mem.Seek (-16' SeekOrigin.Current);  	mem.Write (new byte[16]' 0' 4);  	mem.Seek (0' SeekOrigin.Begin);  	var actual = TransferFormat.ReadMessages (mem);  	AssertEqual (messages' actual);  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	var messages = GenerateMessages (7);  	TransferFormat.WriteMessages (messages' mem);  	// zero the hash  	mem.Seek (-16' SeekOrigin.Current);  	mem.Write (new byte[16]' 0' 4);  	mem.Seek (0' SeekOrigin.Begin);  	var actual = TransferFormat.ReadMessages (mem);  	AssertEqual (messages' actual);  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	var messages = GenerateMessages (7);  	TransferFormat.WriteMessages (messages' mem);  	// zero the hash  	mem.Seek (-16' SeekOrigin.Current);  	mem.Write (new byte[16]' 0' 4);  	mem.Seek (0' SeekOrigin.Begin);  	var actual = TransferFormat.ReadMessages (mem);  	AssertEqual (messages' actual);  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	var messages = GenerateMessages (7);  	TransferFormat.WriteMessages (messages' mem);  	// zero the hash  	mem.Seek (-16' SeekOrigin.Current);  	mem.Write (new byte[16]' 0' 4);  	mem.Seek (0' SeekOrigin.Begin);  	var actual = TransferFormat.ReadMessages (mem);  	AssertEqual (messages' actual);  }  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: mem.Seek (-16' SeekOrigin.Current);  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: mem.Write (new byte[16]' 0' 4);  
Magic Number,MessageVault.Tests,TransferFormatTests,D:\newReposJune17\agileharbor_messageVault\src\MessageVault.Core\Tests\TransferFormatTests.cs,InValidHash,The following statement contains a magic number: mem.Write (new byte[16]' 0' 4);  
