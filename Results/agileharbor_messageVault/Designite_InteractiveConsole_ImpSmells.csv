Implementation smell,Namespace,Class,File,Method,Description
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: using (var client = new CloudClient ("http://127.0.0.1:8001"' Constants.DefaultLogin' Constants.DefaultPassword)) {  	// consumer  	var checkpoint = new MemoryCheckpointReaderWriter ();  	var consumer = new ConsumerSample (checkpoint' client);  	var task = Task.Run (() => consumer.Run (CancellationToken.None));  	for (int i = 0; i < 10; i++) {  		var message = Message.Create ("test"' new byte[20]);  		var response = await client.PostMessagesAsync ("teststream"' new[] {  			message  		});  		Console.WriteLine (response.Position);  		await Task.Delay (1000);  	}  	await task;  }  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: using (var client = new CloudClient ("http://127.0.0.1:8001"' Constants.DefaultLogin' Constants.DefaultPassword)) {  	// consumer  	var checkpoint = new MemoryCheckpointReaderWriter ();  	var consumer = new ConsumerSample (checkpoint' client);  	var task = Task.Run (() => consumer.Run (CancellationToken.None));  	for (int i = 0; i < 10; i++) {  		var message = Message.Create ("test"' new byte[20]);  		var response = await client.PostMessagesAsync ("teststream"' new[] {  			message  		});  		Console.WriteLine (response.Position);  		await Task.Delay (1000);  	}  	await task;  }  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: using (var client = new CloudClient ("http://127.0.0.1:8001"' Constants.DefaultLogin' Constants.DefaultPassword)) {  	// consumer  	var checkpoint = new MemoryCheckpointReaderWriter ();  	var consumer = new ConsumerSample (checkpoint' client);  	var task = Task.Run (() => consumer.Run (CancellationToken.None));  	for (int i = 0; i < 10; i++) {  		var message = Message.Create ("test"' new byte[20]);  		var response = await client.PostMessagesAsync ("teststream"' new[] {  			message  		});  		Console.WriteLine (response.Position);  		await Task.Delay (1000);  	}  	await task;  }  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	var message = Message.Create ("test"' new byte[20]);  	var response = await client.PostMessagesAsync ("teststream"' new[] {  		message  	});  	Console.WriteLine (response.Position);  	await Task.Delay (1000);  }  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	var message = Message.Create ("test"' new byte[20]);  	var response = await client.PostMessagesAsync ("teststream"' new[] {  		message  	});  	Console.WriteLine (response.Position);  	await Task.Delay (1000);  }  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	var message = Message.Create ("test"' new byte[20]);  	var response = await client.PostMessagesAsync ("teststream"' new[] {  		message  	});  	Console.WriteLine (response.Position);  	await Task.Delay (1000);  }  
Magic Number,InteractiveConsole,Program,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,RunAsync,The following statement contains a magic number: await Task.Delay (1000);  
Magic Number,InteractiveConsole,ConsumerSample,D:\newReposJune17\agileharbor_messageVault\src\InteractiveConsole\Program.cs,Run,The following statement contains a magic number: while (!ct.IsCancellationRequested) {  	var result = await reader.GetMessagesAsync (ct' current' 100);  	if (result.HasMessages ()) {  		foreach (var message in result.Messages) {  			Console.WriteLine ("Got message! " + message.Id);  		}  		current = result.NextOffset;  		_checkpoint.Update (current);  	}  }  
