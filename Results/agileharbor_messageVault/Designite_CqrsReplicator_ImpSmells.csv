Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,Cyclomatic complexity of the method is 8
Long Parameter List,CqrsReplicator,DataWithKey,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\IAppendOnlyStore.cs,DataWithKey,The method has 4 parameters.
Long Parameter List,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,EventStorePublisher,The method has 4 parameters.
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var localStoreIsEmpty = _store.GetCurrentVersion () == 0;  		if (localStoreIsEmpty) {  			token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  			continue;  		}  		_log.Information ("Starting ES replication to {stream}"' _streamName);  		using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  			connectFailure = 0;  			var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  			while (!token.IsCancellationRequested) {  				if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  					// no work to do' so sleep and continue  					token.WaitHandle.WaitOne (500);  					continue;  				}  				var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  				var remoteEvents = keys.Select (MessageToWrite).ToList ();  				conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  				lastReplicatedEvent = keys.Last ().StoreVersion;  				_checkpoint.Update (lastReplicatedEvent);  			}  		}  	} catch (Exception ex) {  		if (connectFailure == 0) {  			_log.Error (ex' "Write connection failure");  		}  		connectFailure += 1;  		token.WaitHandle.WaitOne (TimeSpan.FromMinutes (1));  	}  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var localStoreIsEmpty = _store.GetCurrentVersion () == 0;  		if (localStoreIsEmpty) {  			token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  			continue;  		}  		_log.Information ("Starting ES replication to {stream}"' _streamName);  		using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  			connectFailure = 0;  			var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  			while (!token.IsCancellationRequested) {  				if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  					// no work to do' so sleep and continue  					token.WaitHandle.WaitOne (500);  					continue;  				}  				var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  				var remoteEvents = keys.Select (MessageToWrite).ToList ();  				conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  				lastReplicatedEvent = keys.Last ().StoreVersion;  				_checkpoint.Update (lastReplicatedEvent);  			}  		}  	} catch (Exception ex) {  		if (connectFailure == 0) {  			_log.Error (ex' "Write connection failure");  		}  		connectFailure += 1;  		token.WaitHandle.WaitOne (TimeSpan.FromMinutes (1));  	}  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	try {  		var localStoreIsEmpty = _store.GetCurrentVersion () == 0;  		if (localStoreIsEmpty) {  			token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  			continue;  		}  		_log.Information ("Starting ES replication to {stream}"' _streamName);  		using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  			connectFailure = 0;  			var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  			while (!token.IsCancellationRequested) {  				if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  					// no work to do' so sleep and continue  					token.WaitHandle.WaitOne (500);  					continue;  				}  				var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  				var remoteEvents = keys.Select (MessageToWrite).ToList ();  				conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  				lastReplicatedEvent = keys.Last ().StoreVersion;  				_checkpoint.Update (lastReplicatedEvent);  			}  		}  	} catch (Exception ex) {  		if (connectFailure == 0) {  			_log.Error (ex' "Write connection failure");  		}  		connectFailure += 1;  		token.WaitHandle.WaitOne (TimeSpan.FromMinutes (1));  	}  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: try {  	var localStoreIsEmpty = _store.GetCurrentVersion () == 0;  	if (localStoreIsEmpty) {  		token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  		continue;  	}  	_log.Information ("Starting ES replication to {stream}"' _streamName);  	using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  		connectFailure = 0;  		var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  		while (!token.IsCancellationRequested) {  			if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  				// no work to do' so sleep and continue  				token.WaitHandle.WaitOne (500);  				continue;  			}  			var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  			var remoteEvents = keys.Select (MessageToWrite).ToList ();  			conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  			lastReplicatedEvent = keys.Last ().StoreVersion;  			_checkpoint.Update (lastReplicatedEvent);  		}  	}  } catch (Exception ex) {  	if (connectFailure == 0) {  		_log.Error (ex' "Write connection failure");  	}  	connectFailure += 1;  	token.WaitHandle.WaitOne (TimeSpan.FromMinutes (1));  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: try {  	var localStoreIsEmpty = _store.GetCurrentVersion () == 0;  	if (localStoreIsEmpty) {  		token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  		continue;  	}  	_log.Information ("Starting ES replication to {stream}"' _streamName);  	using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  		connectFailure = 0;  		var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  		while (!token.IsCancellationRequested) {  			if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  				// no work to do' so sleep and continue  				token.WaitHandle.WaitOne (500);  				continue;  			}  			var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  			var remoteEvents = keys.Select (MessageToWrite).ToList ();  			conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  			lastReplicatedEvent = keys.Last ().StoreVersion;  			_checkpoint.Update (lastReplicatedEvent);  		}  	}  } catch (Exception ex) {  	if (connectFailure == 0) {  		_log.Error (ex' "Write connection failure");  	}  	connectFailure += 1;  	token.WaitHandle.WaitOne (TimeSpan.FromMinutes (1));  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: try {  	var localStoreIsEmpty = _store.GetCurrentVersion () == 0;  	if (localStoreIsEmpty) {  		token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  		continue;  	}  	_log.Information ("Starting ES replication to {stream}"' _streamName);  	using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  		connectFailure = 0;  		var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  		while (!token.IsCancellationRequested) {  			if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  				// no work to do' so sleep and continue  				token.WaitHandle.WaitOne (500);  				continue;  			}  			var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  			var remoteEvents = keys.Select (MessageToWrite).ToList ();  			conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  			lastReplicatedEvent = keys.Last ().StoreVersion;  			_checkpoint.Update (lastReplicatedEvent);  		}  	}  } catch (Exception ex) {  	if (connectFailure == 0) {  		_log.Error (ex' "Write connection failure");  	}  	connectFailure += 1;  	token.WaitHandle.WaitOne (TimeSpan.FromMinutes (1));  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: if (localStoreIsEmpty) {  	token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  	continue;  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: token.WaitHandle.WaitOne (TimeSpan.FromSeconds (30));  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  	connectFailure = 0;  	var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  	while (!token.IsCancellationRequested) {  		if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  			// no work to do' so sleep and continue  			token.WaitHandle.WaitOne (500);  			continue;  		}  		var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  		var remoteEvents = keys.Select (MessageToWrite).ToList ();  		conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  		lastReplicatedEvent = keys.Last ().StoreVersion;  		_checkpoint.Update (lastReplicatedEvent);  	}  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: using (var conn = new CloudClient (_config.Host' _config.Login' _config.Password)) {  	connectFailure = 0;  	var lastReplicatedEvent = _checkpoint.GetOrInitPosition ();  	while (!token.IsCancellationRequested) {  		if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  			// no work to do' so sleep and continue  			token.WaitHandle.WaitOne (500);  			continue;  		}  		var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  		var remoteEvents = keys.Select (MessageToWrite).ToList ();  		conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  		lastReplicatedEvent = keys.Last ().StoreVersion;  		_checkpoint.Update (lastReplicatedEvent);  	}  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  		// no work to do' so sleep and continue  		token.WaitHandle.WaitOne (500);  		continue;  	}  	var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  	var remoteEvents = keys.Select (MessageToWrite).ToList ();  	conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  	lastReplicatedEvent = keys.Last ().StoreVersion;  	_checkpoint.Update (lastReplicatedEvent);  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  		// no work to do' so sleep and continue  		token.WaitHandle.WaitOne (500);  		continue;  	}  	var keys = _store.ReadRecords (lastReplicatedEvent' 1000).ToList ();  	var remoteEvents = keys.Select (MessageToWrite).ToList ();  	conn.PostMessagesAsync (_streamName' remoteEvents).Wait (token);  	lastReplicatedEvent = keys.Last ().StoreVersion;  	_checkpoint.Update (lastReplicatedEvent);  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: if (lastReplicatedEvent == _store.GetCurrentVersion ()) {  	// no work to do' so sleep and continue  	token.WaitHandle.WaitOne (500);  	continue;  }  
Magic Number,CqrsReplicator,EventStorePublisher,D:\newReposJune17\agileharbor_messageVault\src\CqrsReplicator\Program.cs,Run,The following statement contains a magic number: token.WaitHandle.WaitOne (500);  
