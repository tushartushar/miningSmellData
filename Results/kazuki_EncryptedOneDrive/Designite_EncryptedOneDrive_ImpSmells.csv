Implementation smell,Namespace,Class,File,Method,Description
Long Method,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,LoadMetadata,The method has 153 lines of code.
Complex Method,EncryptedOneDrive,AppLoader,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\AppLoader.cs,Main,Cyclomatic complexity of the method is 9
Complex Method,EncryptedOneDrive,Config,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Config.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,EncryptedOneDrive,Config,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Config.cs,Save,Cyclomatic complexity of the method is 11
Complex Method,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,LogReplay,Cyclomatic complexity of the method is 12
Complex Method,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,LogReplay,Cyclomatic complexity of the method is 20
Complex Method,EncryptedOneDrive,OldOneDriveClient,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldOneDriveClient.cs,updateCache,Cyclomatic complexity of the method is 8
Complex Method,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,LoadMetadata,Cyclomatic complexity of the method is 37
Complex Method,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,ReadCheckPoint,Cyclomatic complexity of the method is 10
Complex Method,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,WriteCheckPoint,Cyclomatic complexity of the method is 10
Complex Method,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,Replay,Cyclomatic complexity of the method is 14
Complex Method,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,Cyclomatic complexity of the method is 14
Complex Method,EncryptedOneDrive.OneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OneDrive\FileSystem.cs,GetObjectProperty,Cyclomatic complexity of the method is 12
Long Parameter List,EncryptedOneDrive,AppLoader,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\AppLoader.cs,Login,The method has 5 parameters.
Long Parameter List,EncryptedOneDrive,Fuse,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Fuse.cs,OnReadHandle,The method has 5 parameters.
Long Parameter List,EncryptedOneDrive,Fuse,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Fuse.cs,OnWriteHandle,The method has 5 parameters.
Long Parameter List,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,CreateFileInternal,The method has 5 parameters.
Long Parameter List,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,WriteLog,The method has 5 parameters.
Long Parameter List,EncryptedOneDrive.Security,IAuthenticatedCryptoTransform,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\IAuthenticatedCryptoTransform.cs,TransformBlock,The method has 5 parameters.
Long Statement,EncryptedOneDrive,AppLoader,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\AppLoader.cs,Login,The length of the statement  "	if (DateTime.TryParseExact (cfg.Get ("onedrive.auth.expiration"' "")' "O"' null' System.Globalization.DateTimeStyles.RoundtripKind' out expiration)) { " is 150.
Long Statement,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,LoadMetadata,The length of the statement  "		if (latestMetaFileName == null || string.Compare (latestMetaFileName' Path.GetFileName (latestLocalMetaFileName)' StringComparison.Ordinal) <= 0) { " is 147.
Long Statement,EncryptedOneDrive.Security,LiveConnectClient,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\LiveConnectClient.cs,ValidateAccessToken,The length of the statement  "	var req = (HttpWebRequest)WebRequest.Create (string.Format ("https://apis.live.net/v5.0/me?access_token={0}"' Uri.EscapeDataString (AccessToken))); " is 147.
Complex Conditional,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,CreateDecryptor,The conditional expression  "key.Length != KeyByteSize || iv.Length != IVByteSize || (tag != null && tag.Length != TagByteSize)"  is complex.
Empty Catch Block,EncryptedOneDrive,OldOneDriveClient,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldOneDriveClient.cs,CreateDirectory,The method has an empty catch block.
Empty Catch Block,EncryptedOneDrive,OldOneDriveClient,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldOneDriveClient.cs,DeleteObject,The method has an empty catch block.
Empty Catch Block,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,LoadMetadata,The method has an empty catch block.
Empty Catch Block,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,LoadMetadata,The method has an empty catch block.
Magic Number,EncryptedOneDrive,Fuse,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Fuse.cs,CopyStat,The following statement contains a magic number: if (x.IsFile) {  	s.st_mode = FilePermissions.S_IFREG | NativeConvert.FromOctalPermissionString ("0444");  	s.st_nlink = 1;  	s.st_size = x.Size;  }  else {  	s.st_mode = FilePermissions.S_IFDIR | NativeConvert.FromOctalPermissionString ("0755");  	s.st_nlink = 2;  }  
Magic Number,EncryptedOneDrive,Fuse,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Fuse.cs,CopyStat,The following statement contains a magic number: s.st_nlink = 2;  
Magic Number,EncryptedOneDrive,Fuse,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Fuse.cs,OnGetFileSystemStatus,The following statement contains a magic number: try {  	_fs.GetStorageUsage (out total' out avail);  	buf.f_bsize = 1;  	buf.f_frsize = 1;  	buf.f_blocks = (ulong)total;  	buf.f_bfree = (ulong)avail;  	buf.f_bavail = (ulong)avail;  	buf.f_files = 0;  	buf.f_ffree = 0;  	buf.f_favail = 0;  	buf.f_fsid = 0;  	buf.f_flag = 0;  	buf.f_namemax = 1024;  	return 0;  }  catch {  	return Errno.EIO;  }  
Magic Number,EncryptedOneDrive,Fuse,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Fuse.cs,OnGetFileSystemStatus,The following statement contains a magic number: buf.f_namemax = 1024;  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,WriteLock,The following statement contains a magic number: return new LockState (l' 2);  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: if (hexText.Length % 2 == 1)  	throw new FormatException ();  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: for (int i = 0; i < hexText.Length; i += 2) {  	output [i / 2] = byte.Parse (hexText.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: for (int i = 0; i < hexText.Length; i += 2) {  	output [i / 2] = byte.Parse (hexText.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: for (int i = 0; i < hexText.Length; i += 2) {  	output [i / 2] = byte.Parse (hexText.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: i += 2
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: output [i / 2] = byte.Parse (hexText.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  
Magic Number,EncryptedOneDrive,Utility,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Utility.cs,ParseHexString,The following statement contains a magic number: output [i / 2] = byte.Parse (hexText.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  
Magic Number,EncryptedOneDrive,Config,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Config.cs,Save,The following statement contains a magic number: using (var writer = new XmlTextWriter (ConfigFilePath' Encoding.UTF8)) {  	writer.Indentation = 2;  	writer.IndentChar = ' ';  	writer.Formatting = Formatting.Indented;  	writer.WriteStartDocument ();  	writer.WriteStartElement ("config");  	Save (""' writer);  	writer.WriteEndElement ();  	writer.WriteEndDocument ();  }  
Magic Number,EncryptedOneDrive,Config,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Config.cs,Save,The following statement contains a magic number: writer.Indentation = 2;  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,OldFileSystem,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	string path = DATA_PATH + "/" + i.ToString ("x2");  	if (client.CreateDirectory (path))  		Console.WriteLine ("  created data directory: {0}"' path);  }  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,DeleteFile,The following statement contains a magic number: for (int i = 0; i < entry.Segments.Length; ++i) {  	string tag = entry.Segments [i].ToString ();  	string segment_path = DATA_PATH + "/" + tag.Substring (0' 2) + "/" + tag.Substring (2);  	Client.Delete (segment_path);  }  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,DeleteFile,The following statement contains a magic number: for (int i = 0; i < entry.Segments.Length; ++i) {  	string tag = entry.Segments [i].ToString ();  	string segment_path = DATA_PATH + "/" + tag.Substring (0' 2) + "/" + tag.Substring (2);  	Client.Delete (segment_path);  }  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,LogReplay,The following statement contains a magic number: foreach (OneDriveEntry entry in entries) {  	if (!entry.Name.StartsWith ("log."' StringComparison.InvariantCulture))  		continue;  	long logVer;  	int pos = entry.Name.IndexOf ('-');  	if (pos < 0)  		continue;  	if (!long.TryParse (entry.Name.Substring (4' pos - 4)' NumberStyles.HexNumber' null' out logVer))  		continue;  	if (logVer < _logVersion)  		continue;  	validLogs.Add (logVer' entry);  }  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,LogReplay,The following statement contains a magic number: foreach (OneDriveEntry entry in entries) {  	if (!entry.Name.StartsWith ("log."' StringComparison.InvariantCulture))  		continue;  	long logVer;  	int pos = entry.Name.IndexOf ('-');  	if (pos < 0)  		continue;  	if (!long.TryParse (entry.Name.Substring (4' pos - 4)' NumberStyles.HexNumber' null' out logVer))  		continue;  	if (logVer < _logVersion)  		continue;  	validLogs.Add (logVer' entry);  }  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,LogReplay,The following statement contains a magic number: if (!long.TryParse (entry.Name.Substring (4' pos - 4)' NumberStyles.HexNumber' null' out logVer))  	continue;  
Magic Number,EncryptedOneDrive,OldFileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\OldFileSystem.cs,LogReplay,The following statement contains a magic number: if (!long.TryParse (entry.Name.Substring (4' pos - 4)' NumberStyles.HexNumber' null' out logVer))  	continue;  
Magic Number,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,WriteAll,The following statement contains a magic number: using (var outStrm = WriteOpen (path)) {  	byte[] buf = new byte[8192];  	while (true) {  		int size = strm.Read (buf' 0' buf.Length);  		if (size == 0)  			return;  		if (size < 0)  			throw new IOException ();  		outStrm.Write (buf' 0' size);  	}  }  
Magic Number,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,ParseLogFileName,The following statement contains a magic number: try {  	string[] items = name.Split ('.');  	if (items.Length != 3)  		return false;  	tag = items [2];  	if (!ulong.TryParse (items [1]' NumberStyles.HexNumber' null' out ver))  		return false;  	return true;  }  catch {  	return false;  }  
Magic Number,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,ParseLogFileName,The following statement contains a magic number: try {  	string[] items = name.Split ('.');  	if (items.Length != 3)  		return false;  	tag = items [2];  	if (!ulong.TryParse (items [1]' NumberStyles.HexNumber' null' out ver))  		return false;  	return true;  }  catch {  	return false;  }  
Magic Number,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,ParseLogFileName,The following statement contains a magic number: if (items.Length != 3)  	return false;  
Magic Number,EncryptedOneDrive,FileSystem,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\FileSystem.cs,ParseLogFileName,The following statement contains a magic number: tag = items [2];  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: switch (hmac.HashName.ToUpper ()) {  case "MD5":  case "SHA1":  case "SHA224":  case "SHA256":  	hmacBlockSize = 64;  	break;  case "SHA384":  case "SHA512":  case "SHA512/224":  case "SHA512/256":  	hmacBlockSize = 128;  	break;  default:  	throw new NotSupportedException ();  }  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: switch (hmac.HashName.ToUpper ()) {  case "MD5":  case "SHA1":  case "SHA224":  case "SHA256":  	hmacBlockSize = 64;  	break;  case "SHA384":  case "SHA512":  case "SHA512/224":  case "SHA512/256":  	hmacBlockSize = 128;  	break;  default:  	throw new NotSupportedException ();  }  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: hmacBlockSize = 64;  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: hmacBlockSize = 128;  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: KeyByteSize = SymmetricAlgorithmInstance.KeySize / 8 + hmacBlockSize;  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: IVByteSize = SymmetricAlgorithmInstance.BlockSize / 8;  
Magic Number,EncryptedOneDrive.Security,BlockCipherCTRHMAC,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Security\BlockCipherCTRHMAC.cs,BlockCipherCTRHMAC,The following statement contains a magic number: TagByteSize = hmac.HashSize / 8;  
Missing Default,EncryptedOneDrive,Config,C:\repos\kazuki_EncryptedOneDrive\EncryptedOneDrive\Config.cs,Load,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	return;  case XmlNodeType.Element:  	Load (path + "." + reader.Name' reader);  	break;  case XmlNodeType.Text:  	kv [path] = reader.Value.Trim ();  	break;  }  
