Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,CreateFileProxy,Cyclomatic complexity of the method is 22
Long Parameter List,Dokan,DokanOperations,C:\repos\kazuki_EncryptedOneDrive\DokanNet\DokanOperations.cs,CreateFile,The method has 6 parameters.
Long Parameter List,Dokan,DokanOperations,C:\repos\kazuki_EncryptedOneDrive\DokanNet\DokanOperations.cs,ReadFile,The method has 5 parameters.
Long Parameter List,Dokan,DokanOperations,C:\repos\kazuki_EncryptedOneDrive\DokanNet\DokanOperations.cs,WriteFile,The method has 5 parameters.
Long Parameter List,Dokan,DokanOperations,C:\repos\kazuki_EncryptedOneDrive\DokanNet\DokanOperations.cs,SetFileTime,The method has 5 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,CreateFileProxy,The method has 6 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,ReadFileProxy,The method has 6 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,WriteFileProxy,The method has 6 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The method has 5 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetVolumeInformationProxy,The method has 8 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileSecurity,The method has 6 parameters.
Long Parameter List,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileSecurity,The method has 5 parameters.
Long Identifier,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileSecurity,The length of the parameter rawSecurityDescriptorLengthNeeded is 33.
Long Identifier,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileSecurity,The length of the parameter rawSecurityDescriptorLengthNeeded is 33.
Long Statement,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetDiskFreeSpaceProxy,The length of the statement  "		return operations_.GetDiskFreeSpace (ref rawFreeBytesAvailable' ref rawTotalNumberOfBytes' ref rawTotalNumberOfFreeBytes' GetFileInfo (ref rawFileInfo)); " is 153.
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,CreateFileProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	DokanFileInfo info = GetNewFileInfo (ref rawFileInfo);  	FileAccess access = FileAccess.Read;  	FileShare share = FileShare.None;  	FileMode mode = FileMode.Open;  	FileOptions options = FileOptions.None;  	if ((rawAccessMode & FILE_READ_DATA) != 0 && (rawAccessMode & FILE_WRITE_DATA) != 0) {  		access = FileAccess.ReadWrite;  	}  	else if ((rawAccessMode & FILE_WRITE_DATA) != 0) {  		access = FileAccess.Write;  	}  	else {  		access = FileAccess.Read;  	}  	if ((rawShare & FILE_SHARE_READ) != 0) {  		share = FileShare.Read;  	}  	if ((rawShare & FILE_SHARE_WRITE) != 0) {  		share |= FileShare.Write;  	}  	if ((rawShare & FILE_SHARE_DELETE) != 0) {  		share |= FileShare.Delete;  	}  	switch (rawCreationDisposition) {  	case CREATE_NEW:  		mode = FileMode.CreateNew;  		break;  	case CREATE_ALWAYS:  		mode = FileMode.Create;  		break;  	case OPEN_EXISTING:  		mode = FileMode.Open;  		break;  	case OPEN_ALWAYS:  		mode = FileMode.OpenOrCreate;  		break;  	case TRUNCATE_EXISTING:  		mode = FileMode.Truncate;  		break;  	}  	int ret = operations_.CreateFile (file' access' share' mode' options' info);  	if (info.IsDirectory)  		rawFileInfo.IsDirectory = 1;  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -2;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,CreateFileProxy,The following statement contains a magic number: return -2;  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	FileInformation fi = new FileInformation ();  	int ret = operations_.GetFileInformation (file' fi' GetFileInfo (ref rawFileInfo));  	if (ret == 0) {  		rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  		rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	FileInformation fi = new FileInformation ();  	int ret = operations_.GetFileInformation (file' fi' GetFileInfo (ref rawFileInfo));  	if (ret == 0) {  		rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  		rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	FileInformation fi = new FileInformation ();  	int ret = operations_.GetFileInformation (file' fi' GetFileInfo (ref rawFileInfo));  	if (ret == 0) {  		rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  		rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	FileInformation fi = new FileInformation ();  	int ret = operations_.GetFileInformation (file' fi' GetFileInfo (ref rawFileInfo));  	if (ret == 0) {  		rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  		rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: if (ret == 0) {  	rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  	rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: if (ret == 0) {  	rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  	rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: if (ret == 0) {  	rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  	rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: if (ret == 0) {  	rawHandleFileInformation.dwFileAttributes = (uint)fi.Attributes;  	rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	rawHandleFileInformation.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	rawHandleFileInformation.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: rawHandleFileInformation.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: rawHandleFileInformation.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: rawHandleFileInformation.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetFileInformationProxy,The following statement contains a magic number: rawHandleFileInformation.nFileSizeHigh = (uint)(fi.Length >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	ArrayList files = new ArrayList ();  	int ret = operations_.FindFiles (file' files' GetFileInfo (ref rawFileInfo));  	FILL_FIND_DATA fill = (FILL_FIND_DATA)Marshal.GetDelegateForFunctionPointer (rawFillFindData' typeof(FILL_FIND_DATA));  	if (ret == 0) {  		IEnumerator entry = files.GetEnumerator ();  		while (entry.MoveNext ()) {  			FileInformation fi = (FileInformation)(entry.Current);  			WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  			//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  			data.dwFileAttributes = fi.Attributes;  			data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  			data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  			data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  			data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  			data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  			data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  			data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  			data.nFileSizeHigh = (uint)(fi.Length >> 32);  			data.cFileName = fi.FileName;  			fill (ref data' ref rawFileInfo);  		}  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	ArrayList files = new ArrayList ();  	int ret = operations_.FindFiles (file' files' GetFileInfo (ref rawFileInfo));  	FILL_FIND_DATA fill = (FILL_FIND_DATA)Marshal.GetDelegateForFunctionPointer (rawFillFindData' typeof(FILL_FIND_DATA));  	if (ret == 0) {  		IEnumerator entry = files.GetEnumerator ();  		while (entry.MoveNext ()) {  			FileInformation fi = (FileInformation)(entry.Current);  			WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  			//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  			data.dwFileAttributes = fi.Attributes;  			data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  			data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  			data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  			data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  			data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  			data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  			data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  			data.nFileSizeHigh = (uint)(fi.Length >> 32);  			data.cFileName = fi.FileName;  			fill (ref data' ref rawFileInfo);  		}  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	ArrayList files = new ArrayList ();  	int ret = operations_.FindFiles (file' files' GetFileInfo (ref rawFileInfo));  	FILL_FIND_DATA fill = (FILL_FIND_DATA)Marshal.GetDelegateForFunctionPointer (rawFillFindData' typeof(FILL_FIND_DATA));  	if (ret == 0) {  		IEnumerator entry = files.GetEnumerator ();  		while (entry.MoveNext ()) {  			FileInformation fi = (FileInformation)(entry.Current);  			WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  			//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  			data.dwFileAttributes = fi.Attributes;  			data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  			data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  			data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  			data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  			data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  			data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  			data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  			data.nFileSizeHigh = (uint)(fi.Length >> 32);  			data.cFileName = fi.FileName;  			fill (ref data' ref rawFileInfo);  		}  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	ArrayList files = new ArrayList ();  	int ret = operations_.FindFiles (file' files' GetFileInfo (ref rawFileInfo));  	FILL_FIND_DATA fill = (FILL_FIND_DATA)Marshal.GetDelegateForFunctionPointer (rawFillFindData' typeof(FILL_FIND_DATA));  	if (ret == 0) {  		IEnumerator entry = files.GetEnumerator ();  		while (entry.MoveNext ()) {  			FileInformation fi = (FileInformation)(entry.Current);  			WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  			//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  			data.dwFileAttributes = fi.Attributes;  			data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  			data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  			data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  			data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  			data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  			data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  			data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  			data.nFileSizeHigh = (uint)(fi.Length >> 32);  			data.cFileName = fi.FileName;  			fill (ref data' ref rawFileInfo);  		}  	}  	return ret;  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: if (ret == 0) {  	IEnumerator entry = files.GetEnumerator ();  	while (entry.MoveNext ()) {  		FileInformation fi = (FileInformation)(entry.Current);  		WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  		//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  		data.dwFileAttributes = fi.Attributes;  		data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		data.nFileSizeHigh = (uint)(fi.Length >> 32);  		data.cFileName = fi.FileName;  		fill (ref data' ref rawFileInfo);  	}  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: if (ret == 0) {  	IEnumerator entry = files.GetEnumerator ();  	while (entry.MoveNext ()) {  		FileInformation fi = (FileInformation)(entry.Current);  		WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  		//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  		data.dwFileAttributes = fi.Attributes;  		data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		data.nFileSizeHigh = (uint)(fi.Length >> 32);  		data.cFileName = fi.FileName;  		fill (ref data' ref rawFileInfo);  	}  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: if (ret == 0) {  	IEnumerator entry = files.GetEnumerator ();  	while (entry.MoveNext ()) {  		FileInformation fi = (FileInformation)(entry.Current);  		WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  		//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  		data.dwFileAttributes = fi.Attributes;  		data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		data.nFileSizeHigh = (uint)(fi.Length >> 32);  		data.cFileName = fi.FileName;  		fill (ref data' ref rawFileInfo);  	}  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: if (ret == 0) {  	IEnumerator entry = files.GetEnumerator ();  	while (entry.MoveNext ()) {  		FileInformation fi = (FileInformation)(entry.Current);  		WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  		//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  		data.dwFileAttributes = fi.Attributes;  		data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  		data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  		data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  		data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  		data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  		data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  		data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  		data.nFileSizeHigh = (uint)(fi.Length >> 32);  		data.cFileName = fi.FileName;  		fill (ref data' ref rawFileInfo);  	}  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: while (entry.MoveNext ()) {  	FileInformation fi = (FileInformation)(entry.Current);  	WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  	//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  	data.dwFileAttributes = fi.Attributes;  	data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	data.nFileSizeHigh = (uint)(fi.Length >> 32);  	data.cFileName = fi.FileName;  	fill (ref data' ref rawFileInfo);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: while (entry.MoveNext ()) {  	FileInformation fi = (FileInformation)(entry.Current);  	WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  	//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  	data.dwFileAttributes = fi.Attributes;  	data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	data.nFileSizeHigh = (uint)(fi.Length >> 32);  	data.cFileName = fi.FileName;  	fill (ref data' ref rawFileInfo);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: while (entry.MoveNext ()) {  	FileInformation fi = (FileInformation)(entry.Current);  	WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  	//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  	data.dwFileAttributes = fi.Attributes;  	data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	data.nFileSizeHigh = (uint)(fi.Length >> 32);  	data.cFileName = fi.FileName;  	fill (ref data' ref rawFileInfo);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: while (entry.MoveNext ()) {  	FileInformation fi = (FileInformation)(entry.Current);  	WIN32_FIND_DATA data = new WIN32_FIND_DATA ();  	//ZeroMemory(&data' sizeof(WIN32_FIND_DATAW));  	data.dwFileAttributes = fi.Attributes;  	data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  	data.ftCreationTime.dwLowDateTime = (int)(fi.CreationTime.ToFileTime () & 0xffffffff);  	data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  	data.ftLastAccessTime.dwLowDateTime = (int)(fi.LastAccessTime.ToFileTime () & 0xffffffff);  	data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  	data.ftLastWriteTime.dwLowDateTime = (int)(fi.LastWriteTime.ToFileTime () & 0xffffffff);  	data.nFileSizeLow = (uint)(fi.Length & 0xffffffff);  	data.nFileSizeHigh = (uint)(fi.Length >> 32);  	data.cFileName = fi.FileName;  	fill (ref data' ref rawFileInfo);  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: data.ftCreationTime.dwHighDateTime = (int)(fi.CreationTime.ToFileTime () >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: data.ftLastAccessTime.dwHighDateTime = (int)(fi.LastAccessTime.ToFileTime () >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: data.ftLastWriteTime.dwHighDateTime = (int)(fi.LastWriteTime.ToFileTime () >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,FindFilesProxy,The following statement contains a magic number: data.nFileSizeHigh = (uint)(fi.Length >> 32);  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	long time;  	time = ((long)rawCreationTime.dwHighDateTime << 32) + (uint)rawCreationTime.dwLowDateTime;  	DateTime ctime = DateTime.FromFileTime (time);  	if (time == 0)  		ctime = DateTime.MinValue;  	time = ((long)rawLastAccessTime.dwHighDateTime << 32) + (uint)rawLastAccessTime.dwLowDateTime;  	DateTime atime = DateTime.FromFileTime (time);  	if (time == 0)  		atime = DateTime.MinValue;  	time = ((long)rawLastWriteTime.dwHighDateTime << 32) + (uint)rawLastWriteTime.dwLowDateTime;  	DateTime mtime = DateTime.FromFileTime (time);  	if (time == 0)  		mtime = DateTime.MinValue;  	return operations_.SetFileTime (file' ctime' atime' mtime' GetFileInfo (ref rawFileInfo));  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	long time;  	time = ((long)rawCreationTime.dwHighDateTime << 32) + (uint)rawCreationTime.dwLowDateTime;  	DateTime ctime = DateTime.FromFileTime (time);  	if (time == 0)  		ctime = DateTime.MinValue;  	time = ((long)rawLastAccessTime.dwHighDateTime << 32) + (uint)rawLastAccessTime.dwLowDateTime;  	DateTime atime = DateTime.FromFileTime (time);  	if (time == 0)  		atime = DateTime.MinValue;  	time = ((long)rawLastWriteTime.dwHighDateTime << 32) + (uint)rawLastWriteTime.dwLowDateTime;  	DateTime mtime = DateTime.FromFileTime (time);  	if (time == 0)  		mtime = DateTime.MinValue;  	return operations_.SetFileTime (file' ctime' atime' mtime' GetFileInfo (ref rawFileInfo));  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The following statement contains a magic number: try {  	string file = GetFileName (rawFileName);  	long time;  	time = ((long)rawCreationTime.dwHighDateTime << 32) + (uint)rawCreationTime.dwLowDateTime;  	DateTime ctime = DateTime.FromFileTime (time);  	if (time == 0)  		ctime = DateTime.MinValue;  	time = ((long)rawLastAccessTime.dwHighDateTime << 32) + (uint)rawLastAccessTime.dwLowDateTime;  	DateTime atime = DateTime.FromFileTime (time);  	if (time == 0)  		atime = DateTime.MinValue;  	time = ((long)rawLastWriteTime.dwHighDateTime << 32) + (uint)rawLastWriteTime.dwLowDateTime;  	DateTime mtime = DateTime.FromFileTime (time);  	if (time == 0)  		mtime = DateTime.MinValue;  	return operations_.SetFileTime (file' ctime' atime' mtime' GetFileInfo (ref rawFileInfo));  }  catch (Exception e) {  	Console.Error.WriteLine (e.ToString ());  	return -1;  }  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The following statement contains a magic number: time = ((long)rawCreationTime.dwHighDateTime << 32) + (uint)rawCreationTime.dwLowDateTime;  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The following statement contains a magic number: time = ((long)rawLastAccessTime.dwHighDateTime << 32) + (uint)rawLastAccessTime.dwLowDateTime;  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,SetFileTimeProxy,The following statement contains a magic number: time = ((long)rawLastWriteTime.dwHighDateTime << 32) + (uint)rawLastWriteTime.dwLowDateTime;  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetVolumeInformationProxy,The following statement contains a magic number: rawMaximumComponentLength = 256;  
Magic Number,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,GetVolumeInformationProxy,The following statement contains a magic number: rawFileSystemFlags = 7;  
Missing Default,Dokan,Proxy,C:\repos\kazuki_EncryptedOneDrive\DokanNet\Proxy.cs,CreateFileProxy,The following switch statement is missing a default case: switch (rawCreationDisposition) {  case CREATE_NEW:  	mode = FileMode.CreateNew;  	break;  case CREATE_ALWAYS:  	mode = FileMode.Create;  	break;  case OPEN_EXISTING:  	mode = FileMode.Open;  	break;  case OPEN_ALWAYS:  	mode = FileMode.OpenOrCreate;  	break;  case TRUNCATE_EXISTING:  	mode = FileMode.Truncate;  	break;  }  
