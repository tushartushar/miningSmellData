Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sherpa.Uploaders,SherpaArchiveUploader,C:\repos\raytiley_media-sherpa\SherpaArchiveUploader\SherpaArchiveUploader.cs,doUpload,Cyclomatic complexity of the method is 8
Long Statement,Sherpa.Uploaders,SherpaArchiveUploader,C:\repos\raytiley_media-sherpa\SherpaArchiveUploader\SherpaArchiveUploader.cs,doUpload,The length of the statement  "		var message = String.Format ("Upload for file {0} failed. Sever responded with status code: {1}"' FilePath' response.StatusCode.ToString ()); " is 141.
Magic Number,Sherpa.Uploaders,SherpaArchiveUploader,C:\repos\raytiley_media-sherpa\SherpaArchiveUploader\SherpaArchiveUploader.cs,doUpload,The following statement contains a magic number: try {  	contentLen = fs.Read (buff' 0' buffLength);  	// Till Stream content ends  	while (contentLen != 0) {  		// Write Content from the file stream to the reqest stream  		strm.Write (buff' 0' contentLen);  		contentLen = fs.Read (buff' 0' buffLength);  		totalBytesUploaded += contentLen;  		var newPercent = (int)(((float)totalBytesUploaded / (float)fileInfo.Length) * 100);  		if (percent != newPercent) {  			percent = newPercent;  			Sherpa.LogHelper.LogHelper.Logger.Debug (String.Format ("{0}% of {1} uploaded."' percent' FilePath));  		}  		// Only report progress if we have a background woker  		// We won't have a background worker if this is being called syncronously  		if (worker != null)  			worker.ReportProgress (percent);  	}  }  finally {  	LogHelper.LogHelper.Logger.Debug (String.Format ("Closing streams for file: {0}"' FilePath));  	// Close the file stream and the Request Stream  	strm.Close ();  	fs.Close ();  }  
Magic Number,Sherpa.Uploaders,SherpaArchiveUploader,C:\repos\raytiley_media-sherpa\SherpaArchiveUploader\SherpaArchiveUploader.cs,doUpload,The following statement contains a magic number: while (contentLen != 0) {  	// Write Content from the file stream to the reqest stream  	strm.Write (buff' 0' contentLen);  	contentLen = fs.Read (buff' 0' buffLength);  	totalBytesUploaded += contentLen;  	var newPercent = (int)(((float)totalBytesUploaded / (float)fileInfo.Length) * 100);  	if (percent != newPercent) {  		percent = newPercent;  		Sherpa.LogHelper.LogHelper.Logger.Debug (String.Format ("{0}% of {1} uploaded."' percent' FilePath));  	}  	// Only report progress if we have a background woker  	// We won't have a background worker if this is being called syncronously  	if (worker != null)  		worker.ReportProgress (percent);  }  
