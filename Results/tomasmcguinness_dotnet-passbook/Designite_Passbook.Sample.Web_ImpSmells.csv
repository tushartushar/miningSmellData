Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Passbook.Sample.Web.Services,IWebServiceHandler,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\IWebServiceHandler.cs,RegisterPass,The method has 7 parameters. Parameters: version' deviceLibraryIdentifier' passTypeIdentifier' serialNumber' pushToken' authorizationToken' result
Long Parameter List,Passbook.Sample.Web.Services,WebServiceHandler,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\WebServiceHandler.cs,RegisterPass,The method has 7 parameters. Parameters: version' deviceLibraryIdentifier' passTypeIdentifier' serialNumber' pushToken' authorizationToken' result
Long Statement,Passbook.Sample.Web,BoardingPassProvider,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Providers\BoardingPassProvider.cs,GetPass,The length of the statement  "            request.AddBarCode("M1APPLESEED/JMR EZQ7O92 GVALHRBA 00723319C002F00009100"' BarcodeType.PKBarcodeFormatPDF417' "iso-8859-1"); " is 126.
Long Statement,Passbook.Sample.Web,EventPassProvider,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Providers\EventPassProvider.cs,GetPass,The length of the statement  "            parameters.AddField("doors-open"' FieldAttribute.Value' new DateTime(eventDate.Year' eventDate.Month' eventDate.Day' 20' 30' 00));" is 130.
Long Statement,Passbook.Sample.Web.SampleRequests,EventPassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\SampleRequests\EventPassGeneratorRequest.cs,PopulateFields,The length of the statement  "            this.AddPrimaryField(new StandardField("event-name"' "Event"' EventName) { TextAlignment = FieldTextAlignment.PKTextAlignmentRight }); " is 134.
Long Statement,Passbook.Sample.Web.SampleRequests,EventPassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\SampleRequests\EventPassGeneratorRequest.cs,PopulateFields,The length of the statement  "            this.AddPrimaryField(new StandardField("event-style"' "Event2"' EventName) { TextAlignment = FieldTextAlignment.PKTextAlignmentRight }); " is 136.
Long Statement,Passbook.Sample.Web.SampleRequests,EventPassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\SampleRequests\EventPassGeneratorRequest.cs,PopulateFields,The length of the statement  "            this.AddSecondaryField(new DateField("doors-open"' "Doors Open"' FieldDateTimeStyle.PKDateStyleMedium' FieldDateTimeStyle.PKDateStyleShort' DoorsOpen)); " is 152.
Long Statement,Passbook.Sample.Web.SampleRequests,EventPassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\SampleRequests\EventPassGeneratorRequest.cs,PopulateFields,The length of the statement  "            this.AddSecondaryField(new NumberField("seating-section"' "Seating Section"' SeatingSection' FieldNumberStyle.PKNumberStyleSpellOut) { TextAlignment = FieldTextAlignment.PKTextAlignmentRight }); " is 194.
Magic Number,Passbook.Sample.Web,EventPassProvider,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Providers\EventPassProvider.cs,GetPass,The following statement contains a magic number: parameters.AddField("doors-open"' FieldAttribute.Value' new DateTime(eventDate.Year' eventDate.Month' eventDate.Day' 20' 30' 00));
Magic Number,Passbook.Sample.Web,EventPassProvider,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Providers\EventPassProvider.cs,GetPass,The following statement contains a magic number: parameters.AddField("doors-open"' FieldAttribute.Value' new DateTime(eventDate.Year' eventDate.Month' eventDate.Day' 20' 30' 00));
Magic Number,Passbook.Sample.Web,EventPassProvider,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Providers\EventPassProvider.cs,GetPass,The following statement contains a magic number: parameters.AddField("seating-section"' FieldAttribute.Value' 10);
Magic Number,Passbook.Sample.Web.Controllers,PassController,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Controllers\PassController.cs,Coupon,The following statement contains a magic number: request.AssociatedStoreIdentifiers.Add(551768476);
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,SendEmptyPushNotification,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient(server' 2195))              {                  Trace.TraceInformation("Opening SSL Connection...");                  using (SslStream sslStream = new SslStream(tcpClient.GetStream()))                  {                      try                      {                          X509Certificate2Collection certs = new X509Certificate2Collection();                            Trace.TraceInformation("Adding certificate to connection...");                          X509Certificate cert = GetAppleServerCert(thumbprint);                          certs.Add(cert);                            Trace.TraceInformation("Authenticating against the SSL stream...");                          sslStream.AuthenticateAsClient(server' certs' SslProtocols.Default' false);                      }                      catch (AuthenticationException exp)                      {                          Trace.TraceError("Failed to authenticate to APNS - {0}"' exp.Message);                          return;                      }                      catch (IOException exp)                      {                          Trace.TraceError("Failed to connect to APNS - {0}"' exp.Message);                          return;                      }                        byte[] buf = new byte[256];                      MemoryStream ms = new MemoryStream();                      BinaryWriter bw = new BinaryWriter(ms);                      bw.Write(new byte[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 32 });                        byte[] deviceToken = HexToData(deviceIdentifier);                      bw.Write(deviceToken);                                            string msg = "{}";                        bw.Write(new byte[] { 0' 2 });                      bw.Write(msg.ToCharArray());                      bw.Flush();                        Trace.TraceInformation("Message sent. Closing stream...");                        if (sslStream != null)                      {                          sslStream.Write(ms.ToArray());                      }                        sslStream.Flush();                        byte[] response = new byte[6];                      sslStream.Read(response' 0' 6);                  }              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,SendEmptyPushNotification,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient(server' 2195))              {                  Trace.TraceInformation("Opening SSL Connection...");                  using (SslStream sslStream = new SslStream(tcpClient.GetStream()))                  {                      try                      {                          X509Certificate2Collection certs = new X509Certificate2Collection();                            Trace.TraceInformation("Adding certificate to connection...");                          X509Certificate cert = GetAppleServerCert(thumbprint);                          certs.Add(cert);                            Trace.TraceInformation("Authenticating against the SSL stream...");                          sslStream.AuthenticateAsClient(server' certs' SslProtocols.Default' false);                      }                      catch (AuthenticationException exp)                      {                          Trace.TraceError("Failed to authenticate to APNS - {0}"' exp.Message);                          return;                      }                      catch (IOException exp)                      {                          Trace.TraceError("Failed to connect to APNS - {0}"' exp.Message);                          return;                      }                        byte[] buf = new byte[256];                      MemoryStream ms = new MemoryStream();                      BinaryWriter bw = new BinaryWriter(ms);                      bw.Write(new byte[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 32 });                        byte[] deviceToken = HexToData(deviceIdentifier);                      bw.Write(deviceToken);                                            string msg = "{}";                        bw.Write(new byte[] { 0' 2 });                      bw.Write(msg.ToCharArray());                      bw.Flush();                        Trace.TraceInformation("Message sent. Closing stream...");                        if (sslStream != null)                      {                          sslStream.Write(ms.ToArray());                      }                        sslStream.Flush();                        byte[] response = new byte[6];                      sslStream.Read(response' 0' 6);                  }              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,SendEmptyPushNotification,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient(server' 2195))              {                  Trace.TraceInformation("Opening SSL Connection...");                  using (SslStream sslStream = new SslStream(tcpClient.GetStream()))                  {                      try                      {                          X509Certificate2Collection certs = new X509Certificate2Collection();                            Trace.TraceInformation("Adding certificate to connection...");                          X509Certificate cert = GetAppleServerCert(thumbprint);                          certs.Add(cert);                            Trace.TraceInformation("Authenticating against the SSL stream...");                          sslStream.AuthenticateAsClient(server' certs' SslProtocols.Default' false);                      }                      catch (AuthenticationException exp)                      {                          Trace.TraceError("Failed to authenticate to APNS - {0}"' exp.Message);                          return;                      }                      catch (IOException exp)                      {                          Trace.TraceError("Failed to connect to APNS - {0}"' exp.Message);                          return;                      }                        byte[] buf = new byte[256];                      MemoryStream ms = new MemoryStream();                      BinaryWriter bw = new BinaryWriter(ms);                      bw.Write(new byte[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 32 });                        byte[] deviceToken = HexToData(deviceIdentifier);                      bw.Write(deviceToken);                                            string msg = "{}";                        bw.Write(new byte[] { 0' 2 });                      bw.Write(msg.ToCharArray());                      bw.Flush();                        Trace.TraceInformation("Message sent. Closing stream...");                        if (sslStream != null)                      {                          sslStream.Write(ms.ToArray());                      }                        sslStream.Flush();                        byte[] response = new byte[6];                      sslStream.Read(response' 0' 6);                  }              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,SendEmptyPushNotification,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient(server' 2195))              {                  Trace.TraceInformation("Opening SSL Connection...");                  using (SslStream sslStream = new SslStream(tcpClient.GetStream()))                  {                      try                      {                          X509Certificate2Collection certs = new X509Certificate2Collection();                            Trace.TraceInformation("Adding certificate to connection...");                          X509Certificate cert = GetAppleServerCert(thumbprint);                          certs.Add(cert);                            Trace.TraceInformation("Authenticating against the SSL stream...");                          sslStream.AuthenticateAsClient(server' certs' SslProtocols.Default' false);                      }                      catch (AuthenticationException exp)                      {                          Trace.TraceError("Failed to authenticate to APNS - {0}"' exp.Message);                          return;                      }                      catch (IOException exp)                      {                          Trace.TraceError("Failed to connect to APNS - {0}"' exp.Message);                          return;                      }                        byte[] buf = new byte[256];                      MemoryStream ms = new MemoryStream();                      BinaryWriter bw = new BinaryWriter(ms);                      bw.Write(new byte[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 32 });                        byte[] deviceToken = HexToData(deviceIdentifier);                      bw.Write(deviceToken);                                            string msg = "{}";                        bw.Write(new byte[] { 0' 2 });                      bw.Write(msg.ToCharArray());                      bw.Flush();                        Trace.TraceInformation("Message sent. Closing stream...");                        if (sslStream != null)                      {                          sslStream.Write(ms.ToArray());                      }                        sslStream.Flush();                        byte[] response = new byte[6];                      sslStream.Read(response' 0' 6);                  }              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,SendEmptyPushNotification,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient(server' 2195))              {                  Trace.TraceInformation("Opening SSL Connection...");                  using (SslStream sslStream = new SslStream(tcpClient.GetStream()))                  {                      try                      {                          X509Certificate2Collection certs = new X509Certificate2Collection();                            Trace.TraceInformation("Adding certificate to connection...");                          X509Certificate cert = GetAppleServerCert(thumbprint);                          certs.Add(cert);                            Trace.TraceInformation("Authenticating against the SSL stream...");                          sslStream.AuthenticateAsClient(server' certs' SslProtocols.Default' false);                      }                      catch (AuthenticationException exp)                      {                          Trace.TraceError("Failed to authenticate to APNS - {0}"' exp.Message);                          return;                      }                      catch (IOException exp)                      {                          Trace.TraceError("Failed to connect to APNS - {0}"' exp.Message);                          return;                      }                        byte[] buf = new byte[256];                      MemoryStream ms = new MemoryStream();                      BinaryWriter bw = new BinaryWriter(ms);                      bw.Write(new byte[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 32 });                        byte[] deviceToken = HexToData(deviceIdentifier);                      bw.Write(deviceToken);                                            string msg = "{}";                        bw.Write(new byte[] { 0' 2 });                      bw.Write(msg.ToCharArray());                      bw.Flush();                        Trace.TraceInformation("Message sent. Closing stream...");                        if (sslStream != null)                      {                          sslStream.Write(ms.ToArray());                      }                        sslStream.Flush();                        byte[] response = new byte[6];                      sslStream.Read(response' 0' 6);                  }              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,SendEmptyPushNotification,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient(server' 2195))              {                  Trace.TraceInformation("Opening SSL Connection...");                  using (SslStream sslStream = new SslStream(tcpClient.GetStream()))                  {                      try                      {                          X509Certificate2Collection certs = new X509Certificate2Collection();                            Trace.TraceInformation("Adding certificate to connection...");                          X509Certificate cert = GetAppleServerCert(thumbprint);                          certs.Add(cert);                            Trace.TraceInformation("Authenticating against the SSL stream...");                          sslStream.AuthenticateAsClient(server' certs' SslProtocols.Default' false);                      }                      catch (AuthenticationException exp)                      {                          Trace.TraceError("Failed to authenticate to APNS - {0}"' exp.Message);                          return;                      }                      catch (IOException exp)                      {                          Trace.TraceError("Failed to connect to APNS - {0}"' exp.Message);                          return;                      }                        byte[] buf = new byte[256];                      MemoryStream ms = new MemoryStream();                      BinaryWriter bw = new BinaryWriter(ms);                      bw.Write(new byte[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 32 });                        byte[] deviceToken = HexToData(deviceIdentifier);                      bw.Write(deviceToken);                                            string msg = "{}";                        bw.Write(new byte[] { 0' 2 });                      bw.Write(msg.ToCharArray());                      bw.Flush();                        Trace.TraceInformation("Message sent. Closing stream...");                        if (sslStream != null)                      {                          sslStream.Write(ms.ToArray());                      }                        sslStream.Flush();                        byte[] response = new byte[6];                      sslStream.Read(response' 0' 6);                  }              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,HexToData,The following statement contains a magic number: if (hexString.Length % 2 == 1)              {                  hexString = '0' + hexString; // Up to you whether to pad the first or last byte              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,HexToData,The following statement contains a magic number: byte[] data = new byte[hexString.Length / 2];
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,HexToData,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)              {                  data[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,HexToData,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)              {                  data[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);              }
Magic Number,WhereAreMyStaff.Services.Mobile,iPhoneMobileNotificationService,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Sample.Web\Services\SendEmptyPushNotification.cs,HexToData,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)              {                  data[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);              }
