Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,Cyclomatic complexity of the method is 9
Complex Method,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,LoadTemplate,Cyclomatic complexity of the method is 14
Long Parameter List,Passbook.Generator.Fields,DateField,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\Fields\DateField.cs,DateField,The method has 5 parameters. Parameters: key' label' dateStyle' timeStyle' value
Long Parameter List,Passbook.Generator.Fields,StandardField,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\Fields\StandardField.cs,StandardField,The method has 5 parameters. Parameters: key' label' value' attributedValue' dataDetectorTypes
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ZipPackage,The length of the statement  "                        ZipArchiveEntry localizationEntry = archive.CreateEntry(string.Format("{0}.lproj/pass.strings"' localization.Key.ToLower())); " is 125.
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,The length of the statement  "                throw new FileNotFoundException("Certificate could not be found. Please ensure the thumbprint and cert location values are correct."); " is 134.
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,The length of the statement  "                throw new FileNotFoundException("Apple Certificate could not be found. Please download it from http://www.apple.com/certificateauthority/ and install it into your PERSONAL or LOCAL MACHINE certificate store."); " is 210.
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,The length of the statement  "                if (!string.IsNullOrEmpty(passTypeIdentifier) && !string.Equals(request.PassTypeIdentifier' passTypeIdentifier' StringComparison.Ordinal)) " is 138.
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,The length of the statement  "                        Trace.TraceWarning("Configured passTypeIdentifier {0} does not match pass certificate {1}' correcting."' request.PassTypeIdentifier' passTypeIdentifier); " is 153.
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,The length of the statement  "                if (!string.IsNullOrEmpty(teamIdentifier) && !string.Equals(request.TeamIdentifier' teamIdentifier' StringComparison.Ordinal)) " is 126.
Long Statement,Passbook.Generator,PassGenerator,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGenerator.cs,ValidateCertificates,The length of the statement  "                        Trace.TraceWarning("Configured teamidentifier {0} does not match pass certificate {1}' correcting."' request.TeamIdentifier' teamIdentifier); " is 141.
Long Statement,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,AddLocation,The length of the statement  "            RelevantLocations.Add(new RelevantLocation() { Latitude = latitude' Longitude = longitude' RelevantText = relevantText }); " is 122.
Long Statement,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,AddBeacon,The length of the statement  "            RelevantBeacons.Add(new RelevantBeacon() { ProximityUUID = proximityUUID' RelevantText = relevantText' Major = major }); " is 120.
Long Statement,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,AddBeacon,The length of the statement  "            RelevantBeacons.Add(new RelevantBeacon() { ProximityUUID = proximityUUID' RelevantText = relevantText' Major = major' Minor = minor }); " is 135.
Long Statement,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,LoadTemplate,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException(String.Format("Configuration for template \"{0}\" could not be loaded."' template)); " is 144.
Long Statement,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,LoadTemplate,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException("Either Certificate or CertificateThumbprint is not configured correctly."); " is 136.
Long Statement,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,LoadTemplate,The length of the statement  "            this.AssociatedStoreIdentifiers.AddRange(templateConfig.AssociatedStoreIdentifiers.OfType<ConfigurationProperty<int>>().Select(s => s.Value)); " is 142.
Magic Number,Passbook.Generator.Configuration,TemplateModel,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\Configuration\TemplateModel.cs,MapPath,The following statement contains a magic number: if (!String.IsNullOrEmpty(filePath))  			{  				if (File.Exists(filePath))  					return Path.GetFullPath(filePath);    				if (HostingEnvironment.IsHosted)  					// Map the filename for web applications  					return HostingEnvironment.MapPath(filePath);  				else  				{  					// Remove any web specific prefixes  					if (filePath.StartsWith("~/"))  						filePath = filePath.Substring(2);    					// Map the filename for non-web applications  					String path = Path.GetDirectoryName(AppDomain.CurrentDomain.BaseDirectory);  					return Path.GetFullPath(Path.Combine(path' filePath));  				}  			}
Missing Default,Passbook.Generator,PassGeneratorRequest,C:\repos\tomasmcguinness_dotnet-passbook\Passbook.Generator\PassGeneratorRequest.cs,TemplateFields,The following switch statement is missing a default case: switch (fieldElement.Type)                  {                      case FieldType.Standard:                          StandardField standardField = new StandardField();                          standardField.Value = model.GetField(key' FieldAttribute.Value' fieldElement.Value.Value);                            field = standardField;                          break;                      case FieldType.Date:                          DateField dateField = new DateField();                            if (fieldElement.DateStyle != FieldDateTimeStyle.Unspecified)                              dateField.DateStyle = fieldElement.DateStyle;                            if (fieldElement.TimeStyle != FieldDateTimeStyle.Unspecified)                              dateField.TimeStyle = fieldElement.TimeStyle;                            if (fieldElement.IgnoresTimeZone.HasValue)                              dateField.IgnoresTimeZone = fieldElement.IgnoresTimeZone.Value;                            if (fieldElement.IsRelative.HasValue)                              dateField.IsRelative = fieldElement.IsRelative.Value;                            DateTime dateValue;                            if (!DateTime.TryParse(fieldElement.Value.Value' out dateValue))                              dateValue = DateTime.MinValue;                            dateField.Value = model.GetField<DateTime>(key' FieldAttribute.Value' dateValue);                            field = dateField;                          break;                      case FieldType.Number:                          NumberField numberField = new NumberField();                            if (fieldElement.NumberStyle != FieldNumberStyle.Unspecified)                              numberField.NumberStyle = fieldElement.NumberStyle;                            numberField.CurrencyCode = model.GetField(key' FieldAttribute.CurrencyCode' fieldElement.CurrencyCode.Value);                            Decimal decimalValue;                            if (!Decimal.TryParse(fieldElement.Value.Value' out decimalValue))                              decimalValue = 0;                            numberField.Value = model.GetField<Decimal>(key' FieldAttribute.Value' decimalValue);                            field = numberField;                          break;                  }
